/* The following code was generated by JFlex 1.4.3 on 12/21/15 4:33 PM */

// Copyright 2012 Cloudera Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package com.cloudera.impala.analysis;

import java_cup.runtime.Symbol;
import java.lang.Integer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;

import com.cloudera.impala.analysis.SqlParserSymbols;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/21/15 4:33 PM from the specification file
 * <tt>/root/Documents/impala-2.1.2-cdh5.3.2/fe/src/main/jflex/sql-scanner.flex</tt>
 */
public final class SqlScanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\12\1\3\1\2\1\0\1\3\1\1\16\12\4\0\1\23\1\37"+
    "\1\20\1\0\1\11\1\33\1\13\1\17\1\27\1\30\1\22\1\24"+
    "\1\26\1\10\1\6\1\21\12\5\1\25\1\0\1\40\1\36\1\41"+
    "\2\0\4\11\1\7\25\11\1\31\1\16\1\32\1\34\1\11\1\15"+
    "\4\11\1\7\25\11\1\0\1\14\1\0\1\35\41\12\2\0\4\11"+
    "\4\0\1\11\2\0\1\12\7\0\1\11\4\0\1\11\5\0\27\11"+
    "\1\0\37\11\1\0\u01ca\11\4\0\14\11\16\0\5\11\7\0\1\11"+
    "\1\0\1\11\21\0\160\12\5\11\1\0\2\11\2\0\4\11\10\0"+
    "\1\11\1\0\3\11\1\0\1\11\1\0\24\11\1\0\123\11\1\0"+
    "\213\11\1\0\5\12\2\0\236\11\11\0\46\11\2\0\1\11\7\0"+
    "\47\11\11\0\55\12\1\0\1\12\1\0\2\12\1\0\2\12\1\0"+
    "\1\12\10\0\33\11\5\0\3\11\15\0\4\12\7\0\1\11\4\0"+
    "\13\12\5\0\53\11\25\12\12\4\4\0\2\11\1\12\143\11\1\0"+
    "\1\11\10\12\1\0\6\12\2\11\2\12\1\0\4\12\2\11\12\4"+
    "\3\11\2\0\1\11\17\0\1\12\1\11\1\12\36\11\33\12\2\0"+
    "\131\11\13\12\1\11\16\0\12\4\41\11\11\12\2\11\4\0\1\11"+
    "\5\0\26\11\4\12\1\11\11\12\1\11\3\12\1\11\5\12\22\0"+
    "\31\11\3\12\244\0\4\12\66\11\3\12\1\11\22\12\1\11\7\12"+
    "\12\11\2\12\2\0\12\4\1\0\7\11\1\0\7\11\1\0\3\12"+
    "\1\0\10\11\2\0\2\11\2\0\26\11\1\0\7\11\1\0\1\11"+
    "\3\0\4\11\2\0\1\12\1\11\7\12\2\0\2\12\2\0\3\12"+
    "\1\11\10\0\1\12\4\0\2\11\1\0\3\11\2\12\2\0\12\4"+
    "\4\11\7\0\1\11\5\0\3\12\1\0\6\11\4\0\2\11\2\0"+
    "\26\11\1\0\7\11\1\0\2\11\1\0\2\11\1\0\2\11\2\0"+
    "\1\12\1\0\5\12\4\0\2\12\2\0\3\12\3\0\1\12\7\0"+
    "\4\11\1\0\1\11\7\0\12\4\2\12\3\11\1\12\13\0\3\12"+
    "\1\0\11\11\1\0\3\11\1\0\26\11\1\0\7\11\1\0\2\11"+
    "\1\0\5\11\2\0\1\12\1\11\10\12\1\0\3\12\1\0\3\12"+
    "\2\0\1\11\17\0\2\11\2\12\2\0\12\4\1\0\1\11\17\0"+
    "\3\12\1\0\10\11\2\0\2\11\2\0\26\11\1\0\7\11\1\0"+
    "\2\11\1\0\5\11\2\0\1\12\1\11\7\12\2\0\2\12\2\0"+
    "\3\12\10\0\2\12\4\0\2\11\1\0\3\11\2\12\2\0\12\4"+
    "\1\0\1\11\20\0\1\12\1\11\1\0\6\11\3\0\3\11\1\0"+
    "\4\11\3\0\2\11\1\0\1\11\1\0\2\11\3\0\2\11\3\0"+
    "\3\11\3\0\14\11\4\0\5\12\3\0\3\12\1\0\4\12\2\0"+
    "\1\11\6\0\1\12\16\0\12\4\11\0\1\11\7\0\3\12\1\0"+
    "\10\11\1\0\3\11\1\0\27\11\1\0\12\11\1\0\5\11\3\0"+
    "\1\11\7\12\1\0\3\12\1\0\4\12\7\0\2\12\1\0\2\11"+
    "\6\0\2\11\2\12\2\0\12\4\22\0\2\12\1\0\10\11\1\0"+
    "\3\11\1\0\27\11\1\0\12\11\1\0\5\11\2\0\1\12\1\11"+
    "\7\12\1\0\3\12\1\0\4\12\7\0\2\12\7\0\1\11\1\0"+
    "\2\11\2\12\2\0\12\4\1\0\2\11\17\0\2\12\1\0\10\11"+
    "\1\0\3\11\1\0\51\11\2\0\1\11\7\12\1\0\3\12\1\0"+
    "\4\12\1\11\10\0\1\12\10\0\2\11\2\12\2\0\12\4\12\0"+
    "\6\11\2\0\2\12\1\0\22\11\3\0\30\11\1\0\11\11\1\0"+
    "\1\11\2\0\7\11\3\0\1\12\4\0\6\12\1\0\1\12\1\0"+
    "\10\12\22\0\2\12\15\0\60\11\1\12\2\11\7\12\4\0\10\11"+
    "\10\12\1\0\12\4\47\0\2\11\1\0\1\11\2\0\2\11\1\0"+
    "\1\11\2\0\1\11\6\0\4\11\1\0\7\11\1\0\3\11\1\0"+
    "\1\11\1\0\1\11\2\0\2\11\1\0\4\11\1\12\2\11\6\12"+
    "\1\0\2\12\1\11\2\0\5\11\1\0\1\11\1\0\6\12\2\0"+
    "\12\4\2\0\2\11\42\0\1\11\27\0\2\12\6\0\12\4\13\0"+
    "\1\12\1\0\1\12\1\0\1\12\4\0\2\12\10\11\1\0\44\11"+
    "\4\0\24\12\1\0\2\12\5\11\13\12\1\0\44\12\11\0\1\12"+
    "\71\0\53\11\24\12\1\11\12\4\6\0\6\11\4\12\4\11\3\12"+
    "\1\11\3\12\2\11\7\12\3\11\4\12\15\11\14\12\1\11\1\12"+
    "\12\4\4\12\2\0\46\11\12\0\53\11\1\0\1\11\3\0\u0149\11"+
    "\1\0\4\11\2\0\7\11\1\0\1\11\1\0\4\11\2\0\51\11"+
    "\1\0\4\11\2\0\41\11\1\0\4\11\2\0\7\11\1\0\1\11"+
    "\1\0\4\11\2\0\17\11\1\0\71\11\1\0\4\11\2\0\103\11"+
    "\2\0\3\12\40\0\20\11\20\0\125\11\14\0\u026c\11\2\0\21\11"+
    "\1\0\32\11\5\0\113\11\3\0\3\11\17\0\15\11\1\0\4\11"+
    "\3\12\13\0\22\11\3\12\13\0\22\11\2\12\14\0\15\11\1\0"+
    "\3\11\1\0\2\12\14\0\64\11\40\12\3\0\1\11\3\0\2\11"+
    "\1\12\2\0\12\4\41\0\3\12\2\0\12\4\6\0\130\11\10\0"+
    "\51\11\1\12\1\11\5\0\106\11\12\0\35\11\3\0\14\12\4\0"+
    "\14\12\12\0\12\4\36\11\2\0\5\11\13\0\54\11\4\0\21\12"+
    "\7\11\2\12\6\0\12\4\46\0\27\11\5\12\4\0\65\11\12\12"+
    "\1\0\35\12\2\0\1\12\12\4\6\0\12\4\15\0\1\11\130\0"+
    "\5\12\57\11\21\12\7\11\4\0\12\4\21\0\11\12\14\0\3\12"+
    "\36\11\12\12\3\0\2\11\12\4\6\0\46\11\16\12\14\0\44\11"+
    "\24\12\10\0\12\4\3\0\3\11\12\4\44\11\122\0\3\12\1\0"+
    "\25\12\4\11\1\12\4\11\1\12\15\0\300\11\47\12\25\0\4\12"+
    "\u0116\11\2\0\6\11\2\0\46\11\2\0\6\11\2\0\10\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\37\11\2\0\65\11\1\0"+
    "\7\11\1\0\1\11\3\0\3\11\1\0\7\11\3\0\4\11\2\0"+
    "\6\11\4\0\15\11\5\0\3\11\1\0\7\11\16\0\5\12\32\0"+
    "\5\12\20\0\2\11\23\0\1\11\13\0\5\12\5\0\6\12\1\0"+
    "\1\11\15\0\1\11\20\0\15\11\3\0\32\11\26\0\15\12\4\0"+
    "\1\12\3\0\14\12\21\0\1\11\4\0\1\11\2\0\12\11\1\0"+
    "\1\11\3\0\5\11\6\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\4\11\1\0\13\11\2\0\4\11\5\0\5\11\4\0\1\11\21\0"+
    "\51\11\u0a77\0\57\11\1\0\57\11\1\0\205\11\6\0\4\11\3\12"+
    "\16\0\46\11\12\0\66\11\11\0\1\11\17\0\1\12\27\11\11\0"+
    "\7\11\1\0\7\11\1\0\7\11\1\0\7\11\1\0\7\11\1\0"+
    "\7\11\1\0\7\11\1\0\7\11\1\0\40\12\57\0\1\11\u01d5\0"+
    "\3\11\31\0\11\11\6\12\1\0\5\11\2\0\5\11\4\0\126\11"+
    "\2\0\2\12\2\0\3\11\1\0\132\11\1\0\4\11\5\0\51\11"+
    "\3\0\136\11\21\0\33\11\65\0\20\11\u0200\0\u19b6\11\112\0\u51cc\11"+
    "\64\0\u048d\11\103\0\56\11\2\0\u010d\11\3\0\20\11\12\4\2\11"+
    "\24\0\57\11\1\12\14\0\2\12\1\0\31\11\10\0\120\11\2\12"+
    "\45\0\11\11\2\0\147\11\2\0\4\11\1\0\2\11\16\0\12\11"+
    "\120\0\10\11\1\12\3\11\1\12\4\11\1\12\27\11\5\12\20\0"+
    "\1\11\7\0\64\11\14\0\2\12\62\11\21\12\13\0\12\4\6\0"+
    "\22\12\6\11\3\0\1\11\4\0\12\4\34\11\10\12\2\0\27\11"+
    "\15\12\14\0\35\11\3\0\4\12\57\11\16\12\16\0\1\11\12\4"+
    "\46\0\51\11\16\12\11\0\3\11\1\12\10\11\2\12\2\0\12\4"+
    "\6\0\27\11\3\0\1\11\1\12\4\0\60\11\1\12\1\11\3\12"+
    "\2\11\2\12\5\11\2\12\1\11\1\12\1\11\30\0\3\11\43\0"+
    "\6\11\2\0\6\11\2\0\6\11\11\0\7\11\1\0\7\11\221\0"+
    "\43\11\10\12\1\0\2\12\2\0\12\4\6\0\u2ba4\11\14\0\27\11"+
    "\4\0\61\11\u2104\0\u012e\11\2\0\76\11\2\0\152\11\46\0\7\11"+
    "\14\0\5\11\5\0\1\11\1\12\12\11\1\0\15\11\1\0\5\11"+
    "\1\0\1\11\1\0\2\11\1\0\2\11\1\0\154\11\41\0\u016b\11"+
    "\22\0\100\11\2\0\66\11\50\0\15\11\3\0\20\12\20\0\7\12"+
    "\14\0\2\11\30\0\3\11\31\0\1\11\6\0\5\11\1\0\207\11"+
    "\2\0\1\12\4\0\1\11\13\0\12\4\7\0\32\11\4\0\1\11"+
    "\1\0\32\11\13\0\131\11\3\0\6\11\2\0\6\11\2\0\6\11"+
    "\2\0\3\11\3\0\2\11\3\0\2\11\22\0\3\12\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\3\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\4\1\0\1\1\1\4\1\0\1\32"+
    "\3\0\1\33\4\0\1\31\1\0\1\34\2\1\3\0"+
    "\1\31\2\35\1\0\1\36";

  private static int [] zzUnpackAction() {
    int [] result = new int[57];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\146\0\210\0\252\0\314\0\356"+
    "\0\u0110\0\u0132\0\u0154\0\u0176\0\u0198\0\u01ba\0\104\0\104"+
    "\0\104\0\104\0\104\0\104\0\104\0\104\0\104\0\104"+
    "\0\104\0\104\0\104\0\104\0\104\0\u01dc\0\u01fe\0\u0220"+
    "\0\u0242\0\104\0\u0154\0\104\0\u0264\0\u0176\0\u0286\0\104"+
    "\0\u0198\0\u02a8\0\u02ca\0\u02ec\0\u030e\0\u0330\0\104\0\u0352"+
    "\0\u0374\0\u0396\0\u03b8\0\u03da\0\u0330\0\u03fc\0\104\0\u041e"+
    "\0\104";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[57];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\2\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\7\1\0\1\11\1\12\1\13\1\0\1\14\1\15"+
    "\1\16\1\17\1\3\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\2\0\1\3\105\0\2\4\1\0\1\7\1\0"+
    "\1\7\34\0\1\4\1\5\1\36\1\37\1\0\1\7"+
    "\35\0\1\36\1\40\37\0\2\7\1\0\1\7\1\0"+
    "\2\7\37\0\1\41\44\0\1\42\42\0\1\42\25\0"+
    "\15\43\1\44\1\45\23\43\16\46\1\47\1\50\22\46"+
    "\16\51\1\52\1\51\1\50\21\51\22\0\1\53\24\0"+
    "\1\36\1\0\1\54\36\0\1\7\1\55\1\0\1\7"+
    "\1\56\2\7\11\0\1\56\23\0\1\57\33\0\1\60"+
    "\1\2\1\3\20\60\1\41\1\61\15\60\2\43\1\0"+
    "\37\43\2\46\1\0\37\46\2\51\1\0\37\51\22\62"+
    "\1\63\1\53\1\64\15\62\5\0\1\65\2\0\1\56"+
    "\13\0\1\56\21\0\1\7\1\55\1\0\1\7\1\0"+
    "\2\7\34\0\1\65\34\0\1\60\1\2\1\3\37\60"+
    "\1\61\1\66\1\67\37\61\22\62\1\63\40\62\1\3"+
    "\1\63\17\62\1\64\2\62\17\64\1\70\17\64\2\0"+
    "\1\67\37\0\21\62\1\71\1\63\17\62";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1088];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\11\13\1\17\11\2\1\1\0\1\1"+
    "\1\11\1\0\1\11\3\0\1\11\4\0\1\1\1\0"+
    "\1\11\2\1\3\0\2\1\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[57];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  // Map from keyword string to token id.
  // We use a linked hash map because the insertion order is important.
  // for example, we want "and" to come after "&&" to make sure error reporting
  // uses "and" as a display name and not "&&".
  // Please keep the puts sorted alphabetically by keyword (where the order
  // does not affect the desired error reporting)
  private static final Map<String, Integer> keywordMap =
      new LinkedHashMap<String, Integer>();
  static {
    keywordMap.put("&&", new Integer(SqlParserSymbols.KW_AND));
    keywordMap.put("add", new Integer(SqlParserSymbols.KW_ADD));
    keywordMap.put("aggregate", new Integer(SqlParserSymbols.KW_AGGREGATE));
    keywordMap.put("all", new Integer(SqlParserSymbols.KW_ALL));
    keywordMap.put("alter", new Integer(SqlParserSymbols.KW_ALTER));
    keywordMap.put("analytic", new Integer(SqlParserSymbols.KW_ANALYTIC));
    keywordMap.put("and", new Integer(SqlParserSymbols.KW_AND));
    keywordMap.put("anti", new Integer(SqlParserSymbols.KW_ANTI));
    keywordMap.put("api_version", new Integer(SqlParserSymbols.KW_API_VERSION));
    keywordMap.put("array", new Integer(SqlParserSymbols.KW_ARRAY));
    keywordMap.put("as", new Integer(SqlParserSymbols.KW_AS));
    keywordMap.put("asc", new Integer(SqlParserSymbols.KW_ASC));
    keywordMap.put("avro", new Integer(SqlParserSymbols.KW_AVRO));
    keywordMap.put("between", new Integer(SqlParserSymbols.KW_BETWEEN));
    keywordMap.put("bigint", new Integer(SqlParserSymbols.KW_BIGINT));
    keywordMap.put("binary", new Integer(SqlParserSymbols.KW_BINARY));
    keywordMap.put("boolean", new Integer(SqlParserSymbols.KW_BOOLEAN));
    keywordMap.put("by", new Integer(SqlParserSymbols.KW_BY));
    keywordMap.put("cached", new Integer(SqlParserSymbols.KW_CACHED));
    keywordMap.put("case", new Integer(SqlParserSymbols.KW_CASE));
    keywordMap.put("cast", new Integer(SqlParserSymbols.KW_CAST));
    keywordMap.put("change", new Integer(SqlParserSymbols.KW_CHANGE));
    keywordMap.put("char", new Integer(SqlParserSymbols.KW_CHAR));
    keywordMap.put("class", new Integer(SqlParserSymbols.KW_CLASS));
    keywordMap.put("close_fn", new Integer(SqlParserSymbols.KW_CLOSE_FN));
    keywordMap.put("column", new Integer(SqlParserSymbols.KW_COLUMN));
    keywordMap.put("columns", new Integer(SqlParserSymbols.KW_COLUMNS));
    keywordMap.put("comment", new Integer(SqlParserSymbols.KW_COMMENT));
    keywordMap.put("compute", new Integer(SqlParserSymbols.KW_COMPUTE));
    keywordMap.put("create", new Integer(SqlParserSymbols.KW_CREATE));
    keywordMap.put("cross", new Integer(SqlParserSymbols.KW_CROSS));
    keywordMap.put("current", new Integer(SqlParserSymbols.KW_CURRENT));
    keywordMap.put("data", new Integer(SqlParserSymbols.KW_DATA));
    keywordMap.put("database", new Integer(SqlParserSymbols.KW_DATABASE));
    keywordMap.put("databases", new Integer(SqlParserSymbols.KW_DATABASES));
    keywordMap.put("date", new Integer(SqlParserSymbols.KW_DATE));
    keywordMap.put("datetime", new Integer(SqlParserSymbols.KW_DATETIME));
    keywordMap.put("decimal", new Integer(SqlParserSymbols.KW_DECIMAL));
    keywordMap.put("delimited", new Integer(SqlParserSymbols.KW_DELIMITED));
    keywordMap.put("desc", new Integer(SqlParserSymbols.KW_DESC));
    keywordMap.put("describe", new Integer(SqlParserSymbols.KW_DESCRIBE));
    keywordMap.put("distinct", new Integer(SqlParserSymbols.KW_DISTINCT));
    keywordMap.put("div", new Integer(SqlParserSymbols.KW_DIV));
    keywordMap.put("double", new Integer(SqlParserSymbols.KW_DOUBLE));
    keywordMap.put("drop", new Integer(SqlParserSymbols.KW_DROP));
    keywordMap.put("else", new Integer(SqlParserSymbols.KW_ELSE));
    keywordMap.put("end", new Integer(SqlParserSymbols.KW_END));
    keywordMap.put("escaped", new Integer(SqlParserSymbols.KW_ESCAPED));
    keywordMap.put("exists", new Integer(SqlParserSymbols.KW_EXISTS));
    keywordMap.put("explain", new Integer(SqlParserSymbols.KW_EXPLAIN));
    keywordMap.put("external", new Integer(SqlParserSymbols.KW_EXTERNAL));
    keywordMap.put("false", new Integer(SqlParserSymbols.KW_FALSE));
    keywordMap.put("fields", new Integer(SqlParserSymbols.KW_FIELDS));
    keywordMap.put("fileformat", new Integer(SqlParserSymbols.KW_FILEFORMAT));
    keywordMap.put("finalize_fn", new Integer(SqlParserSymbols.KW_FINALIZE_FN));
    keywordMap.put("first", new Integer(SqlParserSymbols.KW_FIRST));
    keywordMap.put("float", new Integer(SqlParserSymbols.KW_FLOAT));
    keywordMap.put("following", new Integer(SqlParserSymbols.KW_FOLLOWING));
    keywordMap.put("for", new Integer(SqlParserSymbols.KW_FOR));
    keywordMap.put("format", new Integer(SqlParserSymbols.KW_FORMAT));
    keywordMap.put("formatted", new Integer(SqlParserSymbols.KW_FORMATTED));
    keywordMap.put("from", new Integer(SqlParserSymbols.KW_FROM));
    keywordMap.put("full", new Integer(SqlParserSymbols.KW_FULL));
    keywordMap.put("function", new Integer(SqlParserSymbols.KW_FUNCTION));
    keywordMap.put("functions", new Integer(SqlParserSymbols.KW_FUNCTIONS));
    keywordMap.put("grant", new Integer(SqlParserSymbols.KW_GRANT));
    keywordMap.put("group", new Integer(SqlParserSymbols.KW_GROUP));
    keywordMap.put("having", new Integer(SqlParserSymbols.KW_HAVING));
    keywordMap.put("if", new Integer(SqlParserSymbols.KW_IF));
    keywordMap.put("in", new Integer(SqlParserSymbols.KW_IN));
    keywordMap.put("incremental", new Integer(SqlParserSymbols.KW_INCREMENTAL));
    //add by liubb
    keywordMap.put("index", new Integer(SqlParserSymbols.KW_INDEX));
    keywordMap.put("indices", new Integer(SqlParserSymbols.KW_INDICES));
    keywordMap.put("deferred", new Integer(SqlParserSymbols.KW_DEFERRED));
    keywordMap.put("rebuild", new Integer(SqlParserSymbols.KW_REBUILD));
    keywordMap.put("idxproperties", new Integer(SqlParserSymbols.KW_IDXPROPERTIES));   
    keywordMap.put("init_fn", new Integer(SqlParserSymbols.KW_INIT_FN));
    keywordMap.put("inner", new Integer(SqlParserSymbols.KW_INNER));
    keywordMap.put("inpath", new Integer(SqlParserSymbols.KW_INPATH));
    keywordMap.put("insert", new Integer(SqlParserSymbols.KW_INSERT));
    keywordMap.put("int", new Integer(SqlParserSymbols.KW_INT));
    keywordMap.put("integer", new Integer(SqlParserSymbols.KW_INT));
    keywordMap.put("intermediate", new Integer(SqlParserSymbols.KW_INTERMEDIATE));
    keywordMap.put("interval", new Integer(SqlParserSymbols.KW_INTERVAL));
    keywordMap.put("into", new Integer(SqlParserSymbols.KW_INTO));
    keywordMap.put("invalidate", new Integer(SqlParserSymbols.KW_INVALIDATE));
    keywordMap.put("is", new Integer(SqlParserSymbols.KW_IS));
    keywordMap.put("join", new Integer(SqlParserSymbols.KW_JOIN));
    keywordMap.put("last", new Integer(SqlParserSymbols.KW_LAST));
    keywordMap.put("left", new Integer(SqlParserSymbols.KW_LEFT));
    keywordMap.put("like", new Integer(SqlParserSymbols.KW_LIKE));
    keywordMap.put("limit", new Integer(SqlParserSymbols.KW_LIMIT));
    keywordMap.put("lines", new Integer(SqlParserSymbols.KW_LINES));
    keywordMap.put("load", new Integer(SqlParserSymbols.KW_LOAD));
    keywordMap.put("location", new Integer(SqlParserSymbols.KW_LOCATION));
    keywordMap.put("map", new Integer(SqlParserSymbols.KW_MAP));
    keywordMap.put("merge_fn", new Integer(SqlParserSymbols.KW_MERGE_FN));
    keywordMap.put("metadata", new Integer(SqlParserSymbols.KW_METADATA));
    keywordMap.put("not", new Integer(SqlParserSymbols.KW_NOT));
    keywordMap.put("null", new Integer(SqlParserSymbols.KW_NULL));
    keywordMap.put("nulls", new Integer(SqlParserSymbols.KW_NULLS));
    keywordMap.put("offset", new Integer(SqlParserSymbols.KW_OFFSET));
    keywordMap.put("on", new Integer(SqlParserSymbols.KW_ON));
    keywordMap.put("||", new Integer(SqlParserSymbols.KW_OR));
    keywordMap.put("or", new Integer(SqlParserSymbols.KW_OR));
    keywordMap.put("order", new Integer(SqlParserSymbols.KW_ORDER));
    keywordMap.put("outer", new Integer(SqlParserSymbols.KW_OUTER));
    keywordMap.put("over", new Integer(SqlParserSymbols.KW_OVER));
    keywordMap.put("overwrite", new Integer(SqlParserSymbols.KW_OVERWRITE));
    keywordMap.put("parquet", new Integer(SqlParserSymbols.KW_PARQUET));
    keywordMap.put("parquetfile", new Integer(SqlParserSymbols.KW_PARQUETFILE));
    keywordMap.put("partition", new Integer(SqlParserSymbols.KW_PARTITION));
    keywordMap.put("partitioned", new Integer(SqlParserSymbols.KW_PARTITIONED));
    keywordMap.put("partitions", new Integer(SqlParserSymbols.KW_PARTITIONS));
    keywordMap.put("preceding", new Integer(SqlParserSymbols.KW_PRECEDING));
    keywordMap.put("prepare_fn", new Integer(SqlParserSymbols.KW_PREPARE_FN));
    keywordMap.put("produced", new Integer(SqlParserSymbols.KW_PRODUCED));
    keywordMap.put("range", new Integer(SqlParserSymbols.KW_RANGE));
    keywordMap.put("rcfile", new Integer(SqlParserSymbols.KW_RCFILE));
    keywordMap.put("real", new Integer(SqlParserSymbols.KW_DOUBLE));
    keywordMap.put("refresh", new Integer(SqlParserSymbols.KW_REFRESH));
    keywordMap.put("regexp", new Integer(SqlParserSymbols.KW_REGEXP));
    keywordMap.put("rename", new Integer(SqlParserSymbols.KW_RENAME));
    keywordMap.put("replace", new Integer(SqlParserSymbols.KW_REPLACE));
    keywordMap.put("returns", new Integer(SqlParserSymbols.KW_RETURNS));
    keywordMap.put("revoke", new Integer(SqlParserSymbols.KW_REVOKE));
    keywordMap.put("right", new Integer(SqlParserSymbols.KW_RIGHT));
    keywordMap.put("rlike", new Integer(SqlParserSymbols.KW_RLIKE));
    keywordMap.put("role", new Integer(SqlParserSymbols.KW_ROLE));
    keywordMap.put("roles", new Integer(SqlParserSymbols.KW_ROLES));
    keywordMap.put("row", new Integer(SqlParserSymbols.KW_ROW));
    keywordMap.put("rows", new Integer(SqlParserSymbols.KW_ROWS));
    keywordMap.put("schema", new Integer(SqlParserSymbols.KW_SCHEMA));
    keywordMap.put("schemas", new Integer(SqlParserSymbols.KW_SCHEMAS));
    keywordMap.put("select", new Integer(SqlParserSymbols.KW_SELECT));
    keywordMap.put("semi", new Integer(SqlParserSymbols.KW_SEMI));
    keywordMap.put("sequencefile", new Integer(SqlParserSymbols.KW_SEQUENCEFILE));
    keywordMap.put("serdeproperties", new Integer(SqlParserSymbols.KW_SERDEPROPERTIES));
    keywordMap.put("serialize_fn", new Integer(SqlParserSymbols.KW_SERIALIZE_FN));
    keywordMap.put("set", new Integer(SqlParserSymbols.KW_SET));
    keywordMap.put("show", new Integer(SqlParserSymbols.KW_SHOW));
    keywordMap.put("smallint", new Integer(SqlParserSymbols.KW_SMALLINT));
    keywordMap.put("stats", new Integer(SqlParserSymbols.KW_STATS));
    keywordMap.put("stored", new Integer(SqlParserSymbols.KW_STORED));
    keywordMap.put("straight_join", new Integer(SqlParserSymbols.KW_STRAIGHT_JOIN));
    keywordMap.put("string", new Integer(SqlParserSymbols.KW_STRING));
    keywordMap.put("struct", new Integer(SqlParserSymbols.KW_STRUCT));
    keywordMap.put("symbol", new Integer(SqlParserSymbols.KW_SYMBOL));
    keywordMap.put("table", new Integer(SqlParserSymbols.KW_TABLE));
    keywordMap.put("tables", new Integer(SqlParserSymbols.KW_TABLES));
    keywordMap.put("tblproperties", new Integer(SqlParserSymbols.KW_TBLPROPERTIES));
    keywordMap.put("terminated", new Integer(SqlParserSymbols.KW_TERMINATED));
    keywordMap.put("textfile", new Integer(SqlParserSymbols.KW_TEXTFILE));
    keywordMap.put("then", new Integer(SqlParserSymbols.KW_THEN));
    keywordMap.put("timestamp", new Integer(SqlParserSymbols.KW_TIMESTAMP));
    keywordMap.put("tinyint", new Integer(SqlParserSymbols.KW_TINYINT));
    keywordMap.put("to", new Integer(SqlParserSymbols.KW_TO));
    keywordMap.put("true", new Integer(SqlParserSymbols.KW_TRUE));
    keywordMap.put("unbounded", new Integer(SqlParserSymbols.KW_UNBOUNDED));
    keywordMap.put("uncached", new Integer(SqlParserSymbols.KW_UNCACHED));
    keywordMap.put("union", new Integer(SqlParserSymbols.KW_UNION));
    keywordMap.put("update_fn", new Integer(SqlParserSymbols.KW_UPDATE_FN));
    keywordMap.put("use", new Integer(SqlParserSymbols.KW_USE));
    keywordMap.put("using", new Integer(SqlParserSymbols.KW_USING));
    keywordMap.put("values", new Integer(SqlParserSymbols.KW_VALUES));
    keywordMap.put("varchar", new Integer(SqlParserSymbols.KW_VARCHAR));
    keywordMap.put("view", new Integer(SqlParserSymbols.KW_VIEW));
    keywordMap.put("when", new Integer(SqlParserSymbols.KW_WHEN));
    keywordMap.put("where", new Integer(SqlParserSymbols.KW_WHERE));
    keywordMap.put("with", new Integer(SqlParserSymbols.KW_WITH));
  }

  // map from token id to token description
  public static final Map<Integer, String> tokenIdMap =
      new HashMap<Integer, String>();
  static {
    Iterator<Map.Entry<String, Integer>> it = keywordMap.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry<String, Integer> pairs = (Map.Entry<String, Integer>) it.next();
      tokenIdMap.put(pairs.getValue(), pairs.getKey().toUpperCase());
    }

    // add non-keyword tokens
    tokenIdMap.put(new Integer(SqlParserSymbols.IDENT), "IDENTIFIER");
    tokenIdMap.put(new Integer(SqlParserSymbols.COLON), ":");
    tokenIdMap.put(new Integer(SqlParserSymbols.COMMA), "COMMA");
    tokenIdMap.put(new Integer(SqlParserSymbols.BITNOT), "~");
    tokenIdMap.put(new Integer(SqlParserSymbols.LPAREN), "(");
    tokenIdMap.put(new Integer(SqlParserSymbols.RPAREN), ")");
    tokenIdMap.put(new Integer(SqlParserSymbols.LBRACKET), "[");
    tokenIdMap.put(new Integer(SqlParserSymbols.RBRACKET), "]");
    tokenIdMap.put(new Integer(SqlParserSymbols.DECIMAL_LITERAL), "DECIMAL LITERAL");
    tokenIdMap.put(new Integer(SqlParserSymbols.INTEGER_LITERAL), "INTEGER LITERAL");
    tokenIdMap.put(new Integer(SqlParserSymbols.NOT), "!");
    tokenIdMap.put(new Integer(SqlParserSymbols.LESSTHAN), "<");
    tokenIdMap.put(new Integer(SqlParserSymbols.GREATERTHAN), ">");
    tokenIdMap.put(new Integer(SqlParserSymbols.UNMATCHED_STRING_LITERAL),
        "UNMATCHED STRING LITERAL");
    tokenIdMap.put(new Integer(SqlParserSymbols.MOD), "%");
    tokenIdMap.put(new Integer(SqlParserSymbols.ADD), "+");
    tokenIdMap.put(new Integer(SqlParserSymbols.DIVIDE), "/");
    tokenIdMap.put(new Integer(SqlParserSymbols.EQUAL), "=");
    tokenIdMap.put(new Integer(SqlParserSymbols.STAR), "*");
    tokenIdMap.put(new Integer(SqlParserSymbols.BITOR), "|");
    tokenIdMap.put(new Integer(SqlParserSymbols.DOT), ".");
    tokenIdMap.put(new Integer(SqlParserSymbols.DOTDOTDOT), "...");
    tokenIdMap.put(new Integer(SqlParserSymbols.STRING_LITERAL), "STRING LITERAL");
    tokenIdMap.put(new Integer(SqlParserSymbols.EOF), "EOF");
    tokenIdMap.put(new Integer(SqlParserSymbols.SUBTRACT), "-");
    tokenIdMap.put(new Integer(SqlParserSymbols.BITAND), "&");
    tokenIdMap.put(new Integer(SqlParserSymbols.error), "ERROR");
    tokenIdMap.put(new Integer(SqlParserSymbols.BITXOR), "^");
    tokenIdMap.put(new Integer(SqlParserSymbols.NUMERIC_OVERFLOW), "NUMERIC OVERFLOW");
    tokenIdMap.put(new Integer(SqlParserSymbols.EMPTY_IDENT), "EMPTY IDENTIFIER");
  }

  public static boolean isKeyword(Integer tokenId) {
    String token = tokenIdMap.get(tokenId);
    if (token == null) return false;
    return keywordMap.containsKey(token.toLowerCase());
  }

  public static boolean isKeyword(String ident) {
    return keywordMap.containsKey(ident.toLowerCase());
  }

  private Symbol newToken(int id, Object value) {
    return new Symbol(id, yyline+1, yycolumn+1, value);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SqlScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public SqlScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 21: 
          { return newToken(SqlParserSymbols.EQUAL, null);
          }
        case 31: break;
        case 6: 
          { return newToken(SqlParserSymbols.BITAND, null);
          }
        case 32: break;
        case 7: 
          { return newToken(SqlParserSymbols.BITOR, null);
          }
        case 33: break;
        case 11: 
          { return newToken(SqlParserSymbols.ADD, null);
          }
        case 34: break;
        case 26: 
          { // Remove the quotes and trim whitespace.
  String trimmedIdent = yytext().substring(1, yytext().length() - 1).trim();
  if (trimmedIdent.isEmpty()) {
    return newToken(SqlParserSymbols.EMPTY_IDENT, yytext());
  }
  return newToken(SqlParserSymbols.IDENT, trimmedIdent);
          }
        case 35: break;
        case 24: 
          { return newToken(SqlParserSymbols.GREATERTHAN, null);
          }
        case 36: break;
        case 17: 
          { return newToken(SqlParserSymbols.RBRACKET, null);
          }
        case 37: break;
        case 4: 
          { String text = yytext();
  Integer kw_id = keywordMap.get(text.toLowerCase());
  if (kw_id != null) {
    return newToken(kw_id.intValue(), text);
  } else {
    return newToken(SqlParserSymbols.IDENT, text);
  }
          }
        case 38: break;
        case 9: 
          { return newToken(SqlParserSymbols.DIVIDE, null);
          }
        case 39: break;
        case 5: 
          { return newToken(SqlParserSymbols.SUBTRACT, null);
          }
        case 40: break;
        case 18: 
          { return newToken(SqlParserSymbols.MOD, null);
          }
        case 41: break;
        case 29: 
          { String text = yytext();
  // Remove everything before the first '+'
  String hintStr = text.substring(text.indexOf('+') + 1);
  return newToken(SqlParserSymbols.COMMENTED_PLAN_HINTS, hintStr.trim());
          }
        case 42: break;
        case 28: 
          { return newToken(SqlParserSymbols.DOTDOTDOT, null);
          }
        case 43: break;
        case 10: 
          { return newToken(SqlParserSymbols.STAR, null);
          }
        case 44: break;
        case 12: 
          { return newToken(SqlParserSymbols.COLON, null);
          }
        case 45: break;
        case 19: 
          { return newToken(SqlParserSymbols.BITXOR, null);
          }
        case 46: break;
        case 30: 
          { String text = yytext();
  // Remove everything before the first '+' as well as the trailing "*/"
  String hintStr = text.substring(text.indexOf('+') + 1, text.length() - 2);
  return newToken(SqlParserSymbols.COMMENTED_PLAN_HINTS, hintStr.trim());
          }
        case 47: break;
        case 13: 
          { return newToken(SqlParserSymbols.COMMA, null);
          }
        case 48: break;
        case 20: 
          { return newToken(SqlParserSymbols.BITNOT, null);
          }
        case 49: break;
        case 27: 
          { return newToken(SqlParserSymbols.STRING_LITERAL, yytext().substring(1, yytext().length()-1));
          }
        case 50: break;
        case 22: 
          { return newToken(SqlParserSymbols.NOT, null);
          }
        case 51: break;
        case 25: 
          { BigDecimal val = null;
  try {
    val = new BigDecimal(yytext());
  } catch (NumberFormatException e) {
    return newToken(SqlParserSymbols.NUMERIC_OVERFLOW, yytext());
  }
  return newToken(SqlParserSymbols.DECIMAL_LITERAL, val);
          }
        case 52: break;
        case 16: 
          { return newToken(SqlParserSymbols.LBRACKET, null);
          }
        case 53: break;
        case 3: 
          { return newToken(SqlParserSymbols.DOT, null);
          }
        case 54: break;
        case 14: 
          { return newToken(SqlParserSymbols.LPAREN, null);
          }
        case 55: break;
        case 15: 
          { return newToken(SqlParserSymbols.RPAREN, null);
          }
        case 56: break;
        case 23: 
          { return newToken(SqlParserSymbols.LESSTHAN, null);
          }
        case 57: break;
        case 2: 
          { BigDecimal val = null;
  try {
    val = new BigDecimal(yytext());
  } catch (NumberFormatException e) {
    return newToken(SqlParserSymbols.NUMERIC_OVERFLOW, yytext());
  }
  return newToken(SqlParserSymbols.INTEGER_LITERAL, val);
          }
        case 58: break;
        case 1: 
          { /* ignore */
          }
        case 59: break;
        case 8: 
          { return newToken(SqlParserSymbols.UNMATCHED_STRING_LITERAL, null);
          }
        case 60: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {   return newToken(SqlParserSymbols.EOF, null);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
