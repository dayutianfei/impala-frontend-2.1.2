
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Aug 06 21:51:39 CST 2015
//----------------------------------------------------

package com.cloudera.impala.analysis;

import com.cloudera.impala.catalog.Type;
import com.cloudera.impala.catalog.ScalarType;
import com.cloudera.impala.catalog.ArrayType;
import com.cloudera.impala.catalog.MapType;
import com.cloudera.impala.catalog.StructType;
import com.cloudera.impala.catalog.StructField;
import com.cloudera.impala.catalog.RowFormat;
import com.cloudera.impala.catalog.View;
import com.cloudera.impala.common.AnalysisException;
import com.cloudera.impala.analysis.ColumnDesc;
import com.cloudera.impala.analysis.UnionStmt.UnionOperand;
import com.cloudera.impala.analysis.UnionStmt.Qualifier;
import com.cloudera.impala.thrift.TFunctionCategory;
import com.cloudera.impala.thrift.TDescribeTableOutputStyle;
import com.cloudera.impala.thrift.THdfsFileFormat;
import com.cloudera.impala.thrift.TPrivilegeLevel;
import com.cloudera.impala.thrift.TTablePropertyType;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java_cup.runtime.Symbol;
import com.google.common.collect.Lists;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Aug 06 21:51:39 CST 2015
  */
public class SqlParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SqlParser() {super();}

  /** Constructor which sets the default scanner. */
  public SqlParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SqlParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u01dc\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\024" +
    "\013\000\002\213\003\000\002\213\002\000\002\025\004" +
    "\000\002\025\005\000\002\025\004\000\002\123\004\000" +
    "\002\123\004\000\002\123\004\000\002\122\015\000\002" +
    "\122\012\000\002\122\015\000\002\122\012\000\002\006" +
    "\003\000\002\006\002\000\002\042\003\000\002\042\002" +
    "\000\002\212\003\000\002\212\002\000\002\214\004\000" +
    "\002\214\007\000\002\214\005\000\002\215\006\000\002" +
    "\215\010\000\002\215\011\000\002\215\011\000\002\215" +
    "\011\000\002\216\005\000\002\216\005\000\002\217\010" +
    "\000\002\220\010\000\002\221\010\000\002\222\010\000" +
    "\002\223\005\000\002\223\006\000\002\223\006\000\002" +
    "\223\006\000\002\224\003\000\002\224\003\000\002\224" +
    "\003\000\002\226\005\000\002\226\002\000\002\225\005" +
    "\000\002\225\002\000\002\227\003\000\002\227\002\000" +
    "\002\134\012\000\002\134\012\000\002\134\010\000\002" +
    "\134\011\000\002\134\010\000\002\134\011\000\002\134" +
    "\011\000\002\134\010\000\002\134\013\000\002\134\010" +
    "\000\002\203\003\000\002\203\003\000\002\211\003\000" +
    "\002\211\002\000\002\174\003\000\002\174\003\000\002" +
    "\142\010\000\002\144\016\000\002\144\013\000\002\145" +
    "\022\000\002\143\020\000\002\146\021\000\002\146\016" +
    "\000\002\146\021\000\002\147\026\000\002\147\023\000" +
    "\002\242\014\000\002\243\016\000\002\164\005\000\002" +
    "\164\003\000\002\164\002\000\002\165\004\000\002\165" +
    "\002\000\002\175\004\000\002\175\002\000\002\167\005" +
    "\000\002\167\002\000\002\166\003\000\002\166\002\000" +
    "\002\173\005\000\002\173\002\000\002\176\010\000\002" +
    "\176\002\000\002\201\005\000\002\201\002\000\002\200" +
    "\004\000\002\200\002\000\002\177\004\000\002\177\002" +
    "\000\002\202\005\000\002\171\005\000\002\171\002\000" +
    "\002\170\003\000\002\170\003\000\002\170\003\000\002" +
    "\170\003\000\002\170\003\000\002\170\003\000\002\205" +
    "\006\000\002\205\002\000\002\204\007\000\002\204\002" +
    "\000\002\206\005\000\002\206\007\000\002\161\007\000" +
    "\002\161\002\000\002\157\003\000\002\157\005\000\002" +
    "\155\005\000\002\150\012\000\002\151\015\000\002\230" +
    "\003\000\002\231\003\000\002\233\003\000\002\232\003" +
    "\000\002\234\003\000\002\162\005\000\002\162\002\000" +
    "\002\160\003\000\002\160\005\000\002\156\004\000\002" +
    "\135\007\000\002\135\010\000\002\136\005\000\002\136" +
    "\006\000\002\136\007\000\002\140\005\000\002\140\007" +
    "\000\002\137\006\000\002\141\006\000\002\141\006\000" +
    "\002\245\010\000\002\152\007\000\002\207\003\000\002" +
    "\207\003\000\002\210\003\000\002\210\003\000\002\172" +
    "\004\000\002\172\002\000\002\126\006\000\002\126\002" +
    "\000\002\130\003\000\002\130\005\000\002\125\006\000" +
    "\002\124\003\000\002\124\002\000\002\127\003\000\002" +
    "\127\005\000\002\131\003\000\002\131\003\000\002\132" +
    "\005\000\002\235\004\000\002\235\006\000\002\236\003" +
    "\000\002\236\005\000\002\237\003\000\002\237\002\000" +
    "\002\240\003\000\002\240\002\000\002\241\004\000\002" +
    "\241\002\000\002\247\005\000\002\247\006\000\002\247" +
    "\002\000\002\250\003\000\002\250\003\000\002\250\003" +
    "\000\002\250\003\000\002\250\003\000\002\250\003\000" +
    "\002\250\003\000\002\250\003\000\002\250\003\000\002" +
    "\005\004\000\002\005\004\000\002\107\004\000\002\107" +
    "\002\000\002\111\007\000\002\111\007\000\002\110\003" +
    "\000\002\110\005\000\002\026\007\000\002\026\005\000" +
    "\002\026\011\000\002\007\003\000\002\007\003\000\002" +
    "\007\005\000\002\010\003\000\002\010\005\000\002\133" +
    "\003\000\002\133\004\000\002\133\004\000\002\004\006" +
    "\000\002\004\010\000\002\011\005\000\002\011\007\000" +
    "\002\012\004\000\002\014\004\000\002\014\005\000\002" +
    "\014\006\000\002\014\007\000\002\015\004\000\002\015" +
    "\005\000\002\017\006\000\002\017\006\000\002\016\005" +
    "\000\002\244\005\000\002\244\006\000\002\244\007\000" +
    "\002\244\010\000\002\246\003\000\002\246\003\000\002" +
    "\246\002\000\002\153\005\000\002\153\006\000\002\020" +
    "\003\000\002\020\004\000\002\022\006\000\002\021\005" +
    "\000\002\023\003\000\002\023\002\000\002\003\003\000" +
    "\002\003\011\000\002\027\005\000\002\027\006\000\002" +
    "\027\006\000\002\013\006\000\002\013\006\000\002\013" +
    "\003\000\002\030\003\000\002\030\005\000\002\031\004" +
    "\000\002\031\003\000\002\031\003\000\002\040\004\000" +
    "\002\040\003\000\002\040\004\000\002\040\003\000\002" +
    "\032\003\000\002\032\005\000\002\032\007\000\002\043" +
    "\003\000\002\043\005\000\002\044\003\000\002\044\005" +
    "\000\002\105\004\000\002\106\003\000\002\106\005\000" +
    "\002\106\007\000\002\106\006\000\002\106\010\000\002" +
    "\106\012\000\002\112\004\000\002\112\003\000\002\112" +
    "\006\000\002\114\004\000\002\114\005\000\002\114\005" +
    "\000\002\114\005\000\002\114\005\000\002\114\005\000" +
    "\002\114\005\000\002\114\005\000\002\115\003\000\002" +
    "\115\002\000\002\116\003\000\002\116\002\000\002\117" +
    "\003\000\002\117\003\000\002\117\005\000\002\117\002" +
    "\000\002\041\003\000\002\041\005\000\002\037\003\000" +
    "\002\037\005\000\002\045\004\000\002\045\002\000\002" +
    "\055\005\000\002\055\002\000\002\057\004\000\002\057" +
    "\002\000\002\061\005\000\002\061\002\000\002\060\003" +
    "\000\002\060\005\000\002\062\005\000\002\063\003\000" +
    "\002\063\003\000\002\063\002\000\002\064\004\000\002" +
    "\064\004\000\002\064\002\000\002\065\004\000\002\065" +
    "\002\000\002\066\004\000\002\067\004\000\002\067\002" +
    "\000\002\070\004\000\002\070\002\000\002\071\010\000" +
    "\002\101\007\000\002\101\006\000\002\102\006\000\002" +
    "\102\007\000\002\072\004\000\002\072\002\000\002\121" +
    "\004\000\002\121\004\000\002\033\003\000\002\033\003" +
    "\000\002\054\004\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\006\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\005\000\002\034\003" +
    "\000\002\074\005\000\002\074\006\000\002\074\010\000" +
    "\002\073\011\000\002\056\005\000\002\056\002\000\002" +
    "\075\004\000\002\075\007\000\002\075\002\000\002\076" +
    "\003\000\002\076\003\000\002\077\004\000\002\077\004" +
    "\000\002\077\004\000\002\077\004\000\002\077\004\000" +
    "\002\035\005\000\002\035\005\000\002\035\005\000\002" +
    "\035\005\000\002\035\005\000\002\035\005\000\002\035" +
    "\005\000\002\035\005\000\002\035\005\000\002\035\004" +
    "\000\002\036\007\000\002\036\007\000\002\036\007\000" +
    "\002\036\012\000\002\100\003\000\002\100\003\000\002" +
    "\100\003\000\002\100\003\000\002\100\003\000\002\100" +
    "\003\000\002\100\004\000\002\100\003\000\002\103\003" +
    "\000\002\103\004\000\002\103\003\000\002\103\004\000" +
    "\002\103\004\000\002\046\005\000\002\046\006\000\002" +
    "\046\003\000\002\046\003\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\005" +
    "\000\002\050\005\000\002\050\006\000\002\050\006\000" +
    "\002\050\006\000\002\050\006\000\002\050\005\000\002" +
    "\050\005\000\002\053\005\000\002\053\005\000\002\053" +
    "\005\000\002\053\006\000\002\053\006\000\002\053\006" +
    "\000\002\047\007\000\002\047\007\000\002\047\010\000" +
    "\002\047\010\000\002\052\007\000\002\052\010\000\002" +
    "\052\005\000\002\052\006\000\002\113\005\000\002\113" +
    "\005\000\002\051\005\000\002\051\005\000\002\051\004" +
    "\000\002\051\004\000\002\104\003\000\002\104\005\000" +
    "\002\104\007\000\002\120\003\000\002\120\003\000\002" +
    "\120\003\000\002\120\003\000\002\120\003\000\002\120" +
    "\003\000\002\120\003\000\002\120\003\000\002\120\003" +
    "\000\002\120\003\000\002\120\003\000\002\120\006\000" +
    "\002\120\003\000\002\120\003\000\002\120\006\000\002" +
    "\120\006\000\002\120\010\000\002\120\003\000\002\120" +
    "\006\000\002\120\010\000\002\120\006\000\002\154\006" +
    "\000\002\163\003\000\002\163\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u03d6\000\050\007\027\037\054\040\056\053\015\057" +
    "\063\064\055\104\033\115\uff22\122\047\132\014\163\040" +
    "\170\026\201\uff22\206\064\207\011\235\016\237\uff22\244" +
    "\013\252\uff22\001\002\000\004\002\uffe0\001\002\000\004" +
    "\002\ufffa\001\002\000\004\002\uffe1\001\002\000\004\002" +
    "\uffdd\001\002\000\004\002\uffe4\001\002\000\040\005\u03a5" +
    "\010\u03b3\034\u03aa\040\u03ae\042\u03a9\043\u03ac\045\u03b0\103" +
    "\ufefe\104\u03b1\155\u03ad\173\u03ab\174\u03a6\200\u03a8\216\u03af" +
    "\217\u03a4\001\002\000\004\002\ufff3\001\002\000\006\272" +
    "\u0398\300\u0399\001\002\000\004\043\u038d\001\002\000\006" +
    "\077\u038b\272\ufef6\001\002\000\004\272\u0389\001\002\000" +
    "\004\002\ufff5\001\002\000\004\002\uffea\001\002\000\004" +
    "\002\ufffd\001\002\000\004\002\uffdb\001\002\000\004\002" +
    "\uffe8\001\002\000\004\002\uffee\001\002\000\004\002\uffde" +
    "\001\002\000\014\006\uffaf\104\u037c\115\uffaf\173\u037e\201" +
    "\uffaf\001\002\000\006\216\u034d\241\u034e\001\002\000\004" +
    "\002\ufff6\001\002\000\004\002\uffdc\001\002\000\004\002" +
    "\ufff2\001\002\000\012\006\u0332\115\u0333\173\u0336\201\u0335" +
    "\001\002\000\004\002\ufff4\001\002\000\004\002\uffd9\001" +
    "\002\000\004\002\uffe2\001\002\000\004\002\ufffe\001\002" +
    "\000\004\272\360\001\002\000\004\002\ufffb\001\002\000" +
    "\004\002\uffdf\001\002\000\004\002\uffe6\001\002\000\004" +
    "\002\ufff0\001\002\000\004\002\uffe7\001\002\000\004\002" +
    "\uffed\001\002\000\004\136\u032e\001\002\000\004\002\ufff1" +
    "\001\002\000\004\002\uffe3\001\002\000\004\002\ufffc\001" +
    "\002\000\004\002\uffff\001\002\000\006\111\u0329\226\u0328" +
    "\001\002\000\016\040\u031c\115\uff22\201\uff22\237\uff22\244" +
    "\013\252\uff22\001\002\000\024\005\u024b\043\u024e\044\u01f3" +
    "\065\u0251\102\u0252\173\u024d\177\u01f4\216\uff84\241\u0250\001" +
    "\002\000\004\002\uffef\001\002\000\004\002\ufff7\001\002" +
    "\000\012\115\u0226\201\223\237\224\252\222\001\002\000" +
    "\004\002\ufff9\001\002\000\026\005\u01f0\043\u01f6\044\u01f3" +
    "\102\uff36\111\u01fa\173\u01f5\177\u01f4\216\u01f7\226\u01f1\241" +
    "\u01f9\001\002\000\006\002\ufeee\272\076\001\002\000\004" +
    "\002\ufff8\001\002\000\004\002\uffda\001\002\000\004\002" +
    "\uffe9\001\002\000\004\002\000\001\002\000\004\002\uffe5" +
    "\001\002\000\004\002\075\001\002\000\004\002\uffeb\001" +
    "\002\000\004\002\uffec\001\002\000\004\002\001\001\002" +
    "\000\004\266\077\001\002\000\024\066\105\140\106\230" +
    "\104\272\100\274\101\276\111\277\107\300\103\301\102" +
    "\001\002\000\004\002\ufeef\001\002\000\154\002\ufe6a\011" +
    "\ufe6a\015\ufe6a\016\ufe6a\020\ufe6a\041\ufe6a\052\ufe6a\055\ufe6a" +
    "\060\ufe6a\061\ufe6a\074\ufe6a\100\ufe6a\101\ufe6a\105\ufe6a\106" +
    "\ufe6a\110\ufe6a\113\ufe6a\123\ufe6a\124\ufe6a\126\ufe6a\127\ufe6a" +
    "\130\ufe6a\137\ufe6a\141\ufe6a\142\ufe6a\144\ufe6a\145\ufe6a\156" +
    "\ufe6a\161\ufe6a\164\ufe6a\171\ufe6a\172\ufe6a\176\ufe6a\223\ufe6a" +
    "\233\ufe6a\242\ufe6a\243\ufe6a\246\ufe6a\251\ufe6a\253\ufe6a\256" +
    "\ufe6a\257\ufe6a\260\ufe6a\261\ufe6a\262\ufe6a\263\ufe6a\264\ufe6a" +
    "\266\ufe6a\267\ufe6a\270\ufe6a\271\ufe6a\272\ufe6a\300\ufe6a\001" +
    "\002\000\052\026\125\027\116\063\140\066\105\107\142" +
    "\120\131\137\124\140\106\230\104\252\121\260\136\261" +
    "\120\265\147\267\130\272\141\274\101\276\111\277\107" +
    "\300\103\301\102\001\002\000\154\002\ufe6f\011\ufe6f\015" +
    "\ufe6f\016\ufe6f\020\ufe6f\041\ufe6f\052\ufe6f\055\ufe6f\060\ufe6f" +
    "\061\ufe6f\074\ufe6f\100\ufe6f\101\ufe6f\105\ufe6f\106\ufe6f\110" +
    "\ufe6f\113\ufe6f\123\ufe6f\124\ufe6f\126\ufe6f\127\ufe6f\130\ufe6f" +
    "\137\ufe6f\141\ufe6f\142\ufe6f\144\ufe6f\145\ufe6f\156\ufe6f\161" +
    "\ufe6f\164\ufe6f\171\ufe6f\172\ufe6f\176\ufe6f\223\ufe6f\233\ufe6f" +
    "\242\ufe6f\243\ufe6f\246\ufe6f\251\ufe6f\253\ufe6f\256\ufe6f\257" +
    "\ufe6f\260\ufe6f\261\ufe6f\262\ufe6f\263\ufe6f\264\ufe6f\266\ufe6f" +
    "\267\ufe6f\270\ufe6f\271\ufe6f\272\ufe6f\300\ufe6f\001\002\000" +
    "\154\002\ufe6e\011\ufe6e\015\ufe6e\016\ufe6e\020\ufe6e\041\ufe6e" +
    "\052\ufe6e\055\ufe6e\060\ufe6e\061\ufe6e\074\ufe6e\100\ufe6e\101" +
    "\ufe6e\105\ufe6e\106\ufe6e\110\ufe6e\113\ufe6e\123\ufe6e\124\ufe6e" +
    "\126\ufe6e\127\ufe6e\130\ufe6e\137\ufe6e\141\ufe6e\142\ufe6e\144" +
    "\ufe6e\145\ufe6e\156\ufe6e\161\ufe6e\164\ufe6e\171\ufe6e\172\ufe6e" +
    "\176\ufe6e\223\ufe6e\233\ufe6e\242\ufe6e\243\ufe6e\246\ufe6e\251" +
    "\ufe6e\253\ufe6e\256\ufe6e\257\ufe6e\260\ufe6e\261\ufe6e\262\ufe6e" +
    "\263\ufe6e\264\ufe6e\266\ufe6e\267\ufe6e\270\ufe6e\271\ufe6e\272" +
    "\ufe6e\300\ufe6e\001\002\000\154\002\ufe6d\011\ufe6d\015\ufe6d" +
    "\016\ufe6d\020\ufe6d\041\ufe6d\052\ufe6d\055\ufe6d\060\ufe6d\061" +
    "\ufe6d\074\ufe6d\100\ufe6d\101\ufe6d\105\ufe6d\106\ufe6d\110\ufe6d" +
    "\113\ufe6d\123\ufe6d\124\ufe6d\126\ufe6d\127\ufe6d\130\ufe6d\137" +
    "\ufe6d\141\ufe6d\142\ufe6d\144\ufe6d\145\ufe6d\156\ufe6d\161\ufe6d" +
    "\164\ufe6d\171\ufe6d\172\ufe6d\176\ufe6d\223\ufe6d\233\ufe6d\242" +
    "\ufe6d\243\ufe6d\246\ufe6d\251\ufe6d\253\ufe6d\256\ufe6d\257\ufe6d" +
    "\260\ufe6d\261\ufe6d\262\ufe6d\263\ufe6d\264\ufe6d\266\ufe6d\267" +
    "\ufe6d\270\ufe6d\271\ufe6d\272\ufe6d\300\ufe6d\001\002\000\154" +
    "\002\ufe6c\011\ufe6c\015\ufe6c\016\ufe6c\020\ufe6c\041\ufe6c\052" +
    "\ufe6c\055\ufe6c\060\ufe6c\061\ufe6c\074\ufe6c\100\ufe6c\101\ufe6c" +
    "\105\ufe6c\106\ufe6c\110\ufe6c\113\ufe6c\123\ufe6c\124\ufe6c\126" +
    "\ufe6c\127\ufe6c\130\ufe6c\137\ufe6c\141\ufe6c\142\ufe6c\144\ufe6c" +
    "\145\ufe6c\156\ufe6c\161\ufe6c\164\ufe6c\171\ufe6c\172\ufe6c\176" +
    "\ufe6c\223\ufe6c\233\ufe6c\242\ufe6c\243\ufe6c\246\ufe6c\251\ufe6c" +
    "\253\ufe6c\256\ufe6c\257\ufe6c\260\ufe6c\261\ufe6c\262\ufe6c\263" +
    "\ufe6c\264\ufe6c\266\ufe6c\267\ufe6c\270\ufe6c\271\ufe6c\272\ufe6c" +
    "\300\ufe6c\001\002\000\154\002\ufe70\011\ufe70\015\ufe70\016" +
    "\ufe70\020\ufe70\041\ufe70\052\ufe70\055\ufe70\060\ufe70\061\ufe70" +
    "\074\ufe70\100\ufe70\101\ufe70\105\ufe70\106\ufe70\110\ufe70\113" +
    "\ufe70\123\ufe70\124\ufe70\126\ufe70\127\ufe70\130\ufe70\137\ufe70" +
    "\141\ufe70\142\ufe70\144\ufe70\145\ufe70\156\ufe70\161\ufe70\164" +
    "\ufe70\171\ufe70\172\ufe70\176\ufe70\223\ufe70\233\ufe70\242\ufe70" +
    "\243\ufe70\246\ufe70\251\ufe70\253\ufe70\256\ufe70\257\ufe70\260" +
    "\ufe70\261\ufe70\262\ufe70\263\ufe70\264\ufe70\266\ufe70\267\ufe70" +
    "\270\ufe70\271\ufe70\272\ufe70\300\ufe70\001\002\000\004\002" +
    "\ufef0\001\002\000\154\002\ufe71\011\ufe71\015\ufe71\016\ufe71" +
    "\020\ufe71\041\ufe71\052\ufe71\055\ufe71\060\ufe71\061\ufe71\074" +
    "\ufe71\100\ufe71\101\ufe71\105\ufe71\106\ufe71\110\ufe71\113\ufe71" +
    "\123\ufe71\124\ufe71\126\ufe71\127\ufe71\130\ufe71\137\ufe71\141" +
    "\ufe71\142\ufe71\144\ufe71\145\ufe71\156\ufe71\161\ufe71\164\ufe71" +
    "\171\ufe71\172\ufe71\176\ufe71\223\ufe71\233\ufe71\242\ufe71\243" +
    "\ufe71\246\ufe71\251\ufe71\253\ufe71\256\ufe71\257\ufe71\260\ufe71" +
    "\261\ufe71\262\ufe71\263\ufe71\264\ufe71\266\ufe71\267\ufe71\270" +
    "\ufe71\271\ufe71\272\ufe71\300\ufe71\001\002\000\154\002\ufe95" +
    "\011\ufe95\015\ufe95\016\ufe95\020\ufe95\041\ufe95\052\ufe95\055" +
    "\ufe95\060\ufe95\061\ufe95\074\ufe95\100\ufe95\101\ufe95\105\ufe95" +
    "\106\ufe95\110\ufe95\113\ufe95\123\ufe95\124\ufe95\126\ufe95\127" +
    "\ufe95\130\ufe95\137\ufe95\141\ufe95\142\ufe95\144\ufe95\145\ufe95" +
    "\156\ufe95\161\ufe95\164\ufe95\171\ufe95\172\ufe95\176\ufe95\223" +
    "\ufe95\233\ufe95\242\ufe95\243\ufe95\246\ufe95\251\ufe95\253\ufe95" +
    "\256\ufe95\257\ufe95\260\ufe95\261\ufe95\262\ufe95\263\ufe95\264" +
    "\ufe95\266\ufe95\267\ufe95\270\ufe95\271\ufe95\272\ufe95\300\ufe95" +
    "\001\002\000\154\002\ufe60\011\ufe60\015\ufe60\016\ufe60\020" +
    "\ufe60\041\ufe60\052\ufe60\055\ufe60\060\ufe60\061\ufe60\074\ufe60" +
    "\100\ufe60\101\ufe60\105\ufe60\106\ufe60\110\ufe60\113\ufe60\123" +
    "\ufe60\124\ufe60\126\ufe60\127\ufe60\130\ufe60\137\ufe60\141\ufe60" +
    "\142\ufe60\144\ufe60\145\ufe60\156\ufe60\161\ufe60\164\ufe60\171" +
    "\ufe60\172\ufe60\176\ufe60\223\ufe60\233\ufe60\242\ufe60\243\ufe60" +
    "\246\ufe60\251\ufe60\253\ufe60\256\ufe60\257\ufe60\260\ufe60\261" +
    "\ufe60\262\ufe60\263\ufe60\264\ufe60\266\ufe60\267\ufe60\270\ufe60" +
    "\271\ufe60\272\ufe60\300\ufe60\001\002\000\154\002\ufe61\011" +
    "\ufe61\015\ufe61\016\ufe61\020\ufe61\041\ufe61\052\ufe61\055\ufe61" +
    "\060\ufe61\061\ufe61\074\ufe61\100\ufe61\101\ufe61\105\ufe61\106" +
    "\ufe61\110\ufe61\113\ufe61\123\ufe61\124\ufe61\126\ufe61\127\ufe61" +
    "\130\ufe61\137\ufe61\141\ufe61\142\ufe61\144\ufe61\145\ufe61\156" +
    "\ufe61\161\ufe61\164\ufe61\171\ufe61\172\ufe61\176\ufe61\223\ufe61" +
    "\233\ufe61\242\ufe61\243\ufe61\246\ufe61\251\ufe61\253\ufe61\256" +
    "\ufe61\257\ufe61\260\ufe61\261\ufe61\262\ufe61\263\ufe61\264\ufe61" +
    "\266\ufe61\267\ufe61\270\ufe61\271\ufe61\272\ufe61\300\ufe61\001" +
    "\002\000\004\252\u01dc\001\002\000\004\252\u01a5\001\002" +
    "\000\154\002\ufe5d\011\ufe5d\015\ufe5d\016\ufe5d\020\ufe5d\041" +
    "\ufe5d\052\ufe5d\055\ufe5d\060\ufe5d\061\ufe5d\074\ufe5d\100\ufe5d" +
    "\101\ufe5d\105\ufe5d\106\ufe5d\110\ufe5d\113\ufe5d\123\ufe5d\124" +
    "\ufe5d\126\ufe5d\127\ufe5d\130\ufe5d\137\ufe5d\141\ufe5d\142\ufe5d" +
    "\144\ufe5d\145\ufe5d\156\ufe5d\161\ufe5d\164\ufe5d\171\ufe5d\172" +
    "\ufe5d\176\ufe5d\223\ufe5d\233\ufe5d\242\ufe5d\243\ufe5d\246\ufe5d" +
    "\251\ufe5d\253\ufe5d\256\ufe5d\257\ufe5d\260\ufe5d\261\ufe5d\262" +
    "\ufe5d\263\ufe5d\264\ufe5d\266\ufe5d\267\ufe5d\270\ufe5d\271\ufe5d" +
    "\272\ufe5d\300\ufe5d\001\002\000\052\026\125\027\116\063" +
    "\140\066\105\107\142\120\131\137\124\140\106\230\104" +
    "\252\121\260\136\261\120\265\147\267\130\272\141\274" +
    "\101\276\111\277\107\300\103\301\102\001\002\000\060" +
    "\026\125\027\116\063\140\066\105\107\142\120\131\137" +
    "\124\140\106\201\uff22\230\104\237\uff22\244\013\252\121" +
    "\260\136\261\120\265\147\267\130\272\141\274\101\276" +
    "\111\277\107\300\103\301\102\001\002\000\154\002\ufe9b" +
    "\011\ufe9b\015\ufe9b\016\ufe9b\020\ufe9b\041\ufe9b\052\ufe9b\055" +
    "\ufe9b\060\ufe9b\061\ufe9b\074\ufe9b\100\ufe9b\101\ufe9b\105\ufe9b" +
    "\106\ufe9b\110\ufe9b\113\ufe9b\123\ufe9b\124\ufe9b\126\ufe9b\127" +
    "\ufe9b\130\ufe9b\137\ufe9b\141\ufe9b\142\ufe9b\144\ufe9b\145\ufe9b" +
    "\156\ufe9b\161\ufe9b\164\ufe9b\171\ufe9b\172\ufe9b\176\ufe9b\223" +
    "\ufe9b\233\ufe9b\242\ufe9b\243\ufe9b\246\ufe9b\251\ufe9b\253\ufe9b" +
    "\256\ufe9b\257\ufe9b\260\ufe9b\261\ufe9b\262\ufe9b\263\ufe9b\264" +
    "\ufe9b\266\ufe9b\267\ufe9b\270\ufe9b\271\ufe9b\272\ufe9b\300\ufe9b" +
    "\001\002\000\154\002\ufe9a\011\ufe9a\015\ufe9a\016\ufe9a\020" +
    "\ufe9a\041\ufe9a\052\ufe9a\055\ufe9a\060\ufe9a\061\ufe9a\074\ufe9a" +
    "\100\ufe9a\101\ufe9a\105\ufe9a\106\ufe9a\110\ufe9a\113\ufe9a\123" +
    "\ufe9a\124\ufe9a\126\ufe9a\127\ufe9a\130\ufe9a\137\ufe9a\141\ufe9a" +
    "\142\ufe9a\144\ufe9a\145\ufe9a\156\ufe9a\161\ufe9a\164\ufe9a\171" +
    "\ufe9a\172\ufe9a\176\ufe9a\223\ufe9a\233\ufe9a\242\ufe9a\243\ufe9a" +
    "\246\ufe9a\251\ufe9a\253\ufe9a\256\ufe9a\257\ufe9a\260\ufe9a\261" +
    "\ufe9a\262\ufe9a\263\ufe9a\264\ufe9a\266\ufe9a\267\ufe9a\270\ufe9a" +
    "\271\ufe9a\272\ufe9a\300\ufe9a\001\002\000\052\026\125\027" +
    "\116\063\140\066\105\107\142\120\131\137\124\140\106" +
    "\230\104\252\121\260\136\261\120\265\147\267\130\272" +
    "\141\274\101\276\111\277\107\300\103\301\102\001\002" +
    "\000\054\026\125\027\116\063\140\066\105\107\142\120" +
    "\131\137\124\140\106\230\104\242\u0193\252\121\260\136" +
    "\261\120\265\147\267\130\272\141\274\101\276\111\277" +
    "\107\300\103\301\102\001\002\000\154\002\ufe9d\011\ufe9d" +
    "\015\ufe9d\016\ufe9d\020\ufe9d\041\ufe9d\052\ufe9d\055\ufe9d\060" +
    "\ufe9d\061\ufe9d\074\ufe9d\100\ufe9d\101\ufe9d\105\ufe9d\106\ufe9d" +
    "\110\ufe9d\113\ufe9d\123\ufe9d\124\ufe9d\126\ufe9d\127\ufe9d\130" +
    "\ufe9d\137\ufe9d\141\ufe9d\142\ufe9d\144\ufe9d\145\ufe9d\156\ufe9d" +
    "\161\ufe9d\164\ufe9d\171\ufe9d\172\ufe9d\176\ufe9d\223\ufe9d\233" +
    "\ufe9d\242\ufe9d\243\ufe9d\246\ufe9d\251\ufe9d\253\ufe9d\256\ufe9d" +
    "\257\ufe9d\260\ufe9d\261\ufe9d\262\ufe9d\263\ufe9d\264\ufe9d\266" +
    "\ufe9d\267\ufe9d\270\ufe9d\271\ufe9d\272\ufe9d\300\ufe9d\001\002" +
    "\000\154\002\ufe62\011\ufe62\015\ufe62\016\ufe62\020\ufe62\041" +
    "\ufe62\052\ufe62\055\ufe62\060\ufe62\061\ufe62\074\ufe62\100\ufe62" +
    "\101\ufe62\105\ufe62\106\ufe62\110\ufe62\113\ufe62\123\ufe62\124" +
    "\ufe62\126\ufe62\127\ufe62\130\ufe62\137\ufe62\141\ufe62\142\ufe62" +
    "\144\ufe62\145\ufe62\156\ufe62\161\ufe62\164\ufe62\171\ufe62\172" +
    "\ufe62\176\ufe62\223\ufe62\233\ufe62\242\ufe62\243\ufe62\246\ufe62" +
    "\251\ufe62\253\ufe62\256\ufe62\257\ufe62\260\ufe62\261\ufe62\262" +
    "\ufe62\263\ufe62\264\ufe62\266\ufe62\267\ufe62\270\ufe62\271\ufe62" +
    "\272\ufe62\300\ufe62\001\002\000\052\026\125\027\116\063" +
    "\140\066\105\107\142\120\131\137\124\140\106\230\104" +
    "\252\121\260\136\261\120\265\147\267\130\272\141\274" +
    "\101\276\111\277\107\300\103\301\102\001\002\000\052" +
    "\026\125\027\116\063\140\066\105\107\142\120\131\137" +
    "\124\140\106\230\104\252\121\260\136\261\120\265\147" +
    "\267\130\272\141\274\101\276\111\277\107\300\103\301" +
    "\102\001\002\000\154\002\ufe5e\011\ufe5e\015\ufe5e\016\ufe5e" +
    "\020\ufe5e\041\ufe5e\052\ufe5e\055\ufe5e\060\ufe5e\061\ufe5e\074" +
    "\ufe5e\100\ufe5e\101\ufe5e\105\ufe5e\106\ufe5e\110\ufe5e\113\ufe5e" +
    "\123\ufe5e\124\ufe5e\126\ufe5e\127\ufe5e\130\ufe5e\137\ufe5e\141" +
    "\ufe5e\142\ufe5e\144\ufe5e\145\ufe5e\156\ufe5e\161\ufe5e\164\ufe5e" +
    "\171\ufe5e\172\ufe5e\176\ufe5e\223\ufe5e\233\ufe5e\242\ufe5e\243" +
    "\ufe5e\246\ufe5e\251\ufe5e\253\ufe5e\256\ufe5e\257\ufe5e\260\ufe5e" +
    "\261\ufe5e\262\ufe5e\263\ufe5e\264\ufe5e\266\ufe5e\267\ufe5e\270" +
    "\ufe5e\271\ufe5e\272\ufe5e\300\ufe5e\001\002\000\154\002\ufe93" +
    "\011\ufe93\015\ufe93\016\ufe93\020\ufe93\041\ufe93\052\ufe93\055" +
    "\ufe93\060\ufe93\061\ufe93\074\ufe93\100\ufe93\101\ufe93\105\ufe93" +
    "\106\ufe93\110\ufe93\113\ufe93\123\ufe93\124\ufe93\126\ufe93\127" +
    "\ufe93\130\ufe93\137\ufe93\141\ufe93\142\ufe93\144\ufe93\145\ufe93" +
    "\156\ufe93\161\ufe93\164\ufe93\171\ufe93\172\ufe93\176\ufe93\223" +
    "\ufe93\233\ufe93\242\ufe93\243\ufe93\246\ufe93\251\ufe93\253\ufe93" +
    "\256\ufe93\257\ufe93\260\ufe93\261\ufe93\262\ufe93\263\ufe93\264" +
    "\ufe93\266\ufe93\267\ufe93\270\ufe93\271\ufe93\272\ufe93\300\ufe93" +
    "\001\002\000\154\002\ufe94\011\ufe94\015\ufe94\016\ufe94\020" +
    "\ufe94\041\ufe94\052\ufe94\055\ufe94\060\ufe94\061\ufe94\074\ufe94" +
    "\100\ufe94\101\ufe94\105\ufe94\106\ufe94\110\ufe94\113\ufe94\123" +
    "\ufe94\124\ufe94\126\ufe94\127\ufe94\130\ufe94\137\ufe94\141\ufe94" +
    "\142\ufe94\144\ufe94\145\ufe94\156\ufe94\161\ufe94\164\ufe94\171" +
    "\ufe94\172\ufe94\176\ufe94\223\ufe94\233\ufe94\242\ufe94\243\ufe94" +
    "\246\ufe94\251\ufe94\253\ufe94\256\ufe94\257\ufe94\260\ufe94\261" +
    "\ufe94\262\ufe94\263\ufe94\264\ufe94\266\ufe94\267\ufe94\270\ufe94" +
    "\271\ufe94\272\ufe94\300\ufe94\001\002\000\156\002\ufe99\011" +
    "\ufe99\015\ufe99\016\ufe99\020\ufe99\041\ufe99\052\ufe99\055\ufe99" +
    "\060\ufe99\061\ufe99\074\ufe99\100\ufe99\101\ufe99\105\ufe99\106" +
    "\ufe99\110\ufe99\113\ufe99\123\ufe99\124\ufe99\126\ufe99\127\ufe99" +
    "\130\ufe99\137\ufe99\141\ufe99\142\ufe99\144\ufe99\145\ufe99\147" +
    "\u0176\156\ufe99\161\ufe99\164\ufe99\171\ufe99\172\ufe99\176\ufe99" +
    "\223\ufe99\233\ufe99\242\ufe99\243\ufe99\246\ufe99\251\ufe99\253" +
    "\ufe99\256\ufe99\257\ufe99\260\ufe99\261\ufe99\262\ufe99\263\ufe99" +
    "\264\ufe99\266\ufe99\267\ufe99\270\ufe99\271\ufe99\272\ufe99\300" +
    "\ufe99\001\002\000\052\026\125\027\116\063\140\066\105" +
    "\107\142\120\131\137\124\140\106\230\104\252\121\260" +
    "\136\261\120\265\147\267\130\272\141\274\101\276\111" +
    "\277\107\300\103\301\102\001\002\000\154\002\ufe5f\011" +
    "\ufe5f\015\ufe5f\016\ufe5f\020\ufe5f\041\ufe5f\052\ufe5f\055\ufe5f" +
    "\060\ufe5f\061\ufe5f\074\ufe5f\100\ufe5f\101\ufe5f\105\ufe5f\106" +
    "\ufe5f\110\ufe5f\113\ufe5f\123\ufe5f\124\ufe5f\126\ufe5f\127\ufe5f" +
    "\130\ufe5f\137\ufe5f\141\ufe5f\142\ufe5f\144\ufe5f\145\ufe5f\156" +
    "\ufe5f\161\ufe5f\164\ufe5f\171\ufe5f\172\ufe5f\176\ufe5f\223\ufe5f" +
    "\233\ufe5f\242\ufe5f\243\ufe5f\246\ufe5f\251\ufe5f\253\ufe5f\256" +
    "\ufe5f\257\ufe5f\260\ufe5f\261\ufe5f\262\ufe5f\263\ufe5f\264\ufe5f" +
    "\266\ufe5f\267\ufe5f\270\ufe5f\271\ufe5f\272\ufe5f\300\ufe5f\001" +
    "\002\000\004\252\u0173\001\002\000\160\002\ufe40\011\ufe40" +
    "\015\ufe40\016\ufe40\020\ufe40\041\ufe40\052\ufe40\055\ufe40\060" +
    "\ufe40\061\ufe40\074\ufe40\100\ufe40\101\ufe40\105\ufe40\106\ufe40" +
    "\110\ufe40\113\ufe40\123\ufe40\124\ufe40\126\ufe40\127\ufe40\130" +
    "\ufe40\137\ufe40\141\ufe40\142\ufe40\144\ufe40\145\ufe40\156\ufe40" +
    "\161\ufe40\164\ufe40\171\ufe40\172\ufe40\176\ufe40\223\ufe40\233" +
    "\ufe40\242\ufe40\243\ufe40\246\ufe40\247\u016f\251\ufe40\252\ufedf" +
    "\253\ufe40\256\ufe40\257\ufe40\260\ufe40\261\ufe40\262\ufe40\263" +
    "\ufe40\264\ufe40\266\ufe40\267\ufe40\270\ufe40\271\ufe40\272\ufe40" +
    "\300\ufe40\001\002\000\004\252\u016c\001\002\000\154\002" +
    "\ufe96\011\ufe96\015\ufe96\016\ufe96\020\ufe96\041\ufe96\052\ufe96" +
    "\055\ufe96\060\ufe96\061\ufe96\074\ufe96\100\ufe96\101\ufe96\105" +
    "\ufe96\106\ufe96\110\ufe96\113\ufe96\123\ufe96\124\ufe96\126\ufe96" +
    "\127\ufe96\130\ufe96\137\ufe96\141\ufe96\142\ufe96\144\ufe96\145" +
    "\ufe96\156\ufe96\161\ufe96\164\ufe96\171\ufe96\172\ufe96\176\ufe96" +
    "\223\ufe96\233\ufe96\242\ufe96\243\ufe96\246\ufe96\251\ufe96\253" +
    "\ufe96\256\ufe96\257\ufe96\260\ufe96\261\ufe96\262\ufe96\263\ufe96" +
    "\264\ufe96\266\ufe96\267\ufe96\270\ufe96\271\ufe96\272\ufe96\300" +
    "\ufe96\001\002\000\154\002\ufe90\011\ufe90\015\ufe90\016\ufe90" +
    "\020\ufe90\041\ufe90\052\ufe90\055\ufe90\060\ufe90\061\ufe90\074" +
    "\ufe90\100\ufe90\101\ufe90\105\ufe90\106\ufe90\110\ufe90\113\ufe90" +
    "\123\ufe90\124\ufe90\126\ufe90\127\ufe90\130\ufe90\137\ufe90\141" +
    "\ufe90\142\ufe90\144\ufe90\145\ufe90\156\ufe90\161\ufe90\164\ufe90" +
    "\171\ufe90\172\ufe90\176\ufe90\223\ufe90\233\ufe90\242\ufe90\243" +
    "\ufe90\246\ufe90\251\ufe90\253\ufe90\256\ufe90\257\ufe90\260\ufe90" +
    "\261\ufe90\262\ufe90\263\ufe90\264\ufe90\266\ufe90\267\ufe90\270" +
    "\ufe90\271\ufe90\272\ufe90\300\ufe90\001\002\000\154\002\ufe6b" +
    "\011\175\015\ufe6b\016\ufe6b\020\170\041\ufe6b\052\ufe6b\055" +
    "\163\060\ufe6b\061\ufe6b\074\ufe6b\100\ufe6b\101\ufe6b\105\ufe6b" +
    "\106\ufe6b\110\200\113\ufe6b\123\173\124\ufe6b\126\ufe6b\127" +
    "\165\130\ufe6b\137\155\141\ufe6b\142\ufe6b\144\177\145\ufe6b" +
    "\156\ufe6b\161\ufe6b\164\174\171\ufe6b\172\171\176\ufe6b\223" +
    "\ufe6b\233\ufe6b\242\ufe6b\243\ufe6b\246\ufe6b\251\160\253\ufe6b" +
    "\256\166\257\153\260\167\261\162\262\154\263\157\264" +
    "\172\266\156\267\161\270\164\271\176\272\ufe6b\300\ufe6b" +
    "\001\002\000\154\002\ufe98\011\ufe98\015\ufe98\016\ufe98\020" +
    "\ufe98\041\ufe98\052\ufe98\055\ufe98\060\ufe98\061\ufe98\074\ufe98" +
    "\100\ufe98\101\ufe98\105\ufe98\106\ufe98\110\ufe98\113\ufe98\123" +
    "\ufe98\124\ufe98\126\ufe98\127\ufe98\130\ufe98\137\ufe98\141\ufe98" +
    "\142\ufe98\144\ufe98\145\ufe98\156\ufe98\161\ufe98\164\ufe98\171" +
    "\ufe98\172\ufe98\176\ufe98\223\ufe98\233\ufe98\242\ufe98\243\ufe98" +
    "\246\ufe98\251\ufe98\253\ufe98\256\ufe98\257\ufe98\260\ufe98\261" +
    "\ufe98\262\ufe98\263\ufe98\264\ufe98\266\ufe98\267\ufe98\270\ufe98" +
    "\271\ufe98\272\ufe98\300\ufe98\001\002\000\052\026\125\027" +
    "\116\063\140\066\105\107\142\120\131\137\124\140\106" +
    "\230\104\252\121\260\136\261\120\265\147\267\130\272" +
    "\141\274\101\276\111\277\107\300\103\301\102\001\002" +
    "\000\154\002\ufe92\011\ufe92\015\ufe92\016\ufe92\020\ufe92\041" +
    "\ufe92\052\ufe92\055\ufe92\060\ufe92\061\ufe92\074\ufe92\100\ufe92" +
    "\101\ufe92\105\ufe92\106\ufe92\110\ufe92\113\ufe92\123\ufe92\124" +
    "\ufe92\126\ufe92\127\ufe92\130\ufe92\137\ufe92\141\ufe92\142\ufe92" +
    "\144\ufe92\145\ufe92\156\ufe92\161\ufe92\164\ufe92\171\ufe92\172" +
    "\ufe92\176\ufe92\223\ufe92\233\ufe92\242\ufe92\243\ufe92\246\ufe92" +
    "\251\ufe92\253\ufe92\256\ufe92\257\ufe92\260\ufe92\261\ufe92\262" +
    "\ufe92\263\ufe92\264\ufe92\266\ufe92\267\ufe92\270\ufe92\271\ufe92" +
    "\272\ufe92\300\ufe92\001\002\000\154\002\ufe9e\011\ufe9e\015" +
    "\ufe9e\016\ufe9e\020\ufe9e\041\ufe9e\052\ufe9e\055\ufe9e\060\ufe9e" +
    "\061\ufe9e\074\ufe9e\100\ufe9e\101\ufe9e\105\ufe9e\106\ufe9e\110" +
    "\ufe9e\113\ufe9e\123\ufe9e\124\ufe9e\126\ufe9e\127\ufe9e\130\ufe9e" +
    "\137\ufe9e\141\ufe9e\142\ufe9e\144\ufe9e\145\ufe9e\156\ufe9e\161" +
    "\ufe9e\164\ufe9e\171\ufe9e\172\ufe9e\176\ufe9e\223\ufe9e\233\ufe9e" +
    "\242\ufe9e\243\ufe9e\246\ufe9e\251\ufe9e\253\ufe9e\256\ufe9e\257" +
    "\ufe9e\260\ufe9e\261\ufe9e\262\ufe9e\263\ufe9e\264\ufe9e\266\ufe9e" +
    "\267\ufe9e\270\ufe9e\271\ufe9e\272\ufe9e\300\ufe9e\001\002\000" +
    "\154\002\ufe76\011\ufe76\015\ufe76\016\ufe76\020\ufe76\041\ufe76" +
    "\052\ufe76\055\ufe76\060\ufe76\061\ufe76\074\ufe76\100\ufe76\101" +
    "\ufe76\105\ufe76\106\ufe76\110\ufe76\113\ufe76\123\ufe76\124\ufe76" +
    "\126\ufe76\127\ufe76\130\ufe76\137\ufe76\141\ufe76\142\ufe76\144" +
    "\ufe76\145\ufe76\156\ufe76\161\ufe76\164\ufe76\171\ufe76\172\ufe76" +
    "\176\ufe76\223\ufe76\233\ufe76\242\ufe76\243\ufe76\246\ufe76\251" +
    "\ufe76\253\ufe76\256\ufe76\257\ufe76\260\ufe76\261\ufe76\262\ufe76" +
    "\263\ufe76\264\ufe76\266\ufe76\267\ufe76\270\ufe76\271\ufe76\272" +
    "\ufe76\300\ufe76\001\002\000\052\026\125\027\116\063\140" +
    "\066\105\107\142\120\131\137\124\140\106\230\104\252" +
    "\121\260\136\261\120\265\147\267\130\272\141\274\101" +
    "\276\111\277\107\300\103\301\102\001\002\000\052\026" +
    "\125\027\116\063\140\066\105\107\142\120\131\137\124" +
    "\140\106\230\104\252\121\260\136\261\120\265\147\267" +
    "\130\272\141\274\101\276\111\277\107\300\103\301\102" +
    "\001\002\000\014\020\u0158\110\u015c\127\u015b\164\u015a\172" +
    "\u0159\001\002\000\052\026\125\027\116\063\140\066\105" +
    "\107\142\120\131\137\124\140\106\230\104\252\121\260" +
    "\136\261\120\265\147\267\130\272\141\274\101\276\111" +
    "\277\107\300\103\301\102\001\002\000\052\026\125\027" +
    "\116\063\140\066\105\107\142\120\131\137\124\140\106" +
    "\230\104\252\121\260\136\261\120\265\147\267\130\272" +
    "\141\274\101\276\111\277\107\300\103\301\102\001\002" +
    "\000\052\026\125\027\116\063\140\066\105\107\142\120" +
    "\131\137\124\140\106\230\104\252\121\260\136\261\120" +
    "\265\147\267\130\272\141\274\101\276\111\277\107\300" +
    "\103\301\102\001\002\000\004\266\u0153\001\002\000\052" +
    "\026\125\027\116\063\140\066\105\107\142\120\u014f\137" +
    "\124\140\106\230\104\252\121\260\136\261\120\265\147" +
    "\267\130\272\141\274\101\276\111\277\107\300\103\301" +
    "\102\001\002\000\052\026\125\027\116\063\140\066\105" +
    "\107\142\120\131\137\124\140\106\230\104\252\121\260" +
    "\136\261\120\265\147\267\130\272\141\274\101\276\111" +
    "\277\107\300\103\301\102\001\002\000\056\026\125\027" +
    "\116\063\140\066\105\107\142\120\131\137\124\140\106" +
    "\230\104\252\121\260\136\261\120\265\147\266\u014a\267" +
    "\130\271\u0149\272\141\274\101\276\111\277\107\300\103" +
    "\301\102\001\002\000\052\026\125\027\116\063\140\066" +
    "\105\107\142\120\131\137\124\140\106\230\104\252\121" +
    "\260\136\261\120\265\147\267\130\272\141\274\101\276" +
    "\111\277\107\300\103\301\102\001\002\000\052\026\125" +
    "\027\116\063\140\066\105\107\142\120\131\137\124\140" +
    "\106\230\104\252\121\260\136\261\120\265\147\267\130" +
    "\272\141\274\101\276\111\277\107\300\103\301\102\001" +
    "\002\000\052\026\125\027\116\063\140\066\105\107\142" +
    "\120\u0141\137\124\140\106\230\104\252\121\260\136\261" +
    "\120\265\147\267\130\272\141\274\101\276\111\277\107" +
    "\300\103\301\102\001\002\000\052\026\125\027\116\063" +
    "\140\066\105\107\142\120\131\137\124\140\106\230\104" +
    "\252\121\260\136\261\120\265\147\267\130\272\141\274" +
    "\101\276\111\277\107\300\103\301\102\001\002\000\052" +
    "\026\125\027\116\063\140\066\105\107\142\120\131\137" +
    "\124\140\106\230\104\252\121\260\136\261\120\265\147" +
    "\267\130\272\141\274\101\276\111\277\107\300\103\301" +
    "\102\001\002\000\052\026\125\027\116\063\140\066\105" +
    "\107\142\120\131\137\124\140\106\230\104\252\121\260" +
    "\136\261\120\265\147\267\130\272\141\274\101\276\111" +
    "\277\107\300\103\301\102\001\002\000\006\137\u0136\140" +
    "\u0135\001\002\000\052\026\125\027\116\063\140\066\105" +
    "\107\142\120\131\137\124\140\106\230\104\252\121\260" +
    "\136\261\120\265\147\267\130\272\141\274\101\276\111" +
    "\277\107\300\103\301\102\001\002\000\052\026\125\027" +
    "\116\063\140\066\105\107\142\120\131\137\124\140\106" +
    "\230\104\252\121\260\136\261\120\265\147\267\130\272" +
    "\141\274\101\276\111\277\107\300\103\301\102\001\002" +
    "\000\054\026\125\027\116\063\140\066\105\107\142\120" +
    "\131\137\124\140\106\230\104\252\121\260\136\261\120" +
    "\265\147\266\u0130\267\130\272\141\274\101\276\111\277" +
    "\107\300\103\301\102\001\002\000\052\026\125\027\116" +
    "\063\140\066\105\107\142\120\131\137\124\140\106\230" +
    "\104\252\121\260\136\261\120\265\147\267\130\272\141" +
    "\274\101\276\111\277\107\300\103\301\102\001\002\000" +
    "\004\252\202\001\002\000\154\002\ufe48\011\ufe48\015\ufe48" +
    "\016\ufe48\020\ufe48\041\ufe48\052\ufe48\055\ufe48\060\ufe48\061" +
    "\ufe48\074\ufe48\100\ufe48\101\ufe48\105\ufe48\106\ufe48\110\ufe48" +
    "\113\ufe48\123\ufe48\124\ufe48\126\ufe48\127\ufe48\130\ufe48\137" +
    "\ufe48\141\ufe48\142\ufe48\144\ufe48\145\ufe48\156\ufe48\161\ufe48" +
    "\164\ufe48\171\ufe48\172\ufe48\176\ufe48\223\ufe48\233\ufe48\242" +
    "\ufe48\243\ufe48\246\ufe48\251\ufe48\253\ufe48\256\ufe48\257\ufe48" +
    "\260\ufe48\261\ufe48\262\ufe48\263\ufe48\264\ufe48\266\ufe48\267" +
    "\ufe48\270\ufe48\271\ufe48\272\ufe48\300\ufe48\001\002\000\060" +
    "\026\125\027\116\063\140\066\105\107\142\120\131\137" +
    "\124\140\106\201\uff22\230\104\237\uff22\244\013\252\121" +
    "\260\136\261\120\265\147\267\130\272\141\274\101\276" +
    "\111\277\107\300\103\301\102\001\002\000\070\011\ufe90" +
    "\015\ufe90\020\ufe90\055\ufe90\110\ufe90\123\ufe90\127\ufe90\137" +
    "\ufe90\144\ufe90\164\ufe90\172\ufe90\246\ufe90\251\ufe90\253\u012e" +
    "\256\ufe90\257\ufe90\260\ufe90\261\ufe90\262\ufe90\263\ufe90\264" +
    "\ufe90\266\ufe90\267\ufe90\270\ufe90\271\ufe90\272\ufe90\300\ufe90" +
    "\001\002\000\102\002\ufec1\011\175\020\170\055\163\106" +
    "\ufec1\110\200\123\173\127\165\130\ufec1\137\155\142\ufec1" +
    "\144\177\145\ufec1\161\ufec1\164\174\172\171\176\ufec1\233" +
    "\ufec1\246\ufec1\251\160\253\ufec1\256\166\257\153\260\167" +
    "\261\162\262\154\263\157\264\172\266\156\267\161\270" +
    "\164\271\176\001\002\000\010\201\223\237\224\252\222" +
    "\001\002\000\004\253\213\001\002\000\006\246\210\253" +
    "\211\001\002\000\052\026\125\027\116\063\140\066\105" +
    "\107\142\120\131\137\124\140\106\230\104\252\121\260" +
    "\136\261\120\265\147\267\130\272\141\274\101\276\111" +
    "\277\107\300\103\301\102\001\002\000\154\002\ufe4a\011" +
    "\ufe4a\015\ufe4a\016\ufe4a\020\ufe4a\041\ufe4a\052\ufe4a\055\ufe4a" +
    "\060\ufe4a\061\ufe4a\074\ufe4a\100\ufe4a\101\ufe4a\105\ufe4a\106" +
    "\ufe4a\110\ufe4a\113\ufe4a\123\ufe4a\124\ufe4a\126\ufe4a\127\ufe4a" +
    "\130\ufe4a\137\ufe4a\141\ufe4a\142\ufe4a\144\ufe4a\145\ufe4a\156" +
    "\ufe4a\161\ufe4a\164\ufe4a\171\ufe4a\172\ufe4a\176\ufe4a\223\ufe4a" +
    "\233\ufe4a\242\ufe4a\243\ufe4a\246\ufe4a\251\ufe4a\253\ufe4a\256" +
    "\ufe4a\257\ufe4a\260\ufe4a\261\ufe4a\262\ufe4a\263\ufe4a\264\ufe4a" +
    "\266\ufe4a\267\ufe4a\270\ufe4a\271\ufe4a\272\ufe4a\300\ufe4a\001" +
    "\002\000\102\002\ufec0\011\175\020\170\055\163\106\ufec0" +
    "\110\200\123\173\127\165\130\ufec0\137\155\142\ufec0\144" +
    "\177\145\ufec0\161\ufec0\164\174\172\171\176\ufec0\233\ufec0" +
    "\246\ufec0\251\160\253\ufec0\256\166\257\153\260\167\261" +
    "\162\262\154\263\157\264\172\266\156\267\161\270\164" +
    "\271\176\001\002\000\154\002\ufe45\011\ufe45\015\ufe45\016" +
    "\ufe45\020\ufe45\041\ufe45\052\ufe45\055\ufe45\060\ufe45\061\ufe45" +
    "\074\ufe45\100\ufe45\101\ufe45\105\ufe45\106\ufe45\110\ufe45\113" +
    "\ufe45\123\ufe45\124\ufe45\126\ufe45\127\ufe45\130\ufe45\137\ufe45" +
    "\141\ufe45\142\ufe45\144\ufe45\145\ufe45\156\ufe45\161\ufe45\164" +
    "\ufe45\171\ufe45\172\ufe45\176\ufe45\223\ufe45\233\ufe45\242\ufe45" +
    "\243\ufe45\246\ufe45\251\ufe45\253\ufe45\256\ufe45\257\ufe45\260" +
    "\ufe45\261\ufe45\262\ufe45\263\ufe45\264\ufe45\266\ufe45\267\ufe45" +
    "\270\ufe45\271\ufe45\272\ufe45\300\ufe45\001\002\000\014\002" +
    "\uff25\130\u0120\145\u011f\233\u011e\253\uff25\001\002\000\014" +
    "\002\uff17\130\uff17\145\uff17\233\uff17\253\uff17\001\002\000" +
    "\014\002\uff1a\130\uff1a\145\uff1a\233\uff1a\253\uff1a\001\002" +
    "\000\006\002\uff24\253\uff24\001\002\000\014\002\uff19\130" +
    "\uff19\145\uff19\233\uff19\253\uff19\001\002\000\016\002\ufef5" +
    "\100\341\130\ufef5\145\ufef5\233\ufef5\253\ufef5\001\002\000" +
    "\012\201\uff22\237\uff22\244\013\252\uff22\001\002\000\066" +
    "\006\317\026\ufec4\027\ufec4\054\320\063\ufec4\066\ufec4\107" +
    "\ufec4\120\ufec4\137\ufec4\140\ufec4\212\322\230\ufec4\251\ufec4" +
    "\252\ufec4\254\324\260\ufec4\261\ufec4\265\ufec4\267\ufec4\272" +
    "\ufec4\274\ufec4\275\321\276\ufec4\277\ufec4\300\ufec4\301\ufec4" +
    "\001\002\000\004\252\226\001\002\000\020\002\ufeb8\130" +
    "\ufeb8\142\ufeb8\145\261\233\ufeb8\246\256\253\ufeb8\001\002" +
    "\000\054\026\125\027\116\063\140\066\105\107\142\120" +
    "\131\137\124\140\106\230\104\251\230\252\227\260\136" +
    "\261\120\265\147\267\130\272\233\274\101\276\111\277" +
    "\107\300\103\301\102\001\002\000\062\026\125\027\116" +
    "\063\140\066\105\107\142\120\131\137\124\140\106\201" +
    "\uff22\230\104\237\uff22\244\013\251\230\252\121\260\136" +
    "\261\120\265\147\267\130\272\233\274\101\276\111\277" +
    "\107\300\103\301\102\001\002\000\020\002\ufee4\100\ufee4" +
    "\130\ufee4\145\ufee4\233\ufee4\246\ufee4\253\ufee4\001\002\000" +
    "\020\002\ufeed\100\ufeed\130\ufeed\145\ufeed\233\ufeed\246\ufeed" +
    "\253\ufeed\001\002\000\006\246\256\253\257\001\002\000" +
    "\106\002\ufe40\011\ufe40\015\ufe40\020\ufe40\055\ufe40\100\ufe40" +
    "\110\ufe40\123\ufe40\127\ufe40\130\ufe40\137\ufe40\144\ufe40\145" +
    "\ufe40\164\ufe40\172\ufe40\233\ufe40\246\ufe40\247\250\251\ufe40" +
    "\252\ufedf\253\ufe40\256\ufe40\257\ufe40\260\ufe40\261\ufe40\262" +
    "\ufe40\263\ufe40\264\ufe40\266\ufe40\267\ufe40\270\ufe40\271\ufe40" +
    "\272\ufe40\300\ufe40\001\002\000\006\246\245\253\246\001" +
    "\002\000\102\002\ufeea\011\175\015\240\020\170\055\163" +
    "\100\ufeea\110\200\123\173\127\165\130\ufeea\137\155\144" +
    "\177\145\ufeea\164\174\172\171\233\ufeea\246\ufeea\251\160" +
    "\253\ufeea\256\166\257\153\260\167\261\162\262\154\263" +
    "\157\264\172\266\156\267\161\270\164\271\176\272\237" +
    "\300\242\001\002\000\020\002\ufee9\100\ufee9\130\ufee9\145" +
    "\ufee9\233\ufee9\246\ufee9\253\ufee9\001\002\000\050\002\ufee7" +
    "\041\ufee7\100\ufee7\101\ufee7\105\ufee7\106\ufee7\113\ufee7\124" +
    "\ufee7\126\ufee7\130\ufee7\142\ufee7\143\ufee7\145\ufee7\171\ufee7" +
    "\233\ufee7\236\ufee7\243\ufee7\246\ufee7\253\ufee7\001\002\000" +
    "\006\272\243\300\244\001\002\000\020\002\ufeeb\100\ufeeb" +
    "\130\ufeeb\145\ufeeb\233\ufeeb\246\ufeeb\253\ufeeb\001\002\000" +
    "\050\002\ufee5\041\ufee5\100\ufee5\101\ufee5\105\ufee5\106\ufee5" +
    "\113\ufee5\124\ufee5\126\ufee5\130\ufee5\142\ufee5\143\ufee5\145" +
    "\ufee5\171\ufee5\233\ufee5\236\ufee5\243\ufee5\246\ufee5\253\ufee5" +
    "\001\002\000\050\002\ufee8\041\ufee8\100\ufee8\101\ufee8\105" +
    "\ufee8\106\ufee8\113\ufee8\124\ufee8\126\ufee8\130\ufee8\142\ufee8" +
    "\143\ufee8\145\ufee8\171\ufee8\233\ufee8\236\ufee8\243\ufee8\246" +
    "\ufee8\253\ufee8\001\002\000\050\002\ufee6\041\ufee6\100\ufee6" +
    "\101\ufee6\105\ufee6\106\ufee6\113\ufee6\124\ufee6\126\ufee6\130" +
    "\ufee6\142\ufee6\143\ufee6\145\ufee6\171\ufee6\233\ufee6\236\ufee6" +
    "\243\ufee6\246\ufee6\253\ufee6\001\002\000\054\026\125\027" +
    "\116\063\140\066\105\107\142\120\131\137\124\140\106" +
    "\230\104\251\230\252\121\260\136\261\120\265\147\267" +
    "\130\272\233\274\101\276\111\277\107\300\103\301\102" +
    "\001\002\000\020\002\uff10\130\uff10\142\uff10\145\uff10\233" +
    "\uff10\246\uff10\253\uff10\001\002\000\020\002\ufeec\100\ufeec" +
    "\130\ufeec\145\ufeec\233\ufeec\246\ufeec\253\ufeec\001\002\000" +
    "\006\251\251\272\252\001\002\000\020\002\ufee3\100\ufee3" +
    "\130\ufee3\145\ufee3\233\ufee3\246\ufee3\253\ufee3\001\002\000" +
    "\106\002\ufe3f\011\ufe3f\015\ufe3f\020\ufe3f\055\ufe3f\100\ufe3f" +
    "\110\ufe3f\123\ufe3f\127\ufe3f\130\ufe3f\137\ufe3f\144\ufe3f\145" +
    "\ufe3f\164\ufe3f\172\ufe3f\233\ufe3f\246\ufe3f\247\253\251\ufe3f" +
    "\252\ufede\253\ufe3f\256\ufe3f\257\ufe3f\260\ufe3f\261\ufe3f\262" +
    "\ufe3f\263\ufe3f\264\ufe3f\266\ufe3f\267\ufe3f\270\ufe3f\271\ufe3f" +
    "\272\ufe3f\300\ufe3f\001\002\000\006\251\254\272\255\001" +
    "\002\000\020\002\ufee2\100\ufee2\130\ufee2\145\ufee2\233\ufee2" +
    "\246\ufee2\253\ufee2\001\002\000\154\002\ufe3e\011\ufe3e\015" +
    "\ufe3e\016\ufe3e\020\ufe3e\041\ufe3e\052\ufe3e\055\ufe3e\060\ufe3e" +
    "\061\ufe3e\074\ufe3e\100\ufe3e\101\ufe3e\105\ufe3e\106\ufe3e\110" +
    "\ufe3e\113\ufe3e\123\ufe3e\124\ufe3e\126\ufe3e\127\ufe3e\130\ufe3e" +
    "\137\ufe3e\141\ufe3e\142\ufe3e\144\ufe3e\145\ufe3e\156\ufe3e\161" +
    "\ufe3e\164\ufe3e\171\ufe3e\172\ufe3e\176\ufe3e\223\ufe3e\233\ufe3e" +
    "\242\ufe3e\243\ufe3e\246\ufe3e\251\ufe3e\253\ufe3e\256\ufe3e\257" +
    "\ufe3e\260\ufe3e\261\ufe3e\262\ufe3e\263\ufe3e\264\ufe3e\266\ufe3e" +
    "\267\ufe3e\270\ufe3e\271\ufe3e\272\ufe3e\300\ufe3e\001\002\000" +
    "\004\252\306\001\002\000\016\002\ufeb8\130\ufeb8\142\ufeb8" +
    "\145\261\233\ufeb8\253\ufeb8\001\002\000\016\002\ufeaa\130" +
    "\301\142\ufeaa\145\ufeaa\233\ufeaa\253\ufeaa\001\002\000\004" +
    "\024\262\001\002\000\052\026\125\027\116\063\140\066" +
    "\105\107\142\120\131\137\124\140\106\230\104\252\121" +
    "\260\136\261\120\265\147\267\130\272\141\274\101\276" +
    "\111\277\107\300\103\301\102\001\002\000\024\002\ufeb9" +
    "\130\ufeb9\142\ufeb9\145\ufeb9\161\ufeb9\176\ufeb9\233\ufeb9\246" +
    "\275\253\ufeb9\001\002\000\024\002\ufeb7\130\ufeb7\142\ufeb7" +
    "\145\ufeb7\161\ufeb7\176\ufeb7\233\ufeb7\246\ufeb7\253\ufeb7\001" +
    "\002\000\106\002\ufeb2\011\175\016\267\020\170\052\270" +
    "\055\163\110\200\123\173\127\165\130\ufeb2\137\155\141" +
    "\ufeb2\142\ufeb2\144\177\145\ufeb2\161\ufeb2\164\174\172\171" +
    "\176\ufeb2\233\ufeb2\246\ufeb2\251\160\253\ufeb2\256\166\257" +
    "\153\260\167\261\162\262\154\263\157\264\172\266\156" +
    "\267\161\270\164\271\176\001\002\000\026\002\ufeaf\130" +
    "\ufeaf\141\271\142\ufeaf\145\ufeaf\161\ufeaf\176\ufeaf\233\ufeaf" +
    "\246\ufeaf\253\ufeaf\001\002\000\026\002\ufeb4\130\ufeb4\141" +
    "\ufeb4\142\ufeb4\145\ufeb4\161\ufeb4\176\ufeb4\233\ufeb4\246\ufeb4" +
    "\253\ufeb4\001\002\000\026\002\ufeb3\130\ufeb3\141\ufeb3\142" +
    "\ufeb3\145\ufeb3\161\ufeb3\176\ufeb3\233\ufeb3\246\ufeb3\253\ufeb3" +
    "\001\002\000\006\072\273\125\274\001\002\000\024\002" +
    "\ufeb5\130\ufeb5\142\ufeb5\145\ufeb5\161\ufeb5\176\ufeb5\233\ufeb5" +
    "\246\ufeb5\253\ufeb5\001\002\000\024\002\ufeb1\130\ufeb1\142" +
    "\ufeb1\145\ufeb1\161\ufeb1\176\ufeb1\233\ufeb1\246\ufeb1\253\ufeb1" +
    "\001\002\000\024\002\ufeb0\130\ufeb0\142\ufeb0\145\ufeb0\161" +
    "\ufeb0\176\ufeb0\233\ufeb0\246\ufeb0\253\ufeb0\001\002\000\052" +
    "\026\125\027\116\063\140\066\105\107\142\120\131\137" +
    "\124\140\106\230\104\252\121\260\136\261\120\265\147" +
    "\267\130\272\141\274\101\276\111\277\107\300\103\301" +
    "\102\001\002\000\024\002\ufeb6\130\ufeb6\142\ufeb6\145\ufeb6" +
    "\161\ufeb6\176\ufeb6\233\ufeb6\246\ufeb6\253\ufeb6\001\002\000" +
    "\014\002\uff11\130\uff11\145\uff11\233\uff11\253\uff11\001\002" +
    "\000\016\002\ufea8\130\ufea8\142\303\145\ufea8\233\ufea8\253" +
    "\ufea8\001\002\000\052\026\125\027\116\063\140\066\105" +
    "\107\142\120\131\137\124\140\106\230\104\252\121\260" +
    "\136\261\120\265\147\267\130\272\141\274\101\276\111" +
    "\277\107\300\103\301\102\001\002\000\072\002\ufeab\011" +
    "\175\020\170\055\163\110\200\123\173\127\165\130\ufeab" +
    "\137\155\142\ufeab\144\177\145\ufeab\164\174\172\171\233" +
    "\ufeab\251\160\253\ufeab\256\166\257\153\260\167\261\162" +
    "\262\154\263\157\264\172\266\156\267\161\270\164\271" +
    "\176\001\002\000\052\026\125\027\116\063\140\066\105" +
    "\107\142\120\131\137\124\140\106\230\104\252\121\260" +
    "\136\261\120\265\147\267\130\272\141\274\101\276\111" +
    "\277\107\300\103\301\102\001\002\000\014\002\ufeac\130" +
    "\ufeac\145\ufeac\233\ufeac\253\ufeac\001\002\000\070\002\ufea9" +
    "\011\175\020\170\055\163\110\200\123\173\127\165\130" +
    "\ufea9\137\155\144\177\145\ufea9\164\174\172\171\233\ufea9" +
    "\251\160\253\ufea9\256\166\257\153\260\167\261\162\262" +
    "\154\263\157\264\172\266\156\267\161\270\164\271\176" +
    "\001\002\000\054\026\125\027\116\063\140\066\105\107" +
    "\142\120\131\137\124\140\106\230\104\251\230\252\121" +
    "\260\136\261\120\265\147\267\130\272\233\274\101\276" +
    "\111\277\107\300\103\301\102\001\002\000\006\246\245" +
    "\253\310\001\002\000\020\002\uff0f\130\uff0f\142\uff0f\145" +
    "\uff0f\233\uff0f\246\uff0f\253\uff0f\001\002\000\070\011\ufe9d" +
    "\015\ufe9d\020\ufe9d\055\ufe9d\110\ufe9d\123\ufe9d\127\ufe9d\137" +
    "\ufe9d\144\ufe9d\164\ufe9d\172\ufe9d\246\ufe9d\251\ufe9d\253\314" +
    "\256\ufe9d\257\ufe9d\260\ufe9d\261\ufe9d\262\ufe9d\263\ufe9d\264" +
    "\ufe9d\266\ufe9d\267\ufe9d\270\ufe9d\271\ufe9d\272\ufe9d\300\ufe9d" +
    "\001\002\000\070\011\ufe9e\015\ufe9e\020\ufe9e\055\ufe9e\110" +
    "\ufe9e\123\ufe9e\127\ufe9e\137\ufe9e\144\ufe9e\164\ufe9e\172\ufe9e" +
    "\246\ufe9e\251\ufe9e\253\313\256\ufe9e\257\ufe9e\260\ufe9e\261" +
    "\ufe9e\262\ufe9e\263\ufe9e\264\ufe9e\266\ufe9e\267\ufe9e\270\ufe9e" +
    "\271\ufe9e\272\ufe9e\300\ufe9e\001\002\000\154\002\ufe91\011" +
    "\ufe91\015\ufe91\016\ufe91\020\ufe91\041\ufe91\052\ufe91\055\ufe91" +
    "\060\ufe91\061\ufe91\074\ufe91\100\ufe91\101\ufe91\105\ufe91\106" +
    "\ufe91\110\ufe91\113\ufe91\123\ufe91\124\ufe91\126\ufe91\127\ufe91" +
    "\130\ufe91\137\ufe91\141\ufe91\142\ufe91\144\ufe91\145\ufe91\156" +
    "\ufe91\161\ufe91\164\ufe91\171\ufe91\172\ufe91\176\ufe91\223\ufe91" +
    "\233\ufe91\242\ufe91\243\ufe91\246\ufe91\251\ufe91\253\ufe91\256" +
    "\ufe91\257\ufe91\260\ufe91\261\ufe91\262\ufe91\263\ufe91\264\ufe91" +
    "\266\ufe91\267\ufe91\270\ufe91\271\ufe91\272\ufe91\300\ufe91\001" +
    "\002\000\154\002\ufe5c\011\ufe5c\015\ufe5c\016\ufe5c\020\ufe5c" +
    "\041\ufe5c\052\ufe5c\055\ufe5c\060\ufe5c\061\ufe5c\074\ufe5c\100" +
    "\ufe5c\101\ufe5c\105\ufe5c\106\ufe5c\110\ufe5c\113\ufe5c\123\ufe5c" +
    "\124\ufe5c\126\ufe5c\127\ufe5c\130\ufe5c\137\ufe5c\141\ufe5c\142" +
    "\ufe5c\144\ufe5c\145\ufe5c\156\ufe5c\161\ufe5c\164\ufe5c\171\ufe5c" +
    "\172\ufe5c\176\ufe5c\223\ufe5c\233\ufe5c\242\ufe5c\243\ufe5c\246" +
    "\ufe5c\251\ufe5c\253\ufe5c\256\ufe5c\257\ufe5c\260\ufe5c\261\ufe5c" +
    "\262\ufe5c\263\ufe5c\264\ufe5c\266\ufe5c\267\ufe5c\270\ufe5c\271" +
    "\ufe5c\272\ufe5c\300\ufe5c\001\002\000\016\002\ufeaa\130\301" +
    "\142\ufeaa\145\ufeaa\233\ufeaa\253\ufeaa\001\002\000\014\002" +
    "\uff12\130\uff12\145\uff12\233\uff12\253\uff12\001\002\000\062" +
    "\026\ufec4\027\ufec4\063\ufec4\066\ufec4\107\ufec4\120\ufec4\137" +
    "\ufec4\140\ufec4\212\322\230\ufec4\251\ufec4\252\ufec4\254\324" +
    "\260\ufec4\261\ufec4\265\ufec4\267\ufec4\272\ufec4\274\ufec4\275" +
    "\321\276\ufec4\277\ufec4\300\ufec4\301\ufec4\001\002\000\062" +
    "\026\ufec4\027\ufec4\063\ufec4\066\ufec4\107\ufec4\120\ufec4\137" +
    "\ufec4\140\ufec4\212\322\230\ufec4\251\ufec4\252\ufec4\254\324" +
    "\260\ufec4\261\ufec4\265\ufec4\267\ufec4\272\ufec4\274\ufec4\275" +
    "\321\276\ufec4\277\ufec4\300\ufec4\301\ufec4\001\002\000\064" +
    "\002\ufec7\026\ufec7\027\ufec7\063\ufec7\066\ufec7\107\ufec7\120" +
    "\ufec7\137\ufec7\140\ufec7\201\ufec7\230\ufec7\237\ufec7\244\ufec7" +
    "\251\ufec7\252\ufec7\260\ufec7\261\ufec7\265\ufec7\267\ufec7\272" +
    "\ufec7\274\ufec7\276\ufec7\277\ufec7\300\ufec7\301\ufec7\001\002" +
    "\000\064\002\ufec6\026\ufec6\027\ufec6\063\ufec6\066\ufec6\107" +
    "\ufec6\120\ufec6\137\ufec6\140\ufec6\201\ufec6\230\ufec6\237\ufec6" +
    "\244\ufec6\251\ufec6\252\ufec6\260\ufec6\261\ufec6\265\ufec6\267" +
    "\ufec6\272\ufec6\274\ufec6\276\ufec6\277\ufec6\300\ufec6\301\ufec6" +
    "\001\002\000\054\026\125\027\116\063\140\066\105\107" +
    "\142\120\131\137\124\140\106\230\104\251\230\252\121" +
    "\260\136\261\120\265\147\267\130\272\233\274\101\276" +
    "\111\277\107\300\103\301\102\001\002\000\004\272\326" +
    "\001\002\000\006\246\327\255\330\001\002\000\010\246" +
    "\ufec3\253\ufec3\255\ufec3\001\002\000\004\272\331\001\002" +
    "\000\064\002\ufec5\026\ufec5\027\ufec5\063\ufec5\066\ufec5\107" +
    "\ufec5\120\ufec5\137\ufec5\140\ufec5\201\ufec5\230\ufec5\237\ufec5" +
    "\244\ufec5\251\ufec5\252\ufec5\260\ufec5\261\ufec5\265\ufec5\267" +
    "\ufec5\272\ufec5\274\ufec5\276\ufec5\277\ufec5\300\ufec5\301\ufec5" +
    "\001\002\000\010\246\ufec2\253\ufec2\255\ufec2\001\002\000" +
    "\020\002\ufef3\100\ufef3\130\ufef3\145\ufef3\233\ufef3\246\245" +
    "\253\ufef3\001\002\000\054\026\125\027\116\063\140\066" +
    "\105\107\142\120\131\137\124\140\106\230\104\251\230" +
    "\252\121\260\136\261\120\265\147\267\130\272\233\274" +
    "\101\276\111\277\107\300\103\301\102\001\002\000\020" +
    "\002\ufef1\100\ufef1\130\ufef1\145\ufef1\233\ufef1\246\245\253" +
    "\ufef1\001\002\000\054\026\125\027\116\063\140\066\105" +
    "\107\142\120\131\137\124\140\106\230\104\251\230\252" +
    "\121\260\136\261\120\265\147\267\130\272\233\274\101" +
    "\276\111\277\107\300\103\301\102\001\002\000\020\002" +
    "\ufef2\100\ufef2\130\ufef2\145\ufef2\233\ufef2\246\245\253\ufef2" +
    "\001\002\000\004\253\340\001\002\000\014\002\uff18\130" +
    "\uff18\145\uff18\233\uff18\253\uff18\001\002\000\006\252\361" +
    "\272\360\001\002\000\024\002\ufebe\105\ufebe\106\ufebe\130" +
    "\ufebe\142\ufebe\145\ufebe\233\ufebe\243\344\253\ufebe\001\002" +
    "\000\022\002\ufebc\105\347\106\ufebc\130\ufebc\142\ufebc\145" +
    "\ufebc\233\ufebc\253\ufebc\001\002\000\052\026\125\027\116" +
    "\063\140\066\105\107\142\120\131\137\124\140\106\230" +
    "\104\252\121\260\136\261\120\265\147\267\130\272\141" +
    "\274\101\276\111\277\107\300\103\301\102\001\002\000" +
    "\076\002\ufebf\011\175\020\170\055\163\105\ufebf\106\ufebf" +
    "\110\200\123\173\127\165\130\ufebf\137\155\142\ufebf\144" +
    "\177\145\ufebf\164\174\172\171\233\ufebf\251\160\253\ufebf" +
    "\256\166\257\153\260\167\261\162\262\154\263\157\264" +
    "\172\266\156\267\161\270\164\271\176\001\002\000\020" +
    "\002\ufeba\106\353\130\ufeba\142\ufeba\145\ufeba\233\ufeba\253" +
    "\ufeba\001\002\000\004\024\350\001\002\000\052\026\125" +
    "\027\116\063\140\066\105\107\142\120\131\137\124\140" +
    "\106\230\104\252\121\260\136\261\120\265\147\267\130" +
    "\272\141\274\101\276\111\277\107\300\103\301\102\001" +
    "\002\000\022\002\ufebd\106\ufebd\130\ufebd\142\ufebd\145\ufebd" +
    "\233\ufebd\246\210\253\ufebd\001\002\000\016\002\ufeb8\130" +
    "\ufeb8\142\ufeb8\145\261\233\ufeb8\253\ufeb8\001\002\000\052" +
    "\026\125\027\116\063\140\066\105\107\142\120\131\137" +
    "\124\140\106\230\104\252\121\260\136\261\120\265\147" +
    "\267\130\272\141\274\101\276\111\277\107\300\103\301" +
    "\102\001\002\000\072\002\ufebb\011\175\020\170\055\163" +
    "\110\200\123\173\127\165\130\ufebb\137\155\142\ufebb\144" +
    "\177\145\ufebb\164\174\172\171\233\ufebb\251\160\253\ufebb" +
    "\256\166\257\153\260\167\261\162\262\154\263\157\264" +
    "\172\266\156\267\161\270\164\271\176\001\002\000\016" +
    "\002\ufeaa\130\301\142\ufeaa\145\ufeaa\233\ufeaa\253\ufeaa\001" +
    "\002\000\014\002\ufef4\130\ufef4\145\ufef4\233\ufef4\253\ufef4" +
    "\001\002\000\054\002\ufed5\015\240\041\ufed5\101\ufed5\105" +
    "\ufed5\106\ufed5\113\ufed5\124\ufed5\126\ufed5\130\ufed5\142\ufed5" +
    "\143\ufed5\145\ufed5\171\ufed5\233\ufed5\236\ufed5\243\ufed5\246" +
    "\ufed5\253\ufed5\272\237\300\242\001\002\000\140\002\ufee1" +
    "\004\ufee1\015\ufee1\025\ufee1\030\ufee1\036\ufee1\041\ufee1\057" +
    "\ufee1\100\ufee1\101\ufee1\105\ufee1\106\ufee1\113\ufee1\124\ufee1" +
    "\126\ufee1\127\ufee1\130\ufee1\133\ufee1\142\ufee1\143\ufee1\145" +
    "\ufee1\153\ufee1\154\ufee1\165\ufee1\166\ufee1\171\ufee1\175\ufee1" +
    "\201\ufee1\206\ufee1\211\ufee1\212\ufee1\220\ufee1\227\ufee1\232" +
    "\ufee1\233\ufee1\236\ufee1\237\ufee1\243\ufee1\244\ufee1\246\ufee1" +
    "\247\u011b\252\ufee1\253\ufee1\254\ufee1\272\ufee1\275\ufee1\300" +
    "\ufee1\001\002\000\012\201\uff22\237\uff22\244\013\252\uff22" +
    "\001\002\000\042\002\ufedd\041\366\101\365\105\ufedd\106" +
    "\ufedd\113\370\124\ufeca\126\367\130\ufedd\142\ufedd\145\ufedd" +
    "\171\373\233\ufedd\243\ufedd\246\364\253\ufedd\001\002\000" +
    "\042\002\ufedc\041\ufedc\101\ufedc\105\ufedc\106\ufedc\113\ufedc" +
    "\124\ufedc\126\ufedc\130\ufedc\142\ufedc\145\ufedc\171\ufedc\233" +
    "\ufedc\243\ufedc\246\ufedc\253\ufedc\001\002\000\006\252\361" +
    "\272\360\001\002\000\006\124\ufec8\146\374\001\002\000" +
    "\004\124\u0112\001\002\000\012\012\u010c\124\ufec8\146\374" +
    "\202\u010e\001\002\000\004\124\ufecb\001\002\000\004\124" +
    "\u010b\001\002\000\014\212\322\252\ufec4\254\324\272\ufec4" +
    "\275\321\001\002\000\012\012\375\124\ufec8\146\374\202" +
    "\377\001\002\000\004\124\ufec9\001\002\000\004\124\u0102" +
    "\001\002\000\004\124\u0101\001\002\000\004\124\u0100\001" +
    "\002\000\014\212\ufece\252\ufece\254\ufece\272\ufece\275\ufece" +
    "\001\002\000\014\212\ufed1\252\ufed1\254\ufed1\272\ufed1\275" +
    "\ufed1\001\002\000\014\212\ufecc\252\ufecc\254\ufecc\272\ufecc" +
    "\275\ufecc\001\002\000\006\252\361\272\360\001\002\000" +
    "\046\002\ufed9\041\ufed9\101\ufed9\105\ufed9\106\ufed9\113\ufed9" +
    "\124\ufed9\126\ufed9\130\ufed9\142\ufed9\143\u0106\145\ufed9\171" +
    "\ufed9\233\ufed9\236\u0105\243\ufed9\246\ufed9\253\ufed9\001\002" +
    "\000\004\252\u0108\001\002\000\052\026\125\027\116\063" +
    "\140\066\105\107\142\120\131\137\124\140\106\230\104" +
    "\252\121\260\136\261\120\265\147\267\130\272\141\274" +
    "\101\276\111\277\107\300\103\301\102\001\002\000\116" +
    "\002\ufed8\011\175\020\170\041\ufed8\055\163\101\ufed8\105" +
    "\ufed8\106\ufed8\110\200\113\ufed8\123\173\124\ufed8\126\ufed8" +
    "\127\165\130\ufed8\137\155\142\ufed8\144\177\145\ufed8\164" +
    "\174\171\ufed8\172\171\233\ufed8\243\ufed8\246\ufed8\251\160" +
    "\253\ufed8\256\166\257\153\260\167\261\162\262\154\263" +
    "\157\264\172\266\156\267\161\270\164\271\176\001\002" +
    "\000\004\272\326\001\002\000\006\246\327\253\u010a\001" +
    "\002\000\042\002\ufed7\041\ufed7\101\ufed7\105\ufed7\106\ufed7" +
    "\113\ufed7\124\ufed7\126\ufed7\130\ufed7\142\ufed7\145\ufed7\171" +
    "\ufed7\233\ufed7\243\ufed7\246\ufed7\253\ufed7\001\002\000\014" +
    "\212\ufed3\252\ufed3\254\ufed3\272\ufed3\275\ufed3\001\002\000" +
    "\004\124\u0111\001\002\000\004\124\u0110\001\002\000\004" +
    "\124\u010f\001\002\000\014\212\ufecf\252\ufecf\254\ufecf\272" +
    "\ufecf\275\ufecf\001\002\000\014\212\ufed2\252\ufed2\254\ufed2" +
    "\272\ufed2\275\ufed2\001\002\000\014\212\ufecd\252\ufecd\254" +
    "\ufecd\272\ufecd\275\ufecd\001\002\000\014\212\322\252\ufec4" +
    "\254\324\272\ufec4\275\321\001\002\000\006\252\361\272" +
    "\360\001\002\000\042\002\ufeda\041\ufeda\101\ufeda\105\ufeda" +
    "\106\ufeda\113\ufeda\124\ufeda\126\ufeda\130\ufeda\142\ufeda\145" +
    "\ufeda\171\ufeda\233\ufeda\243\ufeda\246\ufeda\253\ufeda\001\002" +
    "\000\004\124\u0116\001\002\000\014\212\ufed0\252\ufed0\254" +
    "\ufed0\272\ufed0\275\ufed0\001\002\000\042\002\ufedb\041\ufedb" +
    "\101\ufedb\105\ufedb\106\ufedb\113\ufedb\124\ufedb\126\ufedb\130" +
    "\ufedb\142\ufedb\145\ufedb\171\ufedb\233\ufedb\243\ufedb\246\ufedb" +
    "\253\ufedb\001\002\000\004\253\u0119\001\002\000\010\015" +
    "\240\272\237\300\242\001\002\000\046\002\ufed4\041\ufed4" +
    "\101\ufed4\105\ufed4\106\ufed4\113\ufed4\124\ufed4\126\ufed4\130" +
    "\ufed4\142\ufed4\143\ufed4\145\ufed4\171\ufed4\233\ufed4\236\ufed4" +
    "\243\ufed4\246\ufed4\253\ufed4\001\002\000\004\272\u011c\001" +
    "\002\000\136\002\ufee0\004\ufee0\015\ufee0\025\ufee0\030\ufee0" +
    "\036\ufee0\041\ufee0\057\ufee0\100\ufee0\101\ufee0\105\ufee0\106" +
    "\ufee0\113\ufee0\124\ufee0\126\ufee0\127\ufee0\130\ufee0\133\ufee0" +
    "\142\ufee0\143\ufee0\145\ufee0\153\ufee0\154\ufee0\165\ufee0\166" +
    "\ufee0\171\ufee0\175\ufee0\201\ufee0\206\ufee0\211\ufee0\212\ufee0" +
    "\220\ufee0\227\ufee0\232\ufee0\233\ufee0\236\ufee0\237\ufee0\243" +
    "\ufee0\244\ufee0\246\ufee0\252\ufee0\253\ufee0\254\ufee0\272\ufee0" +
    "\275\ufee0\300\ufee0\001\002\000\046\002\ufed6\041\ufed6\101" +
    "\ufed6\105\ufed6\106\ufed6\113\ufed6\124\ufed6\126\ufed6\130\ufed6" +
    "\142\ufed6\143\ufed6\145\ufed6\171\ufed6\233\ufed6\236\ufed6\243" +
    "\ufed6\246\ufed6\253\ufed6\001\002\000\014\006\u012c\054\u012d" +
    "\201\uff15\237\uff15\252\uff15\001\002\000\004\024\u0124\001" +
    "\002\000\052\026\125\027\116\063\140\066\105\107\142" +
    "\120\131\137\124\140\106\230\104\252\121\260\136\261" +
    "\120\265\147\267\130\272\141\274\101\276\111\277\107" +
    "\300\103\301\102\001\002\000\010\201\223\237\224\252" +
    "\222\001\002\000\014\002\uff16\130\uff16\145\uff16\233\uff16" +
    "\253\uff16\001\002\000\062\002\uff1c\011\175\020\170\055" +
    "\163\110\200\123\173\127\165\137\155\144\177\164\174" +
    "\172\171\251\160\253\uff1c\256\166\257\153\260\167\261" +
    "\162\262\154\263\157\264\172\266\156\267\161\270\164" +
    "\271\176\001\002\000\052\026\125\027\116\063\140\066" +
    "\105\107\142\120\131\137\124\140\106\230\104\252\121" +
    "\260\136\261\120\265\147\267\130\272\141\274\101\276" +
    "\111\277\107\300\103\301\102\001\002\000\014\002\ufead" +
    "\130\u0128\142\u0127\246\275\253\ufead\001\002\000\006\002" +
    "\uff1d\253\uff1d\001\002\000\052\026\125\027\116\063\140" +
    "\066\105\107\142\120\131\137\124\140\106\230\104\252" +
    "\121\260\136\261\120\265\147\267\130\272\141\274\101" +
    "\276\111\277\107\300\103\301\102\001\002\000\052\026" +
    "\125\027\116\063\140\066\105\107\142\120\131\137\124" +
    "\140\106\230\104\252\121\260\136\261\120\265\147\267" +
    "\130\272\141\274\101\276\111\277\107\300\103\301\102" +
    "\001\002\000\064\002\ufead\011\175\020\170\055\163\110" +
    "\200\123\173\127\165\137\155\142\u0127\144\177\164\174" +
    "\172\171\251\160\253\ufead\256\166\257\153\260\167\261" +
    "\162\262\154\263\157\264\172\266\156\267\161\270\164" +
    "\271\176\001\002\000\006\002\uff1b\253\uff1b\001\002\000" +
    "\062\002\ufeae\011\175\020\170\055\163\110\200\123\173" +
    "\127\165\137\155\144\177\164\174\172\171\251\160\253" +
    "\ufeae\256\166\257\153\260\167\261\162\262\154\263\157" +
    "\264\172\266\156\267\161\270\164\271\176\001\002\000" +
    "\010\201\uff13\237\uff13\252\uff13\001\002\000\010\201\uff14" +
    "\237\uff14\252\uff14\001\002\000\154\002\ufe46\011\ufe46\015" +
    "\ufe46\016\ufe46\020\ufe46\041\ufe46\052\ufe46\055\ufe46\060\ufe46" +
    "\061\ufe46\074\ufe46\100\ufe46\101\ufe46\105\ufe46\106\ufe46\110" +
    "\ufe46\113\ufe46\123\ufe46\124\ufe46\126\ufe46\127\ufe46\130\ufe46" +
    "\137\ufe46\141\ufe46\142\ufe46\144\ufe46\145\ufe46\156\ufe46\161" +
    "\ufe46\164\ufe46\171\ufe46\172\ufe46\176\ufe46\223\ufe46\233\ufe46" +
    "\242\ufe46\243\ufe46\246\ufe46\251\ufe46\253\ufe46\256\ufe46\257" +
    "\ufe46\260\ufe46\261\ufe46\262\ufe46\263\ufe46\264\ufe46\266\ufe46" +
    "\267\ufe46\270\ufe46\271\ufe46\272\ufe46\300\ufe46\001\002\000" +
    "\154\002\ufe43\011\175\015\ufe43\016\ufe43\020\170\041\ufe43" +
    "\052\ufe43\055\163\060\ufe43\061\ufe43\074\ufe43\100\ufe43\101" +
    "\ufe43\105\ufe43\106\ufe43\110\200\113\ufe43\123\173\124\ufe43" +
    "\126\ufe43\127\165\130\ufe43\137\155\141\ufe43\142\ufe43\144" +
    "\ufe43\145\ufe43\156\ufe43\161\ufe43\164\174\171\ufe43\172\171" +
    "\176\ufe43\223\ufe43\233\ufe43\242\ufe43\243\ufe43\246\ufe43\251" +
    "\160\253\ufe43\256\166\257\153\260\167\261\162\262\154" +
    "\263\157\264\172\266\156\267\161\270\164\271\176\272" +
    "\ufe43\300\ufe43\001\002\000\052\026\125\027\116\063\140" +
    "\066\105\107\142\120\131\137\124\140\106\230\104\252" +
    "\121\260\136\261\120\265\147\267\130\272\141\274\101" +
    "\276\111\277\107\300\103\301\102\001\002\000\154\002" +
    "\ufe55\011\ufe55\015\ufe55\016\ufe55\020\ufe55\041\ufe55\052\ufe55" +
    "\055\163\060\ufe55\061\ufe55\074\ufe55\100\ufe55\101\ufe55\105" +
    "\ufe55\106\ufe55\110\ufe55\113\ufe55\123\ufe55\124\ufe55\126\ufe55" +
    "\127\ufe55\130\ufe55\137\ufe55\141\ufe55\142\ufe55\144\ufe55\145" +
    "\ufe55\156\ufe55\161\ufe55\164\ufe55\171\ufe55\172\ufe55\176\ufe55" +
    "\223\ufe55\233\ufe55\242\ufe55\243\ufe55\246\ufe55\251\160\253" +
    "\ufe55\256\166\257\153\260\167\261\162\262\154\263\157" +
    "\264\172\266\ufe55\267\ufe55\270\ufe55\271\ufe55\272\ufe55\300" +
    "\ufe55\001\002\000\154\002\ufe57\011\ufe57\015\ufe57\016\ufe57" +
    "\020\ufe57\041\ufe57\052\ufe57\055\163\060\ufe57\061\ufe57\074" +
    "\ufe57\100\ufe57\101\ufe57\105\ufe57\106\ufe57\110\ufe57\113\ufe57" +
    "\123\ufe57\124\ufe57\126\ufe57\127\ufe57\130\ufe57\137\ufe57\141" +
    "\ufe57\142\ufe57\144\ufe57\145\ufe57\156\ufe57\161\ufe57\164\ufe57" +
    "\171\ufe57\172\ufe57\176\ufe57\223\ufe57\233\ufe57\242\ufe57\243" +
    "\ufe57\246\ufe57\251\160\253\ufe57\256\166\257\153\260\167" +
    "\261\162\262\154\263\157\264\172\266\ufe57\267\ufe57\270" +
    "\ufe57\271\ufe57\272\ufe57\300\ufe57\001\002\000\154\002\ufe44" +
    "\011\ufe44\015\ufe44\016\ufe44\020\170\041\ufe44\052\ufe44\055" +
    "\163\060\ufe44\061\ufe44\074\ufe44\100\ufe44\101\ufe44\105\ufe44" +
    "\106\ufe44\110\200\113\ufe44\123\173\124\ufe44\126\ufe44\127" +
    "\165\130\ufe44\137\155\141\ufe44\142\ufe44\144\ufe44\145\ufe44" +
    "\156\ufe44\161\ufe44\164\174\171\ufe44\172\171\176\ufe44\223" +
    "\ufe44\233\ufe44\242\ufe44\243\ufe44\246\ufe44\251\160\253\ufe44" +
    "\256\166\257\153\260\167\261\162\262\154\263\157\264" +
    "\172\266\156\267\161\270\164\271\176\272\ufe44\300\ufe44" +
    "\001\002\000\154\002\ufe52\011\ufe52\015\ufe52\016\ufe52\020" +
    "\ufe52\041\ufe52\052\ufe52\055\163\060\ufe52\061\ufe52\074\ufe52" +
    "\100\ufe52\101\ufe52\105\ufe52\106\ufe52\110\ufe52\113\ufe52\123" +
    "\ufe52\124\ufe52\126\ufe52\127\ufe52\130\ufe52\137\ufe52\141\ufe52" +
    "\142\ufe52\144\ufe52\145\ufe52\156\ufe52\161\ufe52\164\ufe52\171" +
    "\ufe52\172\ufe52\176\ufe52\223\ufe52\233\ufe52\242\ufe52\243\ufe52" +
    "\246\ufe52\251\160\253\ufe52\256\166\257\153\260\167\261" +
    "\162\262\154\263\157\264\172\266\156\267\ufe52\270\164" +
    "\271\176\272\ufe52\300\ufe52\001\002\000\154\002\ufe64\011" +
    "\ufe64\015\ufe64\016\ufe64\020\ufe64\041\ufe64\052\ufe64\055\ufe64" +
    "\060\ufe64\061\ufe64\074\ufe64\100\ufe64\101\ufe64\105\ufe64\106" +
    "\ufe64\110\ufe64\113\ufe64\123\ufe64\124\ufe64\126\ufe64\127\ufe64" +
    "\130\ufe64\137\ufe64\141\ufe64\142\ufe64\144\ufe64\145\ufe64\156" +
    "\ufe64\161\ufe64\164\ufe64\171\ufe64\172\ufe64\176\ufe64\223\ufe64" +
    "\233\ufe64\242\ufe64\243\ufe64\246\ufe64\251\ufe64\253\ufe64\256" +
    "\ufe64\257\ufe64\260\ufe64\261\ufe64\262\ufe64\263\ufe64\264\ufe64" +
    "\266\ufe64\267\ufe64\270\ufe64\271\ufe64\272\ufe64\300\ufe64\001" +
    "\002\000\004\140\u0137\001\002\000\154\002\ufe63\011\ufe63" +
    "\015\ufe63\016\ufe63\020\ufe63\041\ufe63\052\ufe63\055\ufe63\060" +
    "\ufe63\061\ufe63\074\ufe63\100\ufe63\101\ufe63\105\ufe63\106\ufe63" +
    "\110\ufe63\113\ufe63\123\ufe63\124\ufe63\126\ufe63\127\ufe63\130" +
    "\ufe63\137\ufe63\141\ufe63\142\ufe63\144\ufe63\145\ufe63\156\ufe63" +
    "\161\ufe63\164\ufe63\171\ufe63\172\ufe63\176\ufe63\223\ufe63\233" +
    "\ufe63\242\ufe63\243\ufe63\246\ufe63\251\ufe63\253\ufe63\256\ufe63" +
    "\257\ufe63\260\ufe63\261\ufe63\262\ufe63\263\ufe63\264\ufe63\266" +
    "\ufe63\267\ufe63\270\ufe63\271\ufe63\272\ufe63\300\ufe63\001\002" +
    "\000\154\002\ufe77\011\ufe77\015\ufe77\016\ufe77\020\ufe77\041" +
    "\ufe77\052\ufe77\055\ufe77\060\ufe77\061\ufe77\074\ufe77\100\ufe77" +
    "\101\ufe77\105\ufe77\106\ufe77\110\ufe77\113\ufe77\123\ufe77\124" +
    "\ufe77\126\ufe77\127\ufe77\130\ufe77\137\ufe77\141\ufe77\142\ufe77" +
    "\144\ufe77\145\ufe77\156\ufe77\161\ufe77\164\ufe77\171\ufe77\172" +
    "\ufe77\176\ufe77\223\ufe77\233\ufe77\242\ufe77\243\ufe77\246\ufe77" +
    "\251\ufe77\253\ufe77\256\ufe77\257\ufe77\260\ufe77\261\ufe77\262" +
    "\ufe77\263\ufe77\264\ufe77\266\ufe77\267\ufe77\270\ufe77\271\ufe77" +
    "\272\ufe77\300\ufe77\001\002\000\154\002\ufe53\011\ufe53\015" +
    "\ufe53\016\ufe53\020\ufe53\041\ufe53\052\ufe53\055\163\060\ufe53" +
    "\061\ufe53\074\ufe53\100\ufe53\101\ufe53\105\ufe53\106\ufe53\110" +
    "\ufe53\113\ufe53\123\ufe53\124\ufe53\126\ufe53\127\ufe53\130\ufe53" +
    "\137\ufe53\141\ufe53\142\ufe53\144\ufe53\145\ufe53\156\ufe53\161" +
    "\ufe53\164\ufe53\171\ufe53\172\ufe53\176\ufe53\223\ufe53\233\ufe53" +
    "\242\ufe53\243\ufe53\246\ufe53\251\160\253\ufe53\256\166\257" +
    "\153\260\167\261\162\262\154\263\157\264\172\266\156" +
    "\267\ufe53\270\164\271\176\272\ufe53\300\ufe53\001\002\000" +
    "\056\011\u013f\020\ufe9d\055\ufe9d\110\ufe9d\123\ufe9d\127\ufe9d" +
    "\137\ufe9d\144\ufe9d\164\ufe9d\172\ufe9d\251\ufe9d\256\ufe9d\257" +
    "\ufe9d\260\ufe9d\261\ufe9d\262\ufe9d\263\ufe9d\264\ufe9d\266\ufe9d" +
    "\267\ufe9d\270\ufe9d\271\ufe9d\001\002\000\056\011\175\020" +
    "\170\055\163\110\200\123\173\127\165\137\155\144\177" +
    "\164\174\172\171\251\160\256\166\257\153\260\167\261" +
    "\162\262\154\263\157\264\172\266\156\267\161\270\164" +
    "\271\176\001\002\000\056\011\u013d\020\ufe9e\055\ufe9e\110" +
    "\ufe9e\123\ufe9e\127\ufe9e\137\ufe9e\144\ufe9e\164\ufe9e\172\ufe9e" +
    "\251\ufe9e\256\ufe9e\257\ufe9e\260\ufe9e\261\ufe9e\262\ufe9e\263" +
    "\ufe9e\264\ufe9e\266\ufe9e\267\ufe9e\270\ufe9e\271\ufe9e\001\002" +
    "\000\052\026\125\027\116\063\140\066\105\107\142\120" +
    "\131\137\124\140\106\230\104\252\121\260\136\261\120" +
    "\265\147\267\130\272\141\274\101\276\111\277\107\300" +
    "\103\301\102\001\002\000\154\002\ufe4e\011\ufe4e\015\ufe4e" +
    "\016\ufe4e\020\170\041\ufe4e\052\ufe4e\055\163\060\ufe4e\061" +
    "\ufe4e\074\ufe4e\100\ufe4e\101\ufe4e\105\ufe4e\106\ufe4e\110\200" +
    "\113\ufe4e\123\173\124\ufe4e\126\ufe4e\127\165\130\ufe4e\137" +
    "\155\141\ufe4e\142\ufe4e\144\ufe4e\145\ufe4e\156\ufe4e\161\ufe4e" +
    "\164\174\171\ufe4e\172\171\176\ufe4e\223\ufe4e\233\ufe4e\242" +
    "\ufe4e\243\ufe4e\246\ufe4e\251\160\253\ufe4e\256\166\257\153" +
    "\260\167\261\162\262\154\263\157\264\172\266\156\267" +
    "\161\270\164\271\176\272\ufe4e\300\ufe4e\001\002\000\052" +
    "\026\125\027\116\063\140\066\105\107\142\120\131\137" +
    "\124\140\106\230\104\252\121\260\136\261\120\265\147" +
    "\267\130\272\141\274\101\276\111\277\107\300\103\301" +
    "\102\001\002\000\154\002\ufe4d\011\ufe4d\015\ufe4d\016\ufe4d" +
    "\020\170\041\ufe4d\052\ufe4d\055\163\060\ufe4d\061\ufe4d\074" +
    "\ufe4d\100\ufe4d\101\ufe4d\105\ufe4d\106\ufe4d\110\200\113\ufe4d" +
    "\123\173\124\ufe4d\126\ufe4d\127\165\130\ufe4d\137\155\141" +
    "\ufe4d\142\ufe4d\144\ufe4d\145\ufe4d\156\ufe4d\161\ufe4d\164\174" +
    "\171\ufe4d\172\171\176\ufe4d\223\ufe4d\233\ufe4d\242\ufe4d\243" +
    "\ufe4d\246\ufe4d\251\160\253\ufe4d\256\166\257\153\260\167" +
    "\261\162\262\154\263\157\264\172\266\156\267\161\270" +
    "\164\271\176\272\ufe4d\300\ufe4d\001\002\000\052\026\125" +
    "\027\116\063\140\066\105\107\142\120\131\137\124\140" +
    "\106\230\104\252\121\260\136\261\120\265\147\267\130" +
    "\272\141\274\101\276\111\277\107\300\103\301\102\001" +
    "\002\000\154\002\ufe7b\011\ufe7b\015\ufe7b\016\ufe7b\020\ufe7b" +
    "\041\ufe7b\052\ufe7b\055\163\060\ufe7b\061\ufe7b\074\ufe7b\100" +
    "\ufe7b\101\ufe7b\105\ufe7b\106\ufe7b\110\ufe7b\113\ufe7b\123\ufe7b" +
    "\124\ufe7b\126\ufe7b\127\ufe7b\130\ufe7b\137\ufe7b\141\ufe7b\142" +
    "\ufe7b\144\ufe7b\145\ufe7b\156\ufe7b\161\ufe7b\164\ufe7b\171\ufe7b" +
    "\172\ufe7b\176\ufe7b\223\ufe7b\233\ufe7b\242\ufe7b\243\ufe7b\246" +
    "\ufe7b\251\160\253\ufe7b\256\166\257\153\260\ufe7b\261\ufe7b" +
    "\262\154\263\157\264\172\266\ufe7b\267\ufe7b\270\ufe7b\271" +
    "\ufe7b\272\ufe7b\300\ufe7b\001\002\000\060\011\175\020\170" +
    "\055\163\110\200\123\173\127\165\137\155\144\177\164" +
    "\174\172\171\251\160\256\166\257\153\260\167\261\162" +
    "\262\154\263\157\264\172\266\156\267\161\270\164\271" +
    "\176\272\u0144\001\002\000\154\002\ufe74\011\ufe74\015\ufe74" +
    "\016\ufe74\020\ufe74\041\ufe74\052\ufe74\055\ufe74\060\ufe74\061" +
    "\ufe74\074\ufe74\100\ufe74\101\ufe74\105\ufe74\106\ufe74\110\ufe74" +
    "\113\ufe74\123\ufe74\124\ufe74\126\ufe74\127\ufe74\130\ufe74\137" +
    "\ufe74\141\ufe74\142\ufe74\144\ufe74\145\ufe74\156\ufe74\161\ufe74" +
    "\164\ufe74\171\ufe74\172\ufe74\176\ufe74\223\ufe74\233\ufe74\242" +
    "\ufe74\243\ufe74\246\ufe74\251\ufe74\253\ufe74\256\ufe74\257\ufe74" +
    "\260\ufe74\261\ufe74\262\ufe74\263\ufe74\264\ufe74\266\ufe74\267" +
    "\ufe74\270\ufe74\271\ufe74\272\ufe74\300\ufe74\001\002\000\052" +
    "\026\125\027\116\063\140\066\105\107\142\120\131\137" +
    "\124\140\106\230\104\252\121\260\136\261\120\265\147" +
    "\267\130\272\141\274\101\276\111\277\107\300\103\301" +
    "\102\001\002\000\154\002\ufe75\011\ufe75\015\ufe75\016\ufe75" +
    "\020\ufe75\041\ufe75\052\ufe75\055\163\060\ufe75\061\ufe75\074" +
    "\ufe75\100\ufe75\101\ufe75\105\ufe75\106\ufe75\110\ufe75\113\ufe75" +
    "\123\ufe75\124\ufe75\126\ufe75\127\ufe75\130\ufe75\137\ufe75\141" +
    "\ufe75\142\ufe75\144\ufe75\145\ufe75\156\ufe75\161\ufe75\164\ufe75" +
    "\171\ufe75\172\ufe75\176\ufe75\223\ufe75\233\ufe75\242\ufe75\243" +
    "\ufe75\246\ufe75\251\160\253\ufe75\256\166\257\153\260\ufe75" +
    "\261\ufe75\262\154\263\157\264\172\266\ufe75\267\ufe75\270" +
    "\ufe75\271\ufe75\272\ufe75\300\ufe75\001\002\000\154\002\ufe7e" +
    "\011\ufe7e\015\ufe7e\016\ufe7e\020\ufe7e\041\ufe7e\052\ufe7e\055" +
    "\ufe7e\060\ufe7e\061\ufe7e\074\ufe7e\100\ufe7e\101\ufe7e\105\ufe7e" +
    "\106\ufe7e\110\ufe7e\113\ufe7e\123\ufe7e\124\ufe7e\126\ufe7e\127" +
    "\ufe7e\130\ufe7e\137\ufe7e\141\ufe7e\142\ufe7e\144\ufe7e\145\ufe7e" +
    "\156\ufe7e\161\ufe7e\164\ufe7e\171\ufe7e\172\ufe7e\176\ufe7e\223" +
    "\ufe7e\233\ufe7e\242\ufe7e\243\ufe7e\246\ufe7e\251\ufe7e\253\ufe7e" +
    "\256\ufe7e\257\ufe7e\260\ufe7e\261\ufe7e\262\154\263\157\264" +
    "\172\266\ufe7e\267\ufe7e\270\ufe7e\271\ufe7e\272\ufe7e\300\ufe7e" +
    "\001\002\000\154\002\ufe54\011\ufe54\015\ufe54\016\ufe54\020" +
    "\ufe54\041\ufe54\052\ufe54\055\163\060\ufe54\061\ufe54\074\ufe54" +
    "\100\ufe54\101\ufe54\105\ufe54\106\ufe54\110\ufe54\113\ufe54\123" +
    "\ufe54\124\ufe54\126\ufe54\127\ufe54\130\ufe54\137\ufe54\141\ufe54" +
    "\142\ufe54\144\ufe54\145\ufe54\156\ufe54\161\ufe54\164\ufe54\171" +
    "\ufe54\172\ufe54\176\ufe54\223\ufe54\233\ufe54\242\ufe54\243\ufe54" +
    "\246\ufe54\251\160\253\ufe54\256\166\257\153\260\167\261" +
    "\162\262\154\263\157\264\172\266\156\267\ufe54\270\164" +
    "\271\176\272\ufe54\300\ufe54\001\002\000\052\026\125\027" +
    "\116\063\140\066\105\107\142\120\131\137\124\140\106" +
    "\230\104\252\121\260\136\261\120\265\147\267\130\272" +
    "\141\274\101\276\111\277\107\300\103\301\102\001\002" +
    "\000\052\026\125\027\116\063\140\066\105\107\142\120" +
    "\131\137\124\140\106\230\104\252\121\260\136\261\120" +
    "\265\147\267\130\272\141\274\101\276\111\277\107\300" +
    "\103\301\102\001\002\000\154\002\ufe56\011\ufe56\015\ufe56" +
    "\016\ufe56\020\ufe56\041\ufe56\052\ufe56\055\163\060\ufe56\061" +
    "\ufe56\074\ufe56\100\ufe56\101\ufe56\105\ufe56\106\ufe56\110\ufe56" +
    "\113\ufe56\123\ufe56\124\ufe56\126\ufe56\127\ufe56\130\ufe56\137" +
    "\ufe56\141\ufe56\142\ufe56\144\ufe56\145\ufe56\156\ufe56\161\ufe56" +
    "\164\ufe56\171\ufe56\172\ufe56\176\ufe56\223\ufe56\233\ufe56\242" +
    "\ufe56\243\ufe56\246\ufe56\251\160\253\ufe56\256\166\257\153" +
    "\260\167\261\162\262\154\263\157\264\172\266\ufe56\267" +
    "\ufe56\270\ufe56\271\ufe56\272\ufe56\300\ufe56\001\002\000\154" +
    "\002\ufe58\011\ufe58\015\ufe58\016\ufe58\020\ufe58\041\ufe58\052" +
    "\ufe58\055\163\060\ufe58\061\ufe58\074\ufe58\100\ufe58\101\ufe58" +
    "\105\ufe58\106\ufe58\110\ufe58\113\ufe58\123\ufe58\124\ufe58\126" +
    "\ufe58\127\ufe58\130\ufe58\137\ufe58\141\ufe58\142\ufe58\144\ufe58" +
    "\145\ufe58\156\ufe58\161\ufe58\164\ufe58\171\ufe58\172\ufe58\176" +
    "\ufe58\223\ufe58\233\ufe58\242\ufe58\243\ufe58\246\ufe58\251\160" +
    "\253\ufe58\256\166\257\153\260\167\261\162\262\154\263" +
    "\157\264\172\266\ufe58\267\ufe58\270\ufe58\271\ufe58\272\ufe58" +
    "\300\ufe58\001\002\000\154\002\ufe59\011\ufe59\015\ufe59\016" +
    "\ufe59\020\ufe59\041\ufe59\052\ufe59\055\163\060\ufe59\061\ufe59" +
    "\074\ufe59\100\ufe59\101\ufe59\105\ufe59\106\ufe59\110\ufe59\113" +
    "\ufe59\123\ufe59\124\ufe59\126\ufe59\127\ufe59\130\ufe59\137\ufe59" +
    "\141\ufe59\142\ufe59\144\ufe59\145\ufe59\156\ufe59\161\ufe59\164" +
    "\ufe59\171\ufe59\172\ufe59\176\ufe59\223\ufe59\233\ufe59\242\ufe59" +
    "\243\ufe59\246\ufe59\251\160\253\ufe59\256\166\257\153\260" +
    "\167\261\162\262\154\263\157\264\172\266\ufe59\267\ufe59" +
    "\270\ufe59\271\ufe59\272\ufe59\300\ufe59\001\002\000\154\002" +
    "\ufe7c\011\ufe7c\015\ufe7c\016\ufe7c\020\ufe7c\041\ufe7c\052\ufe7c" +
    "\055\ufe7c\060\ufe7c\061\ufe7c\074\ufe7c\100\ufe7c\101\ufe7c\105" +
    "\ufe7c\106\ufe7c\110\ufe7c\113\ufe7c\123\ufe7c\124\ufe7c\126\ufe7c" +
    "\127\ufe7c\130\ufe7c\137\ufe7c\141\ufe7c\142\ufe7c\144\ufe7c\145" +
    "\ufe7c\156\ufe7c\161\ufe7c\164\ufe7c\171\ufe7c\172\ufe7c\176\ufe7c" +
    "\223\ufe7c\233\ufe7c\242\ufe7c\243\ufe7c\246\ufe7c\251\ufe7c\253" +
    "\ufe7c\256\ufe7c\257\ufe7c\260\ufe7c\261\ufe7c\262\154\263\157" +
    "\264\172\266\ufe7c\267\ufe7c\270\ufe7c\271\ufe7c\272\ufe7c\300" +
    "\ufe7c\001\002\000\052\026\125\027\116\063\140\066\105" +
    "\107\142\120\131\137\124\140\106\230\104\252\121\260" +
    "\136\261\120\265\147\267\130\272\141\274\101\276\111" +
    "\277\107\300\103\301\102\001\002\000\154\002\ufe7a\011" +
    "\ufe7a\015\ufe7a\016\ufe7a\020\ufe7a\041\ufe7a\052\ufe7a\055\163" +
    "\060\ufe7a\061\ufe7a\074\ufe7a\100\ufe7a\101\ufe7a\105\ufe7a\106" +
    "\ufe7a\110\ufe7a\113\ufe7a\123\ufe7a\124\ufe7a\126\ufe7a\127\ufe7a" +
    "\130\ufe7a\137\ufe7a\141\ufe7a\142\ufe7a\144\ufe7a\145\ufe7a\156" +
    "\ufe7a\161\ufe7a\164\ufe7a\171\ufe7a\172\ufe7a\176\ufe7a\223\ufe7a" +
    "\233\ufe7a\242\ufe7a\243\ufe7a\246\ufe7a\251\160\253\ufe7a\256" +
    "\166\257\153\260\ufe7a\261\ufe7a\262\154\263\157\264\172" +
    "\266\ufe7a\267\ufe7a\270\ufe7a\271\ufe7a\272\ufe7a\300\ufe7a\001" +
    "\002\000\060\011\175\020\170\055\163\110\200\123\173" +
    "\127\165\137\155\144\177\164\174\172\171\251\160\256" +
    "\166\257\153\260\167\261\162\262\154\263\157\264\172" +
    "\266\156\267\161\270\164\271\176\272\u0152\001\002\000" +
    "\154\002\ufe73\011\ufe73\015\ufe73\016\ufe73\020\ufe73\041\ufe73" +
    "\052\ufe73\055\ufe73\060\ufe73\061\ufe73\074\ufe73\100\ufe73\101" +
    "\ufe73\105\ufe73\106\ufe73\110\ufe73\113\ufe73\123\ufe73\124\ufe73" +
    "\126\ufe73\127\ufe73\130\ufe73\137\ufe73\141\ufe73\142\ufe73\144" +
    "\ufe73\145\ufe73\156\ufe73\161\ufe73\164\ufe73\171\ufe73\172\ufe73" +
    "\176\ufe73\223\ufe73\233\ufe73\242\ufe73\243\ufe73\246\ufe73\251" +
    "\ufe73\253\ufe73\256\ufe73\257\ufe73\260\ufe73\261\ufe73\262\ufe73" +
    "\263\ufe73\264\ufe73\266\ufe73\267\ufe73\270\ufe73\271\ufe73\272" +
    "\ufe73\300\ufe73\001\002\000\052\026\125\027\116\063\140" +
    "\066\105\107\142\120\131\137\124\140\106\230\104\252" +
    "\121\260\136\261\120\265\147\267\130\272\141\274\101" +
    "\276\111\277\107\300\103\301\102\001\002\000\154\002" +
    "\ufe5a\011\ufe5a\015\ufe5a\016\ufe5a\020\ufe5a\041\ufe5a\052\ufe5a" +
    "\055\163\060\ufe5a\061\ufe5a\074\ufe5a\100\ufe5a\101\ufe5a\105" +
    "\ufe5a\106\ufe5a\110\ufe5a\113\ufe5a\123\ufe5a\124\ufe5a\126\ufe5a" +
    "\127\ufe5a\130\ufe5a\137\ufe5a\141\ufe5a\142\ufe5a\144\ufe5a\145" +
    "\ufe5a\156\ufe5a\161\ufe5a\164\ufe5a\171\ufe5a\172\ufe5a\176\ufe5a" +
    "\223\ufe5a\233\ufe5a\242\ufe5a\243\ufe5a\246\ufe5a\251\160\253" +
    "\ufe5a\256\166\257\153\260\167\261\162\262\154\263\157" +
    "\264\172\266\ufe5a\267\ufe5a\270\ufe5a\271\ufe5a\272\ufe5a\300" +
    "\ufe5a\001\002\000\154\002\ufe7f\011\ufe7f\015\ufe7f\016\ufe7f" +
    "\020\ufe7f\041\ufe7f\052\ufe7f\055\ufe7f\060\ufe7f\061\ufe7f\074" +
    "\ufe7f\100\ufe7f\101\ufe7f\105\ufe7f\106\ufe7f\110\ufe7f\113\ufe7f" +
    "\123\ufe7f\124\ufe7f\126\ufe7f\127\ufe7f\130\ufe7f\137\ufe7f\141" +
    "\ufe7f\142\ufe7f\144\ufe7f\145\ufe7f\156\ufe7f\161\ufe7f\164\ufe7f" +
    "\171\ufe7f\172\ufe7f\176\ufe7f\223\ufe7f\233\ufe7f\242\ufe7f\243" +
    "\ufe7f\246\ufe7f\251\ufe7f\253\ufe7f\256\ufe7f\257\ufe7f\260\ufe7f" +
    "\261\ufe7f\262\154\263\157\264\172\266\ufe7f\267\ufe7f\270" +
    "\ufe7f\271\ufe7f\272\ufe7f\300\ufe7f\001\002\000\154\002\ufe78" +
    "\011\ufe78\015\ufe78\016\ufe78\020\ufe78\041\ufe78\052\ufe78\055" +
    "\ufe78\060\ufe78\061\ufe78\074\ufe78\100\ufe78\101\ufe78\105\ufe78" +
    "\106\ufe78\110\ufe78\113\ufe78\123\ufe78\124\ufe78\126\ufe78\127" +
    "\ufe78\130\ufe78\137\ufe78\141\ufe78\142\ufe78\144\ufe78\145\ufe78" +
    "\156\ufe78\161\ufe78\164\ufe78\171\ufe78\172\ufe78\176\ufe78\223" +
    "\ufe78\233\ufe78\242\ufe78\243\ufe78\246\ufe78\251\ufe78\253\ufe78" +
    "\256\ufe78\257\ufe78\260\ufe78\261\ufe78\262\ufe78\263\ufe78\264" +
    "\ufe78\266\ufe78\267\ufe78\270\ufe78\271\ufe78\272\ufe78\300\ufe78" +
    "\001\002\000\154\002\ufe5b\011\ufe5b\015\ufe5b\016\ufe5b\020" +
    "\ufe5b\041\ufe5b\052\ufe5b\055\163\060\ufe5b\061\ufe5b\074\ufe5b" +
    "\100\ufe5b\101\ufe5b\105\ufe5b\106\ufe5b\110\ufe5b\113\ufe5b\123" +
    "\ufe5b\124\ufe5b\126\ufe5b\127\ufe5b\130\ufe5b\137\ufe5b\141\ufe5b" +
    "\142\ufe5b\144\ufe5b\145\ufe5b\156\ufe5b\161\ufe5b\164\ufe5b\171" +
    "\ufe5b\172\ufe5b\176\ufe5b\223\ufe5b\233\ufe5b\242\ufe5b\243\ufe5b" +
    "\246\ufe5b\251\160\253\ufe5b\256\166\257\153\260\167\261" +
    "\162\262\154\263\157\264\172\266\ufe5b\267\ufe5b\270\ufe5b" +
    "\271\ufe5b\272\ufe5b\300\ufe5b\001\002\000\052\026\125\027" +
    "\116\063\140\066\105\107\142\120\131\137\124\140\106" +
    "\230\104\252\121\260\136\261\120\265\147\267\130\272" +
    "\141\274\101\276\111\277\107\300\103\301\102\001\002" +
    "\000\052\026\125\027\116\063\140\066\105\107\142\120" +
    "\131\137\124\140\106\230\104\252\121\260\136\261\120" +
    "\265\147\267\130\272\141\274\101\276\111\277\107\300" +
    "\103\301\102\001\002\000\052\026\125\027\116\063\140" +
    "\066\105\107\142\120\131\137\124\140\106\230\104\252" +
    "\121\260\136\261\120\265\147\267\130\272\141\274\101" +
    "\276\111\277\107\300\103\301\102\001\002\000\052\026" +
    "\125\027\116\063\140\066\105\107\142\120\131\137\124" +
    "\140\106\230\104\252\121\260\136\261\120\265\147\267" +
    "\130\272\141\274\101\276\111\277\107\300\103\301\102" +
    "\001\002\000\004\252\u015e\001\002\000\154\002\ufe47\011" +
    "\ufe47\015\ufe47\016\ufe47\020\ufe47\041\ufe47\052\ufe47\055\ufe47" +
    "\060\ufe47\061\ufe47\074\ufe47\100\ufe47\101\ufe47\105\ufe47\106" +
    "\ufe47\110\ufe47\113\ufe47\123\ufe47\124\ufe47\126\ufe47\127\ufe47" +
    "\130\ufe47\137\ufe47\141\ufe47\142\ufe47\144\ufe47\145\ufe47\156" +
    "\ufe47\161\ufe47\164\ufe47\171\ufe47\172\ufe47\176\ufe47\223\ufe47" +
    "\233\ufe47\242\ufe47\243\ufe47\246\ufe47\251\ufe47\253\ufe47\256" +
    "\ufe47\257\ufe47\260\ufe47\261\ufe47\262\ufe47\263\ufe47\264\ufe47" +
    "\266\ufe47\267\ufe47\270\ufe47\271\ufe47\272\ufe47\300\ufe47\001" +
    "\002\000\060\026\125\027\116\063\140\066\105\107\142" +
    "\120\131\137\124\140\106\201\uff22\230\104\237\uff22\244" +
    "\013\252\121\260\136\261\120\265\147\267\130\272\141" +
    "\274\101\276\111\277\107\300\103\301\102\001\002\000" +
    "\006\246\210\253\u0160\001\002\000\154\002\ufe49\011\ufe49" +
    "\015\ufe49\016\ufe49\020\ufe49\041\ufe49\052\ufe49\055\ufe49\060" +
    "\ufe49\061\ufe49\074\ufe49\100\ufe49\101\ufe49\105\ufe49\106\ufe49" +
    "\110\ufe49\113\ufe49\123\ufe49\124\ufe49\126\ufe49\127\ufe49\130" +
    "\ufe49\137\ufe49\141\ufe49\142\ufe49\144\ufe49\145\ufe49\156\ufe49" +
    "\161\ufe49\164\ufe49\171\ufe49\172\ufe49\176\ufe49\223\ufe49\233" +
    "\ufe49\242\ufe49\243\ufe49\246\ufe49\251\ufe49\253\ufe49\256\ufe49" +
    "\257\ufe49\260\ufe49\261\ufe49\262\ufe49\263\ufe49\264\ufe49\266" +
    "\ufe49\267\ufe49\270\ufe49\271\ufe49\272\ufe49\300\ufe49\001\002" +
    "\000\154\002\ufe51\011\ufe51\015\ufe51\016\ufe51\020\ufe51\041" +
    "\ufe51\052\ufe51\055\163\060\ufe51\061\ufe51\074\ufe51\100\ufe51" +
    "\101\ufe51\105\ufe51\106\ufe51\110\ufe51\113\ufe51\123\ufe51\124" +
    "\ufe51\126\ufe51\127\ufe51\130\ufe51\137\ufe51\141\ufe51\142\ufe51" +
    "\144\ufe51\145\ufe51\156\ufe51\161\ufe51\164\ufe51\171\ufe51\172" +
    "\ufe51\176\ufe51\223\ufe51\233\ufe51\242\ufe51\243\ufe51\246\ufe51" +
    "\251\160\253\ufe51\256\166\257\153\260\167\261\162\262" +
    "\154\263\157\264\172\266\156\267\ufe51\270\164\271\176" +
    "\272\ufe51\300\ufe51\001\002\000\154\002\ufe4f\011\ufe4f\015" +
    "\ufe4f\016\ufe4f\020\ufe4f\041\ufe4f\052\ufe4f\055\163\060\ufe4f" +
    "\061\ufe4f\074\ufe4f\100\ufe4f\101\ufe4f\105\ufe4f\106\ufe4f\110" +
    "\ufe4f\113\ufe4f\123\ufe4f\124\ufe4f\126\ufe4f\127\ufe4f\130\ufe4f" +
    "\137\ufe4f\141\ufe4f\142\ufe4f\144\ufe4f\145\ufe4f\156\ufe4f\161" +
    "\ufe4f\164\ufe4f\171\ufe4f\172\ufe4f\176\ufe4f\223\ufe4f\233\ufe4f" +
    "\242\ufe4f\243\ufe4f\246\ufe4f\251\160\253\ufe4f\256\166\257" +
    "\153\260\167\261\162\262\154\263\157\264\172\266\156" +
    "\267\ufe4f\270\164\271\176\272\ufe4f\300\ufe4f\001\002\000" +
    "\154\002\ufe50\011\ufe50\015\ufe50\016\ufe50\020\ufe50\041\ufe50" +
    "\052\ufe50\055\163\060\ufe50\061\ufe50\074\ufe50\100\ufe50\101" +
    "\ufe50\105\ufe50\106\ufe50\110\ufe50\113\ufe50\123\ufe50\124\ufe50" +
    "\126\ufe50\127\ufe50\130\ufe50\137\ufe50\141\ufe50\142\ufe50\144" +
    "\ufe50\145\ufe50\156\ufe50\161\ufe50\164\ufe50\171\ufe50\172\ufe50" +
    "\176\ufe50\223\ufe50\233\ufe50\242\ufe50\243\ufe50\246\ufe50\251" +
    "\160\253\ufe50\256\166\257\153\260\167\261\162\262\154" +
    "\263\157\264\172\266\156\267\ufe50\270\164\271\176\272" +
    "\ufe50\300\ufe50\001\002\000\056\011\u0168\020\ufe9d\055\ufe9d" +
    "\110\ufe9d\123\ufe9d\127\ufe9d\137\ufe9d\144\ufe9d\164\ufe9d\172" +
    "\ufe9d\251\ufe9d\256\ufe9d\257\ufe9d\260\ufe9d\261\ufe9d\262\ufe9d" +
    "\263\ufe9d\264\ufe9d\266\ufe9d\267\ufe9d\270\ufe9d\271\ufe9d\001" +
    "\002\000\056\011\u0166\020\ufe9e\055\ufe9e\110\ufe9e\123\ufe9e" +
    "\127\ufe9e\137\ufe9e\144\ufe9e\164\ufe9e\172\ufe9e\251\ufe9e\256" +
    "\ufe9e\257\ufe9e\260\ufe9e\261\ufe9e\262\ufe9e\263\ufe9e\264\ufe9e" +
    "\266\ufe9e\267\ufe9e\270\ufe9e\271\ufe9e\001\002\000\052\026" +
    "\125\027\116\063\140\066\105\107\142\120\131\137\124" +
    "\140\106\230\104\252\121\260\136\261\120\265\147\267" +
    "\130\272\141\274\101\276\111\277\107\300\103\301\102" +
    "\001\002\000\154\002\ufe4c\011\ufe4c\015\ufe4c\016\ufe4c\020" +
    "\170\041\ufe4c\052\ufe4c\055\163\060\ufe4c\061\ufe4c\074\ufe4c" +
    "\100\ufe4c\101\ufe4c\105\ufe4c\106\ufe4c\110\200\113\ufe4c\123" +
    "\173\124\ufe4c\126\ufe4c\127\165\130\ufe4c\137\155\141\ufe4c" +
    "\142\ufe4c\144\ufe4c\145\ufe4c\156\ufe4c\161\ufe4c\164\174\171" +
    "\ufe4c\172\171\176\ufe4c\223\ufe4c\233\ufe4c\242\ufe4c\243\ufe4c" +
    "\246\ufe4c\251\160\253\ufe4c\256\166\257\153\260\167\261" +
    "\162\262\154\263\157\264\172\266\156\267\161\270\164" +
    "\271\176\272\ufe4c\300\ufe4c\001\002\000\052\026\125\027" +
    "\116\063\140\066\105\107\142\120\131\137\124\140\106" +
    "\230\104\252\121\260\136\261\120\265\147\267\130\272" +
    "\141\274\101\276\111\277\107\300\103\301\102\001\002" +
    "\000\154\002\ufe4b\011\ufe4b\015\ufe4b\016\ufe4b\020\170\041" +
    "\ufe4b\052\ufe4b\055\163\060\ufe4b\061\ufe4b\074\ufe4b\100\ufe4b" +
    "\101\ufe4b\105\ufe4b\106\ufe4b\110\200\113\ufe4b\123\173\124" +
    "\ufe4b\126\ufe4b\127\165\130\ufe4b\137\155\141\ufe4b\142\ufe4b" +
    "\144\ufe4b\145\ufe4b\156\ufe4b\161\ufe4b\164\174\171\ufe4b\172" +
    "\171\176\ufe4b\223\ufe4b\233\ufe4b\242\ufe4b\243\ufe4b\246\ufe4b" +
    "\251\160\253\ufe4b\256\166\257\153\260\167\261\162\262" +
    "\154\263\157\264\172\266\156\267\161\270\164\271\176" +
    "\272\ufe4b\300\ufe4b\001\002\000\154\002\ufe79\011\ufe79\015" +
    "\ufe79\016\ufe79\020\ufe79\041\ufe79\052\ufe79\055\ufe79\060\ufe79" +
    "\061\ufe79\074\ufe79\100\ufe79\101\ufe79\105\ufe79\106\ufe79\110" +
    "\ufe79\113\ufe79\123\ufe79\124\ufe79\126\ufe79\127\ufe79\130\ufe79" +
    "\137\ufe79\141\ufe79\142\ufe79\144\ufe79\145\ufe79\156\ufe79\161" +
    "\ufe79\164\ufe79\171\ufe79\172\ufe79\176\ufe79\223\ufe79\233\ufe79" +
    "\242\ufe79\243\ufe79\246\ufe79\251\ufe79\253\ufe79\256\ufe79\257" +
    "\ufe79\260\ufe79\261\ufe79\262\ufe79\263\ufe79\264\ufe79\266\ufe79" +
    "\267\ufe79\270\ufe79\271\ufe79\272\ufe79\300\ufe79\001\002\000" +
    "\154\002\ufe7d\011\ufe7d\015\ufe7d\016\ufe7d\020\ufe7d\041\ufe7d" +
    "\052\ufe7d\055\ufe7d\060\ufe7d\061\ufe7d\074\ufe7d\100\ufe7d\101" +
    "\ufe7d\105\ufe7d\106\ufe7d\110\ufe7d\113\ufe7d\123\ufe7d\124\ufe7d" +
    "\126\ufe7d\127\ufe7d\130\ufe7d\137\ufe7d\141\ufe7d\142\ufe7d\144" +
    "\ufe7d\145\ufe7d\156\ufe7d\161\ufe7d\164\ufe7d\171\ufe7d\172\ufe7d" +
    "\176\ufe7d\223\ufe7d\233\ufe7d\242\ufe7d\243\ufe7d\246\ufe7d\251" +
    "\ufe7d\253\ufe7d\256\ufe7d\257\ufe7d\260\ufe7d\261\ufe7d\262\154" +
    "\263\157\264\172\266\ufe7d\267\ufe7d\270\ufe7d\271\ufe7d\272" +
    "\ufe7d\300\ufe7d\001\002\000\052\026\125\027\116\063\140" +
    "\066\105\107\142\120\131\137\124\140\106\230\104\252" +
    "\121\260\136\261\120\265\147\267\130\272\141\274\101" +
    "\276\111\277\107\300\103\301\102\001\002\000\006\246" +
    "\210\253\u016e\001\002\000\154\002\ufe97\011\ufe97\015\ufe97" +
    "\016\ufe97\020\ufe97\041\ufe97\052\ufe97\055\ufe97\060\ufe97\061" +
    "\ufe97\074\ufe97\100\ufe97\101\ufe97\105\ufe97\106\ufe97\110\ufe97" +
    "\113\ufe97\123\ufe97\124\ufe97\126\ufe97\127\ufe97\130\ufe97\137" +
    "\ufe97\141\ufe97\142\ufe97\144\ufe97\145\ufe97\156\ufe97\161\ufe97" +
    "\164\ufe97\171\ufe97\172\ufe97\176\ufe97\223\ufe97\233\ufe97\242" +
    "\ufe97\243\ufe97\246\ufe97\251\ufe97\253\ufe97\256\ufe97\257\ufe97" +
    "\260\ufe97\261\ufe97\262\ufe97\263\ufe97\264\ufe97\266\ufe97\267" +
    "\ufe97\270\ufe97\271\ufe97\272\ufe97\300\ufe97\001\002\000\004" +
    "\272\u0170\001\002\000\160\002\ufe3f\011\ufe3f\015\ufe3f\016" +
    "\ufe3f\020\ufe3f\041\ufe3f\052\ufe3f\055\ufe3f\060\ufe3f\061\ufe3f" +
    "\074\ufe3f\100\ufe3f\101\ufe3f\105\ufe3f\106\ufe3f\110\ufe3f\113" +
    "\ufe3f\123\ufe3f\124\ufe3f\126\ufe3f\127\ufe3f\130\ufe3f\137\ufe3f" +
    "\141\ufe3f\142\ufe3f\144\ufe3f\145\ufe3f\156\ufe3f\161\ufe3f\164" +
    "\ufe3f\171\ufe3f\172\ufe3f\176\ufe3f\223\ufe3f\233\ufe3f\242\ufe3f" +
    "\243\ufe3f\246\ufe3f\247\u0171\251\ufe3f\252\ufede\253\ufe3f\256" +
    "\ufe3f\257\ufe3f\260\ufe3f\261\ufe3f\262\ufe3f\263\ufe3f\264\ufe3f" +
    "\266\ufe3f\267\ufe3f\270\ufe3f\271\ufe3f\272\ufe3f\300\ufe3f\001" +
    "\002\000\004\272\255\001\002\000\154\002\ufe9c\011\ufe9c" +
    "\015\ufe9c\016\ufe9c\020\ufe9c\041\ufe9c\052\ufe9c\055\ufe9c\060" +
    "\ufe9c\061\ufe9c\074\ufe9c\100\ufe9c\101\ufe9c\105\ufe9c\106\ufe9c" +
    "\110\ufe9c\113\ufe9c\123\ufe9c\124\ufe9c\126\ufe9c\127\ufe9c\130" +
    "\ufe9c\137\ufe9c\141\ufe9c\142\ufe9c\144\ufe9c\145\ufe9c\156\ufe9c" +
    "\161\ufe9c\164\ufe9c\171\ufe9c\172\ufe9c\176\ufe9c\223\ufe9c\233" +
    "\ufe9c\242\ufe9c\243\ufe9c\246\ufe9c\251\ufe9c\253\ufe9c\256\ufe9c" +
    "\257\ufe9c\260\ufe9c\261\ufe9c\262\ufe9c\263\ufe9c\264\ufe9c\266" +
    "\ufe9c\267\ufe9c\270\ufe9c\271\ufe9c\272\ufe9c\300\ufe9c\001\002" +
    "\000\012\201\uff22\237\uff22\244\013\252\u0173\001\002\000" +
    "\004\253\u012e\001\002\000\154\002\ufe9f\011\ufe9f\015\ufe9f" +
    "\016\ufe9f\020\ufe9f\041\ufe9f\052\ufe9f\055\163\060\ufe9f\061" +
    "\ufe9f\074\ufe9f\100\ufe9f\101\ufe9f\105\ufe9f\106\ufe9f\110\ufe9f" +
    "\113\ufe9f\123\ufe9f\124\ufe9f\126\ufe9f\127\ufe9f\130\ufe9f\137" +
    "\ufe9f\141\ufe9f\142\ufe9f\144\ufe9f\145\ufe9f\156\ufe9f\161\ufe9f" +
    "\164\ufe9f\171\ufe9f\172\ufe9f\176\ufe9f\223\ufe9f\233\ufe9f\242" +
    "\ufe9f\243\ufe9f\246\ufe9f\251\160\253\ufe9f\256\166\257\153" +
    "\260\ufe9f\261\ufe9f\262\154\263\157\264\172\266\ufe9f\267" +
    "\ufe9f\270\ufe9f\271\ufe9f\272\ufe9f\300\ufe9f\001\002\000\004" +
    "\252\u0177\001\002\000\014\145\ufe8a\153\u0178\161\ufe8a\176" +
    "\ufe8a\253\ufe8a\001\002\000\004\024\u018d\001\002\000\012" +
    "\145\261\161\ufeb8\176\ufeb8\253\ufeb8\001\002\000\010\161" +
    "\u017d\176\u017c\253\ufe87\001\002\000\004\253\u018c\001\002" +
    "\000\060\020\ufe86\026\ufe86\027\ufe86\042\ufe86\063\ufe86\066" +
    "\ufe86\107\ufe86\120\ufe86\137\ufe86\140\ufe86\230\ufe86\231\ufe86" +
    "\252\ufe86\260\ufe86\261\ufe86\265\ufe86\267\ufe86\272\ufe86\274" +
    "\ufe86\276\ufe86\277\ufe86\300\ufe86\301\ufe86\001\002\000\060" +
    "\020\ufe85\026\ufe85\027\ufe85\042\ufe85\063\ufe85\066\ufe85\107" +
    "\ufe85\120\ufe85\137\ufe85\140\ufe85\230\ufe85\231\ufe85\252\ufe85" +
    "\260\ufe85\261\ufe85\265\ufe85\267\ufe85\272\ufe85\274\ufe85\276" +
    "\ufe85\277\ufe85\300\ufe85\301\ufe85\001\002\000\060\020\u0180" +
    "\026\125\027\116\042\u0183\063\140\066\105\107\142\120" +
    "\131\137\124\140\106\230\104\231\u017f\252\121\260\136" +
    "\261\120\265\147\267\130\272\141\274\101\276\111\277" +
    "\107\300\103\301\102\001\002\000\006\074\u018a\156\u018b" +
    "\001\002\000\056\026\125\027\116\042\u0183\063\140\066" +
    "\105\107\142\120\131\137\124\140\106\230\104\231\u017f" +
    "\252\121\260\136\261\120\265\147\267\130\272\141\274" +
    "\101\276\111\277\107\300\103\301\102\001\002\000\004" +
    "\253\ufe89\001\002\000\062\011\175\020\170\055\163\074" +
    "\u0185\110\200\123\173\127\165\137\155\144\177\156\u0186" +
    "\164\174\172\171\251\160\256\166\257\153\260\167\261" +
    "\162\262\154\263\157\264\172\266\156\267\161\270\164" +
    "\271\176\001\002\000\004\175\u0184\001\002\000\006\011" +
    "\ufe82\253\ufe82\001\002\000\006\011\ufe80\253\ufe80\001\002" +
    "\000\006\011\ufe81\253\ufe81\001\002\000\004\011\u0188\001" +
    "\002\000\056\026\125\027\116\042\u0183\063\140\066\105" +
    "\107\142\120\131\137\124\140\106\230\104\231\u017f\252" +
    "\121\260\136\261\120\265\147\267\130\272\141\274\101" +
    "\276\111\277\107\300\103\301\102\001\002\000\004\253" +
    "\ufe88\001\002\000\006\011\ufe83\253\ufe83\001\002\000\006" +
    "\011\ufe84\253\ufe84\001\002\000\154\002\ufe8c\011\ufe8c\015" +
    "\ufe8c\016\ufe8c\020\ufe8c\041\ufe8c\052\ufe8c\055\ufe8c\060\ufe8c" +
    "\061\ufe8c\074\ufe8c\100\ufe8c\101\ufe8c\105\ufe8c\106\ufe8c\110" +
    "\ufe8c\113\ufe8c\123\ufe8c\124\ufe8c\126\ufe8c\127\ufe8c\130\ufe8c" +
    "\137\ufe8c\141\ufe8c\142\ufe8c\144\ufe8c\145\ufe8c\156\ufe8c\161" +
    "\ufe8c\164\ufe8c\171\ufe8c\172\ufe8c\176\ufe8c\223\ufe8c\233\ufe8c" +
    "\242\ufe8c\243\ufe8c\246\ufe8c\251\ufe8c\253\ufe8c\256\ufe8c\257" +
    "\ufe8c\260\ufe8c\261\ufe8c\262\ufe8c\263\ufe8c\264\ufe8c\266\ufe8c" +
    "\267\ufe8c\270\ufe8c\271\ufe8c\272\ufe8c\300\ufe8c\001\002\000" +
    "\052\026\125\027\116\063\140\066\105\107\142\120\131" +
    "\137\124\140\106\230\104\252\121\260\136\261\120\265" +
    "\147\267\130\272\141\274\101\276\111\277\107\300\103" +
    "\301\102\001\002\000\014\145\ufe8b\161\ufe8b\176\ufe8b\246" +
    "\210\253\ufe8b\001\002\000\060\011\175\020\170\055\163" +
    "\110\200\123\173\127\165\137\155\144\177\164\174\172" +
    "\171\251\160\256\166\257\153\260\167\261\162\262\154" +
    "\263\157\264\172\266\156\267\161\270\164\271\176\272" +
    "\u0190\001\002\000\004\260\u0145\001\002\000\154\002\ufe41" +
    "\011\ufe41\015\ufe41\016\ufe41\020\170\041\ufe41\052\ufe41\055" +
    "\163\060\ufe41\061\ufe41\074\ufe41\100\ufe41\101\ufe41\105\ufe41" +
    "\106\ufe41\110\200\113\ufe41\123\173\124\ufe41\126\ufe41\127" +
    "\165\130\ufe41\137\ufe41\141\ufe41\142\ufe41\144\ufe41\145\ufe41" +
    "\156\ufe41\161\ufe41\164\174\171\ufe41\172\171\176\ufe41\223" +
    "\ufe41\233\ufe41\242\ufe41\243\ufe41\246\ufe41\251\160\253\ufe41" +
    "\256\166\257\153\260\167\261\162\262\154\263\157\264" +
    "\172\266\156\267\ufe41\270\164\271\176\272\ufe41\300\ufe41" +
    "\001\002\000\010\060\u0197\061\ufea1\242\u0198\001\002\000" +
    "\052\026\125\027\116\063\140\066\105\107\142\120\131" +
    "\137\124\140\106\230\104\252\121\260\136\261\120\265" +
    "\147\267\130\272\141\274\101\276\111\277\107\300\103" +
    "\301\102\001\002\000\060\011\175\020\170\055\163\110" +
    "\200\123\173\127\165\137\155\144\177\164\174\172\171" +
    "\242\u0193\251\160\256\166\257\153\260\167\261\162\262" +
    "\154\263\157\264\172\266\156\267\161\270\164\271\176" +
    "\001\002\000\010\060\u0197\061\ufea1\242\u0198\001\002\000" +
    "\004\061\u019d\001\002\000\052\026\125\027\116\063\140" +
    "\066\105\107\142\120\131\137\124\140\106\230\104\252" +
    "\121\260\136\261\120\265\147\267\130\272\141\274\101" +
    "\276\111\277\107\300\103\301\102\001\002\000\052\026" +
    "\125\027\116\063\140\066\105\107\142\120\131\137\124" +
    "\140\106\230\104\252\121\260\136\261\120\265\147\267" +
    "\130\272\141\274\101\276\111\277\107\300\103\301\102" +
    "\001\002\000\060\011\175\020\170\055\163\110\200\123" +
    "\173\127\165\137\155\144\177\164\174\172\171\223\u019a" +
    "\251\160\256\166\257\153\260\167\261\162\262\154\263" +
    "\157\264\172\266\156\267\161\270\164\271\176\001\002" +
    "\000\052\026\125\027\116\063\140\066\105\107\142\120" +
    "\131\137\124\140\106\230\104\252\121\260\136\261\120" +
    "\265\147\267\130\272\141\274\101\276\111\277\107\300" +
    "\103\301\102\001\002\000\064\011\175\020\170\055\163" +
    "\060\ufea3\061\ufea3\110\200\123\173\127\165\137\155\144" +
    "\177\164\174\172\171\242\ufea3\251\160\256\166\257\153" +
    "\260\167\261\162\262\154\263\157\264\172\266\156\267" +
    "\161\270\164\271\176\001\002\000\060\011\175\020\170" +
    "\055\163\061\ufea2\110\200\123\173\127\165\137\155\144" +
    "\177\164\174\172\171\251\160\256\166\257\153\260\167" +
    "\261\162\262\154\263\157\264\172\266\156\267\161\270" +
    "\164\271\176\001\002\000\154\002\ufea6\011\ufea6\015\ufea6" +
    "\016\ufea6\020\ufea6\041\ufea6\052\ufea6\055\ufea6\060\ufea6\061" +
    "\ufea6\074\ufea6\100\ufea6\101\ufea6\105\ufea6\106\ufea6\110\ufea6" +
    "\113\ufea6\123\ufea6\124\ufea6\126\ufea6\127\ufea6\130\ufea6\137" +
    "\ufea6\141\ufea6\142\ufea6\144\ufea6\145\ufea6\156\ufea6\161\ufea6" +
    "\164\ufea6\171\ufea6\172\ufea6\176\ufea6\223\ufea6\233\ufea6\242" +
    "\ufea6\243\ufea6\246\ufea6\251\ufea6\253\ufea6\256\ufea6\257\ufea6" +
    "\260\ufea6\261\ufea6\262\ufea6\263\ufea6\264\ufea6\266\ufea6\267" +
    "\ufea6\270\ufea6\271\ufea6\272\ufea6\300\ufea6\001\002\000\060" +
    "\011\175\020\170\055\163\110\200\123\173\127\165\137" +
    "\155\144\177\164\174\172\171\223\u019f\251\160\256\166" +
    "\257\153\260\167\261\162\262\154\263\157\264\172\266" +
    "\156\267\161\270\164\271\176\001\002\000\052\026\125" +
    "\027\116\063\140\066\105\107\142\120\131\137\124\140" +
    "\106\230\104\252\121\260\136\261\120\265\147\267\130" +
    "\272\141\274\101\276\111\277\107\300\103\301\102\001" +
    "\002\000\064\011\175\020\170\055\163\060\ufea4\061\ufea4" +
    "\110\200\123\173\127\165\137\155\144\177\164\174\172" +
    "\171\242\ufea4\251\160\256\166\257\153\260\167\261\162" +
    "\262\154\263\157\264\172\266\156\267\161\270\164\271" +
    "\176\001\002\000\004\061\u01a2\001\002\000\154\002\ufea5" +
    "\011\ufea5\015\ufea5\016\ufea5\020\ufea5\041\ufea5\052\ufea5\055" +
    "\ufea5\060\ufea5\061\ufea5\074\ufea5\100\ufea5\101\ufea5\105\ufea5" +
    "\106\ufea5\110\ufea5\113\ufea5\123\ufea5\124\ufea5\126\ufea5\127" +
    "\ufea5\130\ufea5\137\ufea5\141\ufea5\142\ufea5\144\ufea5\145\ufea5" +
    "\156\ufea5\161\ufea5\164\ufea5\171\ufea5\172\ufea5\176\ufea5\223" +
    "\ufea5\233\ufea5\242\ufea5\243\ufea5\246\ufea5\251\ufea5\253\ufea5" +
    "\256\ufea5\257\ufea5\260\ufea5\261\ufea5\262\ufea5\263\ufea5\264" +
    "\ufea5\266\ufea5\267\ufea5\270\ufea5\271\ufea5\272\ufea5\300\ufea5" +
    "\001\002\000\154\002\ufe42\011\ufe42\015\ufe42\016\ufe42\020" +
    "\170\041\ufe42\052\ufe42\055\163\060\ufe42\061\ufe42\074\ufe42" +
    "\100\ufe42\101\ufe42\105\ufe42\106\ufe42\110\200\113\ufe42\123" +
    "\173\124\ufe42\126\ufe42\127\165\130\ufe42\137\ufe42\141\ufe42" +
    "\142\ufe42\144\ufe42\145\ufe42\156\ufe42\161\ufe42\164\174\171" +
    "\ufe42\172\171\176\ufe42\223\ufe42\233\ufe42\242\ufe42\243\ufe42" +
    "\246\ufe42\251\160\253\ufe42\256\166\257\153\260\167\261" +
    "\162\262\154\263\157\264\172\266\156\267\ufe42\270\164" +
    "\271\176\272\ufe42\300\ufe42\001\002\000\154\002\ufea0\011" +
    "\ufea0\015\ufea0\016\ufea0\020\ufea0\041\ufea0\052\ufea0\055\163" +
    "\060\ufea0\061\ufea0\074\ufea0\100\ufea0\101\ufea0\105\ufea0\106" +
    "\ufea0\110\ufea0\113\ufea0\123\ufea0\124\ufea0\126\ufea0\127\ufea0" +
    "\130\ufea0\137\ufea0\141\ufea0\142\ufea0\144\ufea0\145\ufea0\156" +
    "\ufea0\161\ufea0\164\ufea0\171\ufea0\172\ufea0\176\ufea0\223\ufea0" +
    "\233\ufea0\242\ufea0\243\ufea0\246\ufea0\251\160\253\ufea0\256" +
    "\166\257\153\260\ufea0\261\ufea0\262\154\263\157\264\172" +
    "\266\ufea0\267\ufea0\270\ufea0\271\ufea0\272\ufea0\300\ufea0\001" +
    "\002\000\052\026\125\027\116\063\140\066\105\107\142" +
    "\120\131\137\124\140\106\230\104\252\121\260\136\261" +
    "\120\265\147\267\130\272\141\274\101\276\111\277\107" +
    "\300\103\301\102\001\002\000\060\011\175\015\u01a7\020" +
    "\170\055\163\110\200\123\173\127\165\137\155\144\177" +
    "\164\174\172\171\251\160\256\166\257\153\260\167\261" +
    "\162\262\154\263\157\264\172\266\156\267\161\270\164" +
    "\271\176\001\002\000\046\014\u01ae\021\u01aa\022\u01b5\023" +
    "\u01b8\031\u01a8\046\u01a9\047\u01b2\050\u01b1\056\u01b3\073\u01b7" +
    "\116\u01ba\134\u01b4\210\u01ab\213\u01b6\214\u01b0\224\u01ac\225" +
    "\u01af\240\u01b9\001\002\000\004\252\u01d9\001\002\000\022" +
    "\002\ufe36\036\ufe36\117\ufe36\133\ufe36\246\ufe36\250\ufe36\253" +
    "\ufe36\271\ufe36\001\002\000\022\002\ufe3a\036\ufe3a\117\ufe3a" +
    "\133\ufe3a\246\ufe3a\250\ufe3a\253\ufe3a\271\ufe3a\001\002\000" +
    "\022\002\ufe3c\036\ufe3c\117\ufe3c\133\ufe3c\246\ufe3c\250\ufe3c" +
    "\253\ufe3c\271\ufe3c\001\002\000\022\002\ufe34\036\ufe34\117" +
    "\ufe34\133\ufe34\246\ufe34\250\ufe34\253\ufe34\271\ufe34\001\002" +
    "\000\004\253\u01d8\001\002\000\004\270\u01d5\001\002\000" +
    "\022\002\ufe3d\036\ufe3d\117\ufe3d\133\ufe3d\246\ufe3d\250\ufe3d" +
    "\253\ufe3d\271\ufe3d\001\002\000\004\270\u01c9\001\002\000" +
    "\024\002\ufe2c\036\ufe2c\117\ufe2c\133\ufe2c\246\ufe2c\250\ufe2c" +
    "\252\u01c3\253\ufe2c\271\ufe2c\001\002\000\022\002\ufe35\036" +
    "\ufe35\117\ufe35\133\ufe35\246\ufe35\250\ufe35\253\ufe35\271\ufe35" +
    "\001\002\000\022\002\ufe37\036\ufe37\117\ufe37\133\ufe37\246" +
    "\ufe37\250\ufe37\253\ufe37\271\ufe37\001\002\000\004\270\u01be" +
    "\001\002\000\022\002\ufe30\036\ufe30\117\ufe30\133\ufe30\246" +
    "\ufe30\250\ufe30\253\ufe30\271\ufe30\001\002\000\022\002\ufe33" +
    "\036\ufe33\117\ufe33\133\ufe33\246\ufe33\250\ufe33\253\ufe33\271" +
    "\ufe33\001\002\000\022\002\ufe38\036\ufe38\117\ufe38\133\ufe38" +
    "\246\ufe38\250\ufe38\253\ufe38\271\ufe38\001\002\000\022\002" +
    "\ufe39\036\ufe39\117\ufe39\133\ufe39\246\ufe39\250\ufe39\253\ufe39" +
    "\271\ufe39\001\002\000\024\002\ufe31\036\ufe31\117\ufe31\133" +
    "\ufe31\246\ufe31\250\ufe31\252\u01bb\253\ufe31\271\ufe31\001\002" +
    "\000\022\002\ufe3b\036\ufe3b\117\ufe3b\133\ufe3b\246\ufe3b\250" +
    "\ufe3b\253\ufe3b\271\ufe3b\001\002\000\004\276\u01bc\001\002" +
    "\000\004\253\u01bd\001\002\000\022\002\ufe32\036\ufe32\117" +
    "\ufe32\133\ufe32\246\ufe32\250\ufe32\253\ufe32\271\ufe32\001\002" +
    "\000\046\014\u01ae\021\u01aa\022\u01b5\023\u01b8\031\u01a8\046" +
    "\u01a9\047\u01b2\050\u01b1\056\u01b3\073\u01b7\116\u01ba\134\u01b4" +
    "\210\u01ab\213\u01b6\214\u01b0\224\u01ac\225\u01af\240\u01b9\001" +
    "\002\000\004\246\u01c0\001\002\000\046\014\u01ae\021\u01aa" +
    "\022\u01b5\023\u01b8\031\u01a8\046\u01a9\047\u01b2\050\u01b1\056" +
    "\u01b3\073\u01b7\116\u01ba\134\u01b4\210\u01ab\213\u01b6\214\u01b0" +
    "\224\u01ac\225\u01af\240\u01b9\001\002\000\004\271\u01c2\001" +
    "\002\000\022\002\ufe2a\036\ufe2a\117\ufe2a\133\ufe2a\246\ufe2a" +
    "\250\ufe2a\253\ufe2a\271\ufe2a\001\002\000\004\276\u01c4\001" +
    "\002\000\006\246\u01c5\253\u01c6\001\002\000\004\276\u01c7" +
    "\001\002\000\022\002\ufe2e\036\ufe2e\117\ufe2e\133\ufe2e\246" +
    "\ufe2e\250\ufe2e\253\ufe2e\271\ufe2e\001\002\000\004\253\u01c8" +
    "\001\002\000\022\002\ufe2d\036\ufe2d\117\ufe2d\133\ufe2d\246" +
    "\ufe2d\250\ufe2d\253\ufe2d\271\ufe2d\001\002\000\004\272\u01cc" +
    "\001\002\000\006\246\u01d2\271\u01d3\001\002\000\006\246" +
    "\ufe27\271\ufe27\001\002\000\004\245\u01cd\001\002\000\046" +
    "\014\u01ae\021\u01aa\022\u01b5\023\u01b8\031\u01a8\046\u01a9\047" +
    "\u01b2\050\u01b1\056\u01b3\073\u01b7\116\u01ba\134\u01b4\210\u01ab" +
    "\213\u01b6\214\u01b0\224\u01ac\225\u01af\240\u01b9\001\002\000" +
    "\010\036\u01cf\246\uff8a\271\uff8a\001\002\000\004\300\u01d1" +
    "\001\002\000\006\246\ufe28\271\ufe28\001\002\000\032\002" +
    "\uff8b\015\uff8b\025\uff8b\133\uff8b\175\uff8b\211\uff8b\220\uff8b" +
    "\232\uff8b\244\uff8b\246\uff8b\253\uff8b\271\uff8b\001\002\000" +
    "\004\272\u01cc\001\002\000\022\002\ufe29\036\ufe29\117\ufe29" +
    "\133\ufe29\246\ufe29\250\ufe29\253\ufe29\271\ufe29\001\002\000" +
    "\006\246\ufe26\271\ufe26\001\002\000\046\014\u01ae\021\u01aa" +
    "\022\u01b5\023\u01b8\031\u01a8\046\u01a9\047\u01b2\050\u01b1\056" +
    "\u01b3\073\u01b7\116\u01ba\134\u01b4\210\u01ab\213\u01b6\214\u01b0" +
    "\224\u01ac\225\u01af\240\u01b9\001\002\000\004\271\u01d7\001" +
    "\002\000\022\002\ufe2b\036\ufe2b\117\ufe2b\133\ufe2b\246\ufe2b" +
    "\250\ufe2b\253\ufe2b\271\ufe2b\001\002\000\154\002\ufea7\011" +
    "\ufea7\015\ufea7\016\ufea7\020\ufea7\041\ufea7\052\ufea7\055\ufea7" +
    "\060\ufea7\061\ufea7\074\ufea7\100\ufea7\101\ufea7\105\ufea7\106" +
    "\ufea7\110\ufea7\113\ufea7\123\ufea7\124\ufea7\126\ufea7\127\ufea7" +
    "\130\ufea7\137\ufea7\141\ufea7\142\ufea7\144\ufea7\145\ufea7\156" +
    "\ufea7\161\ufea7\164\ufea7\171\ufea7\172\ufea7\176\ufea7\223\ufea7" +
    "\233\ufea7\242\ufea7\243\ufea7\246\ufea7\251\ufea7\253\ufea7\256" +
    "\ufea7\257\ufea7\260\ufea7\261\ufea7\262\ufea7\263\ufea7\264\ufea7" +
    "\266\ufea7\267\ufea7\270\ufea7\271\ufea7\272\ufea7\300\ufea7\001" +
    "\002\000\004\276\u01da\001\002\000\004\253\u01db\001\002" +
    "\000\022\002\ufe2f\036\ufe2f\117\ufe2f\133\ufe2f\246\ufe2f\250" +
    "\ufe2f\253\ufe2f\271\ufe2f\001\002\000\062\006\u01e0\026\125" +
    "\027\116\054\u01e2\063\140\066\105\107\142\120\131\137" +
    "\124\140\106\230\104\251\u01dd\252\121\253\u01de\260\136" +
    "\261\120\265\147\267\130\272\u01df\274\101\276\111\277" +
    "\107\300\103\301\102\001\002\000\004\253\ufe69\001\002" +
    "\000\156\002\ufe8f\011\ufe8f\015\ufe8f\016\ufe8f\020\ufe8f\041" +
    "\ufe8f\052\ufe8f\055\ufe8f\060\ufe8f\061\ufe8f\074\ufe8f\100\ufe8f" +
    "\101\ufe8f\105\ufe8f\106\ufe8f\110\ufe8f\113\ufe8f\123\ufe8f\124" +
    "\ufe8f\126\ufe8f\127\ufe8f\130\ufe8f\137\ufe8f\141\ufe8f\142\ufe8f" +
    "\144\ufe8f\145\ufe8f\147\ufe8f\156\ufe8f\161\ufe8f\164\ufe8f\171" +
    "\ufe8f\172\ufe8f\176\ufe8f\223\ufe8f\233\ufe8f\242\ufe8f\243\ufe8f" +
    "\246\ufe8f\251\ufe8f\253\ufe8f\256\ufe8f\257\ufe8f\260\ufe8f\261" +
    "\ufe8f\262\ufe8f\263\ufe8f\264\ufe8f\266\ufe8f\267\ufe8f\270\ufe8f" +
    "\271\ufe8f\272\ufe8f\300\ufe8f\001\002\000\070\011\ufe40\020" +
    "\ufe40\055\ufe40\100\u01ed\110\ufe40\123\ufe40\127\ufe40\137\ufe40" +
    "\144\ufe40\164\ufe40\172\ufe40\246\ufe40\247\u016f\251\ufe40\252" +
    "\ufedf\253\ufe40\256\ufe40\257\ufe40\260\ufe40\261\ufe40\262\ufe40" +
    "\263\ufe40\264\ufe40\266\ufe40\267\ufe40\270\ufe40\271\ufe40\001" +
    "\002\000\054\026\125\027\116\063\140\066\105\107\142" +
    "\120\131\137\124\140\106\230\104\251\u01eb\252\121\260" +
    "\136\261\120\265\147\267\130\272\141\274\101\276\111" +
    "\277\107\300\103\301\102\001\002\000\004\253\u01ea\001" +
    "\002\000\052\026\125\027\116\063\140\066\105\107\142" +
    "\120\131\137\124\140\106\230\104\252\121\260\136\261" +
    "\120\265\147\267\130\272\141\274\101\276\111\277\107" +
    "\300\103\301\102\001\002\000\006\246\u01e4\253\ufe67\001" +
    "\002\000\052\026\125\027\116\063\140\066\105\107\142" +
    "\120\u01e5\137\124\140\106\230\104\252\121\260\136\261" +
    "\120\265\147\267\130\272\141\274\101\276\111\277\107" +
    "\300\103\301\102\001\002\000\052\026\125\027\116\063" +
    "\140\066\105\107\142\120\131\137\124\140\106\230\104" +
    "\252\121\260\136\261\120\265\147\267\130\272\141\274" +
    "\101\276\111\277\107\300\103\301\102\001\002\000\060" +
    "\011\175\020\170\055\163\110\200\123\173\127\165\137" +
    "\155\144\177\164\174\172\171\251\160\256\166\257\153" +
    "\260\167\261\162\262\154\263\157\264\172\266\156\267" +
    "\161\270\164\271\176\272\u01e7\001\002\000\006\253\u01e8" +
    "\260\u0145\001\002\000\154\002\ufe72\011\ufe72\015\ufe72\016" +
    "\ufe72\020\ufe72\041\ufe72\052\ufe72\055\ufe72\060\ufe72\061\ufe72" +
    "\074\ufe72\100\ufe72\101\ufe72\105\ufe72\106\ufe72\110\ufe72\113" +
    "\ufe72\123\ufe72\124\ufe72\126\ufe72\127\ufe72\130\ufe72\137\ufe72" +
    "\141\ufe72\142\ufe72\144\ufe72\145\ufe72\156\ufe72\161\ufe72\164" +
    "\ufe72\171\ufe72\172\ufe72\176\ufe72\223\ufe72\233\ufe72\242\ufe72" +
    "\243\ufe72\246\ufe72\251\ufe72\253\ufe72\256\ufe72\257\ufe72\260" +
    "\ufe72\261\ufe72\262\ufe72\263\ufe72\264\ufe72\266\ufe72\267\ufe72" +
    "\270\ufe72\271\ufe72\272\ufe72\300\ufe72\001\002\000\006\246" +
    "\210\253\ufe65\001\002\000\156\002\ufe8e\011\ufe8e\015\ufe8e" +
    "\016\ufe8e\020\ufe8e\041\ufe8e\052\ufe8e\055\ufe8e\060\ufe8e\061" +
    "\ufe8e\074\ufe8e\100\ufe8e\101\ufe8e\105\ufe8e\106\ufe8e\110\ufe8e" +
    "\113\ufe8e\123\ufe8e\124\ufe8e\126\ufe8e\127\ufe8e\130\ufe8e\137" +
    "\ufe8e\141\ufe8e\142\ufe8e\144\ufe8e\145\ufe8e\147\ufe8e\156\ufe8e" +
    "\161\ufe8e\164\ufe8e\171\ufe8e\172\ufe8e\176\ufe8e\223\ufe8e\233" +
    "\ufe8e\242\ufe8e\243\ufe8e\246\ufe8e\251\ufe8e\253\ufe8e\256\ufe8e" +
    "\257\ufe8e\260\ufe8e\261\ufe8e\262\ufe8e\263\ufe8e\264\ufe8e\266" +
    "\ufe8e\267\ufe8e\270\ufe8e\271\ufe8e\272\ufe8e\300\ufe8e\001\002" +
    "\000\004\253\ufe68\001\002\000\006\246\210\253\ufe66\001" +
    "\002\000\052\026\125\027\116\063\140\066\105\107\142" +
    "\120\131\137\124\140\106\230\104\252\121\260\136\261" +
    "\120\265\147\267\130\272\141\274\101\276\111\277\107" +
    "\300\103\301\102\001\002\000\060\011\175\020\170\055" +
    "\163\110\200\123\173\127\165\137\155\144\177\164\174" +
    "\172\171\251\160\253\u01ef\256\166\257\153\260\167\261" +
    "\162\262\154\263\157\264\172\266\156\267\161\270\164" +
    "\271\176\001\002\000\156\002\ufe8d\011\ufe8d\015\ufe8d\016" +
    "\ufe8d\020\ufe8d\041\ufe8d\052\ufe8d\055\ufe8d\060\ufe8d\061\ufe8d" +
    "\074\ufe8d\100\ufe8d\101\ufe8d\105\ufe8d\106\ufe8d\110\ufe8d\113" +
    "\ufe8d\123\ufe8d\124\ufe8d\126\ufe8d\127\ufe8d\130\ufe8d\137\ufe8d" +
    "\141\ufe8d\142\ufe8d\144\ufe8d\145\ufe8d\147\ufe8d\156\ufe8d\161" +
    "\ufe8d\164\ufe8d\171\ufe8d\172\ufe8d\176\ufe8d\223\ufe8d\233\ufe8d" +
    "\242\ufe8d\243\ufe8d\246\ufe8d\251\ufe8d\253\ufe8d\256\ufe8d\257" +
    "\ufe8d\260\ufe8d\261\ufe8d\262\ufe8d\263\ufe8d\264\ufe8d\266\ufe8d" +
    "\267\ufe8d\270\ufe8d\271\ufe8d\272\ufe8d\300\ufe8d\001\002\000" +
    "\004\102\uff37\001\002\000\004\272\360\001\002\000\004" +
    "\102\u0215\001\002\000\006\107\uff4d\272\uff4d\001\002\000" +
    "\006\107\uff4c\272\uff4c\001\002\000\004\272\u0214\001\002" +
    "\000\004\272\u0210\001\002\000\006\107\u0209\272\uff48\001" +
    "\002\000\006\107\u0209\272\uff48\001\002\000\006\107\u0209" +
    "\272\uff48\001\002\000\004\226\u01fb\001\002\000\004\272" +
    "\360\001\002\000\004\153\u01fe\001\002\000\004\002\uff53" +
    "\001\002\000\004\252\u01ff\001\002\000\004\272\u0200\001" +
    "\002\000\004\266\u0206\001\002\000\006\246\uff40\253\uff40" +
    "\001\002\000\006\246\u0203\253\u0204\001\002\000\004\272" +
    "\u0200\001\002\000\014\002\uff43\025\uff43\133\uff43\206\uff43" +
    "\232\uff43\001\002\000\006\246\uff3f\253\uff3f\001\002\000" +
    "\052\026\125\027\116\063\140\066\105\107\142\120\131" +
    "\137\124\140\106\230\104\252\121\260\136\261\120\265" +
    "\147\267\130\272\141\274\101\276\111\277\107\300\103" +
    "\301\102\001\002\000\062\011\175\020\170\055\163\110" +
    "\200\123\173\127\165\137\155\144\177\164\174\172\171" +
    "\246\uff3c\251\160\253\uff3c\256\166\257\153\260\167\261" +
    "\162\262\154\263\157\264\172\266\156\267\161\270\164" +
    "\271\176\001\002\000\004\272\360\001\002\000\004\063" +
    "\u020a\001\002\000\006\153\uff49\272\uff49\001\002\000\004" +
    "\002\uff50\001\002\000\004\272\u020d\001\002\000\004\002" +
    "\uff52\001\002\000\004\272\360\001\002\000\004\002\uff51" +
    "\001\002\000\006\107\uff63\272\uff63\001\002\000\006\107" +
    "\u0209\272\uff48\001\002\000\004\272\u0213\001\002\000\004" +
    "\002\uff4e\001\002\000\004\002\uffbc\001\002\000\006\107" +
    "\u0209\272\uff48\001\002\000\004\272\u0217\001\002\000\006" +
    "\247\u0223\252\ufedf\001\002\000\004\252\u021a\001\002\000" +
    "\004\002\uff4f\001\002\000\050\014\u01ae\021\u01aa\022\u01b5" +
    "\023\u01b8\031\u01a8\046\u01a9\047\u01b2\050\u01b1\056\u01b3\073" +
    "\u01b7\116\u01ba\134\u01b4\210\u01ab\213\u01b6\214\u01b0\224\u01ac" +
    "\225\u01af\240\u01b9\253\u021b\001\002\000\006\002\uff3b\167" +
    "\uff3b\001\002\000\010\246\uff39\250\uff39\253\uff39\001\002" +
    "\000\010\246\u021e\250\u0220\253\uff34\001\002\000\046\014" +
    "\u01ae\021\u01aa\022\u01b5\023\u01b8\031\u01a8\046\u01a9\047\u01b2" +
    "\050\u01b1\056\u01b3\073\u01b7\116\u01ba\134\u01b4\210\u01ab\213" +
    "\u01b6\214\u01b0\224\u01ac\225\u01af\240\u01b9\001\002\000\004" +
    "\253\u0221\001\002\000\004\253\uff35\001\002\000\006\002" +
    "\uff3a\167\uff3a\001\002\000\010\246\uff38\250\uff38\253\uff38" +
    "\001\002\000\004\272\u0224\001\002\000\004\252\ufede\001" +
    "\002\000\004\002\uff54\001\002\000\006\121\u0227\150\u0228" +
    "\001\002\000\006\216\u022a\272\uffc6\001\002\000\006\216" +
    "\u022a\272\uffc6\001\002\000\004\272\360\001\002\000\004" +
    "\272\uffc7\001\002\000\022\153\u022c\201\uff46\212\uff46\237" +
    "\uff46\244\uff46\252\u022d\254\uff46\275\uff46\001\002\000\004" +
    "\252\u0238\001\002\000\006\253\uffc8\272\326\001\002\000" +
    "\020\201\ufec4\212\322\237\ufec4\244\ufec4\252\ufec4\254\324" +
    "\275\321\001\002\000\012\201\uff22\237\uff22\244\013\252" +
    "\uff22\001\002\000\004\002\uffce\001\002\000\004\253\u0233" +
    "\001\002\000\006\246\327\253\uffc9\001\002\000\024\002" +
    "\uff46\153\u022c\201\uff46\212\uff46\237\uff46\244\uff46\252\uff46" +
    "\254\uff46\275\uff46\001\002\000\022\002\ufec4\201\ufec4\212" +
    "\322\237\ufec4\244\ufec4\252\ufec4\254\324\275\321\001\002" +
    "\000\014\002\uffca\201\uff22\237\uff22\244\013\252\uff22\001" +
    "\002\000\004\002\uffcf\001\002\000\004\002\uffcb\001\002" +
    "\000\004\272\u023b\001\002\000\006\246\uff45\253\uff45\001" +
    "\002\000\006\246\u023d\253\u023e\001\002\000\010\246\uff3e" +
    "\253\uff3e\266\u0206\001\002\000\006\246\uff3d\253\uff3d\001" +
    "\002\000\004\272\u023b\001\002\000\022\002\uff47\201\uff47" +
    "\212\uff47\237\uff47\244\uff47\252\uff47\254\uff47\275\uff47\001" +
    "\002\000\006\246\uff44\253\uff44\001\002\000\004\272\360" +
    "\001\002\000\022\153\u022c\201\uff46\212\uff46\237\uff46\244" +
    "\uff46\252\u0242\254\uff46\275\uff46\001\002\000\006\253\uffc8" +
    "\272\326\001\002\000\020\201\ufec4\212\322\237\ufec4\244" +
    "\ufec4\252\ufec4\254\324\275\321\001\002\000\012\201\uff22" +
    "\237\uff22\244\013\252\uff22\001\002\000\004\002\uffcc\001" +
    "\002\000\004\253\u0247\001\002\000\024\002\uff46\153\u022c" +
    "\201\uff46\212\uff46\237\uff46\244\uff46\252\uff46\254\uff46\275" +
    "\uff46\001\002\000\022\002\ufec4\201\ufec4\212\322\237\ufec4" +
    "\244\ufec4\252\ufec4\254\324\275\321\001\002\000\014\002" +
    "\uffca\201\uff22\237\uff22\244\013\252\uff22\001\002\000\004" +
    "\002\uffcd\001\002\000\004\102\u030d\001\002\000\004\216" +
    "\u028b\001\002\000\004\272\u028a\001\002\000\004\272\u0210" +
    "\001\002\000\006\107\u0254\272\uff82\001\002\000\006\107" +
    "\u0254\272\uff82\001\002\000\004\216\uff85\001\002\000\006" +
    "\107\u0254\272\uff82\001\002\000\004\272\u0217\001\002\000" +
    "\004\137\u0255\001\002\000\004\063\u0256\001\002\000\006" +
    "\153\uff83\272\uff83\001\002\000\004\252\u021a\001\002\000" +
    "\004\167\u0259\001\002\000\046\014\u01ae\021\u01aa\022\u01b5" +
    "\023\u01b8\031\u01a8\046\u01a9\047\u01b2\050\u01b1\056\u01b3\073" +
    "\u01b7\116\u01ba\134\u01b4\210\u01ab\213\u01b6\214\u01b0\224\u01ac" +
    "\225\u01af\240\u01b9\001\002\000\004\133\u025b\001\002\000" +
    "\004\300\u025c\001\002\000\026\002\uff2f\033\u0260\036\u025f" +
    "\071\u025d\112\u0266\135\u0267\157\u0262\205\u025e\215\u0261\234" +
    "\u0264\001\002\000\004\266\uff26\001\002\000\004\266\uff28" +
    "\001\002\000\004\266\uff2e\001\002\000\004\266\uff2b\001" +
    "\002\000\004\266\uff2d\001\002\000\004\266\uff2c\001\002" +
    "\000\026\002\uff90\033\u0260\036\u025f\071\u025d\112\u0266\135" +
    "\u0267\157\u0262\205\u025e\215\u0261\234\u0264\001\002\000\004" +
    "\266\uff2a\001\002\000\004\266\u0268\001\002\000\004\266" +
    "\uff29\001\002\000\004\266\uff27\001\002\000\004\300\u0269" +
    "\001\002\000\026\002\uff31\033\uff31\036\uff31\071\uff31\112" +
    "\uff31\135\uff31\157\uff31\205\uff31\215\uff31\234\uff31\001\002" +
    "\000\004\266\u026b\001\002\000\004\300\u026c\001\002\000" +
    "\026\002\uff30\033\uff30\036\uff30\071\uff30\112\uff30\135\uff30" +
    "\157\uff30\205\uff30\215\uff30\234\uff30\001\002\000\004\272" +
    "\360\001\002\000\010\015\uff5d\036\uff5d\252\u0270\001\002" +
    "\000\006\015\uff8a\036\u01cf\001\002\000\004\272\u0272\001" +
    "\002\000\006\246\u0275\253\u0276\001\002\000\010\036\u01cf" +
    "\246\uff8a\253\uff8a\001\002\000\006\246\uff5c\253\uff5c\001" +
    "\002\000\006\246\uff5a\253\uff5a\001\002\000\004\272\u0272" +
    "\001\002\000\006\015\uff5e\036\uff5e\001\002\000\006\246" +
    "\uff5b\253\uff5b\001\002\000\004\015\u0279\001\002\000\012" +
    "\201\uff22\237\uff22\244\013\252\uff22\001\002\000\004\002" +
    "\uff65\001\002\000\004\272\u027c\001\002\000\010\002\uff8a" +
    "\036\u01cf\133\uff8a\001\002\000\006\002\uff88\133\u027e\001" +
    "\002\000\004\300\u0280\001\002\000\004\002\uff9a\001\002" +
    "\000\014\002\uff89\015\uff89\025\uff89\220\uff89\232\uff89\001" +
    "\002\000\006\107\u0254\272\uff82\001\002\000\004\272\u0283" +
    "\001\002\000\004\133\u0284\001\002\000\004\300\u0285\001" +
    "\002\000\004\032\u0286\001\002\000\004\300\u0287\001\002" +
    "\000\004\013\u0288\001\002\000\004\300\u0289\001\002\000" +
    "\004\002\uff64\001\002\000\004\002\uffbd\001\002\000\006" +
    "\107\u0254\272\uff82\001\002\000\004\272\360\001\002\000" +
    "\034\002\uff8a\015\uff8a\025\uff8a\036\u01cf\127\u028f\133\uff8a" +
    "\154\u028e\175\uff8a\211\uff8a\220\uff8a\232\uff8a\244\uff8a\252" +
    "\u0290\001\002\000\004\024\u0302\001\002\000\020\017\u02ae" +
    "\151\u02af\152\u02b0\162\u02b2\203\u02b1\222\u02b3\272\360\001" +
    "\002\000\004\272\u02c7\001\002\000\024\002\uff80\015\uff80" +
    "\025\uff80\133\uff80\175\u0292\211\uff80\220\uff80\232\uff80\244" +
    "\uff80\001\002\000\004\076\u02b8\001\002\000\022\002\uff6d" +
    "\015\uff6d\025\uff6d\133\uff6d\211\uff6d\220\uff6d\232\uff6d\244" +
    "\u0294\001\002\000\004\204\u02b4\001\002\000\020\002\uff77" +
    "\015\uff77\025\uff77\133\uff77\211\u0296\220\uff77\232\uff77\001" +
    "\002\000\004\015\u02ac\001\002\000\016\002\uff88\015\uff88" +
    "\025\uff88\133\u027e\220\uff88\232\uff88\001\002\000\014\002" +
    "\uff8c\015\uff8c\025\u0299\220\uff8c\232\u029b\001\002\000\004" +
    "\110\u02aa\001\002\000\010\002\uff6f\015\uff6f\220\u029c\001" +
    "\002\000\010\002\uff8d\015\uff8d\220\uff8d\001\002\000\004" +
    "\252\u02a0\001\002\000\006\002\uff94\015\u029e\001\002\000" +
    "\012\201\uff22\237\uff22\244\013\252\uff22\001\002\000\004" +
    "\002\uff96\001\002\000\004\300\u02a2\001\002\000\006\246" +
    "\u02a5\253\u02a6\001\002\000\004\266\u02a3\001\002\000\004" +
    "\300\u02a4\001\002\000\006\246\uff6c\253\uff6c\001\002\000" +
    "\004\300\u02a7\001\002\000\006\002\uff70\015\uff70\001\002" +
    "\000\004\266\u02a8\001\002\000\004\300\u02a9\001\002\000" +
    "\006\246\uff6b\253\uff6b\001\002\000\004\300\u02ab\001\002" +
    "\000\010\002\uff8e\015\uff8e\220\uff8e\001\002\000\016\017" +
    "\u02ae\151\u02af\152\u02b0\162\u02b2\203\u02b1\222\u02b3\001\002" +
    "\000\016\002\uff78\015\uff78\025\uff78\133\uff78\220\uff78\232" +
    "\uff78\001\002\000\020\002\uff71\015\uff71\025\uff71\133\uff71" +
    "\220\uff71\232\uff71\300\uff71\001\002\000\020\002\uff76\015" +
    "\uff76\025\uff76\133\uff76\220\uff76\232\uff76\300\uff76\001\002" +
    "\000\020\002\uff75\015\uff75\025\uff75\133\uff75\220\uff75\232" +
    "\uff75\300\uff75\001\002\000\020\002\uff73\015\uff73\025\uff73" +
    "\133\uff73\220\uff73\232\uff73\300\uff73\001\002\000\020\002" +
    "\uff72\015\uff72\025\uff72\133\uff72\220\uff72\232\uff72\300\uff72" +
    "\001\002\000\020\002\uff74\015\uff74\025\uff74\133\uff74\220" +
    "\uff74\232\uff74\300\uff74\001\002\000\004\252\u02b5\001\002" +
    "\000\004\300\u02a2\001\002\000\006\246\u02a5\253\u02b7\001" +
    "\002\000\020\002\uff6e\015\uff6e\025\uff6e\133\uff6e\211\uff6e" +
    "\220\uff6e\232\uff6e\001\002\000\004\051\u02b9\001\002\000" +
    "\030\002\uff7a\015\uff7a\025\uff7a\062\uff7a\067\u02ba\131\uff7a" +
    "\133\uff7a\211\uff7a\220\uff7a\232\uff7a\244\uff7a\001\002\000" +
    "\004\221\u02c1\001\002\000\026\002\uff7e\015\uff7e\025\uff7e" +
    "\062\u02bc\131\uff7e\133\uff7e\211\uff7e\220\uff7e\232\uff7e\244" +
    "\uff7e\001\002\000\004\024\u02c4\001\002\000\024\002\uff7c" +
    "\015\uff7c\025\uff7c\131\u02bf\133\uff7c\211\uff7c\220\uff7c\232" +
    "\uff7c\244\uff7c\001\002\000\022\002\uff81\015\uff81\025\uff81" +
    "\133\uff81\211\uff81\220\uff81\232\uff81\244\uff81\001\002\000" +
    "\004\221\u02c1\001\002\000\022\002\uff7d\015\uff7d\025\uff7d" +
    "\133\uff7d\211\uff7d\220\uff7d\232\uff7d\244\uff7d\001\002\000" +
    "\004\024\u02c2\001\002\000\004\300\u02c3\001\002\000\026" +
    "\002\uff79\015\uff79\025\uff79\062\uff79\131\uff79\133\uff79\211" +
    "\uff79\220\uff79\232\uff79\244\uff79\001\002\000\004\300\u02c5" +
    "\001\002\000\024\002\uff7f\015\uff7f\025\uff7f\131\uff7f\133" +
    "\uff7f\211\uff7f\220\uff7f\232\uff7f\244\uff7f\001\002\000\026" +
    "\002\uff7b\015\uff7b\025\uff7b\062\uff7b\131\uff7b\133\uff7b\211" +
    "\uff7b\220\uff7b\232\uff7b\244\uff7b\001\002\000\046\014\u01ae" +
    "\021\u01aa\022\u01b5\023\u01b8\031\u01a8\046\u01a9\047\u01b2\050" +
    "\u01b1\056\u01b3\073\u01b7\116\u01ba\134\u01b4\210\u01ab\213\u01b6" +
    "\214\u01b0\224\u01ac\225\u01af\240\u01b9\001\002\000\006\246" +
    "\u02ca\253\u02cb\001\002\000\006\246\uff68\253\uff68\001\002" +
    "\000\004\272\u02c7\001\002\000\030\002\uff8a\025\uff8a\036" +
    "\u01cf\133\uff8a\154\u02cc\160\u02cd\175\uff8a\211\uff8a\220\uff8a" +
    "\232\uff8a\244\uff8a\001\002\000\004\024\u02de\001\002\000" +
    "\004\024\u02d5\001\002\000\022\002\uff80\025\uff80\133\uff80" +
    "\175\u0292\211\uff80\220\uff80\232\uff80\244\uff80\001\002\000" +
    "\020\002\uff6d\025\uff6d\133\uff6d\211\uff6d\220\uff6d\232\uff6d" +
    "\244\u0294\001\002\000\016\002\uff77\025\uff77\133\uff77\211" +
    "\u0296\220\uff77\232\uff77\001\002\000\014\002\uff88\025\uff88" +
    "\133\u027e\220\uff88\232\uff88\001\002\000\012\002\uff8c\025" +
    "\u0299\220\uff8c\232\u029b\001\002\000\006\002\uff6f\220\u029c" +
    "\001\002\000\004\002\uff95\001\002\000\004\043\u02d6\001" +
    "\002\000\004\272\u0210\001\002\000\004\272\u02d8\001\002" +
    "\000\010\002\uff86\036\uff86\252\u02da\001\002\000\006\002" +
    "\uff8a\036\u01cf\001\002\000\004\300\u02db\001\002\000\004" +
    "\253\u02dc\001\002\000\006\002\uff87\036\uff87\001\002\000" +
    "\004\002\uff93\001\002\000\004\252\u02df\001\002\000\004" +
    "\272\u02c7\001\002\000\006\246\u02ca\253\u02e1\001\002\000" +
    "\024\002\uff8a\025\uff8a\036\u01cf\133\uff8a\175\uff8a\211\uff8a" +
    "\220\uff8a\232\uff8a\244\uff8a\001\002\000\022\002\uff80\025" +
    "\uff80\133\uff80\175\u0292\211\uff80\220\uff80\232\uff80\244\uff80" +
    "\001\002\000\020\002\uff6d\025\uff6d\133\uff6d\211\uff6d\220" +
    "\uff6d\232\uff6d\244\u0294\001\002\000\016\002\uff77\025\uff77" +
    "\133\uff77\211\u0296\220\uff77\232\uff77\001\002\000\014\002" +
    "\uff88\025\uff88\133\u027e\220\uff88\232\uff88\001\002\000\012" +
    "\002\uff8c\025\u0299\220\uff8c\232\u029b\001\002\000\006\002" +
    "\uff6f\220\u029c\001\002\000\004\002\uff92\001\002\000\006" +
    "\246\uff67\253\uff67\001\002\000\012\002\uff8a\036\u01cf\246" +
    "\uff8a\253\uff8a\001\002\000\010\002\uff66\246\uff66\253\uff66" +
    "\001\002\000\004\300\u02f4\001\002\000\012\002\uff8a\036" +
    "\u01cf\133\uff8a\211\uff8a\001\002\000\010\002\uff88\133\u027e" +
    "\211\u02ef\001\002\000\004\015\u02f1\001\002\000\004\002" +
    "\uff98\001\002\000\016\017\u02ae\151\u02af\152\u02b0\162\u02b2" +
    "\203\u02b1\222\u02b3\001\002\000\006\002\uff88\133\u027e\001" +
    "\002\000\004\002\uff99\001\002\000\026\002\uff69\025\uff69" +
    "\036\uff69\133\uff69\154\u02f5\175\uff69\211\uff69\220\uff69\232" +
    "\uff69\244\uff69\001\002\000\004\024\u02fe\001\002\000\024" +
    "\002\uff8a\025\uff8a\036\u01cf\133\uff8a\175\uff8a\211\uff8a\220" +
    "\uff8a\232\uff8a\244\uff8a\001\002\000\022\002\uff80\025\uff80" +
    "\133\uff80\175\u0292\211\uff80\220\uff80\232\uff80\244\uff80\001" +
    "\002\000\020\002\uff6d\025\uff6d\133\uff6d\211\uff6d\220\uff6d" +
    "\232\uff6d\244\u0294\001\002\000\016\002\uff77\025\uff77\133" +
    "\uff77\211\u0296\220\uff77\232\uff77\001\002\000\014\002\uff88" +
    "\025\uff88\133\u027e\220\uff88\232\uff88\001\002\000\012\002" +
    "\uff8c\025\u0299\220\uff8c\232\u029b\001\002\000\006\002\uff6f" +
    "\220\u029c\001\002\000\004\002\uff97\001\002\000\004\252" +
    "\u02ff\001\002\000\004\272\u02c7\001\002\000\006\246\u02ca" +
    "\253\u0301\001\002\000\024\002\uff6a\025\uff6a\036\uff6a\133" +
    "\uff6a\175\uff6a\211\uff6a\220\uff6a\232\uff6a\244\uff6a\001\002" +
    "\000\004\252\u0303\001\002\000\004\272\u02c7\001\002\000" +
    "\006\246\u02ca\253\u0305\001\002\000\024\002\uff8a\025\uff8a" +
    "\036\u01cf\133\uff8a\175\uff8a\211\uff8a\220\uff8a\232\uff8a\244" +
    "\uff8a\001\002\000\022\002\uff80\025\uff80\133\uff80\175\u0292" +
    "\211\uff80\220\uff80\232\uff80\244\uff80\001\002\000\020\002" +
    "\uff6d\025\uff6d\133\uff6d\211\uff6d\220\uff6d\232\uff6d\244\u0294" +
    "\001\002\000\016\002\uff77\025\uff77\133\uff77\211\u0296\220" +
    "\uff77\232\uff77\001\002\000\014\002\uff88\025\uff88\133\u027e" +
    "\220\uff88\232\uff88\001\002\000\012\002\uff8c\025\u0299\220" +
    "\uff8c\232\u029b\001\002\000\006\002\uff6f\220\u029c\001\002" +
    "\000\004\002\uff91\001\002\000\006\107\u0254\272\uff82\001" +
    "\002\000\004\272\u0217\001\002\000\004\252\u021a\001\002" +
    "\000\004\167\u0311\001\002\000\046\014\u01ae\021\u01aa\022" +
    "\u01b5\023\u01b8\031\u01a8\046\u01a9\047\u01b2\050\u01b1\056\u01b3" +
    "\073\u01b7\116\u01ba\134\u01b4\210\u01ab\213\u01b6\214\u01b0\224" +
    "\u01ac\225\u01af\240\u01b9\001\002\000\006\117\u0314\133\uff32" +
    "\001\002\000\004\133\u0316\001\002\000\046\014\u01ae\021" +
    "\u01aa\022\u01b5\023\u01b8\031\u01a8\046\u01a9\047\u01b2\050\u01b1" +
    "\056\u01b3\073\u01b7\116\u01ba\134\u01b4\210\u01ab\213\u01b6\214" +
    "\u01b0\224\u01ac\225\u01af\240\u01b9\001\002\000\004\133\uff33" +
    "\001\002\000\004\300\u0317\001\002\000\026\002\uff2f\033" +
    "\u0260\036\u025f\071\u025d\112\u0266\135\u0267\157\u0262\205\u025e" +
    "\215\u0261\234\u0264\001\002\000\026\002\uff8f\033\u0260\036" +
    "\u025f\071\u025d\112\u0266\135\u0267\157\u0262\205\u025e\215\u0261" +
    "\234\u0264\001\002\000\004\002\uffd0\001\002\000\004\002" +
    "\uffd2\001\002\000\004\002\uffd1\001\002\000\006\065\u0251" +
    "\216\uff84\001\002\000\004\216\u031e\001\002\000\006\107" +
    "\u0254\272\uff82\001\002\000\004\272\360\001\002\000\024" +
    "\015\uff8a\025\uff8a\036\u01cf\133\uff8a\175\uff8a\211\uff8a\220" +
    "\uff8a\232\uff8a\244\uff8a\001\002\000\022\015\uff80\025\uff80" +
    "\133\uff80\175\u0292\211\uff80\220\uff80\232\uff80\244\uff80\001" +
    "\002\000\020\015\uff6d\025\uff6d\133\uff6d\211\uff6d\220\uff6d" +
    "\232\uff6d\244\u0294\001\002\000\016\015\uff77\025\uff77\133" +
    "\uff77\211\u0296\220\uff77\232\uff77\001\002\000\014\015\uff88" +
    "\025\uff88\133\u027e\220\uff88\232\uff88\001\002\000\012\015" +
    "\uff8c\025\u0299\220\uff8c\232\u029b\001\002\000\006\015\uff6f" +
    "\220\u029c\001\002\000\004\015\u029e\001\002\000\004\272" +
    "\360\001\002\000\004\226\u032a\001\002\000\004\272\360" +
    "\001\002\000\006\002\uff56\153\u01fe\001\002\000\004\002" +
    "\uff55\001\002\000\004\002\uff57\001\002\000\006\002\uffd5" +
    "\272\360\001\002\000\004\002\uffd4\001\002\000\004\002" +
    "\uffd3\001\002\000\004\227\u0344\001\002\000\004\143\uffb1" +
    "\001\002\000\004\143\uffb2\001\002\000\004\143\u033b\001" +
    "\002\000\004\143\uffb3\001\002\000\004\272\u0337\001\002" +
    "\000\004\227\u0338\001\002\000\004\105\u0339\001\002\000" +
    "\004\272\u033a\001\002\000\004\002\uffbb\001\002\000\010" +
    "\044\u033c\216\u0340\272\u033d\001\002\000\004\272\u0343\001" +
    "\002\000\012\002\uff60\100\uff60\227\uff60\300\uff61\001\002" +
    "\000\006\100\uffb7\227\uffb7\001\002\000\004\300\u0342\001" +
    "\002\000\004\272\360\001\002\000\006\100\uffb5\227\uffb5" +
    "\001\002\000\006\100\uffb4\227\uffb4\001\002\000\006\100" +
    "\uffb6\227\uffb6\001\002\000\006\173\u0346\272\uffab\001\002" +
    "\000\004\272\u0347\001\002\000\004\272\uffac\001\002\000" +
    "\006\002\uffad\244\u0349\001\002\000\004\002\uffb9\001\002" +
    "\000\004\104\u034a\001\002\000\004\272\u034c\001\002\000" +
    "\004\002\uffae\001\002\000\006\002\uff5f\075\uff5f\001\002" +
    "\000\004\272\360\001\002\000\004\272\360\001\002\000" +
    "\006\015\u0351\165\u0350\001\002\000\004\227\u0353\001\002" +
    "\000\012\201\uff22\237\uff22\244\013\252\uff22\001\002\000" +
    "\004\002\uff59\001\002\000\004\272\360\001\002\000\004" +
    "\002\uff58\001\002\000\020\004\u0356\030\u035c\057\u0357\153" +
    "\u01fe\165\u0359\166\u035d\206\uff41\001\002\000\010\035\uff9b" +
    "\107\u0254\153\uff82\001\002\000\012\034\u035e\107\u0209\153" +
    "\uff48\272\uff9d\001\002\000\006\002\uff42\206\uff42\001\002" +
    "\000\004\227\u0372\001\002\000\004\035\u036e\001\002\000" +
    "\004\206\u0362\001\002\000\006\034\u035e\272\uff9d\001\002" +
    "\000\004\035\uff9c\001\002\000\004\272\uff9e\001\002\000" +
    "\004\272\u0360\001\002\000\004\272\u02c7\001\002\000\004" +
    "\002\uffa7\001\002\000\020\002\uff8c\025\u0299\070\u0366\133" +
    "\u0363\204\u0368\220\u0364\232\u029b\001\002\000\004\300\u036d" +
    "\001\002\000\004\252\uffa0\001\002\000\004\002\uffa1\001" +
    "\002\000\016\017\u02ae\151\u02af\152\u02b0\162\u02b2\203\u02b1" +
    "\222\u02b3\001\002\000\004\252\u0369\001\002\000\004\252" +
    "\uff9f\001\002\000\004\300\u02a2\001\002\000\006\246\u02a5" +
    "\253\u036b\001\002\000\004\002\uffa2\001\002\000\004\002" +
    "\uffa5\001\002\000\004\002\uffa4\001\002\000\004\252\u036f" +
    "\001\002\000\004\272\u02c7\001\002\000\006\246\u02ca\253" +
    "\u0371\001\002\000\004\002\uffaa\001\002\000\004\272\360" +
    "\001\002\000\004\002\uffa3\001\002\000\004\272\u0377\001" +
    "\002\000\004\153\u01fe\001\002\000\004\002\uffa6\001\002" +
    "\000\004\002\uffa8\001\002\000\004\153\u01fe\001\002\000" +
    "\012\002\uff88\025\uff88\133\u027e\232\uff88\001\002\000\010" +
    "\002\uff8c\025\u0299\232\u029b\001\002\000\004\002\uffa9\001" +
    "\002\000\004\272\u034c\001\002\000\010\006\u0332\115\u0333" +
    "\201\u0335\001\002\000\004\272\u037f\001\002\000\004\100" +
    "\u0380\001\002\000\004\105\u0381\001\002\000\004\272\u0382" +
    "\001\002\000\004\002\uffba\001\002\000\004\100\u0384\001" +
    "\002\000\006\173\u0346\272\uffab\001\002\000\004\272\u0386" +
    "\001\002\000\004\002\uffb8\001\002\000\004\075\u0388\001" +
    "\002\000\010\006\uffb0\115\uffb0\201\uffb0\001\002\000\004" +
    "\002\uff0e\001\002\000\004\272\360\001\002\000\004\272" +
    "\ufef7\001\002\000\004\002\ufef8\001\002\000\004\114\u038e" +
    "\001\002\000\004\300\u038f\001\002\000\006\121\uffd6\150" +
    "\u0390\001\002\000\004\121\uffd7\001\002\000\004\121\u0392" +
    "\001\002\000\004\216\u0393\001\002\000\004\272\360\001" +
    "\002\000\006\002\uff41\153\u01fe\001\002\000\004\002\uffd8" +
    "\001\002\000\014\115\uff23\201\uff23\237\uff23\246\u03a2\252" +
    "\uff23\001\002\000\014\115\uff1f\201\uff1f\237\uff1f\246\uff1f" +
    "\252\uff1f\001\002\000\004\015\u039e\001\002\000\004\015" +
    "\u039a\001\002\000\004\252\u039b\001\002\000\012\201\uff22" +
    "\237\uff22\244\013\252\uff22\001\002\000\004\253\u039d\001" +
    "\002\000\014\115\uff20\201\uff20\237\uff20\246\uff20\252\uff20" +
    "\001\002\000\004\252\u039f\001\002\000\012\201\uff22\237" +
    "\uff22\244\013\252\uff22\001\002\000\004\253\u03a1\001\002" +
    "\000\014\115\uff21\201\uff21\237\uff21\246\uff21\252\uff21\001" +
    "\002\000\006\272\u0398\300\u0399\001\002\000\014\115\uff1e" +
    "\201\uff1e\237\uff1e\246\uff1e\252\uff1e\001\002\000\012\002" +
    "\uff0d\110\u03d5\127\u03b5\300\u03b6\001\002\000\004\103\uff00" +
    "\001\002\000\004\002\uffc5\001\002\000\010\002\uff09\127" +
    "\u03b5\300\u03b6\001\002\000\010\002\uff4a\127\uff4a\300\uff4a" +
    "\001\002\000\004\174\u03d3\001\002\000\004\226\u03d1\001" +
    "\002\000\004\104\u03ce\001\002\000\004\272\u03cb\001\002" +
    "\000\004\272\360\001\002\000\004\216\u03c8\001\002\000" +
    "\004\226\u03c6\001\002\000\010\002\uff4b\127\uff4b\300\uff4b" +
    "\001\002\000\004\173\u03bc\001\002\000\004\103\u03b4\001" +
    "\002\000\004\103\ufeff\001\002\000\012\002\uff04\110\u03b7" +
    "\127\u03b5\300\u03b6\001\002\000\004\300\u03bb\001\002\000" +
    "\004\002\ufefb\001\002\000\004\272\u03b9\001\002\000\004" +
    "\002\uff03\001\002\000\010\002\uff02\127\u03b5\300\u03b6\001" +
    "\002\000\004\002\uff01\001\002\000\004\002\ufefa\001\002" +
    "\000\004\272\u03bd\001\002\000\006\002\uffc2\143\u03be\001" +
    "\002\000\010\044\u03bf\216\u03c1\272\u033d\001\002\000\004" +
    "\272\u03c5\001\002\000\004\002\uffc1\001\002\000\004\272" +
    "\360\001\002\000\004\300\u03c3\001\002\000\004\002\uffbe" +
    "\001\002\000\004\002\uffbf\001\002\000\004\002\uffc0\001" +
    "\002\000\004\272\360\001\002\000\004\002\uff07\001\002" +
    "\000\004\272\360\001\002\000\004\002\ufef9\001\002\000" +
    "\004\002\uff05\001\002\000\010\002\uff62\127\uff62\300\uff62" +
    "\001\002\000\010\002\ufefd\127\u03b5\300\u03b6\001\002\000" +
    "\004\002\ufefc\001\002\000\004\105\u03cf\001\002\000\004" +
    "\272\u03d0\001\002\000\004\002\uffc4\001\002\000\004\272" +
    "\360\001\002\000\004\002\uff06\001\002\000\004\002\uffc3" +
    "\001\002\000\004\002\uff08\001\002\000\004\272\u03d7\001" +
    "\002\000\004\002\uff0c\001\002\000\010\002\uff0b\127\u03b5" +
    "\300\u03b6\001\002\000\004\002\uff0a\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u03d6\000\126\002\071\005\067\012\036\013\003\014" +
    "\020\015\051\016\040\017\004\021\027\022\057\024\035" +
    "\025\005\107\060\122\052\123\050\134\016\135\033\136" +
    "\011\137\044\140\031\141\042\142\017\143\047\144\043" +
    "\145\056\146\023\147\045\150\073\151\072\152\007\153" +
    "\064\214\041\215\024\216\006\217\030\220\021\221\065" +
    "\222\034\242\066\243\022\244\061\245\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\210\u03a6\246\u03b1\001" +
    "\001\000\002\001\001\000\006\110\u0395\111\u0396\001\001" +
    "\000\002\001\001\000\004\023\u0389\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\226\u037c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\223\u0330\224\u0333\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\u032f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\u0319\107\060\122\u031a\143\u0318\001\001\000\006" +
    "\166\u024b\207\u024e\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\215\004\217\007\214\010\213\026\216" +
    "\027\220\001\001\000\002\001\001\000\006\207\u01f7\237" +
    "\u01f1\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\100\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\033\144" +
    "\034\150\035\147\036\132\044\114\046\125\047\126\050" +
    "\113\051\112\052\136\053\116\054\131\071\142\073\145" +
    "\074\134\100\122\101\111\104\133\113\143\121\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\033\u01a3\034\150\035\147\036\132\044\114" +
    "\046\125\047\126\050\113\051\112\052\136\053\116\054" +
    "\131\071\142\073\145\074\134\100\122\101\111\104\133" +
    "\113\143\121\121\001\001\000\056\005\205\033\u013a\034" +
    "\311\035\147\036\132\044\114\046\310\047\126\050\113" +
    "\051\112\052\136\053\116\054\131\071\142\073\145\074" +
    "\134\100\122\101\111\104\133\107\204\113\202\121\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\033" +
    "\u01a2\034\150\035\147\036\132\044\114\046\125\047\126" +
    "\050\113\051\112\052\136\053\116\054\131\071\142\073" +
    "\145\074\134\100\122\101\111\104\133\113\143\121\121" +
    "\001\001\000\054\033\u0193\034\150\035\147\036\132\044" +
    "\114\046\125\047\126\050\113\051\112\052\136\053\116" +
    "\054\131\071\142\073\145\074\134\100\122\101\111\102" +
    "\u0191\104\133\113\143\121\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\033\u0190\034\150\035\147\036" +
    "\132\044\114\046\125\047\126\050\113\051\112\052\136" +
    "\053\116\054\131\071\142\073\145\074\134\100\122\101" +
    "\111\104\133\113\143\121\121\001\001\000\052\033\u018e" +
    "\034\150\035\147\036\132\044\114\046\125\047\126\050" +
    "\113\051\112\052\136\053\116\054\131\071\142\073\145" +
    "\074\134\100\122\101\111\104\133\113\143\121\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\033\u0174\034\150\035\147\036" +
    "\132\044\114\046\125\047\126\050\113\051\112\052\136" +
    "\053\116\054\131\071\142\073\145\074\134\100\122\101" +
    "\111\104\133\113\143\121\121\001\001\000\002\001\001" +
    "\000\004\113\u0171\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\033\151\034\150\035\147\036" +
    "\132\044\114\046\125\047\126\050\113\051\112\052\136" +
    "\053\116\054\131\071\142\073\145\074\134\100\122\101" +
    "\111\104\133\113\143\121\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\033\u016a\034" +
    "\150\035\147\036\132\044\114\046\125\047\126\050\113" +
    "\051\112\052\136\053\116\054\131\071\142\073\145\074" +
    "\134\100\122\101\111\104\133\113\143\121\121\001\001" +
    "\000\052\033\u0169\034\150\035\147\036\132\044\114\046" +
    "\125\047\126\050\113\051\112\052\136\053\116\054\131" +
    "\071\142\073\145\074\134\100\122\101\111\104\133\113" +
    "\143\121\121\001\001\000\002\001\001\000\052\033\u0156" +
    "\034\150\035\147\036\132\044\114\046\125\047\126\050" +
    "\113\051\112\052\136\053\116\054\131\071\142\073\145" +
    "\074\134\100\122\101\111\104\133\113\143\121\121\001" +
    "\001\000\052\033\u0155\034\150\035\147\036\132\044\114" +
    "\046\125\047\126\050\113\051\112\052\136\053\116\054" +
    "\131\071\142\073\145\074\134\100\122\101\111\104\133" +
    "\113\143\121\121\001\001\000\052\033\u0154\034\150\035" +
    "\147\036\132\044\114\046\125\047\126\050\113\051\112" +
    "\052\136\053\116\054\131\071\142\073\145\074\134\100" +
    "\122\101\111\104\133\113\143\121\121\001\001\000\002" +
    "\001\001\000\052\033\u014f\034\150\035\147\036\132\044" +
    "\114\046\125\047\126\050\113\051\112\052\136\053\116" +
    "\054\131\071\142\073\145\074\134\100\122\101\111\104" +
    "\133\113\143\121\121\001\001\000\052\033\u014d\034\150" +
    "\035\147\036\132\044\114\046\125\047\126\050\113\051" +
    "\112\052\136\053\116\054\131\071\142\073\145\074\134" +
    "\100\122\101\111\104\133\113\143\121\121\001\001\000" +
    "\052\033\u014a\034\150\035\147\036\132\044\114\046\125" +
    "\047\126\050\113\051\112\052\136\053\116\054\131\071" +
    "\142\073\145\074\134\100\122\101\111\104\133\113\143" +
    "\121\121\001\001\000\052\033\u0147\034\150\035\147\036" +
    "\132\044\114\046\125\047\126\050\113\051\112\052\136" +
    "\053\116\054\131\071\142\073\145\074\134\100\122\101" +
    "\111\104\133\113\143\121\121\001\001\000\052\033\u0146" +
    "\034\150\035\147\036\132\044\114\046\125\047\126\050" +
    "\113\051\112\052\136\053\116\054\131\071\142\073\145" +
    "\074\134\100\122\101\111\104\133\113\143\121\121\001" +
    "\001\000\052\033\u0141\034\150\035\147\036\132\044\114" +
    "\046\125\047\126\050\113\051\112\052\136\053\116\054" +
    "\131\071\142\073\145\074\134\100\122\101\111\104\133" +
    "\113\143\121\121\001\001\000\052\033\u013a\034\u013b\035" +
    "\147\036\132\044\114\046\u0139\047\126\050\113\051\112" +
    "\052\136\053\116\054\131\071\142\073\145\074\134\100" +
    "\122\101\111\104\133\113\143\121\121\001\001\000\052" +
    "\033\u0138\034\150\035\147\036\132\044\114\046\125\047" +
    "\126\050\113\051\112\052\136\053\116\054\131\071\142" +
    "\073\145\074\134\100\122\101\111\104\133\113\143\121" +
    "\121\001\001\000\052\033\u0137\034\150\035\147\036\132" +
    "\044\114\046\125\047\126\050\113\051\112\052\136\053" +
    "\116\054\131\071\142\073\145\074\134\100\122\101\111" +
    "\104\133\113\143\121\121\001\001\000\002\001\001\000" +
    "\052\033\u0133\034\150\035\147\036\132\044\114\046\125" +
    "\047\126\050\113\051\112\052\136\053\116\054\131\071" +
    "\142\073\145\074\134\100\122\101\111\104\133\113\143" +
    "\121\121\001\001\000\052\033\u0132\034\150\035\147\036" +
    "\132\044\114\046\125\047\126\050\113\051\112\052\136" +
    "\053\116\054\131\071\142\073\145\074\134\100\122\101" +
    "\111\104\133\113\143\121\121\001\001\000\052\033\u0130" +
    "\034\150\035\147\036\132\044\114\046\125\047\126\050" +
    "\113\051\112\052\136\053\116\054\131\071\142\073\145" +
    "\074\134\100\122\101\111\104\133\113\143\121\121\001" +
    "\001\000\052\033\u012e\034\150\035\147\036\132\044\114" +
    "\046\125\047\126\050\113\051\112\052\136\053\116\054" +
    "\131\071\142\073\145\074\134\100\122\101\111\104\133" +
    "\113\143\121\121\001\001\000\004\113\200\001\001\000" +
    "\002\001\001\000\060\005\205\033\203\034\150\035\147" +
    "\036\132\037\206\044\114\046\125\047\126\050\113\051" +
    "\112\052\136\053\116\054\131\071\142\073\145\074\134" +
    "\100\122\101\111\104\133\107\204\113\202\121\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\003\215" +
    "\004\217\007\214\010\213\026\216\027\220\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\033\211\034\150" +
    "\035\147\036\132\044\114\046\125\047\126\050\113\051" +
    "\112\052\136\053\116\054\131\071\142\073\145\074\134" +
    "\100\122\101\111\104\133\113\143\121\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\133\u0120\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\105\341\001\001" +
    "\000\006\005\336\107\204\001\001\000\004\117\322\001" +
    "\001\000\004\011\224\001\001\000\004\061\314\001\001" +
    "\000\062\011\231\030\233\031\230\032\235\033\234\034" +
    "\150\035\147\036\132\044\114\046\125\047\126\050\113" +
    "\051\112\052\136\053\116\054\131\071\142\073\145\074" +
    "\134\100\122\101\111\104\133\113\143\121\121\001\001" +
    "\000\064\005\205\030\233\031\230\032\235\033\234\034" +
    "\311\035\147\036\132\044\114\046\310\047\126\050\113" +
    "\051\112\052\136\053\116\054\131\071\142\073\145\074" +
    "\134\100\122\101\111\104\133\107\204\113\202\121\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\240" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\031\246\032\235\033\234\034" +
    "\150\035\147\036\132\044\114\046\125\047\126\050\113" +
    "\051\112\052\136\053\116\054\131\071\142\073\145\074" +
    "\134\100\122\101\111\104\133\113\143\121\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\061" +
    "\257\001\001\000\006\066\276\067\277\001\001\000\002" +
    "\001\001\000\056\033\264\034\150\035\147\036\132\044" +
    "\114\046\125\047\126\050\113\051\112\052\136\053\116" +
    "\054\131\060\262\062\263\071\142\073\145\074\134\100" +
    "\122\101\111\104\133\113\143\121\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\063\265\001\001\000" +
    "\004\064\271\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\033\264\034\150\035\147\036\132" +
    "\044\114\046\125\047\126\050\113\051\112\052\136\053" +
    "\116\054\131\062\275\071\142\073\145\074\134\100\122" +
    "\101\111\104\133\113\143\121\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\070\303\001\001\000\052" +
    "\033\301\034\150\035\147\036\132\044\114\046\125\047" +
    "\126\050\113\051\112\052\136\053\116\054\131\071\142" +
    "\073\145\074\134\100\122\101\111\104\133\113\143\121" +
    "\121\001\001\000\002\001\001\000\052\033\304\034\150" +
    "\035\147\036\132\044\114\046\125\047\126\050\113\051" +
    "\112\052\136\053\116\054\131\071\142\073\145\074\134" +
    "\100\122\101\111\104\133\113\143\121\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\030\306\031\230" +
    "\032\235\033\234\034\150\035\147\036\132\044\114\046" +
    "\125\047\126\050\113\051\112\052\136\053\116\054\131" +
    "\071\142\073\145\074\134\100\122\101\111\104\133\113" +
    "\143\121\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\066\315\067\277\001\001\000\002" +
    "\001\001\000\004\117\334\001\001\000\004\117\332\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\030\331" +
    "\031\230\032\235\033\234\034\150\035\147\036\132\044" +
    "\114\046\125\047\126\050\113\051\112\052\136\053\116" +
    "\054\131\071\142\073\145\074\134\100\122\101\111\104" +
    "\133\113\143\121\121\001\001\000\004\041\324\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\030\333\031\230\032\235\033\234\034\150\035\147\036" +
    "\132\044\114\046\125\047\126\050\113\051\112\052\136" +
    "\053\116\054\131\071\142\073\145\074\134\100\122\101" +
    "\111\104\133\113\143\121\121\001\001\000\002\001\001" +
    "\000\060\030\335\031\230\032\235\033\234\034\150\035" +
    "\147\036\132\044\114\046\125\047\126\050\113\051\112" +
    "\052\136\053\116\054\131\071\142\073\145\074\134\100" +
    "\122\101\111\104\133\113\143\121\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\043" +
    "\356\106\361\112\362\001\001\000\004\045\342\001\001" +
    "\000\004\055\345\001\001\000\052\033\344\034\150\035" +
    "\147\036\132\044\114\046\125\047\126\050\113\051\112" +
    "\052\136\053\116\054\131\071\142\073\145\074\134\100" +
    "\122\101\111\104\133\113\143\121\121\001\001\000\002" +
    "\001\001\000\004\057\351\001\001\000\002\001\001\000" +
    "\054\033\203\034\150\035\147\036\132\037\350\044\114" +
    "\046\125\047\126\050\113\051\112\052\136\053\116\054" +
    "\131\071\142\073\145\074\134\100\122\101\111\104\133" +
    "\113\143\121\121\001\001\000\002\001\001\000\004\061" +
    "\354\001\001\000\052\033\353\034\150\035\147\036\132" +
    "\044\114\046\125\047\126\050\113\051\112\052\136\053" +
    "\116\054\131\071\142\073\145\074\134\100\122\101\111" +
    "\104\133\113\143\121\121\001\001\000\002\001\001\000" +
    "\006\066\355\067\277\001\001\000\002\001\001\000\004" +
    "\040\u011c\001\001\000\002\001\001\000\006\005\u0117\107" +
    "\204\001\001\000\006\114\371\115\370\001\001\000\002" +
    "\001\001\000\006\043\356\112\u0116\001\001\000\004\116" +
    "\u0114\001\001\000\002\001\001\000\004\116\u010c\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\117\u0102\001" +
    "\001\000\004\116\375\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\043\356" +
    "\112\u0103\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\033\u0106\034\150\035\147\036\132\044\114\046\125" +
    "\047\126\050\113\051\112\052\136\053\116\054\131\071" +
    "\142\073\145\074\134\100\122\101\111\104\133\113\143" +
    "\121\121\001\001\000\002\001\001\000\004\041\u0108\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\117\u0112\001\001\000\006\043\356\112\u0113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\u0119\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\033" +
    "\u0122\034\150\035\147\036\132\044\114\046\125\047\126" +
    "\050\113\051\112\052\136\053\116\054\131\071\142\073" +
    "\145\074\134\100\122\101\111\104\133\113\143\121\121" +
    "\001\001\000\012\003\215\004\217\007\u0121\027\220\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\033\264" +
    "\034\150\035\147\036\132\044\114\046\125\047\126\050" +
    "\113\051\112\052\136\053\116\054\131\060\u0124\062\263" +
    "\071\142\073\145\074\134\100\122\101\111\104\133\113" +
    "\143\121\121\001\001\000\004\065\u0125\001\001\000\002" +
    "\001\001\000\052\033\u012a\034\150\035\147\036\132\044" +
    "\114\046\125\047\126\050\113\051\112\052\136\053\116" +
    "\054\131\071\142\073\145\074\134\100\122\101\111\104" +
    "\133\113\143\121\121\001\001\000\052\033\u0128\034\150" +
    "\035\147\036\132\044\114\046\125\047\126\050\113\051" +
    "\112\052\136\053\116\054\131\071\142\073\145\074\134" +
    "\100\122\101\111\104\133\113\143\121\121\001\001\000" +
    "\004\065\u0129\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\033\u0131\034\150\035\147\036\132" +
    "\044\114\046\125\047\126\050\113\051\112\052\136\053" +
    "\116\054\131\071\142\073\145\074\134\100\122\101\111" +
    "\104\133\113\143\121\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\033\u013d\034\150\035\147\036" +
    "\132\044\114\046\125\047\126\050\113\051\112\052\136" +
    "\053\116\054\131\071\142\073\145\074\134\100\122\101" +
    "\111\104\133\113\143\121\121\001\001\000\002\001\001" +
    "\000\052\033\u013f\034\150\035\147\036\132\044\114\046" +
    "\125\047\126\050\113\051\112\052\136\053\116\054\131" +
    "\071\142\073\145\074\134\100\122\101\111\104\133\113" +
    "\143\121\121\001\001\000\002\001\001\000\052\033\u0142" +
    "\034\150\035\147\036\132\044\114\046\125\047\126\050" +
    "\113\051\112\052\136\053\116\054\131\071\142\073\145" +
    "\074\134\100\122\101\111\104\133\113\143\121\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\033\u0145\034\150\035\147\036\132\044\114\046" +
    "\125\047\126\050\113\051\112\052\136\053\116\054\131" +
    "\071\142\073\145\074\134\100\122\101\111\104\133\113" +
    "\143\121\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\033\u014c\034\150\035\147\036" +
    "\132\044\114\046\125\047\126\050\113\051\112\052\136" +
    "\053\116\054\131\071\142\073\145\074\134\100\122\101" +
    "\111\104\133\113\143\121\121\001\001\000\052\033\u014b" +
    "\034\150\035\147\036\132\044\114\046\125\047\126\050" +
    "\113\051\112\052\136\053\116\054\131\071\142\073\145" +
    "\074\134\100\122\101\111\104\133\113\143\121\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\033\u0150\034\150\035\147\036" +
    "\132\044\114\046\125\047\126\050\113\051\112\052\136" +
    "\053\116\054\131\071\142\073\145\074\134\100\122\101" +
    "\111\104\133\113\143\121\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\033\u0153\034" +
    "\150\035\147\036\132\044\114\046\125\047\126\050\113" +
    "\051\112\052\136\053\116\054\131\071\142\073\145\074" +
    "\134\100\122\101\111\104\133\113\143\121\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\033\u013a\034\u0164\035\147\036\132" +
    "\044\114\046\u0163\047\126\050\113\051\112\052\136\053" +
    "\116\054\131\071\142\073\145\074\134\100\122\101\111" +
    "\104\133\113\143\121\121\001\001\000\052\033\u0162\034" +
    "\150\035\147\036\132\044\114\046\125\047\126\050\113" +
    "\051\112\052\136\053\116\054\131\071\142\073\145\074" +
    "\134\100\122\101\111\104\133\113\143\121\121\001\001" +
    "\000\052\033\u0161\034\150\035\147\036\132\044\114\046" +
    "\125\047\126\050\113\051\112\052\136\053\116\054\131" +
    "\071\142\073\145\074\134\100\122\101\111\104\133\113" +
    "\143\121\121\001\001\000\052\033\u0160\034\150\035\147" +
    "\036\132\044\114\046\125\047\126\050\113\051\112\052" +
    "\136\053\116\054\131\071\142\073\145\074\134\100\122" +
    "\101\111\104\133\113\143\121\121\001\001\000\004\113" +
    "\u015c\001\001\000\002\001\001\000\060\005\205\033\203" +
    "\034\150\035\147\036\132\037\u015e\044\114\046\125\047" +
    "\126\050\113\051\112\052\136\053\116\054\131\071\142" +
    "\073\145\074\134\100\122\101\111\104\133\107\204\113" +
    "\202\121\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\033\u0166\034\150" +
    "\035\147\036\132\044\114\046\125\047\126\050\113\051" +
    "\112\052\136\053\116\054\131\071\142\073\145\074\134" +
    "\100\122\101\111\104\133\113\143\121\121\001\001\000" +
    "\002\001\001\000\052\033\u0168\034\150\035\147\036\132" +
    "\044\114\046\125\047\126\050\113\051\112\052\136\053" +
    "\116\054\131\071\142\073\145\074\134\100\122\101\111" +
    "\104\133\113\143\121\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\033\203\034\150" +
    "\035\147\036\132\037\u016c\044\114\046\125\047\126\050" +
    "\113\051\112\052\136\053\116\054\131\071\142\073\145" +
    "\074\134\100\122\101\111\104\133\113\143\121\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\205\107\204\113\u0173\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\056\u0178\001" +
    "\001\000\002\001\001\000\004\061\u0179\001\001\000\006" +
    "\075\u017a\076\u017d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\033\u0181\034\150\035\147" +
    "\036\132\044\114\046\125\047\126\050\113\051\112\052" +
    "\136\053\116\054\131\071\142\073\145\074\134\077\u0180" +
    "\100\122\101\111\104\133\113\143\121\121\001\001\000" +
    "\002\001\001\000\054\033\u0181\034\150\035\147\036\132" +
    "\044\114\046\125\047\126\050\113\051\112\052\136\053" +
    "\116\054\131\071\142\073\145\074\134\077\u0186\100\122" +
    "\101\111\104\133\113\143\121\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\033\u0181\034\150\035\147\036\132\044\114\046\125" +
    "\047\126\050\113\051\112\052\136\053\116\054\131\071" +
    "\142\073\145\074\134\077\u0188\100\122\101\111\104\133" +
    "\113\143\121\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\033\203" +
    "\034\150\035\147\036\132\037\u018d\044\114\046\125\047" +
    "\126\050\113\051\112\052\136\053\116\054\131\071\142" +
    "\073\145\074\134\100\122\101\111\104\133\113\143\121" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\072\u01a0\001\001\000" +
    "\052\033\u019d\034\150\035\147\036\132\044\114\046\125" +
    "\047\126\050\113\051\112\052\136\053\116\054\131\071" +
    "\142\073\145\074\134\100\122\101\111\104\133\113\143" +
    "\121\121\001\001\000\004\102\u0194\001\001\000\004\072" +
    "\u0195\001\001\000\002\001\001\000\052\033\u019b\034\150" +
    "\035\147\036\132\044\114\046\125\047\126\050\113\051" +
    "\112\052\136\053\116\054\131\071\142\073\145\074\134" +
    "\100\122\101\111\104\133\113\143\121\121\001\001\000" +
    "\052\033\u0198\034\150\035\147\036\132\044\114\046\125" +
    "\047\126\050\113\051\112\052\136\053\116\054\131\071" +
    "\142\073\145\074\134\100\122\101\111\104\133\113\143" +
    "\121\121\001\001\000\002\001\001\000\052\033\u019a\034" +
    "\150\035\147\036\132\044\114\046\125\047\126\050\113" +
    "\051\112\052\136\053\116\054\131\071\142\073\145\074" +
    "\134\100\122\101\111\104\133\113\143\121\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\033\u019f\034\150\035\147\036\132" +
    "\044\114\046\125\047\126\050\113\051\112\052\136\053" +
    "\116\054\131\071\142\073\145\074\134\100\122\101\111" +
    "\104\133\113\143\121\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\033\u01a5\034\150\035\147\036\132\044" +
    "\114\046\125\047\126\050\113\051\112\052\136\053\116" +
    "\054\131\071\142\073\145\074\134\100\122\101\111\104" +
    "\133\113\143\121\121\001\001\000\002\001\001\000\004" +
    "\120\u01ac\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\120\u01be\001\001\000\002\001\001\000\004" +
    "\120\u01c0\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\154" +
    "\u01ca\163\u01c9\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\120\u01cd\001\001\000\004\165" +
    "\u01cf\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\154\u01d3\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\120\u01d5\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\033\203\034\150" +
    "\035\147\036\132\037\u01e2\044\114\046\125\047\126\050" +
    "\113\051\112\052\136\053\116\054\131\071\142\073\145" +
    "\074\134\100\122\101\111\103\u01e0\104\133\113\143\121" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\054\033\203\034\150\035\147\036\132\037" +
    "\u01eb\044\114\046\125\047\126\050\113\051\112\052\136" +
    "\053\116\054\131\071\142\073\145\074\134\100\122\101" +
    "\111\104\133\113\143\121\121\001\001\000\002\001\001" +
    "\000\054\033\203\034\150\035\147\036\132\037\u01e8\044" +
    "\114\046\125\047\126\050\113\051\112\052\136\053\116" +
    "\054\131\071\142\073\145\074\134\100\122\101\111\104" +
    "\133\113\143\121\121\001\001\000\002\001\001\000\052" +
    "\033\211\034\150\035\147\036\132\044\114\046\125\047" +
    "\126\050\113\051\112\052\136\053\116\054\131\071\142" +
    "\073\145\074\134\100\122\101\111\104\133\113\143\121" +
    "\121\001\001\000\052\033\u01e5\034\150\035\147\036\132" +
    "\044\114\046\125\047\126\050\113\051\112\052\136\053" +
    "\116\054\131\071\142\073\145\074\134\100\122\101\111" +
    "\104\133\113\143\121\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\033" +
    "\u01ed\034\150\035\147\036\132\044\114\046\125\047\126" +
    "\050\113\051\112\052\136\053\116\054\131\071\142\073" +
    "\145\074\134\100\122\101\111\104\133\113\143\121\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\u0224\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\230" +
    "\u0210\001\001\000\004\172\u020d\001\001\000\004\172\u020b" +
    "\001\001\000\004\172\u0207\001\001\000\002\001\001\000" +
    "\004\043\u01fb\001\001\000\004\125\u01fc\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\127\u0201\132\u0200\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\132\u0204\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\033\u0206\034\150\035\147\036\132\044\114" +
    "\046\125\047\126\050\113\051\112\052\136\053\116\054" +
    "\131\071\142\073\145\074\134\100\122\101\111\104\133" +
    "\113\143\121\121\001\001\000\002\001\001\000\004\043" +
    "\u020a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\u020e\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\172\u0211\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\172\u0215\001\001\000\004\044\u0217" +
    "\001\001\000\002\001\001\000\004\235\u0218\001\001\000" +
    "\002\001\001\000\006\120\u021b\236\u021c\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\240\u021e\001\001\000" +
    "\004\120\u0221\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\212\u023f\001\001\000\004\212\u0228\001\001\000\004\043" +
    "\u022a\001\001\000\002\001\001\000\004\126\u022d\001\001" +
    "\000\002\001\001\000\006\041\u0231\042\u0230\001\001\000" +
    "\004\117\u022e\001\001\000\006\005\u022f\107\204\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\126\u0233\001\001\000\004\117\u0234\001\001\000\010" +
    "\005\u0236\006\u0235\107\204\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\130\u0239\131\u0238\132\u023b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\131\u023e\132\u023b\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\u0240\001\001\000" +
    "\004\126\u0242\001\001\000\006\041\u0231\042\u0245\001\001" +
    "\000\004\117\u0243\001\001\000\006\005\u0244\107\204\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\126\u0247" +
    "\001\001\000\004\117\u0248\001\001\000\010\005\u0236\006" +
    "\u0249\107\204\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\230\u0280\001" +
    "\001\000\004\173\u027a\001\001\000\004\173\u026c\001\001" +
    "\000\002\001\001\000\004\173\u0252\001\001\000\004\044" +
    "\u0256\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\235\u0257\001\001\000\002\001\001\000" +
    "\004\120\u0259\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\247\u0262\250\u0264\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\250\u0269\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\u026d" +
    "\001\001\000\004\162\u026e\001\001\000\004\165\u0277\001" +
    "\001\000\006\156\u0272\160\u0270\001\001\000\002\001\001" +
    "\000\004\165\u0273\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\156\u0276\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\u0279\107\204\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\165\u027c" +
    "\001\001\000\004\175\u027e\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\173\u0281\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\173" +
    "\u028b\001\001\000\004\043\u028c\001\001\000\004\165\u0290" +
    "\001\001\000\002\001\001\000\006\043\u02ec\170\u02eb\001" +
    "\001\000\006\155\u02c8\157\u02c7\001\001\000\004\176\u0292" +
    "\001\001\000\002\001\001\000\004\204\u0294\001\001\000" +
    "\002\001\001\000\004\171\u0296\001\001\000\002\001\001" +
    "\000\004\175\u0297\001\001\000\004\164\u0299\001\001\000" +
    "\002\001\001\000\004\205\u029c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\u029e\107" +
    "\204\001\001\000\002\001\001\000\004\206\u02a0\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\170\u02ac\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\206\u02b5\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\177\u02ba" +
    "\001\001\000\004\202\u02c5\001\001\000\004\201\u02bc\001" +
    "\001\000\002\001\001\000\004\200\u02bd\001\001\000\002" +
    "\001\001\000\004\202\u02bf\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\120" +
    "\u02e9\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\155\u02e8\001\001\000\004\165\u02cd\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\176\u02ce\001\001\000\004" +
    "\204\u02cf\001\001\000\004\171\u02d0\001\001\000\004\175" +
    "\u02d1\001\001\000\004\164\u02d2\001\001\000\004\205\u02d3" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\230" +
    "\u02d6\001\001\000\002\001\001\000\004\167\u02d8\001\001" +
    "\000\004\165\u02dc\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\155\u02c8\157\u02df\001\001\000\002\001\001\000" +
    "\004\165\u02e1\001\001\000\004\176\u02e2\001\001\000\004" +
    "\204\u02e3\001\001\000\004\171\u02e4\001\001\000\004\175" +
    "\u02e5\001\001\000\004\164\u02e6\001\001\000\004\205\u02e7" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\165" +
    "\u02ea\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\165\u02ed\001\001\000\004\175\u02ef\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\170\u02f1\001\001\000\004" +
    "\175\u02f2\001\001\000\002\001\001\000\004\161\u02f5\001" +
    "\001\000\002\001\001\000\004\165\u02f6\001\001\000\004" +
    "\176\u02f7\001\001\000\004\204\u02f8\001\001\000\004\171" +
    "\u02f9\001\001\000\004\175\u02fa\001\001\000\004\164\u02fb" +
    "\001\001\000\004\205\u02fc\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\155\u02c8\157\u02ff\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\155" +
    "\u02c8\157\u0303\001\001\000\002\001\001\000\004\165\u0305" +
    "\001\001\000\004\176\u0306\001\001\000\004\204\u0307\001" +
    "\001\000\004\171\u0308\001\001\000\004\175\u0309\001\001" +
    "\000\004\164\u030a\001\001\000\004\205\u030b\001\001\000" +
    "\002\001\001\000\004\173\u030d\001\001\000\004\044\u030e" +
    "\001\001\000\004\235\u030f\001\001\000\002\001\001\000" +
    "\004\120\u0311\001\001\000\004\241\u0312\001\001\000\002" +
    "\001\001\000\004\120\u0314\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\247\u0317\250\u0264\001\001\000\004" +
    "\250\u0269\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\166\u031c\001\001\000\002\001\001" +
    "\000\004\173\u031e\001\001\000\004\043\u031f\001\001\000" +
    "\004\165\u0320\001\001\000\004\176\u0321\001\001\000\004" +
    "\204\u0322\001\001\000\004\171\u0323\001\001\000\004\175" +
    "\u0324\001\001\000\004\164\u0325\001\001\000\004\205\u0326" +
    "\001\001\000\002\001\001\000\004\043\u032c\001\001\000" +
    "\002\001\001\000\004\043\u032a\001\001\000\004\125\u032b" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\u032e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\232\u033d\233\u033e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\u0340\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\227\u0344\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\225\u0347\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\234\u034a\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\u0354\001\001\000\004" +
    "\043\u034e\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\u0351\107\204\001\001\000\002\001\001\000\004" +
    "\043\u0353\001\001\000\002\001\001\000\010\124\u035a\125" +
    "\u0357\174\u0359\001\001\000\004\173\u0377\001\001\000\006" +
    "\172\u0374\211\u0373\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\211\u035e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\155\u0360\001\001\000\002\001\001\000\006" +
    "\164\u0364\203\u0366\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\170\u036b\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\206\u0369\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\155\u02c8\157\u036f\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\u0372" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\125" +
    "\u0375\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\125\u0378\001\001\000\004\175\u0379\001\001\000\004\164" +
    "\u037a\001\001\000\002\001\001\000\004\234\u0386\001\001" +
    "\000\006\223\u0382\224\u0333\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\227\u0384\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\u038b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\213\u0390\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\u0393\001\001" +
    "\000\006\124\u0394\125\u0357\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\u039b\107\204\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\u039f\107\204\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\111\u03a2\001\001\000\002\001\001" +
    "\000\004\020\u03d5\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\u03d3\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\231" +
    "\u03cb\001\001\000\004\043\u03c9\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\u03b7\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\u03b9\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\232\u03bf\233\u03c1\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\u03c3\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\u03c6\001\001\000\002\001\001\000\004\043\u03c8\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\u03cc\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\u03d1" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\u03d7" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SqlParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SqlParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SqlParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  private Symbol errorToken_;

  // Set if the errorToken_ to be printed in the error message has a different name, e.g.
  // when parsing identifiers instead of defined keywords. This is necessary to avoid
  // conflicting keywords.
  private String expectedTokenName_;

  // list of expected tokens ids from current parsing state
  // for generating syntax error message
  private final List<Integer> expectedTokenIds_ = new ArrayList<Integer>();

  // to avoid reporting trivial tokens as expected tokens in error messages
  private boolean reportExpectedToken(Integer tokenId, int numExpectedTokens) {
    if (SqlScanner.isKeyword(tokenId) ||
        tokenId.intValue() == SqlParserSymbols.COMMA ||
        tokenId.intValue() == SqlParserSymbols.IDENT) {
      return true;
    } else {
      // if this is the only valid token, always report it
      return numExpectedTokens == 1;
    }
  }

  private String getErrorTypeMessage(int lastTokenId) {
    String msg = null;
    switch (lastTokenId) {
      case SqlParserSymbols.UNMATCHED_STRING_LITERAL:
        msg = "Unmatched string literal";
        break;
      case SqlParserSymbols.NUMERIC_OVERFLOW:
        msg = "Numeric overflow";
        break;
      default:
        msg = "Syntax error";
        break;
    }
    return msg;
  }

  // override to save error token
  public void syntax_error(java_cup.runtime.Symbol token) {
    errorToken_ = token;

    // derive expected tokens from current parsing state
    expectedTokenIds_.clear();
    int state = ((Symbol)stack.peek()).parse_state;
    // get row of actions table corresponding to current parsing state
    // the row consists of pairs of <tokenId, actionId>
    // a pair is stored as row[i] (tokenId) and row[i+1] (actionId)
    // the last pair is a special error action
    short[] row = action_tab[state];
    short tokenId;
    // the expected tokens are all the symbols with a
    // corresponding action from the current parsing state
    for (int i = 0; i < row.length-2; ++i) {
      // get tokenId and skip actionId
      tokenId = row[i++];
      expectedTokenIds_.add(Integer.valueOf(tokenId));
    }
  }

  // override to keep it from calling report_fatal_error()
  @Override
  public void unrecovered_syntax_error(Symbol cur_token)
      throws Exception {
    throw new Exception(getErrorTypeMessage(cur_token.sym));
  }

  /**
   * Manually throw a parse error on a given symbol for special circumstances.
   *
   * @symbolName
   *   name of symbol on which to fail parsing
   * @symbolId
   *   id of symbol from SqlParserSymbols on which to fail parsing
   */
  public void parseError(String symbolName, int symbolId) throws Exception {
    parseError(symbolName, symbolId, null);
  }

  /**
   * Same as parseError() above but allows the error token to have a different
   * name printed as the expected token.
   */
  public void parseError(String symbolName, int symbolId, String expectedTokenName)
      throws Exception {
    expectedTokenName_ = expectedTokenName;
    Symbol errorToken = getSymbolFactory().newSymbol(symbolName, symbolId,
        ((Symbol) stack.peek()), ((Symbol) stack.peek()), null);
    // Call syntax error to gather information about expected tokens, etc.
    // syntax_error does not throw an exception
    syntax_error(errorToken);
    // Unrecovered_syntax_error throws an exception and will terminate parsing
    unrecovered_syntax_error(errorToken);
  }

  // Returns error string, consisting of a shortened offending line
  // with a '^' under the offending token. Assumes
  // that parse() has been called and threw an exception
  public String getErrorMsg(String stmt) {
    if (errorToken_ == null || stmt == null) return null;
    String[] lines = stmt.split("\n");
    StringBuffer result = new StringBuffer();
    result.append(getErrorTypeMessage(errorToken_.sym) + " in line ");
    result.append(errorToken_.left);
    result.append(":\n");

    // errorToken_.left is the line number of error.
    // errorToken_.right is the column number of the error.
    String errorLine = lines[errorToken_.left - 1];
    // If the error is that additional tokens are expected past the end,
    // errorToken_.right will be past the end of the string.
    int lastCharIndex = Math.min(errorLine.length(), errorToken_.right);
    int maxPrintLength = 60;
    int errorLoc = 0;
    if (errorLine.length() <= maxPrintLength) {
      // The line is short. Print the entire line.
      result.append(errorLine);
      result.append('\n');
      errorLoc = errorToken_.right;
    } else {
      // The line is too long. Print maxPrintLength/2 characters before the error and
      // after the error.
      int contextLength = maxPrintLength / 2 - 3;
      String leftSubStr;
      if (errorToken_.right > maxPrintLength / 2) {
        leftSubStr = "..." + errorLine.substring(errorToken_.right - contextLength,
            lastCharIndex);
      } else {
        leftSubStr = errorLine.substring(0, errorToken_.right);
      }
      errorLoc = leftSubStr.length();
      result.append(leftSubStr);
      if (errorLine.length() - errorToken_.right > maxPrintLength / 2) {
        result.append(errorLine.substring(errorToken_.right,
           errorToken_.right + contextLength) + "...");
      } else {
        result.append(errorLine.substring(lastCharIndex));
      }
      result.append("\n");
    }

    // print error indicator
    for (int i = 0; i < errorLoc - 1; ++i) {
      result.append(' ');
    }
    result.append("^\n");

    // only report encountered and expected tokens for syntax errors
    if (errorToken_.sym == SqlParserSymbols.UNMATCHED_STRING_LITERAL ||
        errorToken_.sym == SqlParserSymbols.NUMERIC_OVERFLOW) {
      return result.toString();
    }

    // append last encountered token
    result.append("Encountered: ");
    String lastToken =
      SqlScanner.tokenIdMap.get(Integer.valueOf(errorToken_.sym));
    if (lastToken != null) {
      result.append(lastToken);
    } else {
      result.append("Unknown last token with id: " + errorToken_.sym);
    }

    // append expected tokens
    result.append('\n');
    result.append("Expected: ");
    if (expectedTokenName_ == null) {
      String expectedToken = null;
      Integer tokenId = null;
      for (int i = 0; i < expectedTokenIds_.size(); ++i) {
        tokenId = expectedTokenIds_.get(i);
        if (reportExpectedToken(tokenId, expectedTokenIds_.size())) {
          expectedToken = SqlScanner.tokenIdMap.get(tokenId);
          result.append(expectedToken + ", ");
        }
      }
      // remove trailing ", "
      result.delete(result.length()-2, result.length());
    } else {
      result.append(expectedTokenName_);
    }
    result.append('\n');

    return result.toString();
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SqlParser$actions {
  private final SqlParser parser;

  /** Constructor */
  CUP$SqlParser$actions(SqlParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SqlParser$do_action(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack            CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SqlParser$result;

      /* select the action based on the action number */
      switch (CUP$SqlParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // struct_field_def_list ::= struct_field_def_list COMMA struct_field_def 
            {
              ArrayList<StructField> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		ArrayList<StructField> list = (ArrayList<StructField>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int field_defleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int field_defright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		StructField field_def = (StructField)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    list.add(field_def);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("struct_field_def_list",113, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // struct_field_def_list ::= struct_field_def 
            {
              ArrayList<StructField> RESULT =null;
		int field_defleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int field_defright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		StructField field_def = (StructField)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    ArrayList<StructField> list = new ArrayList<StructField>();
    list.add(field_def);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("struct_field_def_list",113, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // struct_field_def ::= IDENT COLON type comment_val 
            {
              StructField RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int commentleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new StructField(name, t, comment); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("struct_field_def",106, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // type ::= KW_STRUCT LESSTHAN struct_field_def_list GREATERTHAN 
            {
              Type RESULT =null;
		int fieldsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int fieldsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<StructField> fields = (ArrayList<StructField>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = new StructType(fields); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",78, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // type ::= KW_MAP LESSTHAN type COMMA type GREATERTHAN 
            {
              Type RESULT =null;
		int key_typeleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int key_typeright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Type key_type = (Type)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int value_typeleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int value_typeright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Type value_type = (Type)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = new MapType(key_type, value_type); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",78, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // type ::= KW_ARRAY LESSTHAN type GREATERTHAN 
            {
              Type RESULT =null;
		int value_typeleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int value_typeright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Type value_type = (Type)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = new ArrayType(value_type); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",78, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // type ::= KW_DECIMAL 
            {
              Type RESULT =null;
		 RESULT = ScalarType.createDecimalType(); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",78, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // type ::= KW_DECIMAL LPAREN INTEGER_LITERAL COMMA INTEGER_LITERAL RPAREN 
            {
              Type RESULT =null;
		int precisionleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int precisionright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		BigDecimal precision = (BigDecimal)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int scaleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int scaleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		BigDecimal scale = (BigDecimal)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = ScalarType.createDecimalType(precision.intValue(), scale.intValue()); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",78, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // type ::= KW_DECIMAL LPAREN INTEGER_LITERAL RPAREN 
            {
              Type RESULT =null;
		int precisionleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int precisionright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		BigDecimal precision = (BigDecimal)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = ScalarType.createDecimalType(precision.intValue()); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",78, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // type ::= KW_CHAR LPAREN INTEGER_LITERAL RPAREN 
            {
              Type RESULT =null;
		int lenleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int lenright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		BigDecimal len = (BigDecimal)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = ScalarType.createCharType(len.intValue()); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",78, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // type ::= KW_BINARY 
            {
              Type RESULT =null;
		 RESULT = Type.BINARY; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",78, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // type ::= KW_VARCHAR 
            {
              Type RESULT =null;
		 RESULT = Type.STRING; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",78, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // type ::= KW_VARCHAR LPAREN INTEGER_LITERAL RPAREN 
            {
              Type RESULT =null;
		int lenleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int lenright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		BigDecimal len = (BigDecimal)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = ScalarType.createVarcharType(len.intValue()); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",78, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // type ::= KW_STRING 
            {
              Type RESULT =null;
		 RESULT = Type.STRING; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",78, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // type ::= KW_TIMESTAMP 
            {
              Type RESULT =null;
		 RESULT = Type.TIMESTAMP; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",78, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // type ::= KW_DATETIME 
            {
              Type RESULT =null;
		 RESULT = Type.DATETIME; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",78, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // type ::= KW_DATE 
            {
              Type RESULT =null;
		 RESULT = Type.DATE; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",78, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // type ::= KW_DOUBLE 
            {
              Type RESULT =null;
		 RESULT = Type.DOUBLE; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",78, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // type ::= KW_FLOAT 
            {
              Type RESULT =null;
		 RESULT = Type.FLOAT; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",78, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // type ::= KW_BOOLEAN 
            {
              Type RESULT =null;
		 RESULT = Type.BOOLEAN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",78, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // type ::= KW_BIGINT 
            {
              Type RESULT =null;
		 RESULT = Type.BIGINT; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",78, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // type ::= KW_INT 
            {
              Type RESULT =null;
		 RESULT = Type.INT; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",78, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // type ::= KW_SMALLINT 
            {
              Type RESULT =null;
		 RESULT = Type.SMALLINT; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",78, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // type ::= KW_TINYINT 
            {
              Type RESULT =null;
		 RESULT = Type.TINYINT; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",78, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // column_ref ::= IDENT DOT IDENT DOT IDENT 
            {
              SlotRef RESULT =null;
		int dbleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		String db = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int tblleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int tblright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String tbl = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int colright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new SlotRef(new TableName(db, tbl), col); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_ref",66, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // column_ref ::= IDENT DOT IDENT 
            {
              SlotRef RESULT =null;
		int tblleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int tblright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String tbl = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int colright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new SlotRef(new TableName(null, tbl), col); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_ref",66, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // column_ref ::= IDENT 
            {
              SlotRef RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int colright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new SlotRef(null, col); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_ref",66, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // compound_predicate ::= NOT expr 
            {
              Predicate RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new CompoundPredicate(CompoundPredicate.Operator.NOT, e, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("compound_predicate",39, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // compound_predicate ::= KW_NOT expr 
            {
              Predicate RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new CompoundPredicate(CompoundPredicate.Operator.NOT, e, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("compound_predicate",39, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // compound_predicate ::= expr KW_OR expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new CompoundPredicate(CompoundPredicate.Operator.OR, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("compound_predicate",39, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // compound_predicate ::= expr KW_AND expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new CompoundPredicate(CompoundPredicate.Operator.AND, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("compound_predicate",39, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // subquery ::= LPAREN query_stmt RPAREN 
            {
              Subquery RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		QueryStmt s = (QueryStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = new Subquery(s); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("subquery",73, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // subquery ::= LPAREN subquery RPAREN 
            {
              Subquery RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Subquery s = (Subquery)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = s; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("subquery",73, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // in_predicate ::= expr KW_NOT KW_IN subquery 
            {
              Predicate RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Subquery s = (Subquery)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new InPredicate(e, s, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("in_predicate",40, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // in_predicate ::= expr KW_IN subquery 
            {
              Predicate RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Subquery s = (Subquery)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new InPredicate(e, s, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("in_predicate",40, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // in_predicate ::= expr KW_NOT KW_IN LPAREN expr_list RPAREN 
            {
              Predicate RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<Expr> l = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = new InPredicate(e, l, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("in_predicate",40, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // in_predicate ::= expr KW_IN LPAREN expr_list RPAREN 
            {
              Predicate RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<Expr> l = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = new InPredicate(e, l, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("in_predicate",40, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // between_predicate ::= expr KW_NOT KW_BETWEEN predicate KW_AND expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Predicate e2 = (Predicate)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new BetweenPredicate(e1, e2, e3, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("between_predicate",37, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // between_predicate ::= expr KW_NOT KW_BETWEEN non_pred_expr KW_AND expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new BetweenPredicate(e1, e2, e3, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("between_predicate",37, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // between_predicate ::= expr KW_BETWEEN predicate KW_AND expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Predicate e2 = (Predicate)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new BetweenPredicate(e1, e2, e3, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("between_predicate",37, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // between_predicate ::= expr KW_BETWEEN non_pred_expr KW_AND expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new BetweenPredicate(e1, e2, e3, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("between_predicate",37, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // like_predicate ::= expr KW_NOT KW_REGEXP expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new CompoundPredicate(CompoundPredicate.Operator.NOT,
    new LikePredicate(LikePredicate.Operator.REGEXP, e1, e2), null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("like_predicate",41, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // like_predicate ::= expr KW_NOT KW_RLIKE expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new CompoundPredicate(CompoundPredicate.Operator.NOT,
    new LikePredicate(LikePredicate.Operator.RLIKE, e1, e2), null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("like_predicate",41, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // like_predicate ::= expr KW_NOT KW_LIKE expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new CompoundPredicate(CompoundPredicate.Operator.NOT,
    new LikePredicate(LikePredicate.Operator.LIKE, e1, e2), null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("like_predicate",41, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // like_predicate ::= expr KW_REGEXP expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new LikePredicate(LikePredicate.Operator.REGEXP, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("like_predicate",41, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // like_predicate ::= expr KW_RLIKE expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new LikePredicate(LikePredicate.Operator.RLIKE, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("like_predicate",41, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // like_predicate ::= expr KW_LIKE expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new LikePredicate(LikePredicate.Operator.LIKE, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("like_predicate",41, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // comparison_predicate ::= expr GREATERTHAN expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new BinaryPredicate(BinaryPredicate.Operator.GT, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("comparison_predicate",38, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // comparison_predicate ::= expr LESSTHAN expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new BinaryPredicate(BinaryPredicate.Operator.LT, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("comparison_predicate",38, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // comparison_predicate ::= expr GREATERTHAN EQUAL expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new BinaryPredicate(BinaryPredicate.Operator.GE, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("comparison_predicate",38, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // comparison_predicate ::= expr LESSTHAN EQUAL expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new BinaryPredicate(BinaryPredicate.Operator.LE, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("comparison_predicate",38, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // comparison_predicate ::= expr LESSTHAN GREATERTHAN expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new BinaryPredicate(BinaryPredicate.Operator.NE, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("comparison_predicate",38, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // comparison_predicate ::= expr NOT EQUAL expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new BinaryPredicate(BinaryPredicate.Operator.NE, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("comparison_predicate",38, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // comparison_predicate ::= expr EQUAL expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new BinaryPredicate(BinaryPredicate.Operator.EQ, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("comparison_predicate",38, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // predicate ::= LPAREN predicate RPAREN 
            {
              Predicate RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Predicate p = (Predicate)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		
    p.setPrintSqlInParens(true);
    RESULT = p;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("predicate",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // predicate ::= like_predicate 
            {
              Predicate RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Predicate p = (Predicate)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("predicate",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // predicate ::= exists_predicate 
            {
              Predicate RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Predicate p = (Predicate)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("predicate",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // predicate ::= in_predicate 
            {
              Predicate RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Predicate p = (Predicate)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("predicate",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // predicate ::= compound_predicate 
            {
              Predicate RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Predicate p = (Predicate)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("predicate",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // predicate ::= comparison_predicate 
            {
              Predicate RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Predicate p = (Predicate)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("predicate",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // predicate ::= between_predicate 
            {
              Predicate RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Predicate p = (Predicate)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("predicate",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // predicate ::= expr KW_IS KW_NOT KW_NULL 
            {
              Predicate RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		 RESULT = new IsNullPredicate(e, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("predicate",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // predicate ::= expr KW_IS KW_NULL 
            {
              Predicate RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		 RESULT = new IsNullPredicate(e, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("predicate",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // function_params ::= KW_DISTINCT expr_list 
            {
              FunctionParams RESULT =null;
		int distinctleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int distinctright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object distinct = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ArrayList<Expr> exprs = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new FunctionParams(true, exprs); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("function_params",65, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // function_params ::= KW_ALL expr_list 
            {
              FunctionParams RESULT =null;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ArrayList<Expr> exprs = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new FunctionParams(false, exprs); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("function_params",65, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // function_params ::= expr_list 
            {
              FunctionParams RESULT =null;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ArrayList<Expr> exprs = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new FunctionParams(false, exprs); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("function_params",65, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // function_params ::= KW_ALL STAR 
            {
              FunctionParams RESULT =null;
		 RESULT = FunctionParams.createStarParam(); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("function_params",65, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // function_params ::= STAR 
            {
              FunctionParams RESULT =null;
		 RESULT = FunctionParams.createStarParam(); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("function_params",65, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // literal ::= NUMERIC_OVERFLOW 
            {
              LiteralExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    // similar to the unmatched string literal case
    // we must terminate parsing at this point
    // and generate a corresponding symbol to be reported
    parser.parseError("literal", SqlParserSymbols.NUMERIC_OVERFLOW);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("literal",62, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // literal ::= UNMATCHED_STRING_LITERAL expr 
            {
              LiteralExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    // we have an unmatched string literal.
    // to correctly report the root cause of this syntax error
    // we must force parsing to fail at this point,
    // and generate an unmatched string literal symbol
    // to be passed as the last seen token in the
    // error handling routine (otherwise some other token could be reported)
    parser.parseError("literal", SqlParserSymbols.UNMATCHED_STRING_LITERAL);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("literal",62, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // literal ::= KW_NULL 
            {
              LiteralExpr RESULT =null;
		 RESULT = new NullLiteral(); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("literal",62, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // literal ::= KW_FALSE 
            {
              LiteralExpr RESULT =null;
		 RESULT = new BoolLiteral(false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("literal",62, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // literal ::= KW_TRUE 
            {
              LiteralExpr RESULT =null;
		 RESULT = new BoolLiteral(true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("literal",62, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // literal ::= STRING_LITERAL 
            {
              LiteralExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new StringLiteral(l); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("literal",62, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // literal ::= DECIMAL_LITERAL 
            {
              LiteralExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		BigDecimal l = (BigDecimal)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new NumericLiteral(l); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("literal",62, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // literal ::= INTEGER_LITERAL 
            {
              LiteralExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		BigDecimal l = (BigDecimal)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new NumericLiteral(l); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("literal",62, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // timestamp_arithmetic_expr ::= function_name LPAREN expr_list COMMA KW_INTERVAL expr IDENT RPAREN 
            {
              Expr RESULT =null;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).right;
		FunctionName functionName = (FunctionName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		ArrayList<Expr> l = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		
    if (l.size() > 1) {
      // Report parsing failure on keyword interval.
      parser.parseError("interval", SqlParserSymbols.KW_INTERVAL);
    }
    if (functionName.getDb() != null) {
      // This function should not fully qualified
      throw new Exception("interval should not be qualified by database name");
    }
    RESULT = new TimestampArithmeticExpr(functionName.getFunction(), l.get(0), v, u);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("timestamp_arithmetic_expr",28, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // timestamp_arithmetic_expr ::= expr SUBTRACT KW_INTERVAL expr IDENT 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		Expr t = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT =
        new TimestampArithmeticExpr(ArithmeticExpr.Operator.SUBTRACT, t, v, u, false);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("timestamp_arithmetic_expr",28, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // timestamp_arithmetic_expr ::= expr ADD KW_INTERVAL expr IDENT 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		Expr t = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT = new TimestampArithmeticExpr(ArithmeticExpr.Operator.ADD, t, v, u, false);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("timestamp_arithmetic_expr",28, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // timestamp_arithmetic_expr ::= KW_INTERVAL expr IDENT ADD expr 
            {
              Expr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr t = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new TimestampArithmeticExpr(ArithmeticExpr.Operator.ADD, t, v, u, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("timestamp_arithmetic_expr",28, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // arithmetic_expr ::= BITNOT expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.BITNOT, e, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",27, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // arithmetic_expr ::= expr BITXOR expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.BITXOR, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",27, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // arithmetic_expr ::= expr BITOR expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.BITOR, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",27, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // arithmetic_expr ::= expr BITAND expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.BITAND, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",27, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // arithmetic_expr ::= expr SUBTRACT expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.SUBTRACT, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",27, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // arithmetic_expr ::= expr ADD expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.ADD, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",27, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // arithmetic_expr ::= expr KW_DIV expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.INT_DIVIDE, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",27, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // arithmetic_expr ::= expr MOD expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.MOD, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",27, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // arithmetic_expr ::= expr DIVIDE expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.DIVIDE, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",27, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // arithmetic_expr ::= expr STAR expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.MULTIPLY, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",27, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // window_boundary ::= expr KW_FOLLOWING 
            {
              AnalyticWindow.Boundary RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = new AnalyticWindow.Boundary(AnalyticWindow.BoundaryType.FOLLOWING, e); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("window_boundary",61, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // window_boundary ::= expr KW_PRECEDING 
            {
              AnalyticWindow.Boundary RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = new AnalyticWindow.Boundary(AnalyticWindow.BoundaryType.PRECEDING, e); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("window_boundary",61, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // window_boundary ::= KW_CURRENT KW_ROW 
            {
              AnalyticWindow.Boundary RESULT =null;
		
    RESULT = new AnalyticWindow.Boundary(AnalyticWindow.BoundaryType.CURRENT_ROW, null);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("window_boundary",61, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // window_boundary ::= KW_UNBOUNDED KW_FOLLOWING 
            {
              AnalyticWindow.Boundary RESULT =null;
		
    RESULT = new AnalyticWindow.Boundary(
        AnalyticWindow.BoundaryType.UNBOUNDED_FOLLOWING, null);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("window_boundary",61, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // window_boundary ::= KW_UNBOUNDED KW_PRECEDING 
            {
              AnalyticWindow.Boundary RESULT =null;
		
    RESULT = new AnalyticWindow.Boundary(
        AnalyticWindow.BoundaryType.UNBOUNDED_PRECEDING, null);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("window_boundary",61, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // window_type ::= KW_RANGE 
            {
              AnalyticWindow.Type RESULT =null;
		 RESULT = AnalyticWindow.Type.RANGE; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("window_type",60, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // window_type ::= KW_ROWS 
            {
              AnalyticWindow.Type RESULT =null;
		 RESULT = AnalyticWindow.Type.ROWS; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("window_type",60, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // opt_window_clause ::= 
            {
              AnalyticWindow RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_window_clause",59, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // opt_window_clause ::= window_type KW_BETWEEN window_boundary KW_AND window_boundary 
            {
              AnalyticWindow RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		AnalyticWindow.Type t = (AnalyticWindow.Type)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		AnalyticWindow.Boundary l = (AnalyticWindow.Boundary)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		AnalyticWindow.Boundary r = (AnalyticWindow.Boundary)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new AnalyticWindow(t, l, r); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_window_clause",59, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // opt_window_clause ::= window_type window_boundary 
            {
              AnalyticWindow RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		AnalyticWindow.Type t = (AnalyticWindow.Type)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		AnalyticWindow.Boundary b = (AnalyticWindow.Boundary)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new AnalyticWindow(t, b); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_window_clause",59, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // opt_partition_by_clause ::= 
            {
              ArrayList<Expr> RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_partition_by_clause",44, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // opt_partition_by_clause ::= KW_PARTITION KW_BY expr_list 
            {
              ArrayList<Expr> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ArrayList<Expr> l = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_partition_by_clause",44, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // analytic_expr ::= function_call_expr KW_OVER LPAREN opt_partition_by_clause opt_order_by_clause opt_window_clause RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		ArrayList<Expr> p = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		ArrayList<OrderByElement> o = (ArrayList<OrderByElement>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		AnalyticWindow w = (AnalyticWindow)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		
    // Handle cases where function_call_expr resulted in a plain Expr
    if (!(e instanceof FunctionCallExpr)) {
      parser.parseError("over", SqlParserSymbols.KW_OVER);
    }
    FunctionCallExpr f = (FunctionCallExpr)e;
    f.setIsAnalyticFnCall(true);
    RESULT = new AnalyticExpr(f, p, o, w);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("analytic_expr",57, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // function_call_expr ::= function_name LPAREN IDENT KW_FROM expr RPAREN 
            {
              Expr RESULT =null;
		int fn_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int fn_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		FunctionName fn_name = (FunctionName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Expr t = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		  RESULT = new ExtractFromExpr(fn_name, u, t); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("function_call_expr",58, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // function_call_expr ::= function_name LPAREN function_params RPAREN 
            {
              Expr RESULT =null;
		int fn_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int fn_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		FunctionName fn_name = (FunctionName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		FunctionParams params = (FunctionParams)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = FunctionCallExpr.createExpr(fn_name, params); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("function_call_expr",58, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // function_call_expr ::= function_name LPAREN RPAREN 
            {
              Expr RESULT =null;
		int fn_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int fn_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		FunctionName fn_name = (FunctionName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		
    RESULT = FunctionCallExpr.createExpr(
        fn_name, new FunctionParams(new ArrayList<Expr>()));
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("function_call_expr",58, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // non_pred_expr ::= subquery 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Subquery s = (Subquery)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = s; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",26, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // non_pred_expr ::= LPAREN non_pred_expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		
    e.setPrintSqlInParens(true);
    RESULT = e;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",26, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // non_pred_expr ::= arithmetic_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",26, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // non_pred_expr ::= timestamp_arithmetic_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",26, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // non_pred_expr ::= column_ref 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		SlotRef c = (SlotRef)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",26, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // non_pred_expr ::= case_expr 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		CaseExpr c = (CaseExpr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",26, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // non_pred_expr ::= cast_expr 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",26, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // non_pred_expr ::= KW_IF LPAREN expr_list RPAREN 
            {
              Expr RESULT =null;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<Expr> exprs = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = new FunctionCallExpr("if", exprs); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",26, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // non_pred_expr ::= analytic_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",26, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // non_pred_expr ::= function_call_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",26, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // non_pred_expr ::= literal 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		LiteralExpr l = (LiteralExpr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",26, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // non_pred_expr ::= sign_chain_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",26, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // exists_predicate ::= KW_EXISTS subquery 
            {
              Predicate RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Subquery s = (Subquery)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ExistsPredicate(s, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("exists_predicate",42, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // expr ::= predicate 
            {
              Expr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Predicate p = (Predicate)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // expr ::= non_pred_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // sign_chain_expr ::= ADD expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("sign_chain_expr",79, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // sign_chain_expr ::= SUBTRACT expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    // integrate signs into literals
    // integer literals require analysis to set their type, so the instance check below
    // is not equivalent to e.getType().isNumericType()
    if (e.isLiteral() && e instanceof NumericLiteral) {
      ((LiteralExpr)e).swapSign();
      RESULT = e;
    } else {
      RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.MULTIPLY,
                                  new NumericLiteral(BigDecimal.valueOf(-1)), e);
    }
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("sign_chain_expr",79, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // case_else_clause ::= 
            {
              Expr RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("case_else_clause",56, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // case_else_clause ::= KW_ELSE expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("case_else_clause",56, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // case_when_clause_list ::= case_when_clause_list KW_WHEN expr KW_THEN expr 
            {
              ArrayList<CaseWhenClause> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		ArrayList<CaseWhenClause> list = (ArrayList<CaseWhenClause>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int whenExprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int whenExprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr whenExpr = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int thenExprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int thenExprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr thenExpr = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    list.add(new CaseWhenClause(whenExpr, thenExpr));
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("case_when_clause_list",64, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // case_when_clause_list ::= KW_WHEN expr KW_THEN expr 
            {
              ArrayList<CaseWhenClause> RESULT =null;
		int whenExprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int whenExprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr whenExpr = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int thenExprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int thenExprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr thenExpr = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    ArrayList<CaseWhenClause> list = new ArrayList<CaseWhenClause>();
    list.add(new CaseWhenClause(whenExpr, thenExpr));
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("case_when_clause_list",64, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // case_expr ::= KW_CASE case_when_clause_list case_else_clause KW_END 
            {
              CaseExpr RESULT =null;
		int whenClauseListleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int whenClauseListright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		ArrayList<CaseWhenClause> whenClauseList = (ArrayList<CaseWhenClause>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int elseExprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int elseExprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Expr elseExpr = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = new CaseExpr(null, whenClauseList, elseExpr); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("case_expr",63, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // case_expr ::= KW_CASE expr case_when_clause_list case_else_clause KW_END 
            {
              CaseExpr RESULT =null;
		int caseExprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int caseExprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Expr caseExpr = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int whenClauseListleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int whenClauseListright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		ArrayList<CaseWhenClause> whenClauseList = (ArrayList<CaseWhenClause>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int elseExprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int elseExprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Expr elseExpr = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = new CaseExpr(caseExpr, whenClauseList, elseExpr); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("case_expr",63, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // cast_expr ::= KW_CAST LPAREN expr KW_AS type RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int targetTypeleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int targetTyperight = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Type targetType = (Type)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = new CastExpr(targetType, e, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("cast_expr",55, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // opt_offset_clause ::= 
            {
              Expr RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_offset_clause",54, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // opt_offset_clause ::= KW_OFFSET expr 
            {
              Expr RESULT =null;
		int offsetExprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int offsetExprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr offsetExpr = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = offsetExpr; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_offset_clause",54, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // opt_limit_clause ::= 
            {
              Expr RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_limit_clause",53, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // opt_limit_clause ::= KW_LIMIT expr 
            {
              Expr RESULT =null;
		int limitExprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int limitExprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr limitExpr = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = limitExpr; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_limit_clause",53, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // opt_limit_offset_clause ::= opt_limit_clause opt_offset_clause 
            {
              LimitElement RESULT =null;
		int limitExprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int limitExprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Expr limitExpr = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int offsetExprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int offsetExprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr offsetExpr = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new LimitElement(limitExpr, offsetExpr); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_limit_offset_clause",52, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // opt_offset_param ::= 
            {
              Expr RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_offset_param",51, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // opt_offset_param ::= KW_OFFSET expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_offset_param",51, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // opt_nulls_order_param ::= 
            {
              Boolean RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_nulls_order_param",50, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // opt_nulls_order_param ::= KW_NULLS KW_LAST 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_nulls_order_param",50, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // opt_nulls_order_param ::= KW_NULLS KW_FIRST 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_nulls_order_param",50, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // opt_order_param ::= 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_order_param",49, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // opt_order_param ::= KW_DESC 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_order_param",49, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // opt_order_param ::= KW_ASC 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_order_param",49, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // order_by_element ::= expr opt_order_param opt_nulls_order_param 
            {
              OrderByElement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Boolean o = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Boolean n = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new OrderByElement(e, o, n); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("order_by_element",48, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // order_by_elements ::= order_by_elements COMMA order_by_element 
            {
              ArrayList<OrderByElement> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		ArrayList<OrderByElement> list = (ArrayList<OrderByElement>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		OrderByElement e = (OrderByElement)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    list.add(e);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("order_by_elements",46, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // order_by_elements ::= order_by_element 
            {
              ArrayList<OrderByElement> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		OrderByElement e = (OrderByElement)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    ArrayList<OrderByElement> list = new ArrayList<OrderByElement>();
    list.add(e);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("order_by_elements",46, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // opt_order_by_clause ::= 
            {
              ArrayList<OrderByElement> RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_order_by_clause",47, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // opt_order_by_clause ::= KW_ORDER KW_BY order_by_elements 
            {
              ArrayList<OrderByElement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ArrayList<OrderByElement> l = (ArrayList<OrderByElement>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_order_by_clause",47, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // having_clause ::= 
            {
              Expr RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("having_clause",45, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // having_clause ::= KW_HAVING expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("having_clause",45, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // group_by_clause ::= 
            {
              ArrayList<Expr> RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("group_by_clause",43, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // group_by_clause ::= KW_GROUP KW_BY expr_list 
            {
              ArrayList<Expr> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ArrayList<Expr> l = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("group_by_clause",43, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // where_clause ::= 
            {
              Expr RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("where_clause",35, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // where_clause ::= KW_WHERE expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("where_clause",35, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // expr_list ::= expr_list COMMA expr 
            {
              ArrayList<Expr> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		ArrayList<Expr> list = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    list.add(e);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_list",29, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // expr_list ::= expr 
            {
              ArrayList<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    ArrayList<Expr> list = new ArrayList<Expr>();
    list.add(e);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_list",29, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // ident_list ::= ident_list COMMA IDENT 
            {
              ArrayList<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		ArrayList<String> list = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    list.add(ident);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("ident_list",31, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // ident_list ::= IDENT 
            {
              ArrayList<String> RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    ArrayList<String> list = new ArrayList<String>();
    list.add(ident);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("ident_list",31, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // opt_plan_hints ::= 
            {
              ArrayList<String> RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_plan_hints",77, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // opt_plan_hints ::= LBRACKET ident_list RBRACKET 
            {
              ArrayList<String> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = l; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_plan_hints",77, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // opt_plan_hints ::= KW_STRAIGHT_JOIN 
            {
              ArrayList<String> RESULT =null;
		
    ArrayList<String> hints = new ArrayList<String>();
    hints.add("straight_join");
    RESULT = hints;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_plan_hints",77, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // opt_plan_hints ::= COMMENTED_PLAN_HINTS 
            {
              ArrayList<String> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    ArrayList<String> hints = new ArrayList<String>();
    String[] tokens = l.split(",");
    for (String token: tokens) {
      String trimmedToken = token.trim();
      if (trimmedToken.length() > 0) hints.add(trimmedToken);
    }
    RESULT = hints;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_plan_hints",77, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // opt_outer ::= 
            {
              Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_outer",76, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // opt_outer ::= KW_OUTER 
            {
              Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_outer",76, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // opt_inner ::= 
            {
              Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_inner",75, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // opt_inner ::= KW_INNER 
            {
              Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_inner",75, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // join_operator ::= KW_RIGHT KW_ANTI KW_JOIN 
            {
              JoinOperator RESULT =null;
		 RESULT = JoinOperator.RIGHT_ANTI_JOIN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("join_operator",74, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // join_operator ::= KW_LEFT KW_ANTI KW_JOIN 
            {
              JoinOperator RESULT =null;
		 RESULT = JoinOperator.LEFT_ANTI_JOIN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("join_operator",74, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // join_operator ::= KW_RIGHT KW_SEMI KW_JOIN 
            {
              JoinOperator RESULT =null;
		 RESULT = JoinOperator.RIGHT_SEMI_JOIN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("join_operator",74, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // join_operator ::= KW_LEFT KW_SEMI KW_JOIN 
            {
              JoinOperator RESULT =null;
		 RESULT = JoinOperator.LEFT_SEMI_JOIN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("join_operator",74, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // join_operator ::= KW_FULL opt_outer KW_JOIN 
            {
              JoinOperator RESULT =null;
		 RESULT = JoinOperator.FULL_OUTER_JOIN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("join_operator",74, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // join_operator ::= KW_RIGHT opt_outer KW_JOIN 
            {
              JoinOperator RESULT =null;
		 RESULT = JoinOperator.RIGHT_OUTER_JOIN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("join_operator",74, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // join_operator ::= KW_LEFT opt_outer KW_JOIN 
            {
              JoinOperator RESULT =null;
		 RESULT = JoinOperator.LEFT_OUTER_JOIN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("join_operator",74, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // join_operator ::= opt_inner KW_JOIN 
            {
              JoinOperator RESULT =null;
		 RESULT = JoinOperator.INNER_JOIN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("join_operator",74, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // table_ref ::= LPAREN query_stmt RPAREN alias_clause 
            {
              TableRef RESULT =null;
		int queryleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int queryright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		QueryStmt query = (QueryStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String alias = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new InlineViewRef(alias, query); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("table_ref",72, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // table_ref ::= table_name 
            {
              TableRef RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableName name = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new TableRef(name, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("table_ref",72, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // table_ref ::= table_name alias_clause 
            {
              TableRef RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		TableName name = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String alias = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new TableRef(name, alias); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("table_ref",72, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // table_ref_list ::= table_ref_list join_operator opt_plan_hints table_ref KW_USING LPAREN ident_list RPAREN 
            {
              ArrayList<TableRef> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).right;
		ArrayList<TableRef> list = (ArrayList<TableRef>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).right;
		JoinOperator op = (JoinOperator)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).value;
		int hintsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int hintsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		ArrayList<String> hints = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		TableRef table = (TableRef)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int colNamesleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int colNamesright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<String> colNames = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		
    table.setJoinOp((JoinOperator) op);
    table.setJoinHints(hints);
    table.setUsingClause(colNames);
    list.add(table);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("table_ref_list",68, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // table_ref_list ::= table_ref_list join_operator opt_plan_hints table_ref KW_ON expr 
            {
              ArrayList<TableRef> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		ArrayList<TableRef> list = (ArrayList<TableRef>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		JoinOperator op = (JoinOperator)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int hintsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int hintsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		ArrayList<String> hints = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		TableRef table = (TableRef)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    table.setJoinOp((JoinOperator) op);
    table.setJoinHints(hints);
    table.setOnClause(e);
    list.add(table);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("table_ref_list",68, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // table_ref_list ::= table_ref_list join_operator opt_plan_hints table_ref 
            {
              ArrayList<TableRef> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		ArrayList<TableRef> list = (ArrayList<TableRef>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		JoinOperator op = (JoinOperator)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int hintsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int hintsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<String> hints = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableRef table = (TableRef)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    table.setJoinOp((JoinOperator) op);
    table.setJoinHints(hints);
    list.add(table);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("table_ref_list",68, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // table_ref_list ::= table_ref_list KW_CROSS KW_JOIN opt_plan_hints table_ref 
            {
              ArrayList<TableRef> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		ArrayList<TableRef> list = (ArrayList<TableRef>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int hintsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int hintsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<String> hints = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableRef table = (TableRef)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    table.setJoinOp(JoinOperator.CROSS_JOIN);
    // We will throw an AnalysisException if there are join hints so that we can provide
    // a better error message than a parser exception.
    table.setJoinHints(hints);
    list.add(table);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("table_ref_list",68, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // table_ref_list ::= table_ref_list COMMA table_ref 
            {
              ArrayList<TableRef> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		ArrayList<TableRef> list = (ArrayList<TableRef>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableRef table = (TableRef)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    list.add(table);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("table_ref_list",68, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // table_ref_list ::= table_ref 
            {
              ArrayList<TableRef> RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableRef table = (TableRef)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    ArrayList<TableRef> list = new ArrayList<TableRef>();
    list.add(table);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("table_ref_list",68, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // from_clause ::= KW_FROM table_ref_list 
            {
              ArrayList<TableRef> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ArrayList<TableRef> l = (ArrayList<TableRef>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("from_clause",67, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // function_name ::= IDENT DOT IDENT 
            {
              FunctionName RESULT =null;
		int dbleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String db = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new FunctionName(db, fn); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("function_name",34, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // function_name ::= IDENT 
            {
              FunctionName RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new FunctionName(null, fn); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("function_name",34, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // table_name ::= IDENT DOT IDENT 
            {
              TableName RESULT =null;
		int dbleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String db = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int tblleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tblright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String tbl = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new TableName(db, tbl); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("table_name",33, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // table_name ::= IDENT 
            {
              TableName RESULT =null;
		int tblleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tblright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String tbl = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new TableName(null, tbl); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("table_name",33, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // star_expr ::= IDENT DOT IDENT DOT STAR 
            {
              SelectListItem RESULT =null;
		int dbleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		String db = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int tblleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int tblright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String tbl = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		 RESULT = SelectListItem.createStarItem(new TableName(db, tbl)); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("star_expr",24, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // star_expr ::= IDENT DOT STAR 
            {
              SelectListItem RESULT =null;
		int tblleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int tblright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String tbl = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		 RESULT = SelectListItem.createStarItem(new TableName(null, tbl)); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("star_expr",24, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // star_expr ::= STAR 
            {
              SelectListItem RESULT =null;
		 RESULT = SelectListItem.createStarItem(null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("star_expr",24, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // alias_clause ::= STRING_LITERAL 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alias_clause",30, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // alias_clause ::= KW_AS STRING_LITERAL 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alias_clause",30, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // alias_clause ::= IDENT 
            {
              String RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = ident; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alias_clause",30, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // alias_clause ::= KW_AS IDENT 
            {
              String RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = ident; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alias_clause",30, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // select_list_item ::= star_expr 
            {
              SelectListItem RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		SelectListItem expr = (SelectListItem)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_list_item",23, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // select_list_item ::= expr 
            {
              SelectListItem RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new SelectListItem(expr, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_list_item",23, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // select_list_item ::= expr alias_clause 
            {
              SelectListItem RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String alias = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new SelectListItem(expr, alias); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_list_item",23, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // select_list ::= select_list COMMA select_list_item 
            {
              SelectList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		SelectList list = (SelectList)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int itemleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		SelectListItem item = (SelectListItem)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    list.getItems().add(item);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_list",22, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // select_list ::= select_list_item 
            {
              SelectList RESULT =null;
		int itemleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		SelectListItem item = (SelectListItem)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    SelectList list = new SelectList();
    list.getItems().add(item);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_list",22, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // set_stmt ::= KW_SET 
            {
              SetStmt RESULT =null;
		 RESULT = new SetStmt(null, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("set_stmt",9, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // set_stmt ::= KW_SET IDENT EQUAL IDENT 
            {
              SetStmt RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new SetStmt(key, ident); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("set_stmt",9, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // set_stmt ::= KW_SET IDENT EQUAL literal 
            {
              SetStmt RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		LiteralExpr l = (LiteralExpr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new SetStmt(key, l.getStringValue()); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("set_stmt",9, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // select_clause ::= KW_SELECT KW_DISTINCT opt_plan_hints select_list 
            {
              SelectList RESULT =null;
		int hintsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int hintsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<String> hints = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		SelectList l = (SelectList)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    l.setIsDistinct(true);
    l.setPlanHints(hints);
    RESULT = l;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_clause",21, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // select_clause ::= KW_SELECT KW_ALL opt_plan_hints select_list 
            {
              SelectList RESULT =null;
		int hintsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int hintsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<String> hints = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		SelectList l = (SelectList)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    l.setPlanHints(hints);
    RESULT = l;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_clause",21, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // select_clause ::= KW_SELECT opt_plan_hints select_list 
            {
              SelectList RESULT =null;
		int hintsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int hintsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<String> hints = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		SelectList l = (SelectList)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    l.setPlanHints(hints);
    RESULT = l;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_clause",21, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // select_stmt ::= select_clause from_clause where_clause group_by_clause having_clause opt_order_by_clause opt_limit_offset_clause 
            {
              SelectStmt RESULT =null;
		int selectListleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).left;
		int selectListright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).right;
		SelectList selectList = (SelectList)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).value;
		int tableRefListleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int tableRefListright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		ArrayList<TableRef> tableRefList = (ArrayList<TableRef>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int wherePredicateleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int wherePredicateright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		Expr wherePredicate = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int groupingExprsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int groupingExprsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		ArrayList<Expr> groupingExprs = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int havingPredicateleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int havingPredicateright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr havingPredicate = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int orderByClauseleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int orderByClauseright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<OrderByElement> orderByClause = (ArrayList<OrderByElement>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int limitOffsetClauseleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int limitOffsetClauseright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		LimitElement limitOffsetClause = (LimitElement)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT = new SelectStmt(selectList, tableRefList, wherePredicate, groupingExprs,
                            havingPredicate, orderByClause, limitOffsetClause);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_stmt",1, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // select_stmt ::= select_clause 
            {
              SelectStmt RESULT =null;
		int selectListleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int selectListright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		SelectList selectList = (SelectList)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT = new SelectStmt(selectList, null, null, null, null, null, null);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_stmt",1, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // describe_output_style ::= 
            {
              TDescribeTableOutputStyle RESULT =null;
		 RESULT = TDescribeTableOutputStyle.MINIMAL; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("describe_output_style",17, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // describe_output_style ::= KW_FORMATTED 
            {
              TDescribeTableOutputStyle RESULT =null;
		 RESULT = TDescribeTableOutputStyle.FORMATTED; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("describe_output_style",17, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // describe_stmt ::= KW_DESCRIBE describe_output_style table_name 
            {
              DescribeStmt RESULT =null;
		int styleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int styleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		TDescribeTableOutputStyle style = (TDescribeTableOutputStyle)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new DescribeStmt(table, style); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("describe_stmt",15, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // show_create_tbl_stmt ::= KW_SHOW KW_CREATE KW_TABLE table_name 
            {
              ShowCreateTableStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ShowCreateTableStmt(table); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_create_tbl_stmt",16, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // show_pattern ::= KW_LIKE STRING_LITERAL 
            {
              String RESULT =null;
		int showPatternleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int showPatternright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String showPattern = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = showPattern; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_pattern",14, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // show_pattern ::= STRING_LITERAL 
            {
              String RESULT =null;
		int showPatternleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int showPatternright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String showPattern = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = showPattern; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_pattern",14, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // show_data_srcs_stmt ::= KW_SHOW KW_DATA sources_ident show_pattern 
            {
              ShowDataSrcsStmt RESULT =null;
		int is_sources_idleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int is_sources_idright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Boolean is_sources_id = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int showPatternleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int showPatternright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String showPattern = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ShowDataSrcsStmt(showPattern); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_data_srcs_stmt",105, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // show_data_srcs_stmt ::= KW_SHOW KW_DATA sources_ident 
            {
              ShowDataSrcsStmt RESULT =null;
		int is_sources_idleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int is_sources_idright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Boolean is_sources_id = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ShowDataSrcsStmt(); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_data_srcs_stmt",105, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // opt_function_category ::= 
            {
              TFunctionCategory RESULT =null;
		 RESULT = TFunctionCategory.SCALAR; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_function_category",164, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // opt_function_category ::= KW_ANALYTIC 
            {
              TFunctionCategory RESULT =null;
		 RESULT = TFunctionCategory.ANALYTIC; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_function_category",164, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // opt_function_category ::= KW_AGGREGATE 
            {
              TFunctionCategory RESULT =null;
		 RESULT = TFunctionCategory.AGGREGATE; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_function_category",164, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // show_functions_stmt ::= KW_SHOW opt_function_category KW_FUNCTIONS KW_IN IDENT show_pattern 
            {
              ShowFunctionsStmt RESULT =null;
		int fn_typeleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int fn_typeright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		TFunctionCategory fn_type = (TFunctionCategory)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int dbleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String db = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int showPatternleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int showPatternright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String showPattern = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ShowFunctionsStmt(db, showPattern, fn_type); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_functions_stmt",162, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // show_functions_stmt ::= KW_SHOW opt_function_category KW_FUNCTIONS KW_IN IDENT 
            {
              ShowFunctionsStmt RESULT =null;
		int fn_typeleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int fn_typeright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		TFunctionCategory fn_type = (TFunctionCategory)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int dbleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String db = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ShowFunctionsStmt(db, null, fn_type); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_functions_stmt",162, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // show_functions_stmt ::= KW_SHOW opt_function_category KW_FUNCTIONS show_pattern 
            {
              ShowFunctionsStmt RESULT =null;
		int fn_typeleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int fn_typeright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		TFunctionCategory fn_type = (TFunctionCategory)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int showPatternleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int showPatternright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String showPattern = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ShowFunctionsStmt(null, showPattern, fn_type); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_functions_stmt",162, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // show_functions_stmt ::= KW_SHOW opt_function_category KW_FUNCTIONS 
            {
              ShowFunctionsStmt RESULT =null;
		int fn_typeleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int fn_typeright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		TFunctionCategory fn_type = (TFunctionCategory)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = new ShowFunctionsStmt(null, null, fn_type); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_functions_stmt",162, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // show_partitions_stmt ::= KW_SHOW KW_PARTITIONS table_name 
            {
              ShowPartitionsStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ShowPartitionsStmt(table); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_partitions_stmt",12, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // show_stats_stmt ::= KW_SHOW KW_COLUMN KW_STATS table_name 
            {
              ShowStatsStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ShowStatsStmt(table, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_stats_stmt",13, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // show_stats_stmt ::= KW_SHOW KW_TABLE KW_STATS table_name 
            {
              ShowStatsStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ShowStatsStmt(table, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_stats_stmt",13, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // show_dbs_stmt ::= KW_SHOW dbs_or_schemas_kw show_pattern 
            {
              ShowDbsStmt RESULT =null;
		int showPatternleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int showPatternright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String showPattern = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ShowDbsStmt(showPattern); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_dbs_stmt",11, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // show_dbs_stmt ::= KW_SHOW dbs_or_schemas_kw 
            {
              ShowDbsStmt RESULT =null;
		 RESULT = new ShowDbsStmt(); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_dbs_stmt",11, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // show_tables_stmt ::= KW_SHOW KW_TABLES KW_IN IDENT show_pattern 
            {
              ShowTablesStmt RESULT =null;
		int dbleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String db = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int showPatternleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int showPatternright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String showPattern = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ShowTablesStmt(db, showPattern); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_tables_stmt",10, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // show_tables_stmt ::= KW_SHOW KW_TABLES KW_IN IDENT 
            {
              ShowTablesStmt RESULT =null;
		int dbleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String db = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ShowTablesStmt(db, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_tables_stmt",10, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // show_tables_stmt ::= KW_SHOW KW_TABLES show_pattern 
            {
              ShowTablesStmt RESULT =null;
		int showPatternleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int showPatternright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String showPattern = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ShowTablesStmt(showPattern); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_tables_stmt",10, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // show_tables_stmt ::= KW_SHOW KW_TABLES 
            {
              ShowTablesStmt RESULT =null;
		 RESULT = new ShowTablesStmt(); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_tables_stmt",10, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // use_stmt ::= KW_USE IDENT 
            {
              UseStmt RESULT =null;
		int dbleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String db = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new UseStmt(db); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("use_stmt",8, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // values_operand_list ::= values_operand_list COMMA LPAREN select_list RPAREN 
            {
              List<UnionOperand> RESULT =null;
		int operandsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int operandsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		List<UnionOperand> operands = (List<UnionOperand>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int selectListleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int selectListright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		SelectList selectList = (SelectList)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		
    operands.add(new UnionOperand(
        new SelectStmt(selectList, null, null, null, null, null, null), Qualifier.ALL));
    RESULT = operands;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("values_operand_list",7, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // values_operand_list ::= LPAREN select_list RPAREN 
            {
              List<UnionOperand> RESULT =null;
		int selectListleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int selectListright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		SelectList selectList = (SelectList)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		
    List<UnionOperand> operands = new ArrayList<UnionOperand>();
    operands.add(new UnionOperand(
        new SelectStmt(selectList, null, null, null, null, null, null), null));
    RESULT = operands;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("values_operand_list",7, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // values_stmt ::= KW_VALUES LPAREN values_operand_list RPAREN opt_order_by_clause opt_limit_offset_clause 
            {
              ValuesStmt RESULT =null;
		int operandsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int operandsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		List<UnionOperand> operands = (List<UnionOperand>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int orderByClauseleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int orderByClauseright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<OrderByElement> orderByClause = (ArrayList<OrderByElement>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int limitOffsetClauseleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int limitOffsetClauseright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		LimitElement limitOffsetClause = (LimitElement)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT = new ValuesStmt(operands, orderByClause, limitOffsetClause);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("values_stmt",2, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // values_stmt ::= KW_VALUES values_operand_list opt_order_by_clause opt_limit_offset_clause 
            {
              ValuesStmt RESULT =null;
		int operandsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int operandsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		List<UnionOperand> operands = (List<UnionOperand>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int orderByClauseleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int orderByClauseright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<OrderByElement> orderByClause = (ArrayList<OrderByElement>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int limitOffsetClauseleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int limitOffsetClauseright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		LimitElement limitOffsetClause = (LimitElement)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT = new ValuesStmt(operands, orderByClause, limitOffsetClause);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("values_stmt",2, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // union_op ::= KW_UNION KW_ALL 
            {
              Qualifier RESULT =null;
		 RESULT = Qualifier.ALL; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("union_op",89, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // union_op ::= KW_UNION KW_DISTINCT 
            {
              Qualifier RESULT =null;
		 RESULT = Qualifier.DISTINCT; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("union_op",89, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // union_op ::= KW_UNION 
            {
              Qualifier RESULT =null;
		 RESULT = Qualifier.DISTINCT; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("union_op",89, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // union_operand_list ::= union_operand_list union_op union_operand 
            {
              List<UnionOperand> RESULT =null;
		int operandsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int operandsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		List<UnionOperand> operands = (List<UnionOperand>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Qualifier op = (Qualifier)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int operandleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int operandright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		QueryStmt operand = (QueryStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    operands.add(new UnionOperand(operand, op));
    RESULT = operands;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("union_operand_list",6, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // union_operand_list ::= union_operand 
            {
              List<UnionOperand> RESULT =null;
		int operandleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int operandright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		QueryStmt operand = (QueryStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    List<UnionOperand> operands = new ArrayList<UnionOperand>();
    operands.add(new UnionOperand(operand, null));
    RESULT = operands;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("union_operand_list",6, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // union_operand ::= LPAREN query_stmt RPAREN 
            {
              QueryStmt RESULT =null;
		int queryleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int queryright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		QueryStmt query = (QueryStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = query; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("union_operand",5, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // union_operand ::= values_stmt 
            {
              QueryStmt RESULT =null;
		int valuesleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int valuesright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ValuesStmt values = (ValuesStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = values; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("union_operand",5, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // union_operand ::= select_stmt 
            {
              QueryStmt RESULT =null;
		int selectleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int selectright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		SelectStmt select = (SelectStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = select; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("union_operand",5, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // union_with_order_by_or_limit ::= union_operand_list KW_ORDER KW_BY order_by_elements KW_LIMIT expr opt_offset_param 
            {
              QueryStmt RESULT =null;
		int operandsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).left;
		int operandsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).right;
		List<UnionOperand> operands = (List<UnionOperand>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).value;
		int orderByClauseleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int orderByClauseright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		ArrayList<OrderByElement> orderByClause = (ArrayList<OrderByElement>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int limitExprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int limitExprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Expr limitExpr = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int offsetExprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int offsetExprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr offsetExpr = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    if (operands.size() == 1) {
      parser.parseError("order", SqlParserSymbols.KW_ORDER);
    }
    RESULT = new UnionStmt(operands, orderByClause,
        new LimitElement(limitExpr, offsetExpr));
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("union_with_order_by_or_limit",20, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // union_with_order_by_or_limit ::= union_operand_list KW_LIMIT expr 
            {
              QueryStmt RESULT =null;
		int operandsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int operandsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		List<UnionOperand> operands = (List<UnionOperand>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int limitExprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int limitExprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr limitExpr = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    if (operands.size() == 1) {
      parser.parseError("limit", SqlParserSymbols.KW_LIMIT);
    }
    RESULT = new UnionStmt(operands, null, new LimitElement(limitExpr, null));
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("union_with_order_by_or_limit",20, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // union_with_order_by_or_limit ::= union_operand_list KW_ORDER KW_BY order_by_elements opt_offset_param 
            {
              QueryStmt RESULT =null;
		int operandsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int operandsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		List<UnionOperand> operands = (List<UnionOperand>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int orderByClauseleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int orderByClauseright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<OrderByElement> orderByClause = (ArrayList<OrderByElement>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int offsetExprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int offsetExprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr offsetExpr = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    if (operands.size() == 1) {
      parser.parseError("order", SqlParserSymbols.KW_ORDER);
    }
    RESULT = new UnionStmt(operands, orderByClause, new LimitElement(null, offsetExpr));
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("union_with_order_by_or_limit",20, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // with_view_def_list ::= with_view_def_list COMMA with_view_def 
            {
              ArrayList<View> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		ArrayList<View> list = (ArrayList<View>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		View v = (View)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    list.add(v);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("with_view_def_list",70, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // with_view_def_list ::= with_view_def 
            {
              ArrayList<View> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		View v = (View)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    ArrayList<View> list = new ArrayList<View>();
    list.add(v);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("with_view_def_list",70, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // with_view_def ::= STRING_LITERAL KW_AS LPAREN query_stmt RPAREN 
            {
              View RESULT =null;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		String alias = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int queryleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int queryright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		QueryStmt query = (QueryStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = new View(alias, query); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("with_view_def",71, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // with_view_def ::= IDENT KW_AS LPAREN query_stmt RPAREN 
            {
              View RESULT =null;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		String alias = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int queryleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int queryright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		QueryStmt query = (QueryStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = new View(alias, query); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("with_view_def",71, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // opt_with_clause ::= 
            {
              WithClause RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_with_clause",69, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // opt_with_clause ::= KW_WITH with_view_def_list 
            {
              WithClause RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ArrayList<View> list = (ArrayList<View>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new WithClause(list); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_with_clause",69, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // query_stmt ::= opt_with_clause union_with_order_by_or_limit 
            {
              QueryStmt RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		WithClause w = (WithClause)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int unionleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int unionright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		QueryStmt union = (QueryStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    union.setWithClause(w);
    RESULT = union;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("query_stmt",3, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // query_stmt ::= opt_with_clause union_operand_list 
            {
              QueryStmt RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		WithClause w = (WithClause)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int operandsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int operandsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		List<UnionOperand> operands = (List<UnionOperand>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    QueryStmt queryStmt = null;
    if (operands.size() == 1) {
      queryStmt = operands.get(0).getQueryStmt();
    } else {
      queryStmt = new UnionStmt(operands, null, null);
    }
    queryStmt.setWithClause(w);
    RESULT = queryStmt;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("query_stmt",3, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // create_function_arg_key ::= KW_FINALIZE_FN 
            {
              CreateFunctionStmtBase.OptArg RESULT =null;
		 RESULT = CreateFunctionStmtBase.OptArg.FINALIZE_FN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_function_arg_key",166, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // create_function_arg_key ::= KW_MERGE_FN 
            {
              CreateFunctionStmtBase.OptArg RESULT =null;
		 RESULT = CreateFunctionStmtBase.OptArg.MERGE_FN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_function_arg_key",166, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // create_function_arg_key ::= KW_SERIALIZE_FN 
            {
              CreateFunctionStmtBase.OptArg RESULT =null;
		 RESULT = CreateFunctionStmtBase.OptArg.SERIALIZE_FN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_function_arg_key",166, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // create_function_arg_key ::= KW_INIT_FN 
            {
              CreateFunctionStmtBase.OptArg RESULT =null;
		 RESULT = CreateFunctionStmtBase.OptArg.INIT_FN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_function_arg_key",166, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // create_function_arg_key ::= KW_UPDATE_FN 
            {
              CreateFunctionStmtBase.OptArg RESULT =null;
		 RESULT = CreateFunctionStmtBase.OptArg.UPDATE_FN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_function_arg_key",166, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // create_function_arg_key ::= KW_CLOSE_FN 
            {
              CreateFunctionStmtBase.OptArg RESULT =null;
		 RESULT = CreateFunctionStmtBase.OptArg.CLOSE_FN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_function_arg_key",166, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // create_function_arg_key ::= KW_PREPARE_FN 
            {
              CreateFunctionStmtBase.OptArg RESULT =null;
		 RESULT = CreateFunctionStmtBase.OptArg.PREPARE_FN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_function_arg_key",166, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // create_function_arg_key ::= KW_SYMBOL 
            {
              CreateFunctionStmtBase.OptArg RESULT =null;
		 RESULT = CreateFunctionStmtBase.OptArg.SYMBOL; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_function_arg_key",166, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // create_function_arg_key ::= KW_COMMENT 
            {
              CreateFunctionStmtBase.OptArg RESULT =null;
		 RESULT = CreateFunctionStmtBase.OptArg.COMMENT; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_function_arg_key",166, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // create_function_args_map ::= 
            {
              HashMap RESULT =null;
		 RESULT = new HashMap<CreateFunctionStmtBase.OptArg, String>(); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_function_args_map",165, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // create_function_args_map ::= create_function_args_map create_function_arg_key EQUAL STRING_LITERAL 
            {
              HashMap RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		HashMap args = (HashMap)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		CreateFunctionStmtBase.OptArg key = (CreateFunctionStmtBase.OptArg)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    if (args.containsKey(key)) throw new Exception("Duplicate argument key: " + key);
    args.put(key, value);
    RESULT = args;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_function_args_map",165, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // create_function_args_map ::= create_function_arg_key EQUAL STRING_LITERAL 
            {
              HashMap RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		CreateFunctionStmtBase.OptArg key = (CreateFunctionStmtBase.OptArg)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    HashMap<CreateFunctionStmtBase.OptArg, String> args =
        new HashMap<CreateFunctionStmtBase.OptArg, String>();
    args.put(key, value);
    RESULT = args;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_function_args_map",165, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // opt_aggregate_fn_intermediate_type ::= 
            {
              Type RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_aggregate_fn_intermediate_type",159, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // opt_aggregate_fn_intermediate_type ::= KW_INTERMEDIATE type 
            {
              Type RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = type; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_aggregate_fn_intermediate_type",159, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // opt_is_varargs ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_is_varargs",158, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // opt_is_varargs ::= DOTDOTDOT 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_is_varargs",158, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // opt_is_aggregate_fn ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_is_aggregate_fn",157, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // opt_is_aggregate_fn ::= KW_AGGREGATE 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_is_aggregate_fn",157, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // function_def_arg_list ::= function_def_arg_list COMMA type 
            {
              FunctionArgs RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		FunctionArgs args = (FunctionArgs)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    args.argTypes.add(type);
    RESULT = args;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("function_def_arg_list",156, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // function_def_arg_list ::= type 
            {
              FunctionArgs RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    FunctionArgs args = new FunctionArgs();
    args.argTypes.add(type);
    RESULT = args;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("function_def_arg_list",156, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // function_def_args ::= LPAREN function_def_arg_list opt_is_varargs RPAREN 
            {
              FunctionArgs RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		FunctionArgs args = (FunctionArgs)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int var_argsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int var_argsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Boolean var_args = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		
    args.setHasVarArgs(var_args);
    RESULT = args;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("function_def_args",155, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // function_def_args ::= LPAREN RPAREN 
            {
              FunctionArgs RESULT =null;
		 RESULT = new FunctionArgs(); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("function_def_args",155, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // static_partition_key_value ::= IDENT EQUAL expr 
            {
              PartitionKeyValue RESULT =null;
		int columnleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int columnright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String column = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new PartitionKeyValue(column, e); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("static_partition_key_value",88, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // partition_key_value ::= static_partition_key_value 
            {
              PartitionKeyValue RESULT =null;
		int partitionleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int partitionright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		PartitionKeyValue partition = (PartitionKeyValue)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = partition; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("partition_key_value",87, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // partition_key_value ::= IDENT 
            {
              PartitionKeyValue RESULT =null;
		int columnleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int columnright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String column = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new PartitionKeyValue(column, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("partition_key_value",87, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // static_partition_key_value_list ::= static_partition_key_value_list COMMA static_partition_key_value 
            {
              ArrayList<PartitionKeyValue> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		ArrayList<PartitionKeyValue> list = (ArrayList<PartitionKeyValue>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int itemleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		PartitionKeyValue item = (PartitionKeyValue)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    list.add(item);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("static_partition_key_value_list",85, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // static_partition_key_value_list ::= static_partition_key_value 
            {
              ArrayList<PartitionKeyValue> RESULT =null;
		int itemleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		PartitionKeyValue item = (PartitionKeyValue)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    ArrayList<PartitionKeyValue> list = new ArrayList<PartitionKeyValue>();
    list.add(item);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("static_partition_key_value_list",85, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // opt_partition_spec ::= 
            {
              PartitionSpec RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_partition_spec",82, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // opt_partition_spec ::= partition_spec 
            {
              PartitionSpec RESULT =null;
		int partition_specleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int partition_specright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		PartitionSpec partition_spec = (PartitionSpec)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = partition_spec; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_partition_spec",82, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // partition_spec ::= KW_PARTITION LPAREN static_partition_key_value_list RPAREN 
            {
              PartitionSpec RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<PartitionKeyValue> list = (ArrayList<PartitionKeyValue>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = new PartitionSpec(list); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("partition_spec",83, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // partition_key_value_list ::= partition_key_value_list COMMA partition_key_value 
            {
              ArrayList<PartitionKeyValue> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		ArrayList<PartitionKeyValue> list = (ArrayList<PartitionKeyValue>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int itemleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		PartitionKeyValue item = (PartitionKeyValue)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    list.add(item);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("partition_key_value_list",86, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // partition_key_value_list ::= partition_key_value 
            {
              ArrayList<PartitionKeyValue> RESULT =null;
		int itemleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		PartitionKeyValue item = (PartitionKeyValue)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    ArrayList<PartitionKeyValue> list = new ArrayList<PartitionKeyValue>();
    list.add(item);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("partition_key_value_list",86, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // partition_clause ::= 
            {
              ArrayList<PartitionKeyValue> RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("partition_clause",84, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // partition_clause ::= KW_PARTITION LPAREN partition_key_value_list RPAREN 
            {
              ArrayList<PartitionKeyValue> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<PartitionKeyValue> list = (ArrayList<PartitionKeyValue>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = list; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("partition_clause",84, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // if_exists_val ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("if_exists_val",120, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // if_exists_val ::= KW_IF KW_EXISTS 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("if_exists_val",120, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // dbs_or_schemas_kw ::= KW_SCHEMAS 
            {
              String RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("dbs_or_schemas_kw",134, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // dbs_or_schemas_kw ::= KW_DATABASES 
            {
              String RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("dbs_or_schemas_kw",134, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // db_or_schema_kw ::= KW_SCHEMA 
            {
              String RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("db_or_schema_kw",133, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // db_or_schema_kw ::= KW_DATABASE 
            {
              String RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("db_or_schema_kw",133, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // drop_data_src_stmt ::= KW_DROP KW_DATA source_ident if_exists_val IDENT 
            {
              DropDataSrcStmt RESULT =null;
		int is_source_idleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int is_source_idright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Boolean is_source_id = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int if_existsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int if_existsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Boolean if_exists = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int data_src_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int data_src_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String data_src_name = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new DropDataSrcStmt(data_src_name, if_exists); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("drop_data_src_stmt",104, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // drop_function_stmt ::= KW_DROP opt_is_aggregate_fn KW_FUNCTION if_exists_val function_name function_def_args 
            {
              DropFunctionStmt RESULT =null;
		int is_aggregateleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int is_aggregateright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		Boolean is_aggregate = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int if_existsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int if_existsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Boolean if_exists = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int fn_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int fn_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		FunctionName fn_name = (FunctionName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int fn_argsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int fn_argsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		FunctionArgs fn_args = (FunctionArgs)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new DropFunctionStmt(fn_name, fn_args, if_exists); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("drop_function_stmt",163, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // drop_tbl_or_view_stmt ::= KW_DROP KW_VIEW if_exists_val table_name 
            {
              DropTableOrViewStmt RESULT =null;
		int if_existsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int if_existsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Boolean if_exists = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new DropTableOrViewStmt(table, if_exists, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("drop_tbl_or_view_stmt",95, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // drop_tbl_or_view_stmt ::= KW_DROP KW_TABLE if_exists_val table_name 
            {
              DropTableOrViewStmt RESULT =null;
		int if_existsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int if_existsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Boolean if_exists = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new DropTableOrViewStmt(table, if_exists, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("drop_tbl_or_view_stmt",95, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // drop_db_stmt ::= KW_DROP db_or_schema_kw if_exists_val IDENT 
            {
              DropDbStmt RESULT =null;
		int if_existsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int if_existsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Boolean if_exists = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int db_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int db_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String db_name = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new DropDbStmt(db_name, if_exists); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("drop_db_stmt",93, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // drop_stats_stmt ::= KW_DROP KW_INCREMENTAL KW_STATS table_name partition_spec 
            {
              DropStatsStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int specleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int specright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		PartitionSpec spec = (PartitionSpec)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new DropStatsStmt(table, spec); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("drop_stats_stmt",94, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // drop_stats_stmt ::= KW_DROP KW_STATS table_name 
            {
              DropStatsStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new DropStatsStmt(table); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("drop_stats_stmt",94, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // compute_stats_stmt ::= KW_COMPUTE KW_INCREMENTAL KW_STATS table_name partition_spec 
            {
              ComputeStatsStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int specleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int specright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		PartitionSpec spec = (PartitionSpec)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ComputeStatsStmt(table, true, spec); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("compute_stats_stmt",92, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // compute_stats_stmt ::= KW_COMPUTE KW_INCREMENTAL KW_STATS table_name 
            {
              ComputeStatsStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ComputeStatsStmt(table, true, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("compute_stats_stmt",92, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // compute_stats_stmt ::= KW_COMPUTE KW_STATS table_name 
            {
              ComputeStatsStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ComputeStatsStmt(table); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("compute_stats_stmt",92, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // alter_view_stmt ::= KW_ALTER KW_VIEW table_name KW_RENAME KW_TO table_name 
            {
              StatementBase RESULT =null;
		int before_tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int before_tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		TableName before_table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int new_tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int new_tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableName new_table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new AlterTableOrViewRenameStmt(before_table, new_table, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_view_stmt",91, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // alter_view_stmt ::= KW_ALTER KW_VIEW table_name KW_AS query_stmt 
            {
              StatementBase RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int view_defleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int view_defright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		QueryStmt view_def = (QueryStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new AlterViewStmt(table, view_def); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_view_stmt",91, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // view_column_def ::= IDENT comment_val 
            {
              ColumnDesc RESULT =null;
		int col_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int col_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String col_name = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int commentleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ColumnDesc(col_name, null, comment); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("view_column_def",108, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // view_column_def_list ::= view_column_def_list COMMA view_column_def 
            {
              ArrayList<ColumnDesc> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		ArrayList<ColumnDesc> list = (ArrayList<ColumnDesc>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int col_defleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int col_defright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ColumnDesc col_def = (ColumnDesc)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    list.add(col_def);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("view_column_def_list",110, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // view_column_def_list ::= view_column_def 
            {
              ArrayList<ColumnDesc> RESULT =null;
		int col_defleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int col_defright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ColumnDesc col_def = (ColumnDesc)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    ArrayList<ColumnDesc> list = new ArrayList<ColumnDesc>();
    list.add(col_def);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("view_column_def_list",110, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // view_column_defs ::= 
            {
              ArrayList<ColumnDesc> RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("view_column_defs",112, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // view_column_defs ::= LPAREN view_column_def_list RPAREN 
            {
              ArrayList<ColumnDesc> RESULT =null;
		int view_col_defsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int view_col_defsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<ColumnDesc> view_col_defs = (ArrayList<ColumnDesc>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = view_col_defs; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("view_column_defs",112, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // option_ident ::= IDENT 
            {
              Boolean RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    if (!ident.toUpperCase().equals("OPTION")) {
      parser.parseError("identifier", SqlParserSymbols.IDENT, "OPTION");
    }
    RESULT = true;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("option_ident",154, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // server_ident ::= IDENT 
            {
              Boolean RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    if (!ident.toUpperCase().equals("SERVER")) {
      parser.parseError("identifier", SqlParserSymbols.IDENT, "SERVER");
    }
    RESULT = true;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("server_ident",152, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // uri_ident ::= IDENT 
            {
              Boolean RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    if (!ident.toUpperCase().equals("URI")) {
      parser.parseError("identifier", SqlParserSymbols.IDENT, "URI");
    }
    RESULT = true;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("uri_ident",153, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // sources_ident ::= IDENT 
            {
              Boolean RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    if (!ident.toUpperCase().equals("SOURCES")) {
      parser.parseError("identifier", SqlParserSymbols.IDENT, "SOURCES");
    }
    RESULT = true;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("sources_ident",151, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // source_ident ::= IDENT 
            {
              Boolean RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    if (!ident.toUpperCase().equals("SOURCE")) {
      parser.parseError("identifier", SqlParserSymbols.IDENT, "SOURCE");
    }
    RESULT = true;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("source_ident",150, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // create_data_src_stmt ::= KW_CREATE KW_DATA source_ident if_not_exists_val IDENT KW_LOCATION STRING_LITERAL KW_CLASS STRING_LITERAL KW_API_VERSION STRING_LITERAL 
            {
              CreateDataSrcStmt RESULT =null;
		int is_source_idleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).left;
		int is_source_idright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).right;
		Boolean is_source_id = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).value;
		int if_not_existsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).left;
		int if_not_existsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).right;
		Boolean if_not_exists = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).value;
		int data_src_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).left;
		int data_src_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).right;
		String data_src_name = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).value;
		int locationleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int locationright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		String location = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int class_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int class_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String class_name = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int api_versionleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int api_versionright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String api_version = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT = new CreateDataSrcStmt(data_src_name, new HdfsUri(location), class_name,
        api_version, if_not_exists);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_data_src_stmt",103, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // create_view_stmt ::= KW_CREATE KW_VIEW if_not_exists_val table_name view_column_defs comment_val KW_AS query_stmt 
            {
              CreateViewStmt RESULT =null;
		int if_not_existsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int if_not_existsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		Boolean if_not_exists = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int view_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int view_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		TableName view_name = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int col_defsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int col_defsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		ArrayList<ColumnDesc> col_defs = (ArrayList<ColumnDesc>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int commentleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int view_defleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int view_defright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		QueryStmt view_def = (QueryStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT = new CreateViewStmt(if_not_exists, view_name, col_defs, comment, view_def);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_view_stmt",102, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // column_def ::= IDENT type comment_val 
            {
              ColumnDesc RESULT =null;
		int col_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int col_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String col_name = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int targetTypeleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int targetTyperight = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Type targetType = (Type)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int commentleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ColumnDesc(col_name, targetType, comment); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_def",107, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // column_def_list ::= column_def_list COMMA column_def 
            {
              ArrayList<ColumnDesc> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		ArrayList<ColumnDesc> list = (ArrayList<ColumnDesc>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int col_defleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int col_defright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ColumnDesc col_def = (ColumnDesc)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    list.add(col_def);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_def_list",109, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // column_def_list ::= column_def 
            {
              ArrayList<ColumnDesc> RESULT =null;
		int col_defleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int col_defright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ColumnDesc col_def = (ColumnDesc)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    ArrayList<ColumnDesc> list = new ArrayList<ColumnDesc>();
    list.add(col_def);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_def_list",109, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // partition_column_defs ::= 
            {
              ArrayList<ColumnDesc> RESULT =null;
		 RESULT = new ArrayList<ColumnDesc>(); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("partition_column_defs",111, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // partition_column_defs ::= KW_PARTITIONED KW_BY LPAREN column_def_list RPAREN 
            {
              ArrayList<ColumnDesc> RESULT =null;
		int col_defsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int col_defsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<ColumnDesc> col_defs = (ArrayList<ColumnDesc>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = col_defs; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("partition_column_defs",111, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // properties_map ::= properties_map COMMA STRING_LITERAL EQUAL STRING_LITERAL 
            {
              HashMap RESULT =null;
		int propertiesleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int propertiesright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		HashMap properties = (HashMap)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    properties.put(key, value);
    RESULT = properties;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("properties_map",132, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // properties_map ::= STRING_LITERAL EQUAL STRING_LITERAL 
            {
              HashMap RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    HashMap<String, String> properties = new HashMap<String, String>();
    properties.put(key, value);
    RESULT = properties;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("properties_map",132, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // serde_properties ::= 
            {
              HashMap RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("serde_properties",130, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // serde_properties ::= KW_WITH KW_SERDEPROPERTIES LPAREN properties_map RPAREN 
            {
              HashMap RESULT =null;
		int mapleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int mapright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		HashMap map = (HashMap)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = map; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("serde_properties",130, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // tbl_properties ::= 
            {
              HashMap RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("tbl_properties",131, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // tbl_properties ::= KW_TBLPROPERTIES LPAREN properties_map RPAREN 
            {
              HashMap RESULT =null;
		int mapleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int mapright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		HashMap map = (HashMap)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = map; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("tbl_properties",131, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // file_format_val ::= KW_AVRO 
            {
              THdfsFileFormat RESULT =null;
		 RESULT = THdfsFileFormat.AVRO; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("file_format_val",118, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // file_format_val ::= KW_RCFILE 
            {
              THdfsFileFormat RESULT =null;
		 RESULT = THdfsFileFormat.RC_FILE; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("file_format_val",118, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // file_format_val ::= KW_SEQUENCEFILE 
            {
              THdfsFileFormat RESULT =null;
		 RESULT = THdfsFileFormat.SEQUENCE_FILE; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("file_format_val",118, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // file_format_val ::= KW_TEXTFILE 
            {
              THdfsFileFormat RESULT =null;
		 RESULT = THdfsFileFormat.TEXT; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("file_format_val",118, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // file_format_val ::= KW_PARQUETFILE 
            {
              THdfsFileFormat RESULT =null;
		 RESULT = THdfsFileFormat.PARQUET; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("file_format_val",118, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // file_format_val ::= KW_PARQUET 
            {
              THdfsFileFormat RESULT =null;
		 RESULT = THdfsFileFormat.PARQUET; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("file_format_val",118, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // file_format_create_table_val ::= 
            {
              THdfsFileFormat RESULT =null;
		 RESULT = THdfsFileFormat.TEXT; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("file_format_create_table_val",119, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // file_format_create_table_val ::= KW_STORED KW_AS file_format_val 
            {
              THdfsFileFormat RESULT =null;
		int file_formatleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int file_formatright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		THdfsFileFormat file_format = (THdfsFileFormat)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = file_format; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("file_format_create_table_val",119, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // terminator_val ::= KW_TERMINATED KW_BY STRING_LITERAL 
            {
              String RESULT =null;
		int terminatorleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int terminatorright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String terminator = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = terminator; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("terminator_val",128, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // field_terminator_val ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("field_terminator_val",125, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // field_terminator_val ::= KW_FIELDS terminator_val 
            {
              String RESULT =null;
		int field_terminatorleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int field_terminatorright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String field_terminator = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = field_terminator; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("field_terminator_val",125, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // line_terminator_val ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("line_terminator_val",126, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // line_terminator_val ::= KW_LINES terminator_val 
            {
              String RESULT =null;
		int line_terminatorleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int line_terminatorright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String line_terminator = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = line_terminator; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("line_terminator_val",126, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // escaped_by_val ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("escaped_by_val",127, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // escaped_by_val ::= KW_ESCAPED KW_BY STRING_LITERAL 
            {
              String RESULT =null;
		int escaped_byleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int escaped_byright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String escaped_by = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = escaped_by; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("escaped_by_val",127, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // row_format_val ::= 
            {
              RowFormat RESULT =null;
		 RESULT = RowFormat.DEFAULT_ROW_FORMAT; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("row_format_val",124, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // row_format_val ::= KW_ROW KW_FORMAT KW_DELIMITED field_terminator_val escaped_by_val line_terminator_val 
            {
              RowFormat RESULT =null;
		int field_terminatorleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int field_terminatorright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String field_terminator = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int escaped_byleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int escaped_byright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String escaped_by = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int line_terminatorleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int line_terminatorright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String line_terminator = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new RowFormat(field_terminator, line_terminator, escaped_by); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("row_format_val",124, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // if_not_exists_val ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("if_not_exists_val",121, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // if_not_exists_val ::= KW_IF KW_NOT KW_EXISTS 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("if_not_exists_val",121, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // external_val ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("external_val",116, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // external_val ::= KW_EXTERNAL 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("external_val",116, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // opt_init_string_val ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_init_string_val",117, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // opt_init_string_val ::= LPAREN STRING_LITERAL RPAREN 
            {
              String RESULT =null;
		int init_stringleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int init_stringright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String init_string = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = init_string; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_init_string_val",117, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // location_val ::= 
            {
              HdfsUri RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("location_val",123, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // location_val ::= KW_LOCATION STRING_LITERAL 
            {
              HdfsUri RESULT =null;
		int locationleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int locationright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String location = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new HdfsUri(location); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("location_val",123, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // comment_val ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("comment_val",115, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // comment_val ::= KW_COMMENT STRING_LITERAL 
            {
              String RESULT =null;
		int commentleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = comment; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("comment_val",115, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // cache_op_val ::= 
            {
              HdfsCachingOp RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("cache_op_val",114, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // cache_op_val ::= KW_UNCACHED 
            {
              HdfsCachingOp RESULT =null;
		 RESULT = new HdfsCachingOp(); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("cache_op_val",114, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // cache_op_val ::= KW_CACHED KW_IN STRING_LITERAL 
            {
              HdfsCachingOp RESULT =null;
		int pool_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int pool_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String pool_name = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new HdfsCachingOp(pool_name); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("cache_op_val",114, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // create_uda_stmt ::= KW_CREATE KW_AGGREGATE KW_FUNCTION if_not_exists_val function_name function_def_args KW_RETURNS type opt_aggregate_fn_intermediate_type KW_LOCATION STRING_LITERAL create_function_args_map 
            {
              CreateUdaStmt RESULT =null;
		int if_not_existsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).left;
		int if_not_existsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).right;
		Boolean if_not_exists = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).value;
		int fn_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).left;
		int fn_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).right;
		FunctionName fn_name = (FunctionName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).value;
		int fn_argsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).left;
		int fn_argsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).right;
		FunctionArgs fn_args = (FunctionArgs)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).value;
		int return_typeleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int return_typeright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		Type return_type = (Type)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int intermediate_typeleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int intermediate_typeright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Type intermediate_type = (Type)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int binary_pathleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int binary_pathright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String binary_path = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int arg_mapleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int arg_mapright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		HashMap arg_map = (HashMap)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT = new CreateUdaStmt(fn_name, fn_args, return_type, intermediate_type,
        new HdfsUri(binary_path), if_not_exists, arg_map);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_uda_stmt",161, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-11)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // create_udf_stmt ::= KW_CREATE KW_FUNCTION if_not_exists_val function_name function_def_args KW_RETURNS type KW_LOCATION STRING_LITERAL create_function_args_map 
            {
              CreateUdfStmt RESULT =null;
		int if_not_existsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).left;
		int if_not_existsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).right;
		Boolean if_not_exists = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).value;
		int fn_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).left;
		int fn_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).right;
		FunctionName fn_name = (FunctionName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).value;
		int fn_argsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int fn_argsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		FunctionArgs fn_args = (FunctionArgs)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int return_typeleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int return_typeright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Type return_type = (Type)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int binary_pathleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int binary_pathright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String binary_path = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int arg_mapleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int arg_mapright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		HashMap arg_map = (HashMap)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT = new CreateUdfStmt(fn_name, fn_args, return_type, new HdfsUri(binary_path),
        if_not_exists, arg_map);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_udf_stmt",160, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-9)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // create_partitioned_tbl_stmt ::= KW_CREATE external_val KW_TABLE if_not_exists_val table_name KW_PARTITIONED KW_BY LPAREN column_def_list RPAREN comment_val row_format_val serde_properties file_format_create_table_val location_val cache_op_val tbl_properties 
            {
              CreateTableStmt RESULT =null;
		int externalleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-15)).left;
		int externalright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-15)).right;
		Boolean external = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-15)).value;
		int if_not_existsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-13)).left;
		int if_not_existsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-13)).right;
		Boolean if_not_exists = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-13)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-12)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-12)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-12)).value;
		int partition_col_defsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).left;
		int partition_col_defsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).right;
		ArrayList<ColumnDesc> partition_col_defs = (ArrayList<ColumnDesc>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).value;
		int commentleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).value;
		int row_formatleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int row_formatright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		RowFormat row_format = (RowFormat)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int serde_propsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int serde_propsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		HashMap serde_props = (HashMap)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int file_formatleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int file_formatright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		THdfsFileFormat file_format = (THdfsFileFormat)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int locationleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int locationright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		HdfsUri location = (HdfsUri)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int cache_opleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int cache_opright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		HdfsCachingOp cache_op = (HdfsCachingOp)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int tbl_propsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tbl_propsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		HashMap tbl_props = (HashMap)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT = new CreateTableStmt(table, new ArrayList<ColumnDesc>(), partition_col_defs,
        external, comment, row_format, file_format, location, cache_op, if_not_exists,
        tbl_props, serde_props);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_partitioned_tbl_stmt",101, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-16)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // create_partitioned_tbl_stmt ::= KW_CREATE external_val KW_TABLE if_not_exists_val table_name LPAREN column_def_list RPAREN KW_PARTITIONED KW_BY LPAREN column_def_list RPAREN comment_val row_format_val serde_properties file_format_create_table_val location_val cache_op_val tbl_properties 
            {
              CreateTableStmt RESULT =null;
		int externalleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-18)).left;
		int externalright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-18)).right;
		Boolean external = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-18)).value;
		int if_not_existsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-16)).left;
		int if_not_existsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-16)).right;
		Boolean if_not_exists = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-16)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-15)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-15)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-15)).value;
		int col_defsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-13)).left;
		int col_defsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-13)).right;
		ArrayList<ColumnDesc> col_defs = (ArrayList<ColumnDesc>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-13)).value;
		int partition_col_defsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).left;
		int partition_col_defsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).right;
		ArrayList<ColumnDesc> partition_col_defs = (ArrayList<ColumnDesc>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).value;
		int commentleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).value;
		int row_formatleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int row_formatright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		RowFormat row_format = (RowFormat)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int serde_propsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int serde_propsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		HashMap serde_props = (HashMap)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int file_formatleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int file_formatright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		THdfsFileFormat file_format = (THdfsFileFormat)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int locationleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int locationright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		HdfsUri location = (HdfsUri)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int cache_opleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int cache_opright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		HdfsCachingOp cache_op = (HdfsCachingOp)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int tbl_propsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tbl_propsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		HashMap tbl_props = (HashMap)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT = new CreateTableStmt(table, col_defs, partition_col_defs, external, comment,
        row_format, file_format, location, cache_op, if_not_exists, tbl_props,
        serde_props);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_partitioned_tbl_stmt",101, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-19)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // create_unpartitioned_tbl_stmt ::= KW_CREATE external_val KW_TABLE if_not_exists_val table_name LPAREN column_def_list RPAREN KW_PRODUCED KW_BY KW_DATA source_ident IDENT opt_init_string_val comment_val 
            {
              CreateTableStmt RESULT =null;
		int externalleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-13)).left;
		int externalright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-13)).right;
		Boolean external = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-13)).value;
		int if_not_existsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-11)).left;
		int if_not_existsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-11)).right;
		Boolean if_not_exists = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-11)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).value;
		int col_defsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).left;
		int col_defsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).right;
		ArrayList<ColumnDesc> col_defs = (ArrayList<ColumnDesc>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).value;
		int is_source_idleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int is_source_idright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Boolean is_source_id = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int data_src_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int data_src_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String data_src_name = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int init_stringleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int init_stringright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String init_string = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int commentleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    // Need external_val in the grammar to avoid shift/reduce conflict with other
    // CREATE TABLE statements.
    if (external) parser.parseError("external", SqlParserSymbols.KW_EXTERNAL);
    RESULT = new CreateTableDataSrcStmt(table, col_defs, data_src_name, init_string,
        comment, if_not_exists);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_unpartitioned_tbl_stmt",100, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-14)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // create_unpartitioned_tbl_stmt ::= KW_CREATE external_val KW_TABLE if_not_exists_val table_name comment_val row_format_val serde_properties file_format_create_table_val location_val cache_op_val tbl_properties 
            {
              CreateTableStmt RESULT =null;
		int externalleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).left;
		int externalright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).right;
		Boolean external = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).value;
		int if_not_existsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).left;
		int if_not_existsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).right;
		Boolean if_not_exists = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).value;
		int commentleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).value;
		int row_formatleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int row_formatright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		RowFormat row_format = (RowFormat)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int serde_propsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int serde_propsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		HashMap serde_props = (HashMap)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int file_formatleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int file_formatright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		THdfsFileFormat file_format = (THdfsFileFormat)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int locationleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int locationright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		HdfsUri location = (HdfsUri)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int cache_opleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int cache_opright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		HdfsCachingOp cache_op = (HdfsCachingOp)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int tbl_propsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tbl_propsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		HashMap tbl_props = (HashMap)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT = new CreateTableStmt(table, new ArrayList<ColumnDesc>(),
        new ArrayList<ColumnDesc>(), external, comment, row_format, file_format,
        location, cache_op, if_not_exists, tbl_props, serde_props);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_unpartitioned_tbl_stmt",100, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-11)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // create_unpartitioned_tbl_stmt ::= KW_CREATE external_val KW_TABLE if_not_exists_val table_name LPAREN column_def_list RPAREN comment_val row_format_val serde_properties file_format_create_table_val location_val cache_op_val tbl_properties 
            {
              CreateTableStmt RESULT =null;
		int externalleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-13)).left;
		int externalright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-13)).right;
		Boolean external = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-13)).value;
		int if_not_existsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-11)).left;
		int if_not_existsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-11)).right;
		Boolean if_not_exists = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-11)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).value;
		int col_defsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).left;
		int col_defsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).right;
		ArrayList<ColumnDesc> col_defs = (ArrayList<ColumnDesc>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).value;
		int commentleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).value;
		int row_formatleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int row_formatright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		RowFormat row_format = (RowFormat)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int serde_propsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int serde_propsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		HashMap serde_props = (HashMap)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int file_formatleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int file_formatright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		THdfsFileFormat file_format = (THdfsFileFormat)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int locationleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int locationright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		HdfsUri location = (HdfsUri)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int cache_opleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int cache_opright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		HdfsCachingOp cache_op = (HdfsCachingOp)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int tbl_propsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tbl_propsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		HashMap tbl_props = (HashMap)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT = new CreateTableStmt(table, col_defs, new ArrayList<ColumnDesc>(), external,
        comment, row_format, file_format, location, cache_op, if_not_exists, tbl_props,
        serde_props);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_unpartitioned_tbl_stmt",100, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-14)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // create_tbl_as_select_stmt ::= KW_CREATE external_val KW_TABLE if_not_exists_val table_name comment_val row_format_val serde_properties file_format_create_table_val location_val cache_op_val tbl_properties KW_AS query_stmt 
            {
              CreateTableAsSelectStmt RESULT =null;
		int externalleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-12)).left;
		int externalright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-12)).right;
		Boolean external = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-12)).value;
		int if_not_existsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).left;
		int if_not_existsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).right;
		Boolean if_not_exists = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-9)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-9)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-9)).value;
		int commentleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).value;
		int row_formatleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).left;
		int row_formatright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).right;
		RowFormat row_format = (RowFormat)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).value;
		int serde_propsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).left;
		int serde_propsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).right;
		HashMap serde_props = (HashMap)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).value;
		int file_formatleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int file_formatright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		THdfsFileFormat file_format = (THdfsFileFormat)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int locationleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int locationright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		HdfsUri location = (HdfsUri)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int cache_opleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int cache_opright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		HdfsCachingOp cache_op = (HdfsCachingOp)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int tbl_propsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int tbl_propsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		HashMap tbl_props = (HashMap)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int queryleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int queryright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		QueryStmt query = (QueryStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    // Initialize with empty List of columns and partition columns. The
    // columns will be added from the query statement during analysis
    CreateTableStmt create_stmt = new CreateTableStmt(table, new ArrayList<ColumnDesc>(),
        new ArrayList<ColumnDesc>(), external, comment, row_format,
        file_format, location, cache_op, if_not_exists, tbl_props, serde_props);
    RESULT = new CreateTableAsSelectStmt(create_stmt, query);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_tbl_as_select_stmt",97, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-13)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // create_tbl_like_file_stmt ::= KW_CREATE external_val KW_TABLE if_not_exists_val table_name KW_LIKE file_format_val STRING_LITERAL partition_column_defs comment_val row_format_val serde_properties file_format_create_table_val location_val cache_op_val tbl_properties 
            {
              CreateTableLikeFileStmt RESULT =null;
		int externalleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-14)).left;
		int externalright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-14)).right;
		Boolean external = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-14)).value;
		int if_not_existsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-12)).left;
		int if_not_existsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-12)).right;
		Boolean if_not_exists = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-12)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-11)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-11)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-11)).value;
		int schema_file_formatleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-9)).left;
		int schema_file_formatright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-9)).right;
		THdfsFileFormat schema_file_format = (THdfsFileFormat)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-9)).value;
		int schema_locationleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).left;
		int schema_locationright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).right;
		String schema_location = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).value;
		int partition_col_defsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).left;
		int partition_col_defsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).right;
		ArrayList<ColumnDesc> partition_col_defs = (ArrayList<ColumnDesc>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).value;
		int commentleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).value;
		int row_formatleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int row_formatright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		RowFormat row_format = (RowFormat)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int serde_propsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int serde_propsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		HashMap serde_props = (HashMap)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int file_formatleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int file_formatright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		THdfsFileFormat file_format = (THdfsFileFormat)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int locationleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int locationright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		HdfsUri location = (HdfsUri)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int cache_opleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int cache_opright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		HdfsCachingOp cache_op = (HdfsCachingOp)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int tbl_propsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tbl_propsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		HashMap tbl_props = (HashMap)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT = new CreateTableLikeFileStmt(table, schema_file_format,
        new HdfsUri(schema_location), partition_col_defs, external, comment, row_format,
        file_format, location, cache_op, if_not_exists, tbl_props, serde_props);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_tbl_like_file_stmt",99, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-15)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // create_tbl_like_stmt ::= KW_CREATE external_val KW_TABLE if_not_exists_val table_name KW_LIKE table_name comment_val location_val 
            {
              CreateTableLikeStmt RESULT =null;
		int externalleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).left;
		int externalright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).right;
		Boolean external = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).value;
		int if_not_existsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int if_not_existsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		Boolean if_not_exists = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int other_tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int other_tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		TableName other_table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int commentleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int locationleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int locationright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		HdfsUri location = (HdfsUri)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT = new CreateTableLikeStmt(table, other_table, external, comment,
        null, location, if_not_exists);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_tbl_like_stmt",98, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // create_tbl_like_stmt ::= KW_CREATE external_val KW_TABLE if_not_exists_val table_name KW_LIKE table_name comment_val KW_STORED KW_AS file_format_val location_val 
            {
              CreateTableLikeStmt RESULT =null;
		int externalleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).left;
		int externalright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).right;
		Boolean external = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).value;
		int if_not_existsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).left;
		int if_not_existsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).right;
		Boolean if_not_exists = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).value;
		int other_tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int other_tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		TableName other_table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int commentleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int file_formatleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int file_formatright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		THdfsFileFormat file_format = (THdfsFileFormat)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int locationleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int locationright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		HdfsUri location = (HdfsUri)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT = new CreateTableLikeStmt(table, other_table, external, comment,
        file_format, location, if_not_exists);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_tbl_like_stmt",98, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-11)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // create_db_stmt ::= KW_CREATE db_or_schema_kw if_not_exists_val IDENT comment_val location_val 
            {
              CreateDbStmt RESULT =null;
		int if_not_existsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int if_not_existsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Boolean if_not_exists = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int db_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int db_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String db_name = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int commentleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int locationleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int locationright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		HdfsUri location = (HdfsUri)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new CreateDbStmt(db_name, comment, location, if_not_exists); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_db_stmt",96, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // replace_existing_cols_val ::= KW_ADD 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("replace_existing_cols_val",122, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // replace_existing_cols_val ::= KW_REPLACE 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("replace_existing_cols_val",122, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // opt_kw_column ::= 
            {
              String RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_kw_column",135, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // opt_kw_column ::= KW_COLUMN 
            {
              String RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_kw_column",135, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // table_property_type ::= KW_SERDEPROPERTIES 
            {
              TTablePropertyType RESULT =null;
		 RESULT = TTablePropertyType.SERDE_PROPERTY; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("table_property_type",129, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // table_property_type ::= KW_TBLPROPERTIES 
            {
              TTablePropertyType RESULT =null;
		 RESULT = TTablePropertyType.TBL_PROPERTY; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("table_property_type",129, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // alter_tbl_stmt ::= KW_ALTER KW_TABLE table_name opt_partition_spec KW_SET cache_op_val 
            {
              AlterTableStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int partitionleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int partitionright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		PartitionSpec partition = (PartitionSpec)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int cache_opleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int cache_opright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		HdfsCachingOp cache_op = (HdfsCachingOp)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    // Ensure a parser error is thrown for ALTER statements if no cache op is specified.
    if (cache_op == null) {
      parser.parseError("set", SqlParserSymbols.KW_SET);
    }
    RESULT = new AlterTableSetCachedStmt(table, partition, cache_op);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_tbl_stmt",90, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // alter_tbl_stmt ::= KW_ALTER KW_TABLE table_name opt_partition_spec KW_SET table_property_type LPAREN properties_map RPAREN 
            {
              AlterTableStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).value;
		int partitionleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int partitionright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		PartitionSpec partition = (PartitionSpec)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int targetleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		TTablePropertyType target = (TTablePropertyType)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int propertiesleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int propertiesright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		HashMap properties = (HashMap)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = new AlterTableSetTblProperties(table, partition, target, properties); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_tbl_stmt",90, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // alter_tbl_stmt ::= KW_ALTER KW_TABLE table_name KW_RENAME KW_TO table_name 
            {
              AlterTableStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int new_tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int new_tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableName new_table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new AlterTableOrViewRenameStmt(table, new_table, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_tbl_stmt",90, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // alter_tbl_stmt ::= KW_ALTER KW_TABLE table_name opt_partition_spec KW_SET KW_LOCATION STRING_LITERAL 
            {
              AlterTableStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int partitionleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int partitionright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		PartitionSpec partition = (PartitionSpec)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int locationleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int locationright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String location = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new AlterTableSetLocationStmt(table, partition, new HdfsUri(location)); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_tbl_stmt",90, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // alter_tbl_stmt ::= KW_ALTER KW_TABLE table_name opt_partition_spec KW_SET KW_FILEFORMAT file_format_val 
            {
              AlterTableStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int partitionleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int partitionright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		PartitionSpec partition = (PartitionSpec)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int file_formatleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int file_formatright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		THdfsFileFormat file_format = (THdfsFileFormat)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new AlterTableSetFileFormatStmt(table, partition, file_format); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_tbl_stmt",90, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // alter_tbl_stmt ::= KW_ALTER KW_TABLE table_name KW_DROP if_exists_val partition_spec 
            {
              AlterTableStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int if_existsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int if_existsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Boolean if_exists = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int partitionleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int partitionright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		PartitionSpec partition = (PartitionSpec)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new AlterTableDropPartitionStmt(table, partition, if_exists); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_tbl_stmt",90, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // alter_tbl_stmt ::= KW_ALTER KW_TABLE table_name KW_CHANGE opt_kw_column IDENT column_def 
            {
              AlterTableStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int col_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int col_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String col_name = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int col_defleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int col_defright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ColumnDesc col_def = (ColumnDesc)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new AlterTableChangeColStmt(table, col_name, col_def); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_tbl_stmt",90, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // alter_tbl_stmt ::= KW_ALTER KW_TABLE table_name KW_DROP opt_kw_column IDENT 
            {
              AlterTableStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int col_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int col_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String col_name = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new AlterTableDropColStmt(table, col_name); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_tbl_stmt",90, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // alter_tbl_stmt ::= KW_ALTER KW_TABLE table_name KW_ADD if_not_exists_val partition_spec location_val cache_op_val 
            {
              AlterTableStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int if_not_existsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int if_not_existsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Boolean if_not_exists = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int partitionleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int partitionright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		PartitionSpec partition = (PartitionSpec)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int locationleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int locationright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		HdfsUri location = (HdfsUri)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int cache_opleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int cache_opright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		HdfsCachingOp cache_op = (HdfsCachingOp)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT = new AlterTableAddPartitionStmt(table, partition,
        location, if_not_exists, cache_op);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_tbl_stmt",90, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // alter_tbl_stmt ::= KW_ALTER KW_TABLE table_name replace_existing_cols_val KW_COLUMNS LPAREN column_def_list RPAREN 
            {
              AlterTableStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int replaceleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int replaceright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		Boolean replace = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int col_defsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int col_defsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<ColumnDesc> col_defs = (ArrayList<ColumnDesc>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = new AlterTableAddReplaceColsStmt(table, col_defs, replace); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_tbl_stmt",90, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // opt_kw_role ::= 
            {
              Boolean RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_kw_role",149, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // opt_kw_role ::= KW_ROLE 
            {
              Boolean RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_kw_role",149, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // opt_with_grantopt ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_with_grantopt",147, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // opt_with_grantopt ::= KW_WITH KW_GRANT option_ident 
            {
              Boolean RESULT =null;
		int optionleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int optionright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Boolean option = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = true; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_with_grantopt",147, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // opt_grantopt_for ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_grantopt_for",148, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // opt_grantopt_for ::= KW_GRANT option_ident KW_FOR 
            {
              Boolean RESULT =null;
		int optionleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int optionright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Boolean option = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = true; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_grantopt_for",148, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // privilege ::= KW_ALL 
            {
              TPrivilegeLevel RESULT =null;
		 RESULT = TPrivilegeLevel.ALL; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("privilege",146, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // privilege ::= KW_INSERT 
            {
              TPrivilegeLevel RESULT =null;
		 RESULT = TPrivilegeLevel.INSERT; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("privilege",146, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // privilege ::= KW_SELECT 
            {
              TPrivilegeLevel RESULT =null;
		 RESULT = TPrivilegeLevel.SELECT; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("privilege",146, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // privilege_spec ::= privilege KW_ON uri_ident STRING_LITERAL 
            {
              PrivilegeSpec RESULT =null;
		int privleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int privright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		TPrivilegeLevel priv = (TPrivilegeLevel)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int uri_kwleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int uri_kwright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Boolean uri_kw = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int urileft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int uriright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String uri = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = PrivilegeSpec.createUriScopedPriv(priv, new HdfsUri(uri)); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("privilege_spec",145, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // privilege_spec ::= privilege KW_ON KW_TABLE table_name 
            {
              PrivilegeSpec RESULT =null;
		int privleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int privright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		TPrivilegeLevel priv = (TPrivilegeLevel)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int tbl_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tbl_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableName tbl_name = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = PrivilegeSpec.createTableScopedPriv(priv, tbl_name); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("privilege_spec",145, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // privilege_spec ::= privilege KW_ON KW_DATABASE IDENT 
            {
              PrivilegeSpec RESULT =null;
		int privleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int privright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		TPrivilegeLevel priv = (TPrivilegeLevel)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int db_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int db_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String db_name = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = PrivilegeSpec.createDbScopedPriv(priv, db_name); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("privilege_spec",145, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // privilege_spec ::= privilege KW_ON server_ident 
            {
              PrivilegeSpec RESULT =null;
		int privleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int privright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		TPrivilegeLevel priv = (TPrivilegeLevel)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int server_kwleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int server_kwright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Boolean server_kw = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = PrivilegeSpec.createServerScopedPriv(priv); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("privilege_spec",145, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // revoke_privilege_stmt ::= KW_REVOKE opt_grantopt_for privilege_spec KW_FROM opt_kw_role IDENT 
            {
              GrantRevokePrivStmt RESULT =null;
		int grant_optleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int grant_optright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		Boolean grant_opt = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int privleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int privright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		PrivilegeSpec priv = (PrivilegeSpec)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int opt_roleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int opt_roleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Boolean opt_role = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int roleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int roleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String role = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new GrantRevokePrivStmt(role, priv, false, grant_opt); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("revoke_privilege_stmt",144, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // grant_privilege_stmt ::= KW_GRANT privilege_spec KW_TO opt_kw_role IDENT opt_with_grantopt 
            {
              GrantRevokePrivStmt RESULT =null;
		int privleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int privright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		PrivilegeSpec priv = (PrivilegeSpec)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int opt_roleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int opt_roleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Boolean opt_role = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int roleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int roleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String role = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int grant_optleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int grant_optright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Boolean grant_opt = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new GrantRevokePrivStmt(role, priv, true, grant_opt); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("grant_privilege_stmt",143, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // revoke_role_stmt ::= KW_REVOKE KW_ROLE IDENT KW_FROM KW_GROUP IDENT 
            {
              GrantRevokeRoleStmt RESULT =null;
		int roleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int roleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		String role = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int groupleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int groupright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String group = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new GrantRevokeRoleStmt(role, group, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("revoke_role_stmt",142, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // grant_role_stmt ::= KW_GRANT KW_ROLE IDENT KW_TO KW_GROUP IDENT 
            {
              GrantRevokeRoleStmt RESULT =null;
		int roleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int roleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		String role = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int groupleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int groupright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String group = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new GrantRevokeRoleStmt(role, group, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("grant_role_stmt",141, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // create_drop_role_stmt ::= KW_DROP KW_ROLE IDENT 
            {
              CreateDropRoleStmt RESULT =null;
		int roleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int roleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String role = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new CreateDropRoleStmt(role, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_drop_role_stmt",140, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // create_drop_role_stmt ::= KW_CREATE KW_ROLE IDENT 
            {
              CreateDropRoleStmt RESULT =null;
		int roleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int roleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String role = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new CreateDropRoleStmt(role, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_drop_role_stmt",140, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // show_grant_role_stmt ::= KW_SHOW KW_GRANT KW_ROLE IDENT KW_ON uri_ident STRING_LITERAL 
            {
              ShowGrantRoleStmt RESULT =null;
		int roleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int roleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		String role = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int uri_kwleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int uri_kwright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Boolean uri_kw = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int urileft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int uriright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String uri = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT = new ShowGrantRoleStmt(role,
        PrivilegeSpec.createUriScopedPriv(TPrivilegeLevel.ALL, new HdfsUri(uri)));
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_grant_role_stmt",139, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // show_grant_role_stmt ::= KW_SHOW KW_GRANT KW_ROLE IDENT KW_ON KW_TABLE table_name 
            {
              ShowGrantRoleStmt RESULT =null;
		int roleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int roleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		String role = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int tbl_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tbl_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableName tbl_name = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT = new ShowGrantRoleStmt(role,
        PrivilegeSpec.createTableScopedPriv(TPrivilegeLevel.ALL, tbl_name));
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_grant_role_stmt",139, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // show_grant_role_stmt ::= KW_SHOW KW_GRANT KW_ROLE IDENT KW_ON KW_DATABASE IDENT 
            {
              ShowGrantRoleStmt RESULT =null;
		int roleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int roleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		String role = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int db_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int db_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String db_name = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT = new ShowGrantRoleStmt(role,
        PrivilegeSpec.createDbScopedPriv(TPrivilegeLevel.ALL, db_name));
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_grant_role_stmt",139, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // show_grant_role_stmt ::= KW_SHOW KW_GRANT KW_ROLE IDENT KW_ON server_ident 
            {
              ShowGrantRoleStmt RESULT =null;
		int roleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int roleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String role = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int server_kwleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int server_kwright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Boolean server_kw = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT = new ShowGrantRoleStmt(role,
        PrivilegeSpec.createServerScopedPriv(TPrivilegeLevel.ALL));
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_grant_role_stmt",139, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // show_grant_role_stmt ::= KW_SHOW KW_GRANT KW_ROLE IDENT 
            {
              ShowGrantRoleStmt RESULT =null;
		int roleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int roleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String role = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ShowGrantRoleStmt(role, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_grant_role_stmt",139, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // show_roles_stmt ::= KW_SHOW KW_CURRENT KW_ROLES 
            {
              ShowRolesStmt RESULT =null;
		 RESULT = new ShowRolesStmt(true, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_roles_stmt",138, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // show_roles_stmt ::= KW_SHOW KW_ROLE KW_GRANT KW_GROUP IDENT 
            {
              ShowRolesStmt RESULT =null;
		int groupleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int groupright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String group = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ShowRolesStmt(false, group); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_roles_stmt",138, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // show_roles_stmt ::= KW_SHOW KW_ROLES 
            {
              ShowRolesStmt RESULT =null;
		 RESULT = new ShowRolesStmt(false, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_roles_stmt",138, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // opt_kw_table ::= 
            {
              String RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_kw_table",136, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // opt_kw_table ::= KW_TABLE 
            {
              String RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_kw_table",136, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // opt_ident_list ::= 
            {
              ArrayList<String> RESULT =null;
		 RESULT = Lists.newArrayList(); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_ident_list",32, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // opt_ident_list ::= ident_list 
            {
              ArrayList<String> RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ArrayList<String> ident = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = ident; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_ident_list",32, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // opt_query_stmt ::= 
            {
              QueryStmt RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_query_stmt",4, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // opt_query_stmt ::= query_stmt 
            {
              QueryStmt RESULT =null;
		int queryleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int queryright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		QueryStmt query = (QueryStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = query; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_query_stmt",4, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // insert_stmt ::= opt_with_clause KW_INSERT KW_INTO opt_kw_table table_name partition_clause opt_plan_hints query_stmt 
            {
              InsertStmt RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).right;
		WithClause w = (WithClause)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		ArrayList<PartitionKeyValue> list = (ArrayList<PartitionKeyValue>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int hintsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int hintsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<String> hints = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int queryleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int queryright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		QueryStmt query = (QueryStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new InsertStmt(w, table, false, list, hints, query, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("insert_stmt",80, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // insert_stmt ::= opt_with_clause KW_INSERT KW_INTO opt_kw_table table_name LPAREN opt_ident_list RPAREN partition_clause opt_plan_hints opt_query_stmt 
            {
              InsertStmt RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).right;
		WithClause w = (WithClause)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).value;
		int col_permleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int col_permright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		ArrayList<String> col_perm = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		ArrayList<PartitionKeyValue> list = (ArrayList<PartitionKeyValue>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int hintsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int hintsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<String> hints = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int queryleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int queryright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		QueryStmt query = (QueryStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new InsertStmt(w, table, false, list, hints, query, col_perm); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("insert_stmt",80, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // insert_stmt ::= opt_with_clause KW_INSERT KW_OVERWRITE opt_kw_table table_name partition_clause opt_plan_hints query_stmt 
            {
              InsertStmt RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).right;
		WithClause w = (WithClause)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		ArrayList<PartitionKeyValue> list = (ArrayList<PartitionKeyValue>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int hintsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int hintsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<String> hints = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int queryleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int queryright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		QueryStmt query = (QueryStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new InsertStmt(w, table, true, list, hints, query, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("insert_stmt",80, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // insert_stmt ::= opt_with_clause KW_INSERT KW_OVERWRITE opt_kw_table table_name LPAREN opt_ident_list RPAREN partition_clause opt_plan_hints opt_query_stmt 
            {
              InsertStmt RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).right;
		WithClause w = (WithClause)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).value;
		int col_permleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int col_permright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		ArrayList<String> col_perm = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		ArrayList<PartitionKeyValue> list = (ArrayList<PartitionKeyValue>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int hintsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int hintsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<String> hints = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int queryleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int queryright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		QueryStmt query = (QueryStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new InsertStmt(w, table, true, list, hints, query, col_perm); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("insert_stmt",80, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // explain_stmt ::= KW_EXPLAIN create_tbl_as_select_stmt 
            {
              StatementBase RESULT =null;
		int ctas_stmtleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int ctas_stmtright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		CreateTableAsSelectStmt ctas_stmt = (CreateTableAsSelectStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
     ctas_stmt.setIsExplain();
     RESULT = ctas_stmt;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("explain_stmt",81, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // explain_stmt ::= KW_EXPLAIN insert_stmt 
            {
              StatementBase RESULT =null;
		int insertleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int insertright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		InsertStmt insert = (InsertStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
     insert.setIsExplain();
     RESULT = insert;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("explain_stmt",81, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // explain_stmt ::= KW_EXPLAIN query_stmt 
            {
              StatementBase RESULT =null;
		int queryleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int queryright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		QueryStmt query = (QueryStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
     query.setIsExplain();
     RESULT = query;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("explain_stmt",81, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // reset_metadata_stmt ::= KW_REFRESH table_name 
            {
              ResetMetadataStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ResetMetadataStmt(table, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("reset_metadata_stmt",19, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // reset_metadata_stmt ::= KW_INVALIDATE KW_METADATA table_name 
            {
              ResetMetadataStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ResetMetadataStmt(table, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("reset_metadata_stmt",19, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // reset_metadata_stmt ::= KW_INVALIDATE KW_METADATA 
            {
              ResetMetadataStmt RESULT =null;
		 RESULT = new ResetMetadataStmt(null, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("reset_metadata_stmt",19, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // overwrite_val ::= 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.FALSE; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("overwrite_val",137, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // overwrite_val ::= KW_OVERWRITE 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.TRUE; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("overwrite_val",137, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // load_stmt ::= KW_LOAD KW_DATA KW_INPATH STRING_LITERAL overwrite_val KW_INTO KW_TABLE table_name opt_partition_spec 
            {
              LoadDataStmt RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		String path = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int overwriteleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int overwriteright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		Boolean overwrite = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int partitionleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int partitionright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		PartitionSpec partition = (PartitionSpec)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new LoadDataStmt(table, new HdfsUri(path), overwrite, partition); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("load_stmt",18, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stmt ::= revoke_privilege_stmt 
            {
              StatementBase RESULT =null;
		int revoke_privilegeleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int revoke_privilegeright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		GrantRevokePrivStmt revoke_privilege = (GrantRevokePrivStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = revoke_privilege; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmt ::= grant_privilege_stmt 
            {
              StatementBase RESULT =null;
		int grant_privilegeleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int grant_privilegeright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		GrantRevokePrivStmt grant_privilege = (GrantRevokePrivStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = grant_privilege; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= revoke_role_stmt 
            {
              StatementBase RESULT =null;
		int revoke_roleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int revoke_roleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		GrantRevokeRoleStmt revoke_role = (GrantRevokeRoleStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = revoke_role; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= grant_role_stmt 
            {
              StatementBase RESULT =null;
		int grant_roleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int grant_roleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		GrantRevokeRoleStmt grant_role = (GrantRevokeRoleStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = grant_role; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= create_drop_role_stmt 
            {
              StatementBase RESULT =null;
		int create_drop_roleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int create_drop_roleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		CreateDropRoleStmt create_drop_role = (CreateDropRoleStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = create_drop_role; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= show_grant_role_stmt 
            {
              StatementBase RESULT =null;
		int show_grant_roleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int show_grant_roleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ShowGrantRoleStmt show_grant_role = (ShowGrantRoleStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = show_grant_role; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= show_roles_stmt 
            {
              StatementBase RESULT =null;
		int show_rolesleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int show_rolesright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ShowRolesStmt show_roles = (ShowRolesStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = show_roles; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= set_stmt 
            {
              StatementBase RESULT =null;
		int setleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int setright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		SetStmt set = (SetStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = set; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= reset_metadata_stmt 
            {
              StatementBase RESULT =null;
		int reset_metadataleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int reset_metadataright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ResetMetadataStmt reset_metadata = (ResetMetadataStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = reset_metadata; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= load_stmt 
            {
              StatementBase RESULT =null;
		int loadleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int loadright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		LoadDataStmt load = (LoadDataStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = load; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= explain_stmt 
            {
              StatementBase RESULT =null;
		int explainleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int explainright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		StatementBase explain = (StatementBase)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = explain; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= drop_data_src_stmt 
            {
              StatementBase RESULT =null;
		int drop_data_srcleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int drop_data_srcright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		DropDataSrcStmt drop_data_src = (DropDataSrcStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = drop_data_src; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= drop_function_stmt 
            {
              StatementBase RESULT =null;
		int drop_functionleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int drop_functionright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		DropFunctionStmt drop_function = (DropFunctionStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = drop_function; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= drop_tbl_or_view_stmt 
            {
              StatementBase RESULT =null;
		int drop_tblleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int drop_tblright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		DropTableOrViewStmt drop_tbl = (DropTableOrViewStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = drop_tbl; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= drop_db_stmt 
            {
              StatementBase RESULT =null;
		int drop_dbleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int drop_dbright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		DropDbStmt drop_db = (DropDbStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = drop_db; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= create_uda_stmt 
            {
              StatementBase RESULT =null;
		int create_udaleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int create_udaright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		CreateUdaStmt create_uda = (CreateUdaStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = create_uda; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= create_udf_stmt 
            {
              StatementBase RESULT =null;
		int create_udfleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int create_udfright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		CreateUdfStmt create_udf = (CreateUdfStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = create_udf; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= create_db_stmt 
            {
              StatementBase RESULT =null;
		int create_dbleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int create_dbright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		CreateDbStmt create_db = (CreateDbStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = create_db; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= create_data_src_stmt 
            {
              StatementBase RESULT =null;
		int create_data_srcleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int create_data_srcright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		CreateDataSrcStmt create_data_src = (CreateDataSrcStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = create_data_src; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt ::= create_view_stmt 
            {
              StatementBase RESULT =null;
		int create_viewleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int create_viewright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		CreateViewStmt create_view = (CreateViewStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = create_view; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= create_partitioned_tbl_stmt 
            {
              StatementBase RESULT =null;
		int create_tblleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int create_tblright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		CreateTableStmt create_tbl = (CreateTableStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = create_tbl; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= create_unpartitioned_tbl_stmt 
            {
              StatementBase RESULT =null;
		int create_tblleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int create_tblright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		CreateTableStmt create_tbl = (CreateTableStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = create_tbl; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= create_tbl_like_file_stmt 
            {
              StatementBase RESULT =null;
		int create_tbl_like_fileleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int create_tbl_like_fileright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		CreateTableLikeFileStmt create_tbl_like_file = (CreateTableLikeFileStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = create_tbl_like_file; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= create_tbl_like_stmt 
            {
              StatementBase RESULT =null;
		int create_tbl_likeleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int create_tbl_likeright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		CreateTableLikeStmt create_tbl_like = (CreateTableLikeStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = create_tbl_like; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= create_tbl_as_select_stmt 
            {
              StatementBase RESULT =null;
		int create_tbl_as_selectleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int create_tbl_as_selectright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		CreateTableAsSelectStmt create_tbl_as_select = (CreateTableAsSelectStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = create_tbl_as_select; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= drop_stats_stmt 
            {
              StatementBase RESULT =null;
		int drop_statsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int drop_statsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		DropStatsStmt drop_stats = (DropStatsStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = drop_stats; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= compute_stats_stmt 
            {
              StatementBase RESULT =null;
		int compute_statsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int compute_statsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ComputeStatsStmt compute_stats = (ComputeStatsStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = compute_stats; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= alter_view_stmt 
            {
              StatementBase RESULT =null;
		int alter_viewleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int alter_viewright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		StatementBase alter_view = (StatementBase)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = alter_view; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= alter_tbl_stmt 
            {
              StatementBase RESULT =null;
		int alter_tblleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int alter_tblright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		AlterTableStmt alter_tbl = (AlterTableStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = alter_tbl; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= describe_stmt 
            {
              StatementBase RESULT =null;
		int describeleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int describeright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		DescribeStmt describe = (DescribeStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = describe; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= show_create_tbl_stmt 
            {
              StatementBase RESULT =null;
		int show_create_tblleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int show_create_tblright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ShowCreateTableStmt show_create_tbl = (ShowCreateTableStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = show_create_tbl; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= show_data_srcs_stmt 
            {
              StatementBase RESULT =null;
		int show_data_srcsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int show_data_srcsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ShowDataSrcsStmt show_data_srcs = (ShowDataSrcsStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = show_data_srcs; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= show_functions_stmt 
            {
              StatementBase RESULT =null;
		int show_functionsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int show_functionsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ShowFunctionsStmt show_functions = (ShowFunctionsStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = show_functions; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= show_stats_stmt 
            {
              StatementBase RESULT =null;
		int show_statsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int show_statsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ShowStatsStmt show_stats = (ShowStatsStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = show_stats; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= show_partitions_stmt 
            {
              StatementBase RESULT =null;
		int show_partitionsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int show_partitionsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ShowPartitionsStmt show_partitions = (ShowPartitionsStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = show_partitions; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= show_dbs_stmt 
            {
              StatementBase RESULT =null;
		int show_dbsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int show_dbsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ShowDbsStmt show_dbs = (ShowDbsStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = show_dbs; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= show_tables_stmt 
            {
              StatementBase RESULT =null;
		int show_tablesleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int show_tablesright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ShowTablesStmt show_tables = (ShowTablesStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = show_tables; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmt ::= use_stmt 
            {
              StatementBase RESULT =null;
		int useleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int useright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		UseStmt use = (UseStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = use; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmt ::= insert_stmt 
            {
              StatementBase RESULT =null;
		int insertleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int insertright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		InsertStmt insert = (InsertStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = insert; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // stmt ::= query_stmt 
            {
              StatementBase RESULT =null;
		int queryleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int queryright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		QueryStmt query = (QueryStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = query; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= stmt EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		StatementBase start_val = (StatementBase)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		RESULT = start_val;
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SqlParser$parser.done_parsing();
          return CUP$SqlParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

