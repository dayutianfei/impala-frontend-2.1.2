
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Dec 21 16:33:19 CST 2015
//----------------------------------------------------

package com.cloudera.impala.analysis;

import com.cloudera.impala.catalog.Type;
import com.cloudera.impala.catalog.ScalarType;
import com.cloudera.impala.catalog.ArrayType;
import com.cloudera.impala.catalog.MapType;
import com.cloudera.impala.catalog.StructType;
import com.cloudera.impala.catalog.StructField;
import com.cloudera.impala.catalog.RowFormat;
import com.cloudera.impala.catalog.View;
import com.cloudera.impala.common.AnalysisException;
import com.cloudera.impala.analysis.ColumnDesc;
import com.cloudera.impala.analysis.UnionStmt.UnionOperand;
import com.cloudera.impala.analysis.UnionStmt.Qualifier;
import com.cloudera.impala.thrift.TFunctionCategory;
import com.cloudera.impala.thrift.TDescribeTableOutputStyle;
import com.cloudera.impala.thrift.THdfsFileFormat;
import com.cloudera.impala.thrift.TPrivilegeLevel;
import com.cloudera.impala.thrift.TTablePropertyType;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java_cup.runtime.Symbol;
import com.google.common.collect.Lists;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Dec 21 16:33:19 CST 2015
  */
public class SqlParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SqlParser() {super();}

  /** Constructor which sets the default scanner. */
  public SqlParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SqlParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u01ea\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\024\013\000\002\222\003\000" +
    "\002\222\002\000\002\025\004\000\002\025\005\000\002" +
    "\025\004\000\002\123\004\000\002\123\004\000\002\123" +
    "\004\000\002\122\015\000\002\122\012\000\002\122\015" +
    "\000\002\122\012\000\002\006\003\000\002\006\002\000" +
    "\002\042\003\000\002\042\002\000\002\221\003\000\002" +
    "\221\002\000\002\223\004\000\002\223\007\000\002\223" +
    "\005\000\002\224\006\000\002\224\010\000\002\224\011" +
    "\000\002\224\011\000\002\224\011\000\002\225\005\000" +
    "\002\225\005\000\002\226\010\000\002\227\010\000\002" +
    "\230\010\000\002\231\010\000\002\232\005\000\002\232" +
    "\006\000\002\232\006\000\002\232\006\000\002\233\003" +
    "\000\002\233\003\000\002\233\003\000\002\235\005\000" +
    "\002\235\002\000\002\234\005\000\002\234\002\000\002" +
    "\236\003\000\002\236\002\000\002\143\012\000\002\143" +
    "\012\000\002\143\010\000\002\143\011\000\002\143\010" +
    "\000\002\143\011\000\002\143\011\000\002\143\010\000" +
    "\002\143\013\000\002\143\010\000\002\212\003\000\002" +
    "\212\003\000\002\220\003\000\002\220\002\000\002\203" +
    "\003\000\002\203\003\000\002\151\010\000\002\153\016" +
    "\000\002\153\013\000\002\154\022\000\002\152\020\000" +
    "\002\155\021\000\002\155\016\000\002\155\021\000\002" +
    "\156\026\000\002\156\023\000\002\251\014\000\002\252" +
    "\016\000\002\173\005\000\002\173\003\000\002\173\002" +
    "\000\002\174\004\000\002\174\002\000\002\204\004\000" +
    "\002\204\002\000\002\176\005\000\002\176\002\000\002" +
    "\175\003\000\002\175\002\000\002\202\005\000\002\202" +
    "\002\000\002\205\010\000\002\205\002\000\002\210\005" +
    "\000\002\210\002\000\002\207\004\000\002\207\002\000" +
    "\002\206\004\000\002\206\002\000\002\211\005\000\002" +
    "\200\005\000\002\200\002\000\002\177\003\000\002\177" +
    "\003\000\002\177\003\000\002\177\003\000\002\177\003" +
    "\000\002\177\003\000\002\214\006\000\002\214\002\000" +
    "\002\213\007\000\002\213\002\000\002\215\005\000\002" +
    "\215\007\000\002\170\007\000\002\170\002\000\002\166" +
    "\003\000\002\166\005\000\002\164\005\000\002\157\012" +
    "\000\002\160\015\000\002\237\003\000\002\240\003\000" +
    "\002\242\003\000\002\241\003\000\002\243\003\000\002" +
    "\171\005\000\002\171\002\000\002\167\003\000\002\167" +
    "\005\000\002\165\004\000\002\144\007\000\002\144\010" +
    "\000\002\145\005\000\002\145\006\000\002\145\007\000" +
    "\002\147\005\000\002\147\007\000\002\146\006\000\002" +
    "\150\006\000\002\150\006\000\002\254\010\000\002\161" +
    "\007\000\002\216\003\000\002\216\003\000\002\217\003" +
    "\000\002\217\003\000\002\201\004\000\002\201\002\000" +
    "\002\126\006\000\002\126\002\000\002\130\003\000\002" +
    "\130\005\000\002\125\006\000\002\124\003\000\002\124" +
    "\002\000\002\127\003\000\002\127\005\000\002\131\003" +
    "\000\002\131\003\000\002\132\005\000\002\244\004\000" +
    "\002\244\006\000\002\245\003\000\002\245\005\000\002" +
    "\246\003\000\002\246\002\000\002\247\003\000\002\247" +
    "\002\000\002\250\004\000\002\250\002\000\002\256\005" +
    "\000\002\256\006\000\002\256\002\000\002\257\003\000" +
    "\002\257\003\000\002\257\003\000\002\257\003\000\002" +
    "\257\003\000\002\257\003\000\002\257\003\000\002\257" +
    "\003\000\002\257\003\000\002\005\004\000\002\005\004" +
    "\000\002\107\004\000\002\107\002\000\002\111\007\000" +
    "\002\111\007\000\002\110\003\000\002\110\005\000\002" +
    "\026\007\000\002\026\005\000\002\026\011\000\002\007" +
    "\003\000\002\007\003\000\002\007\005\000\002\010\003" +
    "\000\002\010\005\000\002\133\003\000\002\133\004\000" +
    "\002\133\004\000\002\004\006\000\002\004\010\000\002" +
    "\011\005\000\002\011\007\000\002\012\004\000\002\014" +
    "\004\000\002\014\005\000\002\014\006\000\002\014\007" +
    "\000\002\015\004\000\002\015\005\000\002\017\006\000" +
    "\002\017\006\000\002\016\005\000\002\253\005\000\002" +
    "\253\006\000\002\253\007\000\002\253\010\000\002\134" +
    "\005\000\002\135\006\000\002\136\010\000\002\140\017" +
    "\000\002\141\005\000\002\141\002\000\002\142\006\000" +
    "\002\142\002\000\002\137\011\000\002\255\003\000\002" +
    "\255\003\000\002\255\002\000\002\162\005\000\002\162" +
    "\006\000\002\020\003\000\002\020\004\000\002\022\006" +
    "\000\002\021\005\000\002\023\003\000\002\023\002\000" +
    "\002\003\003\000\002\003\011\000\002\027\005\000\002" +
    "\027\006\000\002\027\006\000\002\013\006\000\002\013" +
    "\006\000\002\013\003\000\002\030\003\000\002\030\005" +
    "\000\002\031\004\000\002\031\003\000\002\031\003\000" +
    "\002\040\004\000\002\040\003\000\002\040\004\000\002" +
    "\040\003\000\002\032\003\000\002\032\005\000\002\032" +
    "\007\000\002\043\003\000\002\043\005\000\002\044\003" +
    "\000\002\044\005\000\002\105\004\000\002\106\003\000" +
    "\002\106\005\000\002\106\007\000\002\106\006\000\002" +
    "\106\010\000\002\106\012\000\002\112\004\000\002\112" +
    "\003\000\002\112\006\000\002\114\004\000\002\114\005" +
    "\000\002\114\005\000\002\114\005\000\002\114\005\000" +
    "\002\114\005\000\002\114\005\000\002\114\005\000\002" +
    "\115\003\000\002\115\002\000\002\116\003\000\002\116" +
    "\002\000\002\117\003\000\002\117\003\000\002\117\005" +
    "\000\002\117\002\000\002\041\003\000\002\041\005\000" +
    "\002\037\003\000\002\037\005\000\002\045\004\000\002" +
    "\045\002\000\002\055\005\000\002\055\002\000\002\057" +
    "\004\000\002\057\002\000\002\061\005\000\002\061\002" +
    "\000\002\060\003\000\002\060\005\000\002\062\005\000" +
    "\002\063\003\000\002\063\003\000\002\063\002\000\002" +
    "\064\004\000\002\064\004\000\002\064\002\000\002\065" +
    "\004\000\002\065\002\000\002\066\004\000\002\067\004" +
    "\000\002\067\002\000\002\070\004\000\002\070\002\000" +
    "\002\071\010\000\002\101\007\000\002\101\006\000\002" +
    "\102\006\000\002\102\007\000\002\072\004\000\002\072" +
    "\002\000\002\121\004\000\002\121\004\000\002\033\003" +
    "\000\002\033\003\000\002\054\004\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\006\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\005" +
    "\000\002\034\003\000\002\074\005\000\002\074\006\000" +
    "\002\074\010\000\002\073\011\000\002\056\005\000\002" +
    "\056\002\000\002\075\004\000\002\075\007\000\002\075" +
    "\002\000\002\076\003\000\002\076\003\000\002\077\004" +
    "\000\002\077\004\000\002\077\004\000\002\077\004\000" +
    "\002\077\004\000\002\035\005\000\002\035\005\000\002" +
    "\035\005\000\002\035\005\000\002\035\005\000\002\035" +
    "\005\000\002\035\005\000\002\035\005\000\002\035\005" +
    "\000\002\035\004\000\002\036\007\000\002\036\007\000" +
    "\002\036\007\000\002\036\012\000\002\100\003\000\002" +
    "\100\003\000\002\100\003\000\002\100\003\000\002\100" +
    "\003\000\002\100\003\000\002\100\004\000\002\100\003" +
    "\000\002\103\003\000\002\103\004\000\002\103\003\000" +
    "\002\103\004\000\002\103\004\000\002\046\005\000\002" +
    "\046\006\000\002\046\003\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\005\000\002\050\005\000\002\050\006\000" +
    "\002\050\006\000\002\050\006\000\002\050\006\000\002" +
    "\050\005\000\002\050\005\000\002\053\005\000\002\053" +
    "\005\000\002\053\005\000\002\053\006\000\002\053\006" +
    "\000\002\053\006\000\002\047\007\000\002\047\007\000" +
    "\002\047\010\000\002\047\010\000\002\052\007\000\002" +
    "\052\010\000\002\052\005\000\002\052\006\000\002\113" +
    "\005\000\002\113\005\000\002\051\005\000\002\051\005" +
    "\000\002\051\004\000\002\051\004\000\002\104\003\000" +
    "\002\104\005\000\002\104\007\000\002\120\003\000\002" +
    "\120\003\000\002\120\003\000\002\120\003\000\002\120" +
    "\003\000\002\120\003\000\002\120\003\000\002\120\003" +
    "\000\002\120\003\000\002\120\003\000\002\120\003\000" +
    "\002\120\006\000\002\120\003\000\002\120\003\000\002" +
    "\120\006\000\002\120\006\000\002\120\010\000\002\120" +
    "\003\000\002\120\006\000\002\120\010\000\002\120\006" +
    "\000\002\163\006\000\002\172\003\000\002\172\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u03fe\000\050\007\031\037\057\040\061\053\015\057" +
    "\066\064\060\104\035\122\uff1d\127\052\137\014\170\041" +
    "\175\030\206\uff1d\213\067\214\011\242\016\244\uff1d\251" +
    "\013\257\uff1d\001\002\000\004\002\uffe0\001\002\000\004" +
    "\002\ufffa\001\002\000\004\002\uffd8\001\002\000\004\002" +
    "\uffe1\001\002\000\004\002\uffe4\001\002\000\042\005\u03cb" +
    "\010\u03d9\034\u03d0\040\u03d4\042\u03cf\043\u03d2\045\u03d6\103" +
    "\ufef0\104\u03d7\113\u03da\162\u03d3\200\u03d1\201\u03cc\205\u03ce" +
    "\223\u03d5\224\u03ca\001\002\000\004\002\ufff3\001\002\000" +
    "\006\277\u03be\305\u03bf\001\002\000\004\043\u03b3\001\002" +
    "\000\010\077\u03af\112\u03ae\277\ufee8\001\002\000\004\277" +
    "\u03ac\001\002\000\004\002\ufff5\001\002\000\004\002\uffda" +
    "\001\002\000\004\002\uffea\001\002\000\004\002\ufffd\001" +
    "\002\000\004\002\uffd6\001\002\000\004\002\uffe8\001\002" +
    "\000\004\002\uffee\001\002\000\004\002\uffde\001\002\000" +
    "\004\002\uffd9\001\002\000\014\006\uffaa\104\u039f\122\uffaa" +
    "\200\u03a1\206\uffaa\001\002\000\010\112\u036b\223\u036d\246" +
    "\u036c\001\002\000\004\002\uffd7\001\002\000\004\002\ufff6" +
    "\001\002\000\004\002\ufff2\001\002\000\012\006\u034f\122" +
    "\u0351\200\u0354\206\u0353\001\002\000\004\002\ufff4\001\002" +
    "\000\004\002\uffe2\001\002\000\004\002\uffd4\001\002\000" +
    "\004\277\351\001\002\000\004\002\ufffe\001\002\000\004" +
    "\002\ufffb\001\002\000\004\002\uffdf\001\002\000\004\002" +
    "\uffdc\001\002\000\004\002\uffe6\001\002\000\004\002\ufff0" +
    "\001\002\000\004\002\uffe7\001\002\000\004\002\uffed\001" +
    "\002\000\004\143\u034c\001\002\000\004\002\ufff1\001\002" +
    "\000\004\002\uffe3\001\002\000\004\002\ufffc\001\002\000" +
    "\004\002\uffff\001\002\000\006\111\u0347\233\u0346\001\002" +
    "\000\016\040\u033a\122\uff1d\206\uff1d\244\uff1d\251\013\257" +
    "\uff1d\001\002\000\026\005\u0256\043\u025a\044\u01f9\065\u025d" +
    "\102\u025e\112\u0257\200\u0259\204\u01fa\223\uff7f\246\u025c\001" +
    "\002\000\004\002\uffef\001\002\000\004\002\ufff7\001\002" +
    "\000\012\122\u0231\206\230\244\231\257\227\001\002\000" +
    "\004\002\ufff9\001\002\000\030\005\u01f5\043\u01fb\044\u01f9" +
    "\102\uff31\111\u0200\112\u01f8\200\u01fc\204\u01fa\223\u01fd\233" +
    "\u01f6\246\u01ff\001\002\000\006\002\ufee0\277\103\001\002" +
    "\000\004\002\ufff8\001\002\000\004\002\uffd5\001\002\000" +
    "\004\002\uffe9\001\002\000\004\002\000\001\002\000\004" +
    "\002\uffdd\001\002\000\004\002\uffe5\001\002\000\004\002" +
    "\102\001\002\000\004\002\uffeb\001\002\000\004\002\uffdb" +
    "\001\002\000\004\002\uffec\001\002\000\004\002\001\001" +
    "\002\000\004\273\104\001\002\000\024\066\112\145\113" +
    "\235\111\277\105\301\106\303\116\304\114\305\110\306" +
    "\107\001\002\000\004\002\ufee1\001\002\000\154\002\ufe5c" +
    "\011\ufe5c\015\ufe5c\016\ufe5c\020\ufe5c\041\ufe5c\052\ufe5c\055" +
    "\ufe5c\060\ufe5c\061\ufe5c\074\ufe5c\100\ufe5c\101\ufe5c\105\ufe5c" +
    "\106\ufe5c\110\ufe5c\120\ufe5c\130\ufe5c\131\ufe5c\133\ufe5c\134" +
    "\ufe5c\135\ufe5c\144\ufe5c\146\ufe5c\147\ufe5c\151\ufe5c\152\ufe5c" +
    "\163\ufe5c\166\ufe5c\171\ufe5c\176\ufe5c\177\ufe5c\203\ufe5c\230" +
    "\ufe5c\240\ufe5c\247\ufe5c\250\ufe5c\253\ufe5c\256\ufe5c\260\ufe5c" +
    "\263\ufe5c\264\ufe5c\265\ufe5c\266\ufe5c\267\ufe5c\270\ufe5c\271" +
    "\ufe5c\273\ufe5c\274\ufe5c\275\ufe5c\276\ufe5c\277\ufe5c\305\ufe5c" +
    "\001\002\000\052\026\132\027\124\063\145\066\112\107" +
    "\147\125\136\144\131\145\113\235\111\257\126\265\143" +
    "\266\125\272\154\274\135\277\146\301\106\303\116\304" +
    "\114\305\110\306\107\001\002\000\154\002\ufe61\011\ufe61" +
    "\015\ufe61\016\ufe61\020\ufe61\041\ufe61\052\ufe61\055\ufe61\060" +
    "\ufe61\061\ufe61\074\ufe61\100\ufe61\101\ufe61\105\ufe61\106\ufe61" +
    "\110\ufe61\120\ufe61\130\ufe61\131\ufe61\133\ufe61\134\ufe61\135" +
    "\ufe61\144\ufe61\146\ufe61\147\ufe61\151\ufe61\152\ufe61\163\ufe61" +
    "\166\ufe61\171\ufe61\176\ufe61\177\ufe61\203\ufe61\230\ufe61\240" +
    "\ufe61\247\ufe61\250\ufe61\253\ufe61\256\ufe61\260\ufe61\263\ufe61" +
    "\264\ufe61\265\ufe61\266\ufe61\267\ufe61\270\ufe61\271\ufe61\273" +
    "\ufe61\274\ufe61\275\ufe61\276\ufe61\277\ufe61\305\ufe61\001\002" +
    "\000\154\002\ufe60\011\ufe60\015\ufe60\016\ufe60\020\ufe60\041" +
    "\ufe60\052\ufe60\055\ufe60\060\ufe60\061\ufe60\074\ufe60\100\ufe60" +
    "\101\ufe60\105\ufe60\106\ufe60\110\ufe60\120\ufe60\130\ufe60\131" +
    "\ufe60\133\ufe60\134\ufe60\135\ufe60\144\ufe60\146\ufe60\147\ufe60" +
    "\151\ufe60\152\ufe60\163\ufe60\166\ufe60\171\ufe60\176\ufe60\177" +
    "\ufe60\203\ufe60\230\ufe60\240\ufe60\247\ufe60\250\ufe60\253\ufe60" +
    "\256\ufe60\260\ufe60\263\ufe60\264\ufe60\265\ufe60\266\ufe60\267" +
    "\ufe60\270\ufe60\271\ufe60\273\ufe60\274\ufe60\275\ufe60\276\ufe60" +
    "\277\ufe60\305\ufe60\001\002\000\154\002\ufe5f\011\ufe5f\015" +
    "\ufe5f\016\ufe5f\020\ufe5f\041\ufe5f\052\ufe5f\055\ufe5f\060\ufe5f" +
    "\061\ufe5f\074\ufe5f\100\ufe5f\101\ufe5f\105\ufe5f\106\ufe5f\110" +
    "\ufe5f\120\ufe5f\130\ufe5f\131\ufe5f\133\ufe5f\134\ufe5f\135\ufe5f" +
    "\144\ufe5f\146\ufe5f\147\ufe5f\151\ufe5f\152\ufe5f\163\ufe5f\166" +
    "\ufe5f\171\ufe5f\176\ufe5f\177\ufe5f\203\ufe5f\230\ufe5f\240\ufe5f" +
    "\247\ufe5f\250\ufe5f\253\ufe5f\256\ufe5f\260\ufe5f\263\ufe5f\264" +
    "\ufe5f\265\ufe5f\266\ufe5f\267\ufe5f\270\ufe5f\271\ufe5f\273\ufe5f" +
    "\274\ufe5f\275\ufe5f\276\ufe5f\277\ufe5f\305\ufe5f\001\002\000" +
    "\154\002\ufe5e\011\ufe5e\015\ufe5e\016\ufe5e\020\ufe5e\041\ufe5e" +
    "\052\ufe5e\055\ufe5e\060\ufe5e\061\ufe5e\074\ufe5e\100\ufe5e\101" +
    "\ufe5e\105\ufe5e\106\ufe5e\110\ufe5e\120\ufe5e\130\ufe5e\131\ufe5e" +
    "\133\ufe5e\134\ufe5e\135\ufe5e\144\ufe5e\146\ufe5e\147\ufe5e\151" +
    "\ufe5e\152\ufe5e\163\ufe5e\166\ufe5e\171\ufe5e\176\ufe5e\177\ufe5e" +
    "\203\ufe5e\230\ufe5e\240\ufe5e\247\ufe5e\250\ufe5e\253\ufe5e\256" +
    "\ufe5e\260\ufe5e\263\ufe5e\264\ufe5e\265\ufe5e\266\ufe5e\267\ufe5e" +
    "\270\ufe5e\271\ufe5e\273\ufe5e\274\ufe5e\275\ufe5e\276\ufe5e\277" +
    "\ufe5e\305\ufe5e\001\002\000\154\002\ufe62\011\ufe62\015\ufe62" +
    "\016\ufe62\020\ufe62\041\ufe62\052\ufe62\055\ufe62\060\ufe62\061" +
    "\ufe62\074\ufe62\100\ufe62\101\ufe62\105\ufe62\106\ufe62\110\ufe62" +
    "\120\ufe62\130\ufe62\131\ufe62\133\ufe62\134\ufe62\135\ufe62\144" +
    "\ufe62\146\ufe62\147\ufe62\151\ufe62\152\ufe62\163\ufe62\166\ufe62" +
    "\171\ufe62\176\ufe62\177\ufe62\203\ufe62\230\ufe62\240\ufe62\247" +
    "\ufe62\250\ufe62\253\ufe62\256\ufe62\260\ufe62\263\ufe62\264\ufe62" +
    "\265\ufe62\266\ufe62\267\ufe62\270\ufe62\271\ufe62\273\ufe62\274" +
    "\ufe62\275\ufe62\276\ufe62\277\ufe62\305\ufe62\001\002\000\004" +
    "\002\ufee2\001\002\000\154\002\ufe63\011\ufe63\015\ufe63\016" +
    "\ufe63\020\ufe63\041\ufe63\052\ufe63\055\ufe63\060\ufe63\061\ufe63" +
    "\074\ufe63\100\ufe63\101\ufe63\105\ufe63\106\ufe63\110\ufe63\120" +
    "\ufe63\130\ufe63\131\ufe63\133\ufe63\134\ufe63\135\ufe63\144\ufe63" +
    "\146\ufe63\147\ufe63\151\ufe63\152\ufe63\163\ufe63\166\ufe63\171" +
    "\ufe63\176\ufe63\177\ufe63\203\ufe63\230\ufe63\240\ufe63\247\ufe63" +
    "\250\ufe63\253\ufe63\256\ufe63\260\ufe63\263\ufe63\264\ufe63\265" +
    "\ufe63\266\ufe63\267\ufe63\270\ufe63\271\ufe63\273\ufe63\274\ufe63" +
    "\275\ufe63\276\ufe63\277\ufe63\305\ufe63\001\002\000\154\002" +
    "\ufe52\011\ufe52\015\ufe52\016\ufe52\020\ufe52\041\ufe52\052\ufe52" +
    "\055\ufe52\060\ufe52\061\ufe52\074\ufe52\100\ufe52\101\ufe52\105" +
    "\ufe52\106\ufe52\110\ufe52\120\ufe52\130\ufe52\131\ufe52\133\ufe52" +
    "\134\ufe52\135\ufe52\144\ufe52\146\ufe52\147\ufe52\151\ufe52\152" +
    "\ufe52\163\ufe52\166\ufe52\171\ufe52\176\ufe52\177\ufe52\203\ufe52" +
    "\230\ufe52\240\ufe52\247\ufe52\250\ufe52\253\ufe52\256\ufe52\260" +
    "\ufe52\263\ufe52\264\ufe52\265\ufe52\266\ufe52\267\ufe52\270\ufe52" +
    "\271\ufe52\273\ufe52\274\ufe52\275\ufe52\276\ufe52\277\ufe52\305" +
    "\ufe52\001\002\000\154\002\ufe87\011\ufe87\015\ufe87\016\ufe87" +
    "\020\ufe87\041\ufe87\052\ufe87\055\ufe87\060\ufe87\061\ufe87\074" +
    "\ufe87\100\ufe87\101\ufe87\105\ufe87\106\ufe87\110\ufe87\120\ufe87" +
    "\130\ufe87\131\ufe87\133\ufe87\134\ufe87\135\ufe87\144\ufe87\146" +
    "\ufe87\147\ufe87\151\ufe87\152\ufe87\163\ufe87\166\ufe87\171\ufe87" +
    "\176\ufe87\177\ufe87\203\ufe87\230\ufe87\240\ufe87\247\ufe87\250" +
    "\ufe87\253\ufe87\256\ufe87\260\ufe87\263\ufe87\264\ufe87\265\ufe87" +
    "\266\ufe87\267\ufe87\270\ufe87\271\ufe87\273\ufe87\274\ufe87\275" +
    "\ufe87\276\ufe87\277\ufe87\305\ufe87\001\002\000\154\002\ufe53" +
    "\011\ufe53\015\ufe53\016\ufe53\020\ufe53\041\ufe53\052\ufe53\055" +
    "\ufe53\060\ufe53\061\ufe53\074\ufe53\100\ufe53\101\ufe53\105\ufe53" +
    "\106\ufe53\110\ufe53\120\ufe53\130\ufe53\131\ufe53\133\ufe53\134" +
    "\ufe53\135\ufe53\144\ufe53\146\ufe53\147\ufe53\151\ufe53\152\ufe53" +
    "\163\ufe53\166\ufe53\171\ufe53\176\ufe53\177\ufe53\203\ufe53\230" +
    "\ufe53\240\ufe53\247\ufe53\250\ufe53\253\ufe53\256\ufe53\260\ufe53" +
    "\263\ufe53\264\ufe53\265\ufe53\266\ufe53\267\ufe53\270\ufe53\271" +
    "\ufe53\273\ufe53\274\ufe53\275\ufe53\276\ufe53\277\ufe53\305\ufe53" +
    "\001\002\000\004\257\u01e1\001\002\000\154\002\ufe4f\011" +
    "\ufe4f\015\ufe4f\016\ufe4f\020\ufe4f\041\ufe4f\052\ufe4f\055\ufe4f" +
    "\060\ufe4f\061\ufe4f\074\ufe4f\100\ufe4f\101\ufe4f\105\ufe4f\106" +
    "\ufe4f\110\ufe4f\120\ufe4f\130\ufe4f\131\ufe4f\133\ufe4f\134\ufe4f" +
    "\135\ufe4f\144\ufe4f\146\ufe4f\147\ufe4f\151\ufe4f\152\ufe4f\163" +
    "\ufe4f\166\ufe4f\171\ufe4f\176\ufe4f\177\ufe4f\203\ufe4f\230\ufe4f" +
    "\240\ufe4f\247\ufe4f\250\ufe4f\253\ufe4f\256\ufe4f\260\ufe4f\263" +
    "\ufe4f\264\ufe4f\265\ufe4f\266\ufe4f\267\ufe4f\270\ufe4f\271\ufe4f" +
    "\273\ufe4f\274\ufe4f\275\ufe4f\276\ufe4f\277\ufe4f\305\ufe4f\001" +
    "\002\000\004\257\u01aa\001\002\000\052\026\132\027\124" +
    "\063\145\066\112\107\147\125\136\144\131\145\113\235" +
    "\111\257\126\265\143\266\125\272\154\274\135\277\146" +
    "\301\106\303\116\304\114\305\110\306\107\001\002\000" +
    "\060\026\132\027\124\063\145\066\112\107\147\125\136" +
    "\144\131\145\113\206\uff1d\235\111\244\uff1d\251\013\257" +
    "\126\265\143\266\125\272\154\274\135\277\146\301\106" +
    "\303\116\304\114\305\110\306\107\001\002\000\154\002" +
    "\ufe8c\011\ufe8c\015\ufe8c\016\ufe8c\020\ufe8c\041\ufe8c\052\ufe8c" +
    "\055\ufe8c\060\ufe8c\061\ufe8c\074\ufe8c\100\ufe8c\101\ufe8c\105" +
    "\ufe8c\106\ufe8c\110\ufe8c\120\ufe8c\130\ufe8c\131\ufe8c\133\ufe8c" +
    "\134\ufe8c\135\ufe8c\144\ufe8c\146\ufe8c\147\ufe8c\151\ufe8c\152" +
    "\ufe8c\163\ufe8c\166\ufe8c\171\ufe8c\176\ufe8c\177\ufe8c\203\ufe8c" +
    "\230\ufe8c\240\ufe8c\247\ufe8c\250\ufe8c\253\ufe8c\256\ufe8c\260" +
    "\ufe8c\263\ufe8c\264\ufe8c\265\ufe8c\266\ufe8c\267\ufe8c\270\ufe8c" +
    "\271\ufe8c\273\ufe8c\274\ufe8c\275\ufe8c\276\ufe8c\277\ufe8c\305" +
    "\ufe8c\001\002\000\154\002\ufe8d\011\ufe8d\015\ufe8d\016\ufe8d" +
    "\020\ufe8d\041\ufe8d\052\ufe8d\055\ufe8d\060\ufe8d\061\ufe8d\074" +
    "\ufe8d\100\ufe8d\101\ufe8d\105\ufe8d\106\ufe8d\110\ufe8d\120\ufe8d" +
    "\130\ufe8d\131\ufe8d\133\ufe8d\134\ufe8d\135\ufe8d\144\ufe8d\146" +
    "\ufe8d\147\ufe8d\151\ufe8d\152\ufe8d\163\ufe8d\166\ufe8d\171\ufe8d" +
    "\176\ufe8d\177\ufe8d\203\ufe8d\230\ufe8d\240\ufe8d\247\ufe8d\250" +
    "\ufe8d\253\ufe8d\256\ufe8d\260\ufe8d\263\ufe8d\264\ufe8d\265\ufe8d" +
    "\266\ufe8d\267\ufe8d\270\ufe8d\271\ufe8d\273\ufe8d\274\ufe8d\275" +
    "\ufe8d\276\ufe8d\277\ufe8d\305\ufe8d\001\002\000\052\026\132" +
    "\027\124\063\145\066\112\107\147\125\136\144\131\145" +
    "\113\235\111\257\126\265\143\266\125\272\154\274\135" +
    "\277\146\301\106\303\116\304\114\305\110\306\107\001" +
    "\002\000\054\026\132\027\124\063\145\066\112\107\147" +
    "\125\136\144\131\145\113\235\111\247\u0198\257\126\265" +
    "\143\266\125\272\154\274\135\277\146\301\106\303\116" +
    "\304\114\305\110\306\107\001\002\000\154\002\ufe8f\011" +
    "\ufe8f\015\ufe8f\016\ufe8f\020\ufe8f\041\ufe8f\052\ufe8f\055\ufe8f" +
    "\060\ufe8f\061\ufe8f\074\ufe8f\100\ufe8f\101\ufe8f\105\ufe8f\106" +
    "\ufe8f\110\ufe8f\120\ufe8f\130\ufe8f\131\ufe8f\133\ufe8f\134\ufe8f" +
    "\135\ufe8f\144\ufe8f\146\ufe8f\147\ufe8f\151\ufe8f\152\ufe8f\163" +
    "\ufe8f\166\ufe8f\171\ufe8f\176\ufe8f\177\ufe8f\203\ufe8f\230\ufe8f" +
    "\240\ufe8f\247\ufe8f\250\ufe8f\253\ufe8f\256\ufe8f\260\ufe8f\263" +
    "\ufe8f\264\ufe8f\265\ufe8f\266\ufe8f\267\ufe8f\270\ufe8f\271\ufe8f" +
    "\273\ufe8f\274\ufe8f\275\ufe8f\276\ufe8f\277\ufe8f\305\ufe8f\001" +
    "\002\000\154\002\ufe54\011\ufe54\015\ufe54\016\ufe54\020\ufe54" +
    "\041\ufe54\052\ufe54\055\ufe54\060\ufe54\061\ufe54\074\ufe54\100" +
    "\ufe54\101\ufe54\105\ufe54\106\ufe54\110\ufe54\120\ufe54\130\ufe54" +
    "\131\ufe54\133\ufe54\134\ufe54\135\ufe54\144\ufe54\146\ufe54\147" +
    "\ufe54\151\ufe54\152\ufe54\163\ufe54\166\ufe54\171\ufe54\176\ufe54" +
    "\177\ufe54\203\ufe54\230\ufe54\240\ufe54\247\ufe54\250\ufe54\253" +
    "\ufe54\256\ufe54\260\ufe54\263\ufe54\264\ufe54\265\ufe54\266\ufe54" +
    "\267\ufe54\270\ufe54\271\ufe54\273\ufe54\274\ufe54\275\ufe54\276" +
    "\ufe54\277\ufe54\305\ufe54\001\002\000\052\026\132\027\124" +
    "\063\145\066\112\107\147\125\136\144\131\145\113\235" +
    "\111\257\126\265\143\266\125\272\154\274\135\277\146" +
    "\301\106\303\116\304\114\305\110\306\107\001\002\000" +
    "\052\026\132\027\124\063\145\066\112\107\147\125\136" +
    "\144\131\145\113\235\111\257\126\265\143\266\125\272" +
    "\154\274\135\277\146\301\106\303\116\304\114\305\110" +
    "\306\107\001\002\000\154\002\ufe50\011\ufe50\015\ufe50\016" +
    "\ufe50\020\ufe50\041\ufe50\052\ufe50\055\ufe50\060\ufe50\061\ufe50" +
    "\074\ufe50\100\ufe50\101\ufe50\105\ufe50\106\ufe50\110\ufe50\120" +
    "\ufe50\130\ufe50\131\ufe50\133\ufe50\134\ufe50\135\ufe50\144\ufe50" +
    "\146\ufe50\147\ufe50\151\ufe50\152\ufe50\163\ufe50\166\ufe50\171" +
    "\ufe50\176\ufe50\177\ufe50\203\ufe50\230\ufe50\240\ufe50\247\ufe50" +
    "\250\ufe50\253\ufe50\256\ufe50\260\ufe50\263\ufe50\264\ufe50\265" +
    "\ufe50\266\ufe50\267\ufe50\270\ufe50\271\ufe50\273\ufe50\274\ufe50" +
    "\275\ufe50\276\ufe50\277\ufe50\305\ufe50\001\002\000\154\002" +
    "\ufe85\011\ufe85\015\ufe85\016\ufe85\020\ufe85\041\ufe85\052\ufe85" +
    "\055\ufe85\060\ufe85\061\ufe85\074\ufe85\100\ufe85\101\ufe85\105" +
    "\ufe85\106\ufe85\110\ufe85\120\ufe85\130\ufe85\131\ufe85\133\ufe85" +
    "\134\ufe85\135\ufe85\144\ufe85\146\ufe85\147\ufe85\151\ufe85\152" +
    "\ufe85\163\ufe85\166\ufe85\171\ufe85\176\ufe85\177\ufe85\203\ufe85" +
    "\230\ufe85\240\ufe85\247\ufe85\250\ufe85\253\ufe85\256\ufe85\260" +
    "\ufe85\263\ufe85\264\ufe85\265\ufe85\266\ufe85\267\ufe85\270\ufe85" +
    "\271\ufe85\273\ufe85\274\ufe85\275\ufe85\276\ufe85\277\ufe85\305" +
    "\ufe85\001\002\000\154\002\ufe86\011\ufe86\015\ufe86\016\ufe86" +
    "\020\ufe86\041\ufe86\052\ufe86\055\ufe86\060\ufe86\061\ufe86\074" +
    "\ufe86\100\ufe86\101\ufe86\105\ufe86\106\ufe86\110\ufe86\120\ufe86" +
    "\130\ufe86\131\ufe86\133\ufe86\134\ufe86\135\ufe86\144\ufe86\146" +
    "\ufe86\147\ufe86\151\ufe86\152\ufe86\163\ufe86\166\ufe86\171\ufe86" +
    "\176\ufe86\177\ufe86\203\ufe86\230\ufe86\240\ufe86\247\ufe86\250" +
    "\ufe86\253\ufe86\256\ufe86\260\ufe86\263\ufe86\264\ufe86\265\ufe86" +
    "\266\ufe86\267\ufe86\270\ufe86\271\ufe86\273\ufe86\274\ufe86\275" +
    "\ufe86\276\ufe86\277\ufe86\305\ufe86\001\002\000\156\002\ufe8b" +
    "\011\ufe8b\015\ufe8b\016\ufe8b\020\ufe8b\041\ufe8b\052\ufe8b\055" +
    "\ufe8b\060\ufe8b\061\ufe8b\074\ufe8b\100\ufe8b\101\ufe8b\105\ufe8b" +
    "\106\ufe8b\110\ufe8b\120\ufe8b\130\ufe8b\131\ufe8b\133\ufe8b\134" +
    "\ufe8b\135\ufe8b\144\ufe8b\146\ufe8b\147\ufe8b\151\ufe8b\152\ufe8b" +
    "\154\u017b\163\ufe8b\166\ufe8b\171\ufe8b\176\ufe8b\177\ufe8b\203" +
    "\ufe8b\230\ufe8b\240\ufe8b\247\ufe8b\250\ufe8b\253\ufe8b\256\ufe8b" +
    "\260\ufe8b\263\ufe8b\264\ufe8b\265\ufe8b\266\ufe8b\267\ufe8b\270" +
    "\ufe8b\271\ufe8b\273\ufe8b\274\ufe8b\275\ufe8b\276\ufe8b\277\ufe8b" +
    "\305\ufe8b\001\002\000\052\026\132\027\124\063\145\066" +
    "\112\107\147\125\136\144\131\145\113\235\111\257\126" +
    "\265\143\266\125\272\154\274\135\277\146\301\106\303" +
    "\116\304\114\305\110\306\107\001\002\000\154\002\ufe51" +
    "\011\ufe51\015\ufe51\016\ufe51\020\ufe51\041\ufe51\052\ufe51\055" +
    "\ufe51\060\ufe51\061\ufe51\074\ufe51\100\ufe51\101\ufe51\105\ufe51" +
    "\106\ufe51\110\ufe51\120\ufe51\130\ufe51\131\ufe51\133\ufe51\134" +
    "\ufe51\135\ufe51\144\ufe51\146\ufe51\147\ufe51\151\ufe51\152\ufe51" +
    "\163\ufe51\166\ufe51\171\ufe51\176\ufe51\177\ufe51\203\ufe51\230" +
    "\ufe51\240\ufe51\247\ufe51\250\ufe51\253\ufe51\256\ufe51\260\ufe51" +
    "\263\ufe51\264\ufe51\265\ufe51\266\ufe51\267\ufe51\270\ufe51\271" +
    "\ufe51\273\ufe51\274\ufe51\275\ufe51\276\ufe51\277\ufe51\305\ufe51" +
    "\001\002\000\004\257\u0178\001\002\000\160\002\ufe32\011" +
    "\ufe32\015\ufe32\016\ufe32\020\ufe32\041\ufe32\052\ufe32\055\ufe32" +
    "\060\ufe32\061\ufe32\074\ufe32\100\ufe32\101\ufe32\105\ufe32\106" +
    "\ufe32\110\ufe32\120\ufe32\130\ufe32\131\ufe32\133\ufe32\134\ufe32" +
    "\135\ufe32\144\ufe32\146\ufe32\147\ufe32\151\ufe32\152\ufe32\163" +
    "\ufe32\166\ufe32\171\ufe32\176\ufe32\177\ufe32\203\ufe32\230\ufe32" +
    "\240\ufe32\247\ufe32\250\ufe32\253\ufe32\254\u0174\256\ufe32\257" +
    "\ufed1\260\ufe32\263\ufe32\264\ufe32\265\ufe32\266\ufe32\267\ufe32" +
    "\270\ufe32\271\ufe32\273\ufe32\274\ufe32\275\ufe32\276\ufe32\277" +
    "\ufe32\305\ufe32\001\002\000\004\257\u0171\001\002\000\154" +
    "\002\ufe88\011\ufe88\015\ufe88\016\ufe88\020\ufe88\041\ufe88\052" +
    "\ufe88\055\ufe88\060\ufe88\061\ufe88\074\ufe88\100\ufe88\101\ufe88" +
    "\105\ufe88\106\ufe88\110\ufe88\120\ufe88\130\ufe88\131\ufe88\133" +
    "\ufe88\134\ufe88\135\ufe88\144\ufe88\146\ufe88\147\ufe88\151\ufe88" +
    "\152\ufe88\163\ufe88\166\ufe88\171\ufe88\176\ufe88\177\ufe88\203" +
    "\ufe88\230\ufe88\240\ufe88\247\ufe88\250\ufe88\253\ufe88\256\ufe88" +
    "\260\ufe88\263\ufe88\264\ufe88\265\ufe88\266\ufe88\267\ufe88\270" +
    "\ufe88\271\ufe88\273\ufe88\274\ufe88\275\ufe88\276\ufe88\277\ufe88" +
    "\305\ufe88\001\002\000\154\002\ufe82\011\ufe82\015\ufe82\016" +
    "\ufe82\020\ufe82\041\ufe82\052\ufe82\055\ufe82\060\ufe82\061\ufe82" +
    "\074\ufe82\100\ufe82\101\ufe82\105\ufe82\106\ufe82\110\ufe82\120" +
    "\ufe82\130\ufe82\131\ufe82\133\ufe82\134\ufe82\135\ufe82\144\ufe82" +
    "\146\ufe82\147\ufe82\151\ufe82\152\ufe82\163\ufe82\166\ufe82\171" +
    "\ufe82\176\ufe82\177\ufe82\203\ufe82\230\ufe82\240\ufe82\247\ufe82" +
    "\250\ufe82\253\ufe82\256\ufe82\260\ufe82\263\ufe82\264\ufe82\265" +
    "\ufe82\266\ufe82\267\ufe82\270\ufe82\271\ufe82\273\ufe82\274\ufe82" +
    "\275\ufe82\276\ufe82\277\ufe82\305\ufe82\001\002\000\154\002" +
    "\ufe5d\011\202\015\ufe5d\016\ufe5d\020\175\041\ufe5d\052\ufe5d" +
    "\055\170\060\ufe5d\061\ufe5d\074\ufe5d\100\ufe5d\101\ufe5d\105" +
    "\ufe5d\106\ufe5d\110\205\120\ufe5d\130\200\131\ufe5d\133\ufe5d" +
    "\134\172\135\ufe5d\144\162\146\ufe5d\147\ufe5d\151\203\152" +
    "\ufe5d\163\ufe5d\166\ufe5d\171\201\176\ufe5d\177\176\203\ufe5d" +
    "\230\ufe5d\240\ufe5d\247\ufe5d\250\ufe5d\253\ufe5d\256\165\260" +
    "\ufe5d\263\173\264\160\265\174\266\167\267\161\270\164" +
    "\271\177\273\163\274\166\275\171\276\204\277\ufe5d\305" +
    "\ufe5d\001\002\000\154\002\ufe8a\011\ufe8a\015\ufe8a\016\ufe8a" +
    "\020\ufe8a\041\ufe8a\052\ufe8a\055\ufe8a\060\ufe8a\061\ufe8a\074" +
    "\ufe8a\100\ufe8a\101\ufe8a\105\ufe8a\106\ufe8a\110\ufe8a\120\ufe8a" +
    "\130\ufe8a\131\ufe8a\133\ufe8a\134\ufe8a\135\ufe8a\144\ufe8a\146" +
    "\ufe8a\147\ufe8a\151\ufe8a\152\ufe8a\163\ufe8a\166\ufe8a\171\ufe8a" +
    "\176\ufe8a\177\ufe8a\203\ufe8a\230\ufe8a\240\ufe8a\247\ufe8a\250" +
    "\ufe8a\253\ufe8a\256\ufe8a\260\ufe8a\263\ufe8a\264\ufe8a\265\ufe8a" +
    "\266\ufe8a\267\ufe8a\270\ufe8a\271\ufe8a\273\ufe8a\274\ufe8a\275" +
    "\ufe8a\276\ufe8a\277\ufe8a\305\ufe8a\001\002\000\052\026\132" +
    "\027\124\063\145\066\112\107\147\125\136\144\131\145" +
    "\113\235\111\257\126\265\143\266\125\272\154\274\135" +
    "\277\146\301\106\303\116\304\114\305\110\306\107\001" +
    "\002\000\154\002\ufe84\011\ufe84\015\ufe84\016\ufe84\020\ufe84" +
    "\041\ufe84\052\ufe84\055\ufe84\060\ufe84\061\ufe84\074\ufe84\100" +
    "\ufe84\101\ufe84\105\ufe84\106\ufe84\110\ufe84\120\ufe84\130\ufe84" +
    "\131\ufe84\133\ufe84\134\ufe84\135\ufe84\144\ufe84\146\ufe84\147" +
    "\ufe84\151\ufe84\152\ufe84\163\ufe84\166\ufe84\171\ufe84\176\ufe84" +
    "\177\ufe84\203\ufe84\230\ufe84\240\ufe84\247\ufe84\250\ufe84\253" +
    "\ufe84\256\ufe84\260\ufe84\263\ufe84\264\ufe84\265\ufe84\266\ufe84" +
    "\267\ufe84\270\ufe84\271\ufe84\273\ufe84\274\ufe84\275\ufe84\276" +
    "\ufe84\277\ufe84\305\ufe84\001\002\000\154\002\ufe90\011\ufe90" +
    "\015\ufe90\016\ufe90\020\ufe90\041\ufe90\052\ufe90\055\ufe90\060" +
    "\ufe90\061\ufe90\074\ufe90\100\ufe90\101\ufe90\105\ufe90\106\ufe90" +
    "\110\ufe90\120\ufe90\130\ufe90\131\ufe90\133\ufe90\134\ufe90\135" +
    "\ufe90\144\ufe90\146\ufe90\147\ufe90\151\ufe90\152\ufe90\163\ufe90" +
    "\166\ufe90\171\ufe90\176\ufe90\177\ufe90\203\ufe90\230\ufe90\240" +
    "\ufe90\247\ufe90\250\ufe90\253\ufe90\256\ufe90\260\ufe90\263\ufe90" +
    "\264\ufe90\265\ufe90\266\ufe90\267\ufe90\270\ufe90\271\ufe90\273" +
    "\ufe90\274\ufe90\275\ufe90\276\ufe90\277\ufe90\305\ufe90\001\002" +
    "\000\154\002\ufe68\011\ufe68\015\ufe68\016\ufe68\020\ufe68\041" +
    "\ufe68\052\ufe68\055\ufe68\060\ufe68\061\ufe68\074\ufe68\100\ufe68" +
    "\101\ufe68\105\ufe68\106\ufe68\110\ufe68\120\ufe68\130\ufe68\131" +
    "\ufe68\133\ufe68\134\ufe68\135\ufe68\144\ufe68\146\ufe68\147\ufe68" +
    "\151\ufe68\152\ufe68\163\ufe68\166\ufe68\171\ufe68\176\ufe68\177" +
    "\ufe68\203\ufe68\230\ufe68\240\ufe68\247\ufe68\250\ufe68\253\ufe68" +
    "\256\ufe68\260\ufe68\263\ufe68\264\ufe68\265\ufe68\266\ufe68\267" +
    "\ufe68\270\ufe68\271\ufe68\273\ufe68\274\ufe68\275\ufe68\276\ufe68" +
    "\277\ufe68\305\ufe68\001\002\000\052\026\132\027\124\063" +
    "\145\066\112\107\147\125\136\144\131\145\113\235\111" +
    "\257\126\265\143\266\125\272\154\274\135\277\146\301" +
    "\106\303\116\304\114\305\110\306\107\001\002\000\052" +
    "\026\132\027\124\063\145\066\112\107\147\125\136\144" +
    "\131\145\113\235\111\257\126\265\143\266\125\272\154" +
    "\274\135\277\146\301\106\303\116\304\114\305\110\306" +
    "\107\001\002\000\014\020\u015d\110\u0161\134\u0160\171\u015f" +
    "\177\u015e\001\002\000\052\026\132\027\124\063\145\066" +
    "\112\107\147\125\136\144\131\145\113\235\111\257\126" +
    "\265\143\266\125\272\154\274\135\277\146\301\106\303" +
    "\116\304\114\305\110\306\107\001\002\000\052\026\132" +
    "\027\124\063\145\066\112\107\147\125\136\144\131\145" +
    "\113\235\111\257\126\265\143\266\125\272\154\274\135" +
    "\277\146\301\106\303\116\304\114\305\110\306\107\001" +
    "\002\000\052\026\132\027\124\063\145\066\112\107\147" +
    "\125\136\144\131\145\113\235\111\257\126\265\143\266" +
    "\125\272\154\274\135\277\146\301\106\303\116\304\114" +
    "\305\110\306\107\001\002\000\004\273\u0158\001\002\000" +
    "\052\026\132\027\124\063\145\066\112\107\147\125\u0154" +
    "\144\131\145\113\235\111\257\126\265\143\266\125\272" +
    "\154\274\135\277\146\301\106\303\116\304\114\305\110" +
    "\306\107\001\002\000\052\026\132\027\124\063\145\066" +
    "\112\107\147\125\136\144\131\145\113\235\111\257\126" +
    "\265\143\266\125\272\154\274\135\277\146\301\106\303" +
    "\116\304\114\305\110\306\107\001\002\000\056\026\132" +
    "\027\124\063\145\066\112\107\147\125\136\144\131\145" +
    "\113\235\111\257\126\265\143\266\125\272\154\273\u014f" +
    "\274\135\276\u014e\277\146\301\106\303\116\304\114\305" +
    "\110\306\107\001\002\000\052\026\132\027\124\063\145" +
    "\066\112\107\147\125\136\144\131\145\113\235\111\257" +
    "\126\265\143\266\125\272\154\274\135\277\146\301\106" +
    "\303\116\304\114\305\110\306\107\001\002\000\052\026" +
    "\132\027\124\063\145\066\112\107\147\125\136\144\131" +
    "\145\113\235\111\257\126\265\143\266\125\272\154\274" +
    "\135\277\146\301\106\303\116\304\114\305\110\306\107" +
    "\001\002\000\052\026\132\027\124\063\145\066\112\107" +
    "\147\125\u0146\144\131\145\113\235\111\257\126\265\143" +
    "\266\125\272\154\274\135\277\146\301\106\303\116\304" +
    "\114\305\110\306\107\001\002\000\052\026\132\027\124" +
    "\063\145\066\112\107\147\125\136\144\131\145\113\235" +
    "\111\257\126\265\143\266\125\272\154\274\135\277\146" +
    "\301\106\303\116\304\114\305\110\306\107\001\002\000" +
    "\052\026\132\027\124\063\145\066\112\107\147\125\136" +
    "\144\131\145\113\235\111\257\126\265\143\266\125\272" +
    "\154\274\135\277\146\301\106\303\116\304\114\305\110" +
    "\306\107\001\002\000\052\026\132\027\124\063\145\066" +
    "\112\107\147\125\136\144\131\145\113\235\111\257\126" +
    "\265\143\266\125\272\154\274\135\277\146\301\106\303" +
    "\116\304\114\305\110\306\107\001\002\000\006\144\u013b" +
    "\145\u013a\001\002\000\052\026\132\027\124\063\145\066" +
    "\112\107\147\125\136\144\131\145\113\235\111\257\126" +
    "\265\143\266\125\272\154\274\135\277\146\301\106\303" +
    "\116\304\114\305\110\306\107\001\002\000\052\026\132" +
    "\027\124\063\145\066\112\107\147\125\136\144\131\145" +
    "\113\235\111\257\126\265\143\266\125\272\154\274\135" +
    "\277\146\301\106\303\116\304\114\305\110\306\107\001" +
    "\002\000\052\026\132\027\124\063\145\066\112\107\147" +
    "\125\136\144\131\145\113\235\111\257\126\265\143\266" +
    "\125\272\154\274\135\277\146\301\106\303\116\304\114" +
    "\305\110\306\107\001\002\000\054\026\132\027\124\063" +
    "\145\066\112\107\147\125\136\144\131\145\113\235\111" +
    "\257\126\265\143\266\125\272\154\273\u0134\274\135\277" +
    "\146\301\106\303\116\304\114\305\110\306\107\001\002" +
    "\000\004\257\207\001\002\000\154\002\ufe3a\011\ufe3a\015" +
    "\ufe3a\016\ufe3a\020\ufe3a\041\ufe3a\052\ufe3a\055\ufe3a\060\ufe3a" +
    "\061\ufe3a\074\ufe3a\100\ufe3a\101\ufe3a\105\ufe3a\106\ufe3a\110" +
    "\ufe3a\120\ufe3a\130\ufe3a\131\ufe3a\133\ufe3a\134\ufe3a\135\ufe3a" +
    "\144\ufe3a\146\ufe3a\147\ufe3a\151\ufe3a\152\ufe3a\163\ufe3a\166" +
    "\ufe3a\171\ufe3a\176\ufe3a\177\ufe3a\203\ufe3a\230\ufe3a\240\ufe3a" +
    "\247\ufe3a\250\ufe3a\253\ufe3a\256\ufe3a\260\ufe3a\263\ufe3a\264" +
    "\ufe3a\265\ufe3a\266\ufe3a\267\ufe3a\270\ufe3a\271\ufe3a\273\ufe3a" +
    "\274\ufe3a\275\ufe3a\276\ufe3a\277\ufe3a\305\ufe3a\001\002\000" +
    "\060\026\132\027\124\063\145\066\112\107\147\125\136" +
    "\144\131\145\113\206\uff1d\235\111\244\uff1d\251\013\257" +
    "\126\265\143\266\125\272\154\274\135\277\146\301\106" +
    "\303\116\304\114\305\110\306\107\001\002\000\070\011" +
    "\ufe82\015\ufe82\020\ufe82\055\ufe82\110\ufe82\130\ufe82\134\ufe82" +
    "\144\ufe82\151\ufe82\171\ufe82\177\ufe82\253\ufe82\256\ufe82\260" +
    "\u0133\263\ufe82\264\ufe82\265\ufe82\266\ufe82\267\ufe82\270\ufe82" +
    "\271\ufe82\273\ufe82\274\ufe82\275\ufe82\276\ufe82\277\ufe82\305" +
    "\ufe82\001\002\000\102\002\ufeb3\011\202\020\175\055\170" +
    "\106\ufeb3\110\205\130\200\134\172\135\ufeb3\144\162\147" +
    "\ufeb3\151\203\152\ufeb3\166\ufeb3\171\201\177\176\203\ufeb3" +
    "\240\ufeb3\253\ufeb3\256\165\260\ufeb3\263\173\264\160\265" +
    "\174\266\167\267\161\270\164\271\177\273\163\274\166" +
    "\275\171\276\204\001\002\000\010\206\230\244\231\257" +
    "\227\001\002\000\004\260\220\001\002\000\006\253\215" +
    "\260\216\001\002\000\052\026\132\027\124\063\145\066" +
    "\112\107\147\125\136\144\131\145\113\235\111\257\126" +
    "\265\143\266\125\272\154\274\135\277\146\301\106\303" +
    "\116\304\114\305\110\306\107\001\002\000\154\002\ufe3c" +
    "\011\ufe3c\015\ufe3c\016\ufe3c\020\ufe3c\041\ufe3c\052\ufe3c\055" +
    "\ufe3c\060\ufe3c\061\ufe3c\074\ufe3c\100\ufe3c\101\ufe3c\105\ufe3c" +
    "\106\ufe3c\110\ufe3c\120\ufe3c\130\ufe3c\131\ufe3c\133\ufe3c\134" +
    "\ufe3c\135\ufe3c\144\ufe3c\146\ufe3c\147\ufe3c\151\ufe3c\152\ufe3c" +
    "\163\ufe3c\166\ufe3c\171\ufe3c\176\ufe3c\177\ufe3c\203\ufe3c\230" +
    "\ufe3c\240\ufe3c\247\ufe3c\250\ufe3c\253\ufe3c\256\ufe3c\260\ufe3c" +
    "\263\ufe3c\264\ufe3c\265\ufe3c\266\ufe3c\267\ufe3c\270\ufe3c\271" +
    "\ufe3c\273\ufe3c\274\ufe3c\275\ufe3c\276\ufe3c\277\ufe3c\305\ufe3c" +
    "\001\002\000\102\002\ufeb2\011\202\020\175\055\170\106" +
    "\ufeb2\110\205\130\200\134\172\135\ufeb2\144\162\147\ufeb2" +
    "\151\203\152\ufeb2\166\ufeb2\171\201\177\176\203\ufeb2\240" +
    "\ufeb2\253\ufeb2\256\165\260\ufeb2\263\173\264\160\265\174" +
    "\266\167\267\161\270\164\271\177\273\163\274\166\275" +
    "\171\276\204\001\002\000\154\002\ufe37\011\ufe37\015\ufe37" +
    "\016\ufe37\020\ufe37\041\ufe37\052\ufe37\055\ufe37\060\ufe37\061" +
    "\ufe37\074\ufe37\100\ufe37\101\ufe37\105\ufe37\106\ufe37\110\ufe37" +
    "\120\ufe37\130\ufe37\131\ufe37\133\ufe37\134\ufe37\135\ufe37\144" +
    "\ufe37\146\ufe37\147\ufe37\151\ufe37\152\ufe37\163\ufe37\166\ufe37" +
    "\171\ufe37\176\ufe37\177\ufe37\203\ufe37\230\ufe37\240\ufe37\247" +
    "\ufe37\250\ufe37\253\ufe37\256\ufe37\260\ufe37\263\ufe37\264\ufe37" +
    "\265\ufe37\266\ufe37\267\ufe37\270\ufe37\271\ufe37\273\ufe37\274" +
    "\ufe37\275\ufe37\276\ufe37\277\ufe37\305\ufe37\001\002\000\014" +
    "\002\uff20\135\u0125\152\u0124\240\u0123\260\uff20\001\002\000" +
    "\014\002\uff12\135\uff12\152\uff12\240\uff12\260\uff12\001\002" +
    "\000\014\002\uff15\135\uff15\152\uff15\240\uff15\260\uff15\001" +
    "\002\000\006\002\uff1f\260\uff1f\001\002\000\014\002\uff14" +
    "\135\uff14\152\uff14\240\uff14\260\uff14\001\002\000\016\002" +
    "\ufee7\100\347\135\ufee7\152\ufee7\240\ufee7\260\ufee7\001\002" +
    "\000\012\206\uff1d\244\uff1d\251\013\257\uff1d\001\002\000" +
    "\066\006\324\026\ufeb6\027\ufeb6\054\325\063\ufeb6\066\ufeb6" +
    "\107\ufeb6\125\ufeb6\144\ufeb6\145\ufeb6\217\327\235\ufeb6\256" +
    "\ufeb6\257\ufeb6\261\331\265\ufeb6\266\ufeb6\272\ufeb6\274\ufeb6" +
    "\277\ufeb6\301\ufeb6\302\326\303\ufeb6\304\ufeb6\305\ufeb6\306" +
    "\ufeb6\001\002\000\004\257\233\001\002\000\020\002\ufeaa" +
    "\135\ufeaa\147\ufeaa\152\266\240\ufeaa\253\263\260\ufeaa\001" +
    "\002\000\054\026\132\027\124\063\145\066\112\107\147" +
    "\125\136\144\131\145\113\235\111\256\235\257\234\265" +
    "\143\266\125\272\154\274\135\277\240\301\106\303\116" +
    "\304\114\305\110\306\107\001\002\000\062\026\132\027" +
    "\124\063\145\066\112\107\147\125\136\144\131\145\113" +
    "\206\uff1d\235\111\244\uff1d\251\013\256\235\257\126\265" +
    "\143\266\125\272\154\274\135\277\240\301\106\303\116" +
    "\304\114\305\110\306\107\001\002\000\020\002\ufed6\100" +
    "\ufed6\135\ufed6\152\ufed6\240\ufed6\253\ufed6\260\ufed6\001\002" +
    "\000\020\002\ufedf\100\ufedf\135\ufedf\152\ufedf\240\ufedf\253" +
    "\ufedf\260\ufedf\001\002\000\006\253\263\260\264\001\002" +
    "\000\106\002\ufe32\011\ufe32\015\ufe32\020\ufe32\055\ufe32\100" +
    "\ufe32\110\ufe32\130\ufe32\134\ufe32\135\ufe32\144\ufe32\151\ufe32" +
    "\152\ufe32\171\ufe32\177\ufe32\240\ufe32\253\ufe32\254\255\256" +
    "\ufe32\257\ufed1\260\ufe32\263\ufe32\264\ufe32\265\ufe32\266\ufe32" +
    "\267\ufe32\270\ufe32\271\ufe32\273\ufe32\274\ufe32\275\ufe32\276" +
    "\ufe32\277\ufe32\305\ufe32\001\002\000\006\253\252\260\253" +
    "\001\002\000\102\002\ufedc\011\202\015\245\020\175\055" +
    "\170\100\ufedc\110\205\130\200\134\172\135\ufedc\144\162" +
    "\151\203\152\ufedc\171\201\177\176\240\ufedc\253\ufedc\256" +
    "\165\260\ufedc\263\173\264\160\265\174\266\167\267\161" +
    "\270\164\271\177\273\163\274\166\275\171\276\204\277" +
    "\244\305\247\001\002\000\020\002\ufedb\100\ufedb\135\ufedb" +
    "\152\ufedb\240\ufedb\253\ufedb\260\ufedb\001\002\000\050\002" +
    "\ufed9\041\ufed9\100\ufed9\101\ufed9\105\ufed9\106\ufed9\120\ufed9" +
    "\131\ufed9\133\ufed9\135\ufed9\147\ufed9\150\ufed9\152\ufed9\176" +
    "\ufed9\240\ufed9\243\ufed9\250\ufed9\253\ufed9\260\ufed9\001\002" +
    "\000\006\277\250\305\251\001\002\000\020\002\ufedd\100" +
    "\ufedd\135\ufedd\152\ufedd\240\ufedd\253\ufedd\260\ufedd\001\002" +
    "\000\050\002\ufed7\041\ufed7\100\ufed7\101\ufed7\105\ufed7\106" +
    "\ufed7\120\ufed7\131\ufed7\133\ufed7\135\ufed7\147\ufed7\150\ufed7" +
    "\152\ufed7\176\ufed7\240\ufed7\243\ufed7\250\ufed7\253\ufed7\260" +
    "\ufed7\001\002\000\050\002\ufeda\041\ufeda\100\ufeda\101\ufeda" +
    "\105\ufeda\106\ufeda\120\ufeda\131\ufeda\133\ufeda\135\ufeda\147" +
    "\ufeda\150\ufeda\152\ufeda\176\ufeda\240\ufeda\243\ufeda\250\ufeda" +
    "\253\ufeda\260\ufeda\001\002\000\050\002\ufed8\041\ufed8\100" +
    "\ufed8\101\ufed8\105\ufed8\106\ufed8\120\ufed8\131\ufed8\133\ufed8" +
    "\135\ufed8\147\ufed8\150\ufed8\152\ufed8\176\ufed8\240\ufed8\243" +
    "\ufed8\250\ufed8\253\ufed8\260\ufed8\001\002\000\054\026\132" +
    "\027\124\063\145\066\112\107\147\125\136\144\131\145" +
    "\113\235\111\256\235\257\126\265\143\266\125\272\154" +
    "\274\135\277\240\301\106\303\116\304\114\305\110\306" +
    "\107\001\002\000\020\002\uff0b\135\uff0b\147\uff0b\152\uff0b" +
    "\240\uff0b\253\uff0b\260\uff0b\001\002\000\020\002\ufede\100" +
    "\ufede\135\ufede\152\ufede\240\ufede\253\ufede\260\ufede\001\002" +
    "\000\006\256\256\277\257\001\002\000\020\002\ufed5\100" +
    "\ufed5\135\ufed5\152\ufed5\240\ufed5\253\ufed5\260\ufed5\001\002" +
    "\000\106\002\ufe31\011\ufe31\015\ufe31\020\ufe31\055\ufe31\100" +
    "\ufe31\110\ufe31\130\ufe31\134\ufe31\135\ufe31\144\ufe31\151\ufe31" +
    "\152\ufe31\171\ufe31\177\ufe31\240\ufe31\253\ufe31\254\260\256" +
    "\ufe31\257\ufed0\260\ufe31\263\ufe31\264\ufe31\265\ufe31\266\ufe31" +
    "\267\ufe31\270\ufe31\271\ufe31\273\ufe31\274\ufe31\275\ufe31\276" +
    "\ufe31\277\ufe31\305\ufe31\001\002\000\006\256\261\277\262" +
    "\001\002\000\020\002\ufed4\100\ufed4\135\ufed4\152\ufed4\240" +
    "\ufed4\253\ufed4\260\ufed4\001\002\000\154\002\ufe30\011\ufe30" +
    "\015\ufe30\016\ufe30\020\ufe30\041\ufe30\052\ufe30\055\ufe30\060" +
    "\ufe30\061\ufe30\074\ufe30\100\ufe30\101\ufe30\105\ufe30\106\ufe30" +
    "\110\ufe30\120\ufe30\130\ufe30\131\ufe30\133\ufe30\134\ufe30\135" +
    "\ufe30\144\ufe30\146\ufe30\147\ufe30\151\ufe30\152\ufe30\163\ufe30" +
    "\166\ufe30\171\ufe30\176\ufe30\177\ufe30\203\ufe30\230\ufe30\240" +
    "\ufe30\247\ufe30\250\ufe30\253\ufe30\256\ufe30\260\ufe30\263\ufe30" +
    "\264\ufe30\265\ufe30\266\ufe30\267\ufe30\270\ufe30\271\ufe30\273" +
    "\ufe30\274\ufe30\275\ufe30\276\ufe30\277\ufe30\305\ufe30\001\002" +
    "\000\004\257\313\001\002\000\016\002\ufeaa\135\ufeaa\147" +
    "\ufeaa\152\266\240\ufeaa\260\ufeaa\001\002\000\016\002\ufe9c" +
    "\135\306\147\ufe9c\152\ufe9c\240\ufe9c\260\ufe9c\001\002\000" +
    "\004\024\267\001\002\000\052\026\132\027\124\063\145" +
    "\066\112\107\147\125\136\144\131\145\113\235\111\257" +
    "\126\265\143\266\125\272\154\274\135\277\146\301\106" +
    "\303\116\304\114\305\110\306\107\001\002\000\024\002" +
    "\ufeab\135\ufeab\147\ufeab\152\ufeab\166\ufeab\203\ufeab\240\ufeab" +
    "\253\302\260\ufeab\001\002\000\024\002\ufea9\135\ufea9\147" +
    "\ufea9\152\ufea9\166\ufea9\203\ufea9\240\ufea9\253\ufea9\260\ufea9" +
    "\001\002\000\106\002\ufea4\011\202\016\274\020\175\052" +
    "\275\055\170\110\205\130\200\134\172\135\ufea4\144\162" +
    "\146\ufea4\147\ufea4\151\203\152\ufea4\166\ufea4\171\201\177" +
    "\176\203\ufea4\240\ufea4\253\ufea4\256\165\260\ufea4\263\173" +
    "\264\160\265\174\266\167\267\161\270\164\271\177\273" +
    "\163\274\166\275\171\276\204\001\002\000\026\002\ufea1" +
    "\135\ufea1\146\276\147\ufea1\152\ufea1\166\ufea1\203\ufea1\240" +
    "\ufea1\253\ufea1\260\ufea1\001\002\000\026\002\ufea6\135\ufea6" +
    "\146\ufea6\147\ufea6\152\ufea6\166\ufea6\203\ufea6\240\ufea6\253" +
    "\ufea6\260\ufea6\001\002\000\026\002\ufea5\135\ufea5\146\ufea5" +
    "\147\ufea5\152\ufea5\166\ufea5\203\ufea5\240\ufea5\253\ufea5\260" +
    "\ufea5\001\002\000\006\072\300\132\301\001\002\000\024" +
    "\002\ufea7\135\ufea7\147\ufea7\152\ufea7\166\ufea7\203\ufea7\240" +
    "\ufea7\253\ufea7\260\ufea7\001\002\000\024\002\ufea3\135\ufea3" +
    "\147\ufea3\152\ufea3\166\ufea3\203\ufea3\240\ufea3\253\ufea3\260" +
    "\ufea3\001\002\000\024\002\ufea2\135\ufea2\147\ufea2\152\ufea2" +
    "\166\ufea2\203\ufea2\240\ufea2\253\ufea2\260\ufea2\001\002\000" +
    "\052\026\132\027\124\063\145\066\112\107\147\125\136" +
    "\144\131\145\113\235\111\257\126\265\143\266\125\272" +
    "\154\274\135\277\146\301\106\303\116\304\114\305\110" +
    "\306\107\001\002\000\024\002\ufea8\135\ufea8\147\ufea8\152" +
    "\ufea8\166\ufea8\203\ufea8\240\ufea8\253\ufea8\260\ufea8\001\002" +
    "\000\014\002\uff0c\135\uff0c\152\uff0c\240\uff0c\260\uff0c\001" +
    "\002\000\016\002\ufe9a\135\ufe9a\147\310\152\ufe9a\240\ufe9a" +
    "\260\ufe9a\001\002\000\052\026\132\027\124\063\145\066" +
    "\112\107\147\125\136\144\131\145\113\235\111\257\126" +
    "\265\143\266\125\272\154\274\135\277\146\301\106\303" +
    "\116\304\114\305\110\306\107\001\002\000\072\002\ufe9d" +
    "\011\202\020\175\055\170\110\205\130\200\134\172\135" +
    "\ufe9d\144\162\147\ufe9d\151\203\152\ufe9d\171\201\177\176" +
    "\240\ufe9d\256\165\260\ufe9d\263\173\264\160\265\174\266" +
    "\167\267\161\270\164\271\177\273\163\274\166\275\171" +
    "\276\204\001\002\000\052\026\132\027\124\063\145\066" +
    "\112\107\147\125\136\144\131\145\113\235\111\257\126" +
    "\265\143\266\125\272\154\274\135\277\146\301\106\303" +
    "\116\304\114\305\110\306\107\001\002\000\014\002\ufe9e" +
    "\135\ufe9e\152\ufe9e\240\ufe9e\260\ufe9e\001\002\000\070\002" +
    "\ufe9b\011\202\020\175\055\170\110\205\130\200\134\172" +
    "\135\ufe9b\144\162\151\203\152\ufe9b\171\201\177\176\240" +
    "\ufe9b\256\165\260\ufe9b\263\173\264\160\265\174\266\167" +
    "\267\161\270\164\271\177\273\163\274\166\275\171\276" +
    "\204\001\002\000\054\026\132\027\124\063\145\066\112" +
    "\107\147\125\136\144\131\145\113\235\111\256\235\257" +
    "\126\265\143\266\125\272\154\274\135\277\240\301\106" +
    "\303\116\304\114\305\110\306\107\001\002\000\006\253" +
    "\252\260\315\001\002\000\020\002\uff0a\135\uff0a\147\uff0a" +
    "\152\uff0a\240\uff0a\253\uff0a\260\uff0a\001\002\000\070\011" +
    "\ufe8f\015\ufe8f\020\ufe8f\055\ufe8f\110\ufe8f\130\ufe8f\134\ufe8f" +
    "\144\ufe8f\151\ufe8f\171\ufe8f\177\ufe8f\253\ufe8f\256\ufe8f\260" +
    "\321\263\ufe8f\264\ufe8f\265\ufe8f\266\ufe8f\267\ufe8f\270\ufe8f" +
    "\271\ufe8f\273\ufe8f\274\ufe8f\275\ufe8f\276\ufe8f\277\ufe8f\305" +
    "\ufe8f\001\002\000\070\011\ufe90\015\ufe90\020\ufe90\055\ufe90" +
    "\110\ufe90\130\ufe90\134\ufe90\144\ufe90\151\ufe90\171\ufe90\177" +
    "\ufe90\253\ufe90\256\ufe90\260\320\263\ufe90\264\ufe90\265\ufe90" +
    "\266\ufe90\267\ufe90\270\ufe90\271\ufe90\273\ufe90\274\ufe90\275" +
    "\ufe90\276\ufe90\277\ufe90\305\ufe90\001\002\000\154\002\ufe83" +
    "\011\ufe83\015\ufe83\016\ufe83\020\ufe83\041\ufe83\052\ufe83\055" +
    "\ufe83\060\ufe83\061\ufe83\074\ufe83\100\ufe83\101\ufe83\105\ufe83" +
    "\106\ufe83\110\ufe83\120\ufe83\130\ufe83\131\ufe83\133\ufe83\134" +
    "\ufe83\135\ufe83\144\ufe83\146\ufe83\147\ufe83\151\ufe83\152\ufe83" +
    "\163\ufe83\166\ufe83\171\ufe83\176\ufe83\177\ufe83\203\ufe83\230" +
    "\ufe83\240\ufe83\247\ufe83\250\ufe83\253\ufe83\256\ufe83\260\ufe83" +
    "\263\ufe83\264\ufe83\265\ufe83\266\ufe83\267\ufe83\270\ufe83\271" +
    "\ufe83\273\ufe83\274\ufe83\275\ufe83\276\ufe83\277\ufe83\305\ufe83" +
    "\001\002\000\154\002\ufe4e\011\ufe4e\015\ufe4e\016\ufe4e\020" +
    "\ufe4e\041\ufe4e\052\ufe4e\055\ufe4e\060\ufe4e\061\ufe4e\074\ufe4e" +
    "\100\ufe4e\101\ufe4e\105\ufe4e\106\ufe4e\110\ufe4e\120\ufe4e\130" +
    "\ufe4e\131\ufe4e\133\ufe4e\134\ufe4e\135\ufe4e\144\ufe4e\146\ufe4e" +
    "\147\ufe4e\151\ufe4e\152\ufe4e\163\ufe4e\166\ufe4e\171\ufe4e\176" +
    "\ufe4e\177\ufe4e\203\ufe4e\230\ufe4e\240\ufe4e\247\ufe4e\250\ufe4e" +
    "\253\ufe4e\256\ufe4e\260\ufe4e\263\ufe4e\264\ufe4e\265\ufe4e\266" +
    "\ufe4e\267\ufe4e\270\ufe4e\271\ufe4e\273\ufe4e\274\ufe4e\275\ufe4e" +
    "\276\ufe4e\277\ufe4e\305\ufe4e\001\002\000\016\002\ufe9c\135" +
    "\306\147\ufe9c\152\ufe9c\240\ufe9c\260\ufe9c\001\002\000\014" +
    "\002\uff0d\135\uff0d\152\uff0d\240\uff0d\260\uff0d\001\002\000" +
    "\062\026\ufeb6\027\ufeb6\063\ufeb6\066\ufeb6\107\ufeb6\125\ufeb6" +
    "\144\ufeb6\145\ufeb6\217\327\235\ufeb6\256\ufeb6\257\ufeb6\261" +
    "\331\265\ufeb6\266\ufeb6\272\ufeb6\274\ufeb6\277\ufeb6\301\ufeb6" +
    "\302\326\303\ufeb6\304\ufeb6\305\ufeb6\306\ufeb6\001\002\000" +
    "\062\026\ufeb6\027\ufeb6\063\ufeb6\066\ufeb6\107\ufeb6\125\ufeb6" +
    "\144\ufeb6\145\ufeb6\217\327\235\ufeb6\256\ufeb6\257\ufeb6\261" +
    "\331\265\ufeb6\266\ufeb6\272\ufeb6\274\ufeb6\277\ufeb6\301\ufeb6" +
    "\302\326\303\ufeb6\304\ufeb6\305\ufeb6\306\ufeb6\001\002\000" +
    "\064\002\ufeb9\026\ufeb9\027\ufeb9\063\ufeb9\066\ufeb9\107\ufeb9" +
    "\125\ufeb9\144\ufeb9\145\ufeb9\206\ufeb9\235\ufeb9\244\ufeb9\251" +
    "\ufeb9\256\ufeb9\257\ufeb9\265\ufeb9\266\ufeb9\272\ufeb9\274\ufeb9" +
    "\277\ufeb9\301\ufeb9\303\ufeb9\304\ufeb9\305\ufeb9\306\ufeb9\001" +
    "\002\000\064\002\ufeb8\026\ufeb8\027\ufeb8\063\ufeb8\066\ufeb8" +
    "\107\ufeb8\125\ufeb8\144\ufeb8\145\ufeb8\206\ufeb8\235\ufeb8\244" +
    "\ufeb8\251\ufeb8\256\ufeb8\257\ufeb8\265\ufeb8\266\ufeb8\272\ufeb8" +
    "\274\ufeb8\277\ufeb8\301\ufeb8\303\ufeb8\304\ufeb8\305\ufeb8\306" +
    "\ufeb8\001\002\000\054\026\132\027\124\063\145\066\112" +
    "\107\147\125\136\144\131\145\113\235\111\256\235\257" +
    "\126\265\143\266\125\272\154\274\135\277\240\301\106" +
    "\303\116\304\114\305\110\306\107\001\002\000\004\277" +
    "\333\001\002\000\006\253\334\262\335\001\002\000\010" +
    "\253\ufeb5\260\ufeb5\262\ufeb5\001\002\000\004\277\336\001" +
    "\002\000\064\002\ufeb7\026\ufeb7\027\ufeb7\063\ufeb7\066\ufeb7" +
    "\107\ufeb7\125\ufeb7\144\ufeb7\145\ufeb7\206\ufeb7\235\ufeb7\244" +
    "\ufeb7\251\ufeb7\256\ufeb7\257\ufeb7\265\ufeb7\266\ufeb7\272\ufeb7" +
    "\274\ufeb7\277\ufeb7\301\ufeb7\303\ufeb7\304\ufeb7\305\ufeb7\306" +
    "\ufeb7\001\002\000\010\253\ufeb4\260\ufeb4\262\ufeb4\001\002" +
    "\000\020\002\ufee5\100\ufee5\135\ufee5\152\ufee5\240\ufee5\253" +
    "\252\260\ufee5\001\002\000\054\026\132\027\124\063\145" +
    "\066\112\107\147\125\136\144\131\145\113\235\111\256" +
    "\235\257\126\265\143\266\125\272\154\274\135\277\240" +
    "\301\106\303\116\304\114\305\110\306\107\001\002\000" +
    "\020\002\ufee3\100\ufee3\135\ufee3\152\ufee3\240\ufee3\253\252" +
    "\260\ufee3\001\002\000\054\026\132\027\124\063\145\066" +
    "\112\107\147\125\136\144\131\145\113\235\111\256\235" +
    "\257\126\265\143\266\125\272\154\274\135\277\240\301" +
    "\106\303\116\304\114\305\110\306\107\001\002\000\020" +
    "\002\ufee4\100\ufee4\135\ufee4\152\ufee4\240\ufee4\253\252\260" +
    "\ufee4\001\002\000\004\260\345\001\002\000\014\002\uff13" +
    "\135\uff13\152\uff13\240\uff13\260\uff13\001\002\000\024\002" +
    "\ufeb0\105\ufeb0\106\ufeb0\135\ufeb0\147\ufeb0\152\ufeb0\240\ufeb0" +
    "\250\u0118\260\ufeb0\001\002\000\006\257\352\277\351\001" +
    "\002\000\054\002\ufec7\015\245\041\ufec7\101\ufec7\105\ufec7" +
    "\106\ufec7\120\ufec7\131\ufec7\133\ufec7\135\ufec7\147\ufec7\150" +
    "\ufec7\152\ufec7\176\ufec7\240\ufec7\243\ufec7\250\ufec7\253\ufec7" +
    "\260\ufec7\277\244\305\247\001\002\000\142\002\ufed3\004" +
    "\ufed3\015\ufed3\025\ufed3\030\ufed3\036\ufed3\041\ufed3\057\ufed3" +
    "\100\ufed3\101\ufed3\105\ufed3\106\ufed3\115\ufed3\120\ufed3\131" +
    "\ufed3\133\ufed3\134\ufed3\135\ufed3\140\ufed3\147\ufed3\150\ufed3" +
    "\152\ufed3\160\ufed3\161\ufed3\172\ufed3\173\ufed3\176\ufed3\202" +
    "\ufed3\206\ufed3\213\ufed3\216\ufed3\217\ufed3\225\ufed3\234\ufed3" +
    "\237\ufed3\240\ufed3\243\ufed3\244\ufed3\250\ufed3\251\ufed3\253" +
    "\ufed3\254\u0114\257\ufed3\260\ufed3\261\ufed3\277\ufed3\302\ufed3" +
    "\305\ufed3\001\002\000\012\206\uff1d\244\uff1d\251\013\257" +
    "\uff1d\001\002\000\042\002\ufecf\041\357\101\356\105\ufecf" +
    "\106\ufecf\120\361\131\ufebc\133\360\135\ufecf\147\ufecf\152" +
    "\ufecf\176\362\240\ufecf\250\ufecf\253\355\260\ufecf\001\002" +
    "\000\042\002\ufece\041\ufece\101\ufece\105\ufece\106\ufece\120" +
    "\ufece\131\ufece\133\ufece\135\ufece\147\ufece\152\ufece\176\ufece" +
    "\240\ufece\250\ufece\253\ufece\260\ufece\001\002\000\006\257" +
    "\352\277\351\001\002\000\006\131\ufeba\153\376\001\002" +
    "\000\004\131\u010b\001\002\000\012\012\u0105\131\ufeba\153" +
    "\376\207\u0107\001\002\000\004\131\ufebd\001\002\000\012" +
    "\012\377\131\ufeba\153\376\207\u0101\001\002\000\014\217" +
    "\327\257\ufeb6\261\331\277\ufeb6\302\326\001\002\000\004" +
    "\131\365\001\002\000\014\217\ufec5\257\ufec5\261\ufec5\277" +
    "\ufec5\302\ufec5\001\002\000\006\257\352\277\351\001\002" +
    "\000\046\002\ufecb\041\ufecb\101\ufecb\105\ufecb\106\ufecb\120" +
    "\ufecb\131\ufecb\133\ufecb\135\ufecb\147\ufecb\150\371\152\ufecb" +
    "\176\ufecb\240\ufecb\243\370\250\ufecb\253\ufecb\260\ufecb\001" +
    "\002\000\004\257\373\001\002\000\052\026\132\027\124" +
    "\063\145\066\112\107\147\125\136\144\131\145\113\235" +
    "\111\257\126\265\143\266\125\272\154\274\135\277\146" +
    "\301\106\303\116\304\114\305\110\306\107\001\002\000" +
    "\116\002\ufeca\011\202\020\175\041\ufeca\055\170\101\ufeca" +
    "\105\ufeca\106\ufeca\110\205\120\ufeca\130\200\131\ufeca\133" +
    "\ufeca\134\172\135\ufeca\144\162\147\ufeca\151\203\152\ufeca" +
    "\171\201\176\ufeca\177\176\240\ufeca\250\ufeca\253\ufeca\256" +
    "\165\260\ufeca\263\173\264\160\265\174\266\167\267\161" +
    "\270\164\271\177\273\163\274\166\275\171\276\204\001" +
    "\002\000\004\277\333\001\002\000\006\253\334\260\375" +
    "\001\002\000\042\002\ufec9\041\ufec9\101\ufec9\105\ufec9\106" +
    "\ufec9\120\ufec9\131\ufec9\133\ufec9\135\ufec9\147\ufec9\152\ufec9" +
    "\176\ufec9\240\ufec9\250\ufec9\253\ufec9\260\ufec9\001\002\000" +
    "\004\131\ufebb\001\002\000\004\131\u0104\001\002\000\004" +
    "\131\u0103\001\002\000\004\131\u0102\001\002\000\014\217" +
    "\ufec0\257\ufec0\261\ufec0\277\ufec0\302\ufec0\001\002\000\014" +
    "\217\ufec3\257\ufec3\261\ufec3\277\ufec3\302\ufec3\001\002\000" +
    "\014\217\ufebe\257\ufebe\261\ufebe\277\ufebe\302\ufebe\001\002" +
    "\000\004\131\u010a\001\002\000\004\131\u0109\001\002\000" +
    "\004\131\u0108\001\002\000\014\217\ufec1\257\ufec1\261\ufec1" +
    "\277\ufec1\302\ufec1\001\002\000\014\217\ufec4\257\ufec4\261" +
    "\ufec4\277\ufec4\302\ufec4\001\002\000\014\217\ufebf\257\ufebf" +
    "\261\ufebf\277\ufebf\302\ufebf\001\002\000\014\217\327\257" +
    "\ufeb6\261\331\277\ufeb6\302\326\001\002\000\006\257\352" +
    "\277\351\001\002\000\042\002\ufecc\041\ufecc\101\ufecc\105" +
    "\ufecc\106\ufecc\120\ufecc\131\ufecc\133\ufecc\135\ufecc\147\ufecc" +
    "\152\ufecc\176\ufecc\240\ufecc\250\ufecc\253\ufecc\260\ufecc\001" +
    "\002\000\004\131\u010f\001\002\000\014\217\ufec2\257\ufec2" +
    "\261\ufec2\277\ufec2\302\ufec2\001\002\000\042\002\ufecd\041" +
    "\ufecd\101\ufecd\105\ufecd\106\ufecd\120\ufecd\131\ufecd\133\ufecd" +
    "\135\ufecd\147\ufecd\152\ufecd\176\ufecd\240\ufecd\250\ufecd\253" +
    "\ufecd\260\ufecd\001\002\000\004\260\u0112\001\002\000\010" +
    "\015\245\277\244\305\247\001\002\000\046\002\ufec6\041" +
    "\ufec6\101\ufec6\105\ufec6\106\ufec6\120\ufec6\131\ufec6\133\ufec6" +
    "\135\ufec6\147\ufec6\150\ufec6\152\ufec6\176\ufec6\240\ufec6\243" +
    "\ufec6\250\ufec6\253\ufec6\260\ufec6\001\002\000\004\277\u0115" +
    "\001\002\000\140\002\ufed2\004\ufed2\015\ufed2\025\ufed2\030" +
    "\ufed2\036\ufed2\041\ufed2\057\ufed2\100\ufed2\101\ufed2\105\ufed2" +
    "\106\ufed2\115\ufed2\120\ufed2\131\ufed2\133\ufed2\134\ufed2\135" +
    "\ufed2\140\ufed2\147\ufed2\150\ufed2\152\ufed2\160\ufed2\161\ufed2" +
    "\172\ufed2\173\ufed2\176\ufed2\202\ufed2\206\ufed2\213\ufed2\216" +
    "\ufed2\217\ufed2\225\ufed2\234\ufed2\237\ufed2\240\ufed2\243\ufed2" +
    "\244\ufed2\250\ufed2\251\ufed2\253\ufed2\257\ufed2\260\ufed2\261" +
    "\ufed2\277\ufed2\302\ufed2\305\ufed2\001\002\000\046\002\ufec8" +
    "\041\ufec8\101\ufec8\105\ufec8\106\ufec8\120\ufec8\131\ufec8\133" +
    "\ufec8\135\ufec8\147\ufec8\150\ufec8\152\ufec8\176\ufec8\240\ufec8" +
    "\243\ufec8\250\ufec8\253\ufec8\260\ufec8\001\002\000\022\002" +
    "\ufeae\105\u011b\106\ufeae\135\ufeae\147\ufeae\152\ufeae\240\ufeae" +
    "\260\ufeae\001\002\000\052\026\132\027\124\063\145\066" +
    "\112\107\147\125\136\144\131\145\113\235\111\257\126" +
    "\265\143\266\125\272\154\274\135\277\146\301\106\303" +
    "\116\304\114\305\110\306\107\001\002\000\076\002\ufeb1" +
    "\011\202\020\175\055\170\105\ufeb1\106\ufeb1\110\205\130" +
    "\200\134\172\135\ufeb1\144\162\147\ufeb1\151\203\152\ufeb1" +
    "\171\201\177\176\240\ufeb1\256\165\260\ufeb1\263\173\264" +
    "\160\265\174\266\167\267\161\270\164\271\177\273\163" +
    "\274\166\275\171\276\204\001\002\000\020\002\ufeac\106" +
    "\u011f\135\ufeac\147\ufeac\152\ufeac\240\ufeac\260\ufeac\001\002" +
    "\000\004\024\u011c\001\002\000\052\026\132\027\124\063" +
    "\145\066\112\107\147\125\136\144\131\145\113\235\111" +
    "\257\126\265\143\266\125\272\154\274\135\277\146\301" +
    "\106\303\116\304\114\305\110\306\107\001\002\000\022" +
    "\002\ufeaf\106\ufeaf\135\ufeaf\147\ufeaf\152\ufeaf\240\ufeaf\253" +
    "\215\260\ufeaf\001\002\000\016\002\ufeaa\135\ufeaa\147\ufeaa" +
    "\152\266\240\ufeaa\260\ufeaa\001\002\000\052\026\132\027" +
    "\124\063\145\066\112\107\147\125\136\144\131\145\113" +
    "\235\111\257\126\265\143\266\125\272\154\274\135\277" +
    "\146\301\106\303\116\304\114\305\110\306\107\001\002" +
    "\000\072\002\ufead\011\202\020\175\055\170\110\205\130" +
    "\200\134\172\135\ufead\144\162\147\ufead\151\203\152\ufead" +
    "\171\201\177\176\240\ufead\256\165\260\ufead\263\173\264" +
    "\160\265\174\266\167\267\161\270\164\271\177\273\163" +
    "\274\166\275\171\276\204\001\002\000\016\002\ufe9c\135" +
    "\306\147\ufe9c\152\ufe9c\240\ufe9c\260\ufe9c\001\002\000\014" +
    "\002\ufee6\135\ufee6\152\ufee6\240\ufee6\260\ufee6\001\002\000" +
    "\014\006\u0131\054\u0132\206\uff10\244\uff10\257\uff10\001\002" +
    "\000\004\024\u0129\001\002\000\052\026\132\027\124\063" +
    "\145\066\112\107\147\125\136\144\131\145\113\235\111" +
    "\257\126\265\143\266\125\272\154\274\135\277\146\301" +
    "\106\303\116\304\114\305\110\306\107\001\002\000\010" +
    "\206\230\244\231\257\227\001\002\000\014\002\uff11\135" +
    "\uff11\152\uff11\240\uff11\260\uff11\001\002\000\062\002\uff17" +
    "\011\202\020\175\055\170\110\205\130\200\134\172\144" +
    "\162\151\203\171\201\177\176\256\165\260\uff17\263\173" +
    "\264\160\265\174\266\167\267\161\270\164\271\177\273" +
    "\163\274\166\275\171\276\204\001\002\000\052\026\132" +
    "\027\124\063\145\066\112\107\147\125\136\144\131\145" +
    "\113\235\111\257\126\265\143\266\125\272\154\274\135" +
    "\277\146\301\106\303\116\304\114\305\110\306\107\001" +
    "\002\000\014\002\ufe9f\135\u012d\147\u012c\253\302\260\ufe9f" +
    "\001\002\000\006\002\uff18\260\uff18\001\002\000\052\026" +
    "\132\027\124\063\145\066\112\107\147\125\136\144\131" +
    "\145\113\235\111\257\126\265\143\266\125\272\154\274" +
    "\135\277\146\301\106\303\116\304\114\305\110\306\107" +
    "\001\002\000\052\026\132\027\124\063\145\066\112\107" +
    "\147\125\136\144\131\145\113\235\111\257\126\265\143" +
    "\266\125\272\154\274\135\277\146\301\106\303\116\304" +
    "\114\305\110\306\107\001\002\000\064\002\ufe9f\011\202" +
    "\020\175\055\170\110\205\130\200\134\172\144\162\147" +
    "\u012c\151\203\171\201\177\176\256\165\260\ufe9f\263\173" +
    "\264\160\265\174\266\167\267\161\270\164\271\177\273" +
    "\163\274\166\275\171\276\204\001\002\000\006\002\uff16" +
    "\260\uff16\001\002\000\062\002\ufea0\011\202\020\175\055" +
    "\170\110\205\130\200\134\172\144\162\151\203\171\201" +
    "\177\176\256\165\260\ufea0\263\173\264\160\265\174\266" +
    "\167\267\161\270\164\271\177\273\163\274\166\275\171" +
    "\276\204\001\002\000\010\206\uff0e\244\uff0e\257\uff0e\001" +
    "\002\000\010\206\uff0f\244\uff0f\257\uff0f\001\002\000\154" +
    "\002\ufe38\011\ufe38\015\ufe38\016\ufe38\020\ufe38\041\ufe38\052" +
    "\ufe38\055\ufe38\060\ufe38\061\ufe38\074\ufe38\100\ufe38\101\ufe38" +
    "\105\ufe38\106\ufe38\110\ufe38\120\ufe38\130\ufe38\131\ufe38\133" +
    "\ufe38\134\ufe38\135\ufe38\144\ufe38\146\ufe38\147\ufe38\151\ufe38" +
    "\152\ufe38\163\ufe38\166\ufe38\171\ufe38\176\ufe38\177\ufe38\203" +
    "\ufe38\230\ufe38\240\ufe38\247\ufe38\250\ufe38\253\ufe38\256\ufe38" +
    "\260\ufe38\263\ufe38\264\ufe38\265\ufe38\266\ufe38\267\ufe38\270" +
    "\ufe38\271\ufe38\273\ufe38\274\ufe38\275\ufe38\276\ufe38\277\ufe38" +
    "\305\ufe38\001\002\000\052\026\132\027\124\063\145\066" +
    "\112\107\147\125\136\144\131\145\113\235\111\257\126" +
    "\265\143\266\125\272\154\274\135\277\146\301\106\303" +
    "\116\304\114\305\110\306\107\001\002\000\154\002\ufe47" +
    "\011\ufe47\015\ufe47\016\ufe47\020\ufe47\041\ufe47\052\ufe47\055" +
    "\170\060\ufe47\061\ufe47\074\ufe47\100\ufe47\101\ufe47\105\ufe47" +
    "\106\ufe47\110\ufe47\120\ufe47\130\ufe47\131\ufe47\133\ufe47\134" +
    "\ufe47\135\ufe47\144\ufe47\146\ufe47\147\ufe47\151\ufe47\152\ufe47" +
    "\163\ufe47\166\ufe47\171\ufe47\176\ufe47\177\ufe47\203\ufe47\230" +
    "\ufe47\240\ufe47\247\ufe47\250\ufe47\253\ufe47\256\165\260\ufe47" +
    "\263\173\264\160\265\174\266\167\267\161\270\164\271" +
    "\177\273\ufe47\274\ufe47\275\ufe47\276\ufe47\277\ufe47\305\ufe47" +
    "\001\002\000\154\002\ufe49\011\ufe49\015\ufe49\016\ufe49\020" +
    "\ufe49\041\ufe49\052\ufe49\055\170\060\ufe49\061\ufe49\074\ufe49" +
    "\100\ufe49\101\ufe49\105\ufe49\106\ufe49\110\ufe49\120\ufe49\130" +
    "\ufe49\131\ufe49\133\ufe49\134\ufe49\135\ufe49\144\ufe49\146\ufe49" +
    "\147\ufe49\151\ufe49\152\ufe49\163\ufe49\166\ufe49\171\ufe49\176" +
    "\ufe49\177\ufe49\203\ufe49\230\ufe49\240\ufe49\247\ufe49\250\ufe49" +
    "\253\ufe49\256\165\260\ufe49\263\173\264\160\265\174\266" +
    "\167\267\161\270\164\271\177\273\ufe49\274\ufe49\275\ufe49" +
    "\276\ufe49\277\ufe49\305\ufe49\001\002\000\154\002\ufe35\011" +
    "\202\015\ufe35\016\ufe35\020\175\041\ufe35\052\ufe35\055\170" +
    "\060\ufe35\061\ufe35\074\ufe35\100\ufe35\101\ufe35\105\ufe35\106" +
    "\ufe35\110\205\120\ufe35\130\200\131\ufe35\133\ufe35\134\172" +
    "\135\ufe35\144\162\146\ufe35\147\ufe35\151\ufe35\152\ufe35\163" +
    "\ufe35\166\ufe35\171\201\176\ufe35\177\176\203\ufe35\230\ufe35" +
    "\240\ufe35\247\ufe35\250\ufe35\253\ufe35\256\165\260\ufe35\263" +
    "\173\264\160\265\174\266\167\267\161\270\164\271\177" +
    "\273\163\274\166\275\171\276\204\277\ufe35\305\ufe35\001" +
    "\002\000\154\002\ufe36\011\ufe36\015\ufe36\016\ufe36\020\175" +
    "\041\ufe36\052\ufe36\055\170\060\ufe36\061\ufe36\074\ufe36\100" +
    "\ufe36\101\ufe36\105\ufe36\106\ufe36\110\205\120\ufe36\130\200" +
    "\131\ufe36\133\ufe36\134\172\135\ufe36\144\162\146\ufe36\147" +
    "\ufe36\151\ufe36\152\ufe36\163\ufe36\166\ufe36\171\201\176\ufe36" +
    "\177\176\203\ufe36\230\ufe36\240\ufe36\247\ufe36\250\ufe36\253" +
    "\ufe36\256\165\260\ufe36\263\173\264\160\265\174\266\167" +
    "\267\161\270\164\271\177\273\163\274\166\275\171\276" +
    "\204\277\ufe36\305\ufe36\001\002\000\154\002\ufe44\011\ufe44" +
    "\015\ufe44\016\ufe44\020\ufe44\041\ufe44\052\ufe44\055\170\060" +
    "\ufe44\061\ufe44\074\ufe44\100\ufe44\101\ufe44\105\ufe44\106\ufe44" +
    "\110\ufe44\120\ufe44\130\ufe44\131\ufe44\133\ufe44\134\ufe44\135" +
    "\ufe44\144\ufe44\146\ufe44\147\ufe44\151\ufe44\152\ufe44\163\ufe44" +
    "\166\ufe44\171\ufe44\176\ufe44\177\ufe44\203\ufe44\230\ufe44\240" +
    "\ufe44\247\ufe44\250\ufe44\253\ufe44\256\165\260\ufe44\263\173" +
    "\264\160\265\174\266\167\267\161\270\164\271\177\273" +
    "\163\274\ufe44\275\171\276\204\277\ufe44\305\ufe44\001\002" +
    "\000\154\002\ufe56\011\ufe56\015\ufe56\016\ufe56\020\ufe56\041" +
    "\ufe56\052\ufe56\055\ufe56\060\ufe56\061\ufe56\074\ufe56\100\ufe56" +
    "\101\ufe56\105\ufe56\106\ufe56\110\ufe56\120\ufe56\130\ufe56\131" +
    "\ufe56\133\ufe56\134\ufe56\135\ufe56\144\ufe56\146\ufe56\147\ufe56" +
    "\151\ufe56\152\ufe56\163\ufe56\166\ufe56\171\ufe56\176\ufe56\177" +
    "\ufe56\203\ufe56\230\ufe56\240\ufe56\247\ufe56\250\ufe56\253\ufe56" +
    "\256\ufe56\260\ufe56\263\ufe56\264\ufe56\265\ufe56\266\ufe56\267" +
    "\ufe56\270\ufe56\271\ufe56\273\ufe56\274\ufe56\275\ufe56\276\ufe56" +
    "\277\ufe56\305\ufe56\001\002\000\004\145\u013c\001\002\000" +
    "\154\002\ufe55\011\ufe55\015\ufe55\016\ufe55\020\ufe55\041\ufe55" +
    "\052\ufe55\055\ufe55\060\ufe55\061\ufe55\074\ufe55\100\ufe55\101" +
    "\ufe55\105\ufe55\106\ufe55\110\ufe55\120\ufe55\130\ufe55\131\ufe55" +
    "\133\ufe55\134\ufe55\135\ufe55\144\ufe55\146\ufe55\147\ufe55\151" +
    "\ufe55\152\ufe55\163\ufe55\166\ufe55\171\ufe55\176\ufe55\177\ufe55" +
    "\203\ufe55\230\ufe55\240\ufe55\247\ufe55\250\ufe55\253\ufe55\256" +
    "\ufe55\260\ufe55\263\ufe55\264\ufe55\265\ufe55\266\ufe55\267\ufe55" +
    "\270\ufe55\271\ufe55\273\ufe55\274\ufe55\275\ufe55\276\ufe55\277" +
    "\ufe55\305\ufe55\001\002\000\154\002\ufe69\011\ufe69\015\ufe69" +
    "\016\ufe69\020\ufe69\041\ufe69\052\ufe69\055\ufe69\060\ufe69\061" +
    "\ufe69\074\ufe69\100\ufe69\101\ufe69\105\ufe69\106\ufe69\110\ufe69" +
    "\120\ufe69\130\ufe69\131\ufe69\133\ufe69\134\ufe69\135\ufe69\144" +
    "\ufe69\146\ufe69\147\ufe69\151\ufe69\152\ufe69\163\ufe69\166\ufe69" +
    "\171\ufe69\176\ufe69\177\ufe69\203\ufe69\230\ufe69\240\ufe69\247" +
    "\ufe69\250\ufe69\253\ufe69\256\ufe69\260\ufe69\263\ufe69\264\ufe69" +
    "\265\ufe69\266\ufe69\267\ufe69\270\ufe69\271\ufe69\273\ufe69\274" +
    "\ufe69\275\ufe69\276\ufe69\277\ufe69\305\ufe69\001\002\000\154" +
    "\002\ufe45\011\ufe45\015\ufe45\016\ufe45\020\ufe45\041\ufe45\052" +
    "\ufe45\055\170\060\ufe45\061\ufe45\074\ufe45\100\ufe45\101\ufe45" +
    "\105\ufe45\106\ufe45\110\ufe45\120\ufe45\130\ufe45\131\ufe45\133" +
    "\ufe45\134\ufe45\135\ufe45\144\ufe45\146\ufe45\147\ufe45\151\ufe45" +
    "\152\ufe45\163\ufe45\166\ufe45\171\ufe45\176\ufe45\177\ufe45\203" +
    "\ufe45\230\ufe45\240\ufe45\247\ufe45\250\ufe45\253\ufe45\256\165" +
    "\260\ufe45\263\173\264\160\265\174\266\167\267\161\270" +
    "\164\271\177\273\163\274\ufe45\275\171\276\204\277\ufe45" +
    "\305\ufe45\001\002\000\056\011\u0144\020\ufe8f\055\ufe8f\110" +
    "\ufe8f\130\ufe8f\134\ufe8f\144\ufe8f\151\ufe8f\171\ufe8f\177\ufe8f" +
    "\256\ufe8f\263\ufe8f\264\ufe8f\265\ufe8f\266\ufe8f\267\ufe8f\270" +
    "\ufe8f\271\ufe8f\273\ufe8f\274\ufe8f\275\ufe8f\276\ufe8f\001\002" +
    "\000\056\011\202\020\175\055\170\110\205\130\200\134" +
    "\172\144\162\151\203\171\201\177\176\256\165\263\173" +
    "\264\160\265\174\266\167\267\161\270\164\271\177\273" +
    "\163\274\166\275\171\276\204\001\002\000\056\011\u0142" +
    "\020\ufe90\055\ufe90\110\ufe90\130\ufe90\134\ufe90\144\ufe90\151" +
    "\ufe90\171\ufe90\177\ufe90\256\ufe90\263\ufe90\264\ufe90\265\ufe90" +
    "\266\ufe90\267\ufe90\270\ufe90\271\ufe90\273\ufe90\274\ufe90\275" +
    "\ufe90\276\ufe90\001\002\000\052\026\132\027\124\063\145" +
    "\066\112\107\147\125\136\144\131\145\113\235\111\257" +
    "\126\265\143\266\125\272\154\274\135\277\146\301\106" +
    "\303\116\304\114\305\110\306\107\001\002\000\154\002" +
    "\ufe40\011\ufe40\015\ufe40\016\ufe40\020\175\041\ufe40\052\ufe40" +
    "\055\170\060\ufe40\061\ufe40\074\ufe40\100\ufe40\101\ufe40\105" +
    "\ufe40\106\ufe40\110\205\120\ufe40\130\200\131\ufe40\133\ufe40" +
    "\134\172\135\ufe40\144\162\146\ufe40\147\ufe40\151\ufe40\152" +
    "\ufe40\163\ufe40\166\ufe40\171\201\176\ufe40\177\176\203\ufe40" +
    "\230\ufe40\240\ufe40\247\ufe40\250\ufe40\253\ufe40\256\165\260" +
    "\ufe40\263\173\264\160\265\174\266\167\267\161\270\164" +
    "\271\177\273\163\274\166\275\171\276\204\277\ufe40\305" +
    "\ufe40\001\002\000\052\026\132\027\124\063\145\066\112" +
    "\107\147\125\136\144\131\145\113\235\111\257\126\265" +
    "\143\266\125\272\154\274\135\277\146\301\106\303\116" +
    "\304\114\305\110\306\107\001\002\000\154\002\ufe3f\011" +
    "\ufe3f\015\ufe3f\016\ufe3f\020\175\041\ufe3f\052\ufe3f\055\170" +
    "\060\ufe3f\061\ufe3f\074\ufe3f\100\ufe3f\101\ufe3f\105\ufe3f\106" +
    "\ufe3f\110\205\120\ufe3f\130\200\131\ufe3f\133\ufe3f\134\172" +
    "\135\ufe3f\144\162\146\ufe3f\147\ufe3f\151\ufe3f\152\ufe3f\163" +
    "\ufe3f\166\ufe3f\171\201\176\ufe3f\177\176\203\ufe3f\230\ufe3f" +
    "\240\ufe3f\247\ufe3f\250\ufe3f\253\ufe3f\256\165\260\ufe3f\263" +
    "\173\264\160\265\174\266\167\267\161\270\164\271\177" +
    "\273\163\274\166\275\171\276\204\277\ufe3f\305\ufe3f\001" +
    "\002\000\052\026\132\027\124\063\145\066\112\107\147" +
    "\125\136\144\131\145\113\235\111\257\126\265\143\266" +
    "\125\272\154\274\135\277\146\301\106\303\116\304\114" +
    "\305\110\306\107\001\002\000\154\002\ufe6d\011\ufe6d\015" +
    "\ufe6d\016\ufe6d\020\ufe6d\041\ufe6d\052\ufe6d\055\170\060\ufe6d" +
    "\061\ufe6d\074\ufe6d\100\ufe6d\101\ufe6d\105\ufe6d\106\ufe6d\110" +
    "\ufe6d\120\ufe6d\130\ufe6d\131\ufe6d\133\ufe6d\134\ufe6d\135\ufe6d" +
    "\144\ufe6d\146\ufe6d\147\ufe6d\151\ufe6d\152\ufe6d\163\ufe6d\166" +
    "\ufe6d\171\ufe6d\176\ufe6d\177\ufe6d\203\ufe6d\230\ufe6d\240\ufe6d" +
    "\247\ufe6d\250\ufe6d\253\ufe6d\256\165\260\ufe6d\263\173\264" +
    "\160\265\ufe6d\266\ufe6d\267\161\270\164\271\177\273\ufe6d" +
    "\274\ufe6d\275\ufe6d\276\ufe6d\277\ufe6d\305\ufe6d\001\002\000" +
    "\060\011\202\020\175\055\170\110\205\130\200\134\172" +
    "\144\162\151\203\171\201\177\176\256\165\263\173\264" +
    "\160\265\174\266\167\267\161\270\164\271\177\273\163" +
    "\274\166\275\171\276\204\277\u0149\001\002\000\154\002" +
    "\ufe66\011\ufe66\015\ufe66\016\ufe66\020\ufe66\041\ufe66\052\ufe66" +
    "\055\ufe66\060\ufe66\061\ufe66\074\ufe66\100\ufe66\101\ufe66\105" +
    "\ufe66\106\ufe66\110\ufe66\120\ufe66\130\ufe66\131\ufe66\133\ufe66" +
    "\134\ufe66\135\ufe66\144\ufe66\146\ufe66\147\ufe66\151\ufe66\152" +
    "\ufe66\163\ufe66\166\ufe66\171\ufe66\176\ufe66\177\ufe66\203\ufe66" +
    "\230\ufe66\240\ufe66\247\ufe66\250\ufe66\253\ufe66\256\ufe66\260" +
    "\ufe66\263\ufe66\264\ufe66\265\ufe66\266\ufe66\267\ufe66\270\ufe66" +
    "\271\ufe66\273\ufe66\274\ufe66\275\ufe66\276\ufe66\277\ufe66\305" +
    "\ufe66\001\002\000\052\026\132\027\124\063\145\066\112" +
    "\107\147\125\136\144\131\145\113\235\111\257\126\265" +
    "\143\266\125\272\154\274\135\277\146\301\106\303\116" +
    "\304\114\305\110\306\107\001\002\000\154\002\ufe67\011" +
    "\ufe67\015\ufe67\016\ufe67\020\ufe67\041\ufe67\052\ufe67\055\170" +
    "\060\ufe67\061\ufe67\074\ufe67\100\ufe67\101\ufe67\105\ufe67\106" +
    "\ufe67\110\ufe67\120\ufe67\130\ufe67\131\ufe67\133\ufe67\134\ufe67" +
    "\135\ufe67\144\ufe67\146\ufe67\147\ufe67\151\ufe67\152\ufe67\163" +
    "\ufe67\166\ufe67\171\ufe67\176\ufe67\177\ufe67\203\ufe67\230\ufe67" +
    "\240\ufe67\247\ufe67\250\ufe67\253\ufe67\256\165\260\ufe67\263" +
    "\173\264\160\265\ufe67\266\ufe67\267\161\270\164\271\177" +
    "\273\ufe67\274\ufe67\275\ufe67\276\ufe67\277\ufe67\305\ufe67\001" +
    "\002\000\154\002\ufe70\011\ufe70\015\ufe70\016\ufe70\020\ufe70" +
    "\041\ufe70\052\ufe70\055\ufe70\060\ufe70\061\ufe70\074\ufe70\100" +
    "\ufe70\101\ufe70\105\ufe70\106\ufe70\110\ufe70\120\ufe70\130\ufe70" +
    "\131\ufe70\133\ufe70\134\ufe70\135\ufe70\144\ufe70\146\ufe70\147" +
    "\ufe70\151\ufe70\152\ufe70\163\ufe70\166\ufe70\171\ufe70\176\ufe70" +
    "\177\ufe70\203\ufe70\230\ufe70\240\ufe70\247\ufe70\250\ufe70\253" +
    "\ufe70\256\ufe70\260\ufe70\263\ufe70\264\ufe70\265\ufe70\266\ufe70" +
    "\267\161\270\164\271\177\273\ufe70\274\ufe70\275\ufe70\276" +
    "\ufe70\277\ufe70\305\ufe70\001\002\000\154\002\ufe46\011\ufe46" +
    "\015\ufe46\016\ufe46\020\ufe46\041\ufe46\052\ufe46\055\170\060" +
    "\ufe46\061\ufe46\074\ufe46\100\ufe46\101\ufe46\105\ufe46\106\ufe46" +
    "\110\ufe46\120\ufe46\130\ufe46\131\ufe46\133\ufe46\134\ufe46\135" +
    "\ufe46\144\ufe46\146\ufe46\147\ufe46\151\ufe46\152\ufe46\163\ufe46" +
    "\166\ufe46\171\ufe46\176\ufe46\177\ufe46\203\ufe46\230\ufe46\240" +
    "\ufe46\247\ufe46\250\ufe46\253\ufe46\256\165\260\ufe46\263\173" +
    "\264\160\265\174\266\167\267\161\270\164\271\177\273" +
    "\163\274\ufe46\275\171\276\204\277\ufe46\305\ufe46\001\002" +
    "\000\052\026\132\027\124\063\145\066\112\107\147\125" +
    "\136\144\131\145\113\235\111\257\126\265\143\266\125" +
    "\272\154\274\135\277\146\301\106\303\116\304\114\305" +
    "\110\306\107\001\002\000\052\026\132\027\124\063\145" +
    "\066\112\107\147\125\136\144\131\145\113\235\111\257" +
    "\126\265\143\266\125\272\154\274\135\277\146\301\106" +
    "\303\116\304\114\305\110\306\107\001\002\000\154\002" +
    "\ufe48\011\ufe48\015\ufe48\016\ufe48\020\ufe48\041\ufe48\052\ufe48" +
    "\055\170\060\ufe48\061\ufe48\074\ufe48\100\ufe48\101\ufe48\105" +
    "\ufe48\106\ufe48\110\ufe48\120\ufe48\130\ufe48\131\ufe48\133\ufe48" +
    "\134\ufe48\135\ufe48\144\ufe48\146\ufe48\147\ufe48\151\ufe48\152" +
    "\ufe48\163\ufe48\166\ufe48\171\ufe48\176\ufe48\177\ufe48\203\ufe48" +
    "\230\ufe48\240\ufe48\247\ufe48\250\ufe48\253\ufe48\256\165\260" +
    "\ufe48\263\173\264\160\265\174\266\167\267\161\270\164" +
    "\271\177\273\ufe48\274\ufe48\275\ufe48\276\ufe48\277\ufe48\305" +
    "\ufe48\001\002\000\154\002\ufe4a\011\ufe4a\015\ufe4a\016\ufe4a" +
    "\020\ufe4a\041\ufe4a\052\ufe4a\055\170\060\ufe4a\061\ufe4a\074" +
    "\ufe4a\100\ufe4a\101\ufe4a\105\ufe4a\106\ufe4a\110\ufe4a\120\ufe4a" +
    "\130\ufe4a\131\ufe4a\133\ufe4a\134\ufe4a\135\ufe4a\144\ufe4a\146" +
    "\ufe4a\147\ufe4a\151\ufe4a\152\ufe4a\163\ufe4a\166\ufe4a\171\ufe4a" +
    "\176\ufe4a\177\ufe4a\203\ufe4a\230\ufe4a\240\ufe4a\247\ufe4a\250" +
    "\ufe4a\253\ufe4a\256\165\260\ufe4a\263\173\264\160\265\174" +
    "\266\167\267\161\270\164\271\177\273\ufe4a\274\ufe4a\275" +
    "\ufe4a\276\ufe4a\277\ufe4a\305\ufe4a\001\002\000\154\002\ufe4b" +
    "\011\ufe4b\015\ufe4b\016\ufe4b\020\ufe4b\041\ufe4b\052\ufe4b\055" +
    "\170\060\ufe4b\061\ufe4b\074\ufe4b\100\ufe4b\101\ufe4b\105\ufe4b" +
    "\106\ufe4b\110\ufe4b\120\ufe4b\130\ufe4b\131\ufe4b\133\ufe4b\134" +
    "\ufe4b\135\ufe4b\144\ufe4b\146\ufe4b\147\ufe4b\151\ufe4b\152\ufe4b" +
    "\163\ufe4b\166\ufe4b\171\ufe4b\176\ufe4b\177\ufe4b\203\ufe4b\230" +
    "\ufe4b\240\ufe4b\247\ufe4b\250\ufe4b\253\ufe4b\256\165\260\ufe4b" +
    "\263\173\264\160\265\174\266\167\267\161\270\164\271" +
    "\177\273\ufe4b\274\ufe4b\275\ufe4b\276\ufe4b\277\ufe4b\305\ufe4b" +
    "\001\002\000\154\002\ufe6e\011\ufe6e\015\ufe6e\016\ufe6e\020" +
    "\ufe6e\041\ufe6e\052\ufe6e\055\ufe6e\060\ufe6e\061\ufe6e\074\ufe6e" +
    "\100\ufe6e\101\ufe6e\105\ufe6e\106\ufe6e\110\ufe6e\120\ufe6e\130" +
    "\ufe6e\131\ufe6e\133\ufe6e\134\ufe6e\135\ufe6e\144\ufe6e\146\ufe6e" +
    "\147\ufe6e\151\ufe6e\152\ufe6e\163\ufe6e\166\ufe6e\171\ufe6e\176" +
    "\ufe6e\177\ufe6e\203\ufe6e\230\ufe6e\240\ufe6e\247\ufe6e\250\ufe6e" +
    "\253\ufe6e\256\ufe6e\260\ufe6e\263\ufe6e\264\ufe6e\265\ufe6e\266" +
    "\ufe6e\267\161\270\164\271\177\273\ufe6e\274\ufe6e\275\ufe6e" +
    "\276\ufe6e\277\ufe6e\305\ufe6e\001\002\000\052\026\132\027" +
    "\124\063\145\066\112\107\147\125\136\144\131\145\113" +
    "\235\111\257\126\265\143\266\125\272\154\274\135\277" +
    "\146\301\106\303\116\304\114\305\110\306\107\001\002" +
    "\000\154\002\ufe6c\011\ufe6c\015\ufe6c\016\ufe6c\020\ufe6c\041" +
    "\ufe6c\052\ufe6c\055\170\060\ufe6c\061\ufe6c\074\ufe6c\100\ufe6c" +
    "\101\ufe6c\105\ufe6c\106\ufe6c\110\ufe6c\120\ufe6c\130\ufe6c\131" +
    "\ufe6c\133\ufe6c\134\ufe6c\135\ufe6c\144\ufe6c\146\ufe6c\147\ufe6c" +
    "\151\ufe6c\152\ufe6c\163\ufe6c\166\ufe6c\171\ufe6c\176\ufe6c\177" +
    "\ufe6c\203\ufe6c\230\ufe6c\240\ufe6c\247\ufe6c\250\ufe6c\253\ufe6c" +
    "\256\165\260\ufe6c\263\173\264\160\265\ufe6c\266\ufe6c\267" +
    "\161\270\164\271\177\273\ufe6c\274\ufe6c\275\ufe6c\276\ufe6c" +
    "\277\ufe6c\305\ufe6c\001\002\000\060\011\202\020\175\055" +
    "\170\110\205\130\200\134\172\144\162\151\203\171\201" +
    "\177\176\256\165\263\173\264\160\265\174\266\167\267" +
    "\161\270\164\271\177\273\163\274\166\275\171\276\204" +
    "\277\u0157\001\002\000\154\002\ufe65\011\ufe65\015\ufe65\016" +
    "\ufe65\020\ufe65\041\ufe65\052\ufe65\055\ufe65\060\ufe65\061\ufe65" +
    "\074\ufe65\100\ufe65\101\ufe65\105\ufe65\106\ufe65\110\ufe65\120" +
    "\ufe65\130\ufe65\131\ufe65\133\ufe65\134\ufe65\135\ufe65\144\ufe65" +
    "\146\ufe65\147\ufe65\151\ufe65\152\ufe65\163\ufe65\166\ufe65\171" +
    "\ufe65\176\ufe65\177\ufe65\203\ufe65\230\ufe65\240\ufe65\247\ufe65" +
    "\250\ufe65\253\ufe65\256\ufe65\260\ufe65\263\ufe65\264\ufe65\265" +
    "\ufe65\266\ufe65\267\ufe65\270\ufe65\271\ufe65\273\ufe65\274\ufe65" +
    "\275\ufe65\276\ufe65\277\ufe65\305\ufe65\001\002\000\052\026" +
    "\132\027\124\063\145\066\112\107\147\125\136\144\131" +
    "\145\113\235\111\257\126\265\143\266\125\272\154\274" +
    "\135\277\146\301\106\303\116\304\114\305\110\306\107" +
    "\001\002\000\154\002\ufe4c\011\ufe4c\015\ufe4c\016\ufe4c\020" +
    "\ufe4c\041\ufe4c\052\ufe4c\055\170\060\ufe4c\061\ufe4c\074\ufe4c" +
    "\100\ufe4c\101\ufe4c\105\ufe4c\106\ufe4c\110\ufe4c\120\ufe4c\130" +
    "\ufe4c\131\ufe4c\133\ufe4c\134\ufe4c\135\ufe4c\144\ufe4c\146\ufe4c" +
    "\147\ufe4c\151\ufe4c\152\ufe4c\163\ufe4c\166\ufe4c\171\ufe4c\176" +
    "\ufe4c\177\ufe4c\203\ufe4c\230\ufe4c\240\ufe4c\247\ufe4c\250\ufe4c" +
    "\253\ufe4c\256\165\260\ufe4c\263\173\264\160\265\174\266" +
    "\167\267\161\270\164\271\177\273\ufe4c\274\ufe4c\275\ufe4c" +
    "\276\ufe4c\277\ufe4c\305\ufe4c\001\002\000\154\002\ufe71\011" +
    "\ufe71\015\ufe71\016\ufe71\020\ufe71\041\ufe71\052\ufe71\055\ufe71" +
    "\060\ufe71\061\ufe71\074\ufe71\100\ufe71\101\ufe71\105\ufe71\106" +
    "\ufe71\110\ufe71\120\ufe71\130\ufe71\131\ufe71\133\ufe71\134\ufe71" +
    "\135\ufe71\144\ufe71\146\ufe71\147\ufe71\151\ufe71\152\ufe71\163" +
    "\ufe71\166\ufe71\171\ufe71\176\ufe71\177\ufe71\203\ufe71\230\ufe71" +
    "\240\ufe71\247\ufe71\250\ufe71\253\ufe71\256\ufe71\260\ufe71\263" +
    "\ufe71\264\ufe71\265\ufe71\266\ufe71\267\161\270\164\271\177" +
    "\273\ufe71\274\ufe71\275\ufe71\276\ufe71\277\ufe71\305\ufe71\001" +
    "\002\000\154\002\ufe6a\011\ufe6a\015\ufe6a\016\ufe6a\020\ufe6a" +
    "\041\ufe6a\052\ufe6a\055\ufe6a\060\ufe6a\061\ufe6a\074\ufe6a\100" +
    "\ufe6a\101\ufe6a\105\ufe6a\106\ufe6a\110\ufe6a\120\ufe6a\130\ufe6a" +
    "\131\ufe6a\133\ufe6a\134\ufe6a\135\ufe6a\144\ufe6a\146\ufe6a\147" +
    "\ufe6a\151\ufe6a\152\ufe6a\163\ufe6a\166\ufe6a\171\ufe6a\176\ufe6a" +
    "\177\ufe6a\203\ufe6a\230\ufe6a\240\ufe6a\247\ufe6a\250\ufe6a\253" +
    "\ufe6a\256\ufe6a\260\ufe6a\263\ufe6a\264\ufe6a\265\ufe6a\266\ufe6a" +
    "\267\ufe6a\270\ufe6a\271\ufe6a\273\ufe6a\274\ufe6a\275\ufe6a\276" +
    "\ufe6a\277\ufe6a\305\ufe6a\001\002\000\154\002\ufe4d\011\ufe4d" +
    "\015\ufe4d\016\ufe4d\020\ufe4d\041\ufe4d\052\ufe4d\055\170\060" +
    "\ufe4d\061\ufe4d\074\ufe4d\100\ufe4d\101\ufe4d\105\ufe4d\106\ufe4d" +
    "\110\ufe4d\120\ufe4d\130\ufe4d\131\ufe4d\133\ufe4d\134\ufe4d\135" +
    "\ufe4d\144\ufe4d\146\ufe4d\147\ufe4d\151\ufe4d\152\ufe4d\163\ufe4d" +
    "\166\ufe4d\171\ufe4d\176\ufe4d\177\ufe4d\203\ufe4d\230\ufe4d\240" +
    "\ufe4d\247\ufe4d\250\ufe4d\253\ufe4d\256\165\260\ufe4d\263\173" +
    "\264\160\265\174\266\167\267\161\270\164\271\177\273" +
    "\ufe4d\274\ufe4d\275\ufe4d\276\ufe4d\277\ufe4d\305\ufe4d\001\002" +
    "\000\052\026\132\027\124\063\145\066\112\107\147\125" +
    "\136\144\131\145\113\235\111\257\126\265\143\266\125" +
    "\272\154\274\135\277\146\301\106\303\116\304\114\305" +
    "\110\306\107\001\002\000\052\026\132\027\124\063\145" +
    "\066\112\107\147\125\136\144\131\145\113\235\111\257" +
    "\126\265\143\266\125\272\154\274\135\277\146\301\106" +
    "\303\116\304\114\305\110\306\107\001\002\000\052\026" +
    "\132\027\124\063\145\066\112\107\147\125\136\144\131" +
    "\145\113\235\111\257\126\265\143\266\125\272\154\274" +
    "\135\277\146\301\106\303\116\304\114\305\110\306\107" +
    "\001\002\000\052\026\132\027\124\063\145\066\112\107" +
    "\147\125\136\144\131\145\113\235\111\257\126\265\143" +
    "\266\125\272\154\274\135\277\146\301\106\303\116\304" +
    "\114\305\110\306\107\001\002\000\004\257\u0163\001\002" +
    "\000\154\002\ufe39\011\ufe39\015\ufe39\016\ufe39\020\ufe39\041" +
    "\ufe39\052\ufe39\055\ufe39\060\ufe39\061\ufe39\074\ufe39\100\ufe39" +
    "\101\ufe39\105\ufe39\106\ufe39\110\ufe39\120\ufe39\130\ufe39\131" +
    "\ufe39\133\ufe39\134\ufe39\135\ufe39\144\ufe39\146\ufe39\147\ufe39" +
    "\151\ufe39\152\ufe39\163\ufe39\166\ufe39\171\ufe39\176\ufe39\177" +
    "\ufe39\203\ufe39\230\ufe39\240\ufe39\247\ufe39\250\ufe39\253\ufe39" +
    "\256\ufe39\260\ufe39\263\ufe39\264\ufe39\265\ufe39\266\ufe39\267" +
    "\ufe39\270\ufe39\271\ufe39\273\ufe39\274\ufe39\275\ufe39\276\ufe39" +
    "\277\ufe39\305\ufe39\001\002\000\060\026\132\027\124\063" +
    "\145\066\112\107\147\125\136\144\131\145\113\206\uff1d" +
    "\235\111\244\uff1d\251\013\257\126\265\143\266\125\272" +
    "\154\274\135\277\146\301\106\303\116\304\114\305\110" +
    "\306\107\001\002\000\006\253\215\260\u0165\001\002\000" +
    "\154\002\ufe3b\011\ufe3b\015\ufe3b\016\ufe3b\020\ufe3b\041\ufe3b" +
    "\052\ufe3b\055\ufe3b\060\ufe3b\061\ufe3b\074\ufe3b\100\ufe3b\101" +
    "\ufe3b\105\ufe3b\106\ufe3b\110\ufe3b\120\ufe3b\130\ufe3b\131\ufe3b" +
    "\133\ufe3b\134\ufe3b\135\ufe3b\144\ufe3b\146\ufe3b\147\ufe3b\151" +
    "\ufe3b\152\ufe3b\163\ufe3b\166\ufe3b\171\ufe3b\176\ufe3b\177\ufe3b" +
    "\203\ufe3b\230\ufe3b\240\ufe3b\247\ufe3b\250\ufe3b\253\ufe3b\256" +
    "\ufe3b\260\ufe3b\263\ufe3b\264\ufe3b\265\ufe3b\266\ufe3b\267\ufe3b" +
    "\270\ufe3b\271\ufe3b\273\ufe3b\274\ufe3b\275\ufe3b\276\ufe3b\277" +
    "\ufe3b\305\ufe3b\001\002\000\154\002\ufe43\011\ufe43\015\ufe43" +
    "\016\ufe43\020\ufe43\041\ufe43\052\ufe43\055\170\060\ufe43\061" +
    "\ufe43\074\ufe43\100\ufe43\101\ufe43\105\ufe43\106\ufe43\110\ufe43" +
    "\120\ufe43\130\ufe43\131\ufe43\133\ufe43\134\ufe43\135\ufe43\144" +
    "\ufe43\146\ufe43\147\ufe43\151\ufe43\152\ufe43\163\ufe43\166\ufe43" +
    "\171\ufe43\176\ufe43\177\ufe43\203\ufe43\230\ufe43\240\ufe43\247" +
    "\ufe43\250\ufe43\253\ufe43\256\165\260\ufe43\263\173\264\160" +
    "\265\174\266\167\267\161\270\164\271\177\273\163\274" +
    "\ufe43\275\171\276\204\277\ufe43\305\ufe43\001\002\000\154" +
    "\002\ufe41\011\ufe41\015\ufe41\016\ufe41\020\ufe41\041\ufe41\052" +
    "\ufe41\055\170\060\ufe41\061\ufe41\074\ufe41\100\ufe41\101\ufe41" +
    "\105\ufe41\106\ufe41\110\ufe41\120\ufe41\130\ufe41\131\ufe41\133" +
    "\ufe41\134\ufe41\135\ufe41\144\ufe41\146\ufe41\147\ufe41\151\ufe41" +
    "\152\ufe41\163\ufe41\166\ufe41\171\ufe41\176\ufe41\177\ufe41\203" +
    "\ufe41\230\ufe41\240\ufe41\247\ufe41\250\ufe41\253\ufe41\256\165" +
    "\260\ufe41\263\173\264\160\265\174\266\167\267\161\270" +
    "\164\271\177\273\163\274\ufe41\275\171\276\204\277\ufe41" +
    "\305\ufe41\001\002\000\154\002\ufe42\011\ufe42\015\ufe42\016" +
    "\ufe42\020\ufe42\041\ufe42\052\ufe42\055\170\060\ufe42\061\ufe42" +
    "\074\ufe42\100\ufe42\101\ufe42\105\ufe42\106\ufe42\110\ufe42\120" +
    "\ufe42\130\ufe42\131\ufe42\133\ufe42\134\ufe42\135\ufe42\144\ufe42" +
    "\146\ufe42\147\ufe42\151\ufe42\152\ufe42\163\ufe42\166\ufe42\171" +
    "\ufe42\176\ufe42\177\ufe42\203\ufe42\230\ufe42\240\ufe42\247\ufe42" +
    "\250\ufe42\253\ufe42\256\165\260\ufe42\263\173\264\160\265" +
    "\174\266\167\267\161\270\164\271\177\273\163\274\ufe42" +
    "\275\171\276\204\277\ufe42\305\ufe42\001\002\000\056\011" +
    "\u016d\020\ufe8f\055\ufe8f\110\ufe8f\130\ufe8f\134\ufe8f\144\ufe8f" +
    "\151\ufe8f\171\ufe8f\177\ufe8f\256\ufe8f\263\ufe8f\264\ufe8f\265" +
    "\ufe8f\266\ufe8f\267\ufe8f\270\ufe8f\271\ufe8f\273\ufe8f\274\ufe8f" +
    "\275\ufe8f\276\ufe8f\001\002\000\056\011\u016b\020\ufe90\055" +
    "\ufe90\110\ufe90\130\ufe90\134\ufe90\144\ufe90\151\ufe90\171\ufe90" +
    "\177\ufe90\256\ufe90\263\ufe90\264\ufe90\265\ufe90\266\ufe90\267" +
    "\ufe90\270\ufe90\271\ufe90\273\ufe90\274\ufe90\275\ufe90\276\ufe90" +
    "\001\002\000\052\026\132\027\124\063\145\066\112\107" +
    "\147\125\136\144\131\145\113\235\111\257\126\265\143" +
    "\266\125\272\154\274\135\277\146\301\106\303\116\304" +
    "\114\305\110\306\107\001\002\000\154\002\ufe3e\011\ufe3e" +
    "\015\ufe3e\016\ufe3e\020\175\041\ufe3e\052\ufe3e\055\170\060" +
    "\ufe3e\061\ufe3e\074\ufe3e\100\ufe3e\101\ufe3e\105\ufe3e\106\ufe3e" +
    "\110\205\120\ufe3e\130\200\131\ufe3e\133\ufe3e\134\172\135" +
    "\ufe3e\144\162\146\ufe3e\147\ufe3e\151\ufe3e\152\ufe3e\163\ufe3e" +
    "\166\ufe3e\171\201\176\ufe3e\177\176\203\ufe3e\230\ufe3e\240" +
    "\ufe3e\247\ufe3e\250\ufe3e\253\ufe3e\256\165\260\ufe3e\263\173" +
    "\264\160\265\174\266\167\267\161\270\164\271\177\273" +
    "\163\274\166\275\171\276\204\277\ufe3e\305\ufe3e\001\002" +
    "\000\052\026\132\027\124\063\145\066\112\107\147\125" +
    "\136\144\131\145\113\235\111\257\126\265\143\266\125" +
    "\272\154\274\135\277\146\301\106\303\116\304\114\305" +
    "\110\306\107\001\002\000\154\002\ufe3d\011\ufe3d\015\ufe3d" +
    "\016\ufe3d\020\175\041\ufe3d\052\ufe3d\055\170\060\ufe3d\061" +
    "\ufe3d\074\ufe3d\100\ufe3d\101\ufe3d\105\ufe3d\106\ufe3d\110\205" +
    "\120\ufe3d\130\200\131\ufe3d\133\ufe3d\134\172\135\ufe3d\144" +
    "\162\146\ufe3d\147\ufe3d\151\ufe3d\152\ufe3d\163\ufe3d\166\ufe3d" +
    "\171\201\176\ufe3d\177\176\203\ufe3d\230\ufe3d\240\ufe3d\247" +
    "\ufe3d\250\ufe3d\253\ufe3d\256\165\260\ufe3d\263\173\264\160" +
    "\265\174\266\167\267\161\270\164\271\177\273\163\274" +
    "\166\275\171\276\204\277\ufe3d\305\ufe3d\001\002\000\154" +
    "\002\ufe6b\011\ufe6b\015\ufe6b\016\ufe6b\020\ufe6b\041\ufe6b\052" +
    "\ufe6b\055\ufe6b\060\ufe6b\061\ufe6b\074\ufe6b\100\ufe6b\101\ufe6b" +
    "\105\ufe6b\106\ufe6b\110\ufe6b\120\ufe6b\130\ufe6b\131\ufe6b\133" +
    "\ufe6b\134\ufe6b\135\ufe6b\144\ufe6b\146\ufe6b\147\ufe6b\151\ufe6b" +
    "\152\ufe6b\163\ufe6b\166\ufe6b\171\ufe6b\176\ufe6b\177\ufe6b\203" +
    "\ufe6b\230\ufe6b\240\ufe6b\247\ufe6b\250\ufe6b\253\ufe6b\256\ufe6b" +
    "\260\ufe6b\263\ufe6b\264\ufe6b\265\ufe6b\266\ufe6b\267\ufe6b\270" +
    "\ufe6b\271\ufe6b\273\ufe6b\274\ufe6b\275\ufe6b\276\ufe6b\277\ufe6b" +
    "\305\ufe6b\001\002\000\154\002\ufe6f\011\ufe6f\015\ufe6f\016" +
    "\ufe6f\020\ufe6f\041\ufe6f\052\ufe6f\055\ufe6f\060\ufe6f\061\ufe6f" +
    "\074\ufe6f\100\ufe6f\101\ufe6f\105\ufe6f\106\ufe6f\110\ufe6f\120" +
    "\ufe6f\130\ufe6f\131\ufe6f\133\ufe6f\134\ufe6f\135\ufe6f\144\ufe6f" +
    "\146\ufe6f\147\ufe6f\151\ufe6f\152\ufe6f\163\ufe6f\166\ufe6f\171" +
    "\ufe6f\176\ufe6f\177\ufe6f\203\ufe6f\230\ufe6f\240\ufe6f\247\ufe6f" +
    "\250\ufe6f\253\ufe6f\256\ufe6f\260\ufe6f\263\ufe6f\264\ufe6f\265" +
    "\ufe6f\266\ufe6f\267\161\270\164\271\177\273\ufe6f\274\ufe6f" +
    "\275\ufe6f\276\ufe6f\277\ufe6f\305\ufe6f\001\002\000\052\026" +
    "\132\027\124\063\145\066\112\107\147\125\136\144\131" +
    "\145\113\235\111\257\126\265\143\266\125\272\154\274" +
    "\135\277\146\301\106\303\116\304\114\305\110\306\107" +
    "\001\002\000\006\253\215\260\u0173\001\002\000\154\002" +
    "\ufe89\011\ufe89\015\ufe89\016\ufe89\020\ufe89\041\ufe89\052\ufe89" +
    "\055\ufe89\060\ufe89\061\ufe89\074\ufe89\100\ufe89\101\ufe89\105" +
    "\ufe89\106\ufe89\110\ufe89\120\ufe89\130\ufe89\131\ufe89\133\ufe89" +
    "\134\ufe89\135\ufe89\144\ufe89\146\ufe89\147\ufe89\151\ufe89\152" +
    "\ufe89\163\ufe89\166\ufe89\171\ufe89\176\ufe89\177\ufe89\203\ufe89" +
    "\230\ufe89\240\ufe89\247\ufe89\250\ufe89\253\ufe89\256\ufe89\260" +
    "\ufe89\263\ufe89\264\ufe89\265\ufe89\266\ufe89\267\ufe89\270\ufe89" +
    "\271\ufe89\273\ufe89\274\ufe89\275\ufe89\276\ufe89\277\ufe89\305" +
    "\ufe89\001\002\000\004\277\u0175\001\002\000\160\002\ufe31" +
    "\011\ufe31\015\ufe31\016\ufe31\020\ufe31\041\ufe31\052\ufe31\055" +
    "\ufe31\060\ufe31\061\ufe31\074\ufe31\100\ufe31\101\ufe31\105\ufe31" +
    "\106\ufe31\110\ufe31\120\ufe31\130\ufe31\131\ufe31\133\ufe31\134" +
    "\ufe31\135\ufe31\144\ufe31\146\ufe31\147\ufe31\151\ufe31\152\ufe31" +
    "\163\ufe31\166\ufe31\171\ufe31\176\ufe31\177\ufe31\203\ufe31\230" +
    "\ufe31\240\ufe31\247\ufe31\250\ufe31\253\ufe31\254\u0176\256\ufe31" +
    "\257\ufed0\260\ufe31\263\ufe31\264\ufe31\265\ufe31\266\ufe31\267" +
    "\ufe31\270\ufe31\271\ufe31\273\ufe31\274\ufe31\275\ufe31\276\ufe31" +
    "\277\ufe31\305\ufe31\001\002\000\004\277\262\001\002\000" +
    "\154\002\ufe8e\011\ufe8e\015\ufe8e\016\ufe8e\020\ufe8e\041\ufe8e" +
    "\052\ufe8e\055\ufe8e\060\ufe8e\061\ufe8e\074\ufe8e\100\ufe8e\101" +
    "\ufe8e\105\ufe8e\106\ufe8e\110\ufe8e\120\ufe8e\130\ufe8e\131\ufe8e" +
    "\133\ufe8e\134\ufe8e\135\ufe8e\144\ufe8e\146\ufe8e\147\ufe8e\151" +
    "\ufe8e\152\ufe8e\163\ufe8e\166\ufe8e\171\ufe8e\176\ufe8e\177\ufe8e" +
    "\203\ufe8e\230\ufe8e\240\ufe8e\247\ufe8e\250\ufe8e\253\ufe8e\256" +
    "\ufe8e\260\ufe8e\263\ufe8e\264\ufe8e\265\ufe8e\266\ufe8e\267\ufe8e" +
    "\270\ufe8e\271\ufe8e\273\ufe8e\274\ufe8e\275\ufe8e\276\ufe8e\277" +
    "\ufe8e\305\ufe8e\001\002\000\012\206\uff1d\244\uff1d\251\013" +
    "\257\u0178\001\002\000\004\260\u0133\001\002\000\154\002" +
    "\ufe91\011\ufe91\015\ufe91\016\ufe91\020\ufe91\041\ufe91\052\ufe91" +
    "\055\170\060\ufe91\061\ufe91\074\ufe91\100\ufe91\101\ufe91\105" +
    "\ufe91\106\ufe91\110\ufe91\120\ufe91\130\ufe91\131\ufe91\133\ufe91" +
    "\134\ufe91\135\ufe91\144\ufe91\146\ufe91\147\ufe91\151\ufe91\152" +
    "\ufe91\163\ufe91\166\ufe91\171\ufe91\176\ufe91\177\ufe91\203\ufe91" +
    "\230\ufe91\240\ufe91\247\ufe91\250\ufe91\253\ufe91\256\165\260" +
    "\ufe91\263\173\264\160\265\ufe91\266\ufe91\267\161\270\164" +
    "\271\177\273\ufe91\274\ufe91\275\ufe91\276\ufe91\277\ufe91\305" +
    "\ufe91\001\002\000\004\257\u017c\001\002\000\014\152\ufe7c" +
    "\160\u017d\166\ufe7c\203\ufe7c\260\ufe7c\001\002\000\004\024" +
    "\u0192\001\002\000\012\152\266\166\ufeaa\203\ufeaa\260\ufeaa" +
    "\001\002\000\010\166\u0182\203\u0181\260\ufe79\001\002\000" +
    "\004\260\u0191\001\002\000\060\020\ufe78\026\ufe78\027\ufe78" +
    "\042\ufe78\063\ufe78\066\ufe78\107\ufe78\125\ufe78\144\ufe78\145" +
    "\ufe78\235\ufe78\236\ufe78\257\ufe78\265\ufe78\266\ufe78\272\ufe78" +
    "\274\ufe78\277\ufe78\301\ufe78\303\ufe78\304\ufe78\305\ufe78\306" +
    "\ufe78\001\002\000\060\020\ufe77\026\ufe77\027\ufe77\042\ufe77" +
    "\063\ufe77\066\ufe77\107\ufe77\125\ufe77\144\ufe77\145\ufe77\235" +
    "\ufe77\236\ufe77\257\ufe77\265\ufe77\266\ufe77\272\ufe77\274\ufe77" +
    "\277\ufe77\301\ufe77\303\ufe77\304\ufe77\305\ufe77\306\ufe77\001" +
    "\002\000\060\020\u0185\026\132\027\124\042\u0188\063\145" +
    "\066\112\107\147\125\136\144\131\145\113\235\111\236" +
    "\u0184\257\126\265\143\266\125\272\154\274\135\277\146" +
    "\301\106\303\116\304\114\305\110\306\107\001\002\000" +
    "\006\074\u018f\163\u0190\001\002\000\056\026\132\027\124" +
    "\042\u0188\063\145\066\112\107\147\125\136\144\131\145" +
    "\113\235\111\236\u0184\257\126\265\143\266\125\272\154" +
    "\274\135\277\146\301\106\303\116\304\114\305\110\306" +
    "\107\001\002\000\004\260\ufe7b\001\002\000\062\011\202" +
    "\020\175\055\170\074\u018a\110\205\130\200\134\172\144" +
    "\162\151\203\163\u018b\171\201\177\176\256\165\263\173" +
    "\264\160\265\174\266\167\267\161\270\164\271\177\273" +
    "\163\274\166\275\171\276\204\001\002\000\004\202\u0189" +
    "\001\002\000\006\011\ufe74\260\ufe74\001\002\000\006\011" +
    "\ufe72\260\ufe72\001\002\000\006\011\ufe73\260\ufe73\001\002" +
    "\000\004\011\u018d\001\002\000\056\026\132\027\124\042" +
    "\u0188\063\145\066\112\107\147\125\136\144\131\145\113" +
    "\235\111\236\u0184\257\126\265\143\266\125\272\154\274" +
    "\135\277\146\301\106\303\116\304\114\305\110\306\107" +
    "\001\002\000\004\260\ufe7a\001\002\000\006\011\ufe75\260" +
    "\ufe75\001\002\000\006\011\ufe76\260\ufe76\001\002\000\154" +
    "\002\ufe7e\011\ufe7e\015\ufe7e\016\ufe7e\020\ufe7e\041\ufe7e\052" +
    "\ufe7e\055\ufe7e\060\ufe7e\061\ufe7e\074\ufe7e\100\ufe7e\101\ufe7e" +
    "\105\ufe7e\106\ufe7e\110\ufe7e\120\ufe7e\130\ufe7e\131\ufe7e\133" +
    "\ufe7e\134\ufe7e\135\ufe7e\144\ufe7e\146\ufe7e\147\ufe7e\151\ufe7e" +
    "\152\ufe7e\163\ufe7e\166\ufe7e\171\ufe7e\176\ufe7e\177\ufe7e\203" +
    "\ufe7e\230\ufe7e\240\ufe7e\247\ufe7e\250\ufe7e\253\ufe7e\256\ufe7e" +
    "\260\ufe7e\263\ufe7e\264\ufe7e\265\ufe7e\266\ufe7e\267\ufe7e\270" +
    "\ufe7e\271\ufe7e\273\ufe7e\274\ufe7e\275\ufe7e\276\ufe7e\277\ufe7e" +
    "\305\ufe7e\001\002\000\052\026\132\027\124\063\145\066" +
    "\112\107\147\125\136\144\131\145\113\235\111\257\126" +
    "\265\143\266\125\272\154\274\135\277\146\301\106\303" +
    "\116\304\114\305\110\306\107\001\002\000\014\152\ufe7d" +
    "\166\ufe7d\203\ufe7d\253\215\260\ufe7d\001\002\000\060\011" +
    "\202\020\175\055\170\110\205\130\200\134\172\144\162" +
    "\151\203\171\201\177\176\256\165\263\173\264\160\265" +
    "\174\266\167\267\161\270\164\271\177\273\163\274\166" +
    "\275\171\276\204\277\u0195\001\002\000\004\265\u014a\001" +
    "\002\000\154\002\ufe33\011\ufe33\015\ufe33\016\ufe33\020\175" +
    "\041\ufe33\052\ufe33\055\170\060\ufe33\061\ufe33\074\ufe33\100" +
    "\ufe33\101\ufe33\105\ufe33\106\ufe33\110\205\120\ufe33\130\200" +
    "\131\ufe33\133\ufe33\134\172\135\ufe33\144\ufe33\146\ufe33\147" +
    "\ufe33\151\ufe33\152\ufe33\163\ufe33\166\ufe33\171\201\176\ufe33" +
    "\177\176\203\ufe33\230\ufe33\240\ufe33\247\ufe33\250\ufe33\253" +
    "\ufe33\256\165\260\ufe33\263\173\264\160\265\174\266\167" +
    "\267\161\270\164\271\177\273\163\274\ufe33\275\171\276" +
    "\204\277\ufe33\305\ufe33\001\002\000\010\060\u019c\061\ufe93" +
    "\247\u019d\001\002\000\052\026\132\027\124\063\145\066" +
    "\112\107\147\125\136\144\131\145\113\235\111\257\126" +
    "\265\143\266\125\272\154\274\135\277\146\301\106\303" +
    "\116\304\114\305\110\306\107\001\002\000\060\011\202" +
    "\020\175\055\170\110\205\130\200\134\172\144\162\151" +
    "\203\171\201\177\176\247\u0198\256\165\263\173\264\160" +
    "\265\174\266\167\267\161\270\164\271\177\273\163\274" +
    "\166\275\171\276\204\001\002\000\010\060\u019c\061\ufe93" +
    "\247\u019d\001\002\000\004\061\u01a2\001\002\000\052\026" +
    "\132\027\124\063\145\066\112\107\147\125\136\144\131" +
    "\145\113\235\111\257\126\265\143\266\125\272\154\274" +
    "\135\277\146\301\106\303\116\304\114\305\110\306\107" +
    "\001\002\000\052\026\132\027\124\063\145\066\112\107" +
    "\147\125\136\144\131\145\113\235\111\257\126\265\143" +
    "\266\125\272\154\274\135\277\146\301\106\303\116\304" +
    "\114\305\110\306\107\001\002\000\060\011\202\020\175" +
    "\055\170\110\205\130\200\134\172\144\162\151\203\171" +
    "\201\177\176\230\u019f\256\165\263\173\264\160\265\174" +
    "\266\167\267\161\270\164\271\177\273\163\274\166\275" +
    "\171\276\204\001\002\000\052\026\132\027\124\063\145" +
    "\066\112\107\147\125\136\144\131\145\113\235\111\257" +
    "\126\265\143\266\125\272\154\274\135\277\146\301\106" +
    "\303\116\304\114\305\110\306\107\001\002\000\064\011" +
    "\202\020\175\055\170\060\ufe95\061\ufe95\110\205\130\200" +
    "\134\172\144\162\151\203\171\201\177\176\247\ufe95\256" +
    "\165\263\173\264\160\265\174\266\167\267\161\270\164" +
    "\271\177\273\163\274\166\275\171\276\204\001\002\000" +
    "\060\011\202\020\175\055\170\061\ufe94\110\205\130\200" +
    "\134\172\144\162\151\203\171\201\177\176\256\165\263" +
    "\173\264\160\265\174\266\167\267\161\270\164\271\177" +
    "\273\163\274\166\275\171\276\204\001\002\000\154\002" +
    "\ufe98\011\ufe98\015\ufe98\016\ufe98\020\ufe98\041\ufe98\052\ufe98" +
    "\055\ufe98\060\ufe98\061\ufe98\074\ufe98\100\ufe98\101\ufe98\105" +
    "\ufe98\106\ufe98\110\ufe98\120\ufe98\130\ufe98\131\ufe98\133\ufe98" +
    "\134\ufe98\135\ufe98\144\ufe98\146\ufe98\147\ufe98\151\ufe98\152" +
    "\ufe98\163\ufe98\166\ufe98\171\ufe98\176\ufe98\177\ufe98\203\ufe98" +
    "\230\ufe98\240\ufe98\247\ufe98\250\ufe98\253\ufe98\256\ufe98\260" +
    "\ufe98\263\ufe98\264\ufe98\265\ufe98\266\ufe98\267\ufe98\270\ufe98" +
    "\271\ufe98\273\ufe98\274\ufe98\275\ufe98\276\ufe98\277\ufe98\305" +
    "\ufe98\001\002\000\060\011\202\020\175\055\170\110\205" +
    "\130\200\134\172\144\162\151\203\171\201\177\176\230" +
    "\u01a4\256\165\263\173\264\160\265\174\266\167\267\161" +
    "\270\164\271\177\273\163\274\166\275\171\276\204\001" +
    "\002\000\052\026\132\027\124\063\145\066\112\107\147" +
    "\125\136\144\131\145\113\235\111\257\126\265\143\266" +
    "\125\272\154\274\135\277\146\301\106\303\116\304\114" +
    "\305\110\306\107\001\002\000\064\011\202\020\175\055" +
    "\170\060\ufe96\061\ufe96\110\205\130\200\134\172\144\162" +
    "\151\203\171\201\177\176\247\ufe96\256\165\263\173\264" +
    "\160\265\174\266\167\267\161\270\164\271\177\273\163" +
    "\274\166\275\171\276\204\001\002\000\004\061\u01a7\001" +
    "\002\000\154\002\ufe97\011\ufe97\015\ufe97\016\ufe97\020\ufe97" +
    "\041\ufe97\052\ufe97\055\ufe97\060\ufe97\061\ufe97\074\ufe97\100" +
    "\ufe97\101\ufe97\105\ufe97\106\ufe97\110\ufe97\120\ufe97\130\ufe97" +
    "\131\ufe97\133\ufe97\134\ufe97\135\ufe97\144\ufe97\146\ufe97\147" +
    "\ufe97\151\ufe97\152\ufe97\163\ufe97\166\ufe97\171\ufe97\176\ufe97" +
    "\177\ufe97\203\ufe97\230\ufe97\240\ufe97\247\ufe97\250\ufe97\253" +
    "\ufe97\256\ufe97\260\ufe97\263\ufe97\264\ufe97\265\ufe97\266\ufe97" +
    "\267\ufe97\270\ufe97\271\ufe97\273\ufe97\274\ufe97\275\ufe97\276" +
    "\ufe97\277\ufe97\305\ufe97\001\002\000\154\002\ufe34\011\ufe34" +
    "\015\ufe34\016\ufe34\020\175\041\ufe34\052\ufe34\055\170\060" +
    "\ufe34\061\ufe34\074\ufe34\100\ufe34\101\ufe34\105\ufe34\106\ufe34" +
    "\110\205\120\ufe34\130\200\131\ufe34\133\ufe34\134\172\135" +
    "\ufe34\144\ufe34\146\ufe34\147\ufe34\151\ufe34\152\ufe34\163\ufe34" +
    "\166\ufe34\171\201\176\ufe34\177\176\203\ufe34\230\ufe34\240" +
    "\ufe34\247\ufe34\250\ufe34\253\ufe34\256\165\260\ufe34\263\173" +
    "\264\160\265\174\266\167\267\161\270\164\271\177\273" +
    "\163\274\ufe34\275\171\276\204\277\ufe34\305\ufe34\001\002" +
    "\000\154\002\ufe92\011\ufe92\015\ufe92\016\ufe92\020\ufe92\041" +
    "\ufe92\052\ufe92\055\170\060\ufe92\061\ufe92\074\ufe92\100\ufe92" +
    "\101\ufe92\105\ufe92\106\ufe92\110\ufe92\120\ufe92\130\ufe92\131" +
    "\ufe92\133\ufe92\134\ufe92\135\ufe92\144\ufe92\146\ufe92\147\ufe92" +
    "\151\ufe92\152\ufe92\163\ufe92\166\ufe92\171\ufe92\176\ufe92\177" +
    "\ufe92\203\ufe92\230\ufe92\240\ufe92\247\ufe92\250\ufe92\253\ufe92" +
    "\256\165\260\ufe92\263\173\264\160\265\ufe92\266\ufe92\267" +
    "\161\270\164\271\177\273\ufe92\274\ufe92\275\ufe92\276\ufe92" +
    "\277\ufe92\305\ufe92\001\002\000\052\026\132\027\124\063" +
    "\145\066\112\107\147\125\136\144\131\145\113\235\111" +
    "\257\126\265\143\266\125\272\154\274\135\277\146\301" +
    "\106\303\116\304\114\305\110\306\107\001\002\000\060" +
    "\011\202\015\u01ac\020\175\055\170\110\205\130\200\134" +
    "\172\144\162\151\203\171\201\177\176\256\165\263\173" +
    "\264\160\265\174\266\167\267\161\270\164\271\177\273" +
    "\163\274\166\275\171\276\204\001\002\000\046\014\u01b3" +
    "\021\u01af\022\u01bb\023\u01bc\031\u01ad\046\u01ae\047\u01b7\050" +
    "\u01b6\056\u01b8\073\u01bd\123\u01bf\141\u01b9\215\u01b0\220\u01ba" +
    "\221\u01b5\231\u01b1\232\u01b4\245\u01be\001\002\000\004\257" +
    "\u01de\001\002\000\022\002\ufe28\036\ufe28\124\ufe28\140\ufe28" +
    "\253\ufe28\255\ufe28\260\ufe28\276\ufe28\001\002\000\022\002" +
    "\ufe2c\036\ufe2c\124\ufe2c\140\ufe2c\253\ufe2c\255\ufe2c\260\ufe2c" +
    "\276\ufe2c\001\002\000\022\002\ufe2e\036\ufe2e\124\ufe2e\140" +
    "\ufe2e\253\ufe2e\255\ufe2e\260\ufe2e\276\ufe2e\001\002\000\022" +
    "\002\ufe26\036\ufe26\124\ufe26\140\ufe26\253\ufe26\255\ufe26\260" +
    "\ufe26\276\ufe26\001\002\000\004\260\u01dd\001\002\000\004" +
    "\275\u01da\001\002\000\022\002\ufe2f\036\ufe2f\124\ufe2f\140" +
    "\ufe2f\253\ufe2f\255\ufe2f\260\ufe2f\276\ufe2f\001\002\000\004" +
    "\275\u01ce\001\002\000\024\002\ufe1e\036\ufe1e\124\ufe1e\140" +
    "\ufe1e\253\ufe1e\255\ufe1e\257\u01c8\260\ufe1e\276\ufe1e\001\002" +
    "\000\022\002\ufe27\036\ufe27\124\ufe27\140\ufe27\253\ufe27\255" +
    "\ufe27\260\ufe27\276\ufe27\001\002\000\022\002\ufe29\036\ufe29" +
    "\124\ufe29\140\ufe29\253\ufe29\255\ufe29\260\ufe29\276\ufe29\001" +
    "\002\000\004\275\u01c3\001\002\000\022\002\ufe25\036\ufe25" +
    "\124\ufe25\140\ufe25\253\ufe25\255\ufe25\260\ufe25\276\ufe25\001" +
    "\002\000\022\002\ufe22\036\ufe22\124\ufe22\140\ufe22\253\ufe22" +
    "\255\ufe22\260\ufe22\276\ufe22\001\002\000\022\002\ufe2b\036" +
    "\ufe2b\124\ufe2b\140\ufe2b\253\ufe2b\255\ufe2b\260\ufe2b\276\ufe2b" +
    "\001\002\000\022\002\ufe2a\036\ufe2a\124\ufe2a\140\ufe2a\253" +
    "\ufe2a\255\ufe2a\260\ufe2a\276\ufe2a\001\002\000\024\002\ufe23" +
    "\036\ufe23\124\ufe23\140\ufe23\253\ufe23\255\ufe23\257\u01c0\260" +
    "\ufe23\276\ufe23\001\002\000\022\002\ufe2d\036\ufe2d\124\ufe2d" +
    "\140\ufe2d\253\ufe2d\255\ufe2d\260\ufe2d\276\ufe2d\001\002\000" +
    "\004\303\u01c1\001\002\000\004\260\u01c2\001\002\000\022" +
    "\002\ufe24\036\ufe24\124\ufe24\140\ufe24\253\ufe24\255\ufe24\260" +
    "\ufe24\276\ufe24\001\002\000\046\014\u01b3\021\u01af\022\u01bb" +
    "\023\u01bc\031\u01ad\046\u01ae\047\u01b7\050\u01b6\056\u01b8\073" +
    "\u01bd\123\u01bf\141\u01b9\215\u01b0\220\u01ba\221\u01b5\231\u01b1" +
    "\232\u01b4\245\u01be\001\002\000\004\253\u01c5\001\002\000" +
    "\046\014\u01b3\021\u01af\022\u01bb\023\u01bc\031\u01ad\046\u01ae" +
    "\047\u01b7\050\u01b6\056\u01b8\073\u01bd\123\u01bf\141\u01b9\215" +
    "\u01b0\220\u01ba\221\u01b5\231\u01b1\232\u01b4\245\u01be\001\002" +
    "\000\004\276\u01c7\001\002\000\022\002\ufe1c\036\ufe1c\124" +
    "\ufe1c\140\ufe1c\253\ufe1c\255\ufe1c\260\ufe1c\276\ufe1c\001\002" +
    "\000\004\303\u01c9\001\002\000\006\253\u01ca\260\u01cb\001" +
    "\002\000\004\303\u01cc\001\002\000\022\002\ufe20\036\ufe20" +
    "\124\ufe20\140\ufe20\253\ufe20\255\ufe20\260\ufe20\276\ufe20\001" +
    "\002\000\004\260\u01cd\001\002\000\022\002\ufe1f\036\ufe1f" +
    "\124\ufe1f\140\ufe1f\253\ufe1f\255\ufe1f\260\ufe1f\276\ufe1f\001" +
    "\002\000\004\277\u01d1\001\002\000\006\253\u01d7\276\u01d8" +
    "\001\002\000\006\253\ufe19\276\ufe19\001\002\000\004\252" +
    "\u01d2\001\002\000\046\014\u01b3\021\u01af\022\u01bb\023\u01bc" +
    "\031\u01ad\046\u01ae\047\u01b7\050\u01b6\056\u01b8\073\u01bd\123" +
    "\u01bf\141\u01b9\215\u01b0\220\u01ba\221\u01b5\231\u01b1\232\u01b4" +
    "\245\u01be\001\002\000\010\036\u01d4\253\uff85\276\uff85\001" +
    "\002\000\004\305\u01d6\001\002\000\006\253\ufe1a\276\ufe1a" +
    "\001\002\000\032\002\uff86\015\uff86\025\uff86\140\uff86\202" +
    "\uff86\216\uff86\225\uff86\237\uff86\251\uff86\253\uff86\260\uff86" +
    "\276\uff86\001\002\000\004\277\u01d1\001\002\000\022\002" +
    "\ufe1b\036\ufe1b\124\ufe1b\140\ufe1b\253\ufe1b\255\ufe1b\260\ufe1b" +
    "\276\ufe1b\001\002\000\006\253\ufe18\276\ufe18\001\002\000" +
    "\046\014\u01b3\021\u01af\022\u01bb\023\u01bc\031\u01ad\046\u01ae" +
    "\047\u01b7\050\u01b6\056\u01b8\073\u01bd\123\u01bf\141\u01b9\215" +
    "\u01b0\220\u01ba\221\u01b5\231\u01b1\232\u01b4\245\u01be\001\002" +
    "\000\004\276\u01dc\001\002\000\022\002\ufe1d\036\ufe1d\124" +
    "\ufe1d\140\ufe1d\253\ufe1d\255\ufe1d\260\ufe1d\276\ufe1d\001\002" +
    "\000\154\002\ufe99\011\ufe99\015\ufe99\016\ufe99\020\ufe99\041" +
    "\ufe99\052\ufe99\055\ufe99\060\ufe99\061\ufe99\074\ufe99\100\ufe99" +
    "\101\ufe99\105\ufe99\106\ufe99\110\ufe99\120\ufe99\130\ufe99\131" +
    "\ufe99\133\ufe99\134\ufe99\135\ufe99\144\ufe99\146\ufe99\147\ufe99" +
    "\151\ufe99\152\ufe99\163\ufe99\166\ufe99\171\ufe99\176\ufe99\177" +
    "\ufe99\203\ufe99\230\ufe99\240\ufe99\247\ufe99\250\ufe99\253\ufe99" +
    "\256\ufe99\260\ufe99\263\ufe99\264\ufe99\265\ufe99\266\ufe99\267" +
    "\ufe99\270\ufe99\271\ufe99\273\ufe99\274\ufe99\275\ufe99\276\ufe99" +
    "\277\ufe99\305\ufe99\001\002\000\004\303\u01df\001\002\000" +
    "\004\260\u01e0\001\002\000\022\002\ufe21\036\ufe21\124\ufe21" +
    "\140\ufe21\253\ufe21\255\ufe21\260\ufe21\276\ufe21\001\002\000" +
    "\062\006\u01e5\026\132\027\124\054\u01e7\063\145\066\112" +
    "\107\147\125\136\144\131\145\113\235\111\256\u01e2\257" +
    "\126\260\u01e3\265\143\266\125\272\154\274\135\277\u01e4" +
    "\301\106\303\116\304\114\305\110\306\107\001\002\000" +
    "\004\260\ufe5b\001\002\000\156\002\ufe81\011\ufe81\015\ufe81" +
    "\016\ufe81\020\ufe81\041\ufe81\052\ufe81\055\ufe81\060\ufe81\061" +
    "\ufe81\074\ufe81\100\ufe81\101\ufe81\105\ufe81\106\ufe81\110\ufe81" +
    "\120\ufe81\130\ufe81\131\ufe81\133\ufe81\134\ufe81\135\ufe81\144" +
    "\ufe81\146\ufe81\147\ufe81\151\ufe81\152\ufe81\154\ufe81\163\ufe81" +
    "\166\ufe81\171\ufe81\176\ufe81\177\ufe81\203\ufe81\230\ufe81\240" +
    "\ufe81\247\ufe81\250\ufe81\253\ufe81\256\ufe81\260\ufe81\263\ufe81" +
    "\264\ufe81\265\ufe81\266\ufe81\267\ufe81\270\ufe81\271\ufe81\273" +
    "\ufe81\274\ufe81\275\ufe81\276\ufe81\277\ufe81\305\ufe81\001\002" +
    "\000\070\011\ufe32\020\ufe32\055\ufe32\100\u01f2\110\ufe32\130" +
    "\ufe32\134\ufe32\144\ufe32\151\ufe32\171\ufe32\177\ufe32\253\ufe32" +
    "\254\u0174\256\ufe32\257\ufed1\260\ufe32\263\ufe32\264\ufe32\265" +
    "\ufe32\266\ufe32\267\ufe32\270\ufe32\271\ufe32\273\ufe32\274\ufe32" +
    "\275\ufe32\276\ufe32\001\002\000\054\026\132\027\124\063" +
    "\145\066\112\107\147\125\136\144\131\145\113\235\111" +
    "\256\u01f0\257\126\265\143\266\125\272\154\274\135\277" +
    "\146\301\106\303\116\304\114\305\110\306\107\001\002" +
    "\000\004\260\u01ef\001\002\000\052\026\132\027\124\063" +
    "\145\066\112\107\147\125\136\144\131\145\113\235\111" +
    "\257\126\265\143\266\125\272\154\274\135\277\146\301" +
    "\106\303\116\304\114\305\110\306\107\001\002\000\006" +
    "\253\u01e9\260\ufe59\001\002\000\052\026\132\027\124\063" +
    "\145\066\112\107\147\125\u01ea\144\131\145\113\235\111" +
    "\257\126\265\143\266\125\272\154\274\135\277\146\301" +
    "\106\303\116\304\114\305\110\306\107\001\002\000\052" +
    "\026\132\027\124\063\145\066\112\107\147\125\136\144" +
    "\131\145\113\235\111\257\126\265\143\266\125\272\154" +
    "\274\135\277\146\301\106\303\116\304\114\305\110\306" +
    "\107\001\002\000\060\011\202\020\175\055\170\110\205" +
    "\130\200\134\172\144\162\151\203\171\201\177\176\256" +
    "\165\263\173\264\160\265\174\266\167\267\161\270\164" +
    "\271\177\273\163\274\166\275\171\276\204\277\u01ec\001" +
    "\002\000\006\260\u01ed\265\u014a\001\002\000\154\002\ufe64" +
    "\011\ufe64\015\ufe64\016\ufe64\020\ufe64\041\ufe64\052\ufe64\055" +
    "\ufe64\060\ufe64\061\ufe64\074\ufe64\100\ufe64\101\ufe64\105\ufe64" +
    "\106\ufe64\110\ufe64\120\ufe64\130\ufe64\131\ufe64\133\ufe64\134" +
    "\ufe64\135\ufe64\144\ufe64\146\ufe64\147\ufe64\151\ufe64\152\ufe64" +
    "\163\ufe64\166\ufe64\171\ufe64\176\ufe64\177\ufe64\203\ufe64\230" +
    "\ufe64\240\ufe64\247\ufe64\250\ufe64\253\ufe64\256\ufe64\260\ufe64" +
    "\263\ufe64\264\ufe64\265\ufe64\266\ufe64\267\ufe64\270\ufe64\271" +
    "\ufe64\273\ufe64\274\ufe64\275\ufe64\276\ufe64\277\ufe64\305\ufe64" +
    "\001\002\000\006\253\215\260\ufe57\001\002\000\156\002" +
    "\ufe80\011\ufe80\015\ufe80\016\ufe80\020\ufe80\041\ufe80\052\ufe80" +
    "\055\ufe80\060\ufe80\061\ufe80\074\ufe80\100\ufe80\101\ufe80\105" +
    "\ufe80\106\ufe80\110\ufe80\120\ufe80\130\ufe80\131\ufe80\133\ufe80" +
    "\134\ufe80\135\ufe80\144\ufe80\146\ufe80\147\ufe80\151\ufe80\152" +
    "\ufe80\154\ufe80\163\ufe80\166\ufe80\171\ufe80\176\ufe80\177\ufe80" +
    "\203\ufe80\230\ufe80\240\ufe80\247\ufe80\250\ufe80\253\ufe80\256" +
    "\ufe80\260\ufe80\263\ufe80\264\ufe80\265\ufe80\266\ufe80\267\ufe80" +
    "\270\ufe80\271\ufe80\273\ufe80\274\ufe80\275\ufe80\276\ufe80\277" +
    "\ufe80\305\ufe80\001\002\000\004\260\ufe5a\001\002\000\006" +
    "\253\215\260\ufe58\001\002\000\052\026\132\027\124\063" +
    "\145\066\112\107\147\125\136\144\131\145\113\235\111" +
    "\257\126\265\143\266\125\272\154\274\135\277\146\301" +
    "\106\303\116\304\114\305\110\306\107\001\002\000\060" +
    "\011\202\020\175\055\170\110\205\130\200\134\172\144" +
    "\162\151\203\171\201\177\176\256\165\260\u01f4\263\173" +
    "\264\160\265\174\266\167\267\161\270\164\271\177\273" +
    "\163\274\166\275\171\276\204\001\002\000\156\002\ufe7f" +
    "\011\ufe7f\015\ufe7f\016\ufe7f\020\ufe7f\041\ufe7f\052\ufe7f\055" +
    "\ufe7f\060\ufe7f\061\ufe7f\074\ufe7f\100\ufe7f\101\ufe7f\105\ufe7f" +
    "\106\ufe7f\110\ufe7f\120\ufe7f\130\ufe7f\131\ufe7f\133\ufe7f\134" +
    "\ufe7f\135\ufe7f\144\ufe7f\146\ufe7f\147\ufe7f\151\ufe7f\152\ufe7f" +
    "\154\ufe7f\163\ufe7f\166\ufe7f\171\ufe7f\176\ufe7f\177\ufe7f\203" +
    "\ufe7f\230\ufe7f\240\ufe7f\247\ufe7f\250\ufe7f\253\ufe7f\256\ufe7f" +
    "\260\ufe7f\263\ufe7f\264\ufe7f\265\ufe7f\266\ufe7f\267\ufe7f\270" +
    "\ufe7f\271\ufe7f\273\ufe7f\274\ufe7f\275\ufe7f\276\ufe7f\277\ufe7f" +
    "\305\ufe7f\001\002\000\004\102\uff32\001\002\000\004\277" +
    "\351\001\002\000\004\102\u0220\001\002\000\004\277\u021b" +
    "\001\002\000\006\107\uff48\277\uff48\001\002\000\006\107" +
    "\uff47\277\uff47\001\002\000\004\277\u0217\001\002\000\004" +
    "\277\u0216\001\002\000\006\107\u020f\277\uff43\001\002\000" +
    "\006\107\u020f\277\uff43\001\002\000\006\107\u020f\277\uff43" +
    "\001\002\000\004\233\u0201\001\002\000\004\277\351\001" +
    "\002\000\004\160\u0204\001\002\000\004\002\uff4e\001\002" +
    "\000\004\257\u0205\001\002\000\004\277\u0206\001\002\000" +
    "\004\273\u020c\001\002\000\006\253\uff3b\260\uff3b\001\002" +
    "\000\006\253\u0209\260\u020a\001\002\000\004\277\u0206\001" +
    "\002\000\016\002\uff3e\025\uff3e\115\uff3e\140\uff3e\213\uff3e" +
    "\237\uff3e\001\002\000\006\253\uff3a\260\uff3a\001\002\000" +
    "\052\026\132\027\124\063\145\066\112\107\147\125\136" +
    "\144\131\145\113\235\111\257\126\265\143\266\125\272" +
    "\154\274\135\277\146\301\106\303\116\304\114\305\110" +
    "\306\107\001\002\000\062\011\202\020\175\055\170\110" +
    "\205\130\200\134\172\144\162\151\203\171\201\177\176" +
    "\253\uff37\256\165\260\uff37\263\173\264\160\265\174\266" +
    "\167\267\161\270\164\271\177\273\163\274\166\275\171" +
    "\276\204\001\002\000\004\277\351\001\002\000\004\063" +
    "\u0210\001\002\000\006\160\uff44\277\uff44\001\002\000\004" +
    "\002\uff4b\001\002\000\004\277\u0213\001\002\000\004\002" +
    "\uff4d\001\002\000\004\277\351\001\002\000\004\002\uff4c" +
    "\001\002\000\004\002\uffb7\001\002\000\006\107\uff5e\277" +
    "\uff5e\001\002\000\006\107\u020f\277\uff43\001\002\000\004" +
    "\277\u021a\001\002\000\004\002\uff49\001\002\000\004\150" +
    "\u021c\001\002\000\004\277\351\001\002\000\006\002\uff3c" +
    "\160\u0204\001\002\000\010\002\uff3d\115\uff3d\213\uff3d\001" +
    "\002\000\004\002\ufef9\001\002\000\006\107\u020f\277\uff43" +
    "\001\002\000\004\277\u0222\001\002\000\006\254\u022e\257" +
    "\ufed1\001\002\000\004\257\u0225\001\002\000\004\002\uff4a" +
    "\001\002\000\050\014\u01b3\021\u01af\022\u01bb\023\u01bc\031" +
    "\u01ad\046\u01ae\047\u01b7\050\u01b6\056\u01b8\073\u01bd\123\u01bf" +
    "\141\u01b9\215\u01b0\220\u01ba\221\u01b5\231\u01b1\232\u01b4\245" +
    "\u01be\260\u0226\001\002\000\006\002\uff36\174\uff36\001\002" +
    "\000\010\253\uff34\255\uff34\260\uff34\001\002\000\010\253" +
    "\u0229\255\u022b\260\uff2f\001\002\000\046\014\u01b3\021\u01af" +
    "\022\u01bb\023\u01bc\031\u01ad\046\u01ae\047\u01b7\050\u01b6\056" +
    "\u01b8\073\u01bd\123\u01bf\141\u01b9\215\u01b0\220\u01ba\221\u01b5" +
    "\231\u01b1\232\u01b4\245\u01be\001\002\000\004\260\u022c\001" +
    "\002\000\004\260\uff30\001\002\000\006\002\uff35\174\uff35" +
    "\001\002\000\010\253\uff33\255\uff33\260\uff33\001\002\000" +
    "\004\277\u022f\001\002\000\004\257\ufed0\001\002\000\004" +
    "\002\uff4f\001\002\000\006\126\u0232\155\u0233\001\002\000" +
    "\006\223\u0235\277\uffc1\001\002\000\006\223\u0235\277\uffc1" +
    "\001\002\000\004\277\351\001\002\000\004\277\uffc2\001" +
    "\002\000\022\160\u0237\206\uff41\217\uff41\244\uff41\251\uff41" +
    "\257\u0238\261\uff41\302\uff41\001\002\000\004\257\u0243\001" +
    "\002\000\006\260\uffc3\277\333\001\002\000\020\206\ufeb6" +
    "\217\327\244\ufeb6\251\ufeb6\257\ufeb6\261\331\302\326\001" +
    "\002\000\012\206\uff1d\244\uff1d\251\013\257\uff1d\001\002" +
    "\000\004\002\uffc9\001\002\000\004\260\u023e\001\002\000" +
    "\006\253\334\260\uffc4\001\002\000\024\002\uff41\160\u0237" +
    "\206\uff41\217\uff41\244\uff41\251\uff41\257\uff41\261\uff41\302" +
    "\uff41\001\002\000\022\002\ufeb6\206\ufeb6\217\327\244\ufeb6" +
    "\251\ufeb6\257\ufeb6\261\331\302\326\001\002\000\014\002" +
    "\uffc5\206\uff1d\244\uff1d\251\013\257\uff1d\001\002\000\004" +
    "\002\uffca\001\002\000\004\002\uffc6\001\002\000\004\277" +
    "\u0246\001\002\000\006\253\uff40\260\uff40\001\002\000\006" +
    "\253\u0248\260\u0249\001\002\000\010\253\uff39\260\uff39\273" +
    "\u020c\001\002\000\006\253\uff38\260\uff38\001\002\000\004" +
    "\277\u0246\001\002\000\022\002\uff42\206\uff42\217\uff42\244" +
    "\uff42\251\uff42\257\uff42\261\uff42\302\uff42\001\002\000\006" +
    "\253\uff3f\260\uff3f\001\002\000\004\277\351\001\002\000" +
    "\022\160\u0237\206\uff41\217\uff41\244\uff41\251\uff41\257\u024d" +
    "\261\uff41\302\uff41\001\002\000\006\260\uffc3\277\333\001" +
    "\002\000\020\206\ufeb6\217\327\244\ufeb6\251\ufeb6\257\ufeb6" +
    "\261\331\302\326\001\002\000\012\206\uff1d\244\uff1d\251" +
    "\013\257\uff1d\001\002\000\004\002\uffc7\001\002\000\004" +
    "\260\u0252\001\002\000\024\002\uff41\160\u0237\206\uff41\217" +
    "\uff41\244\uff41\251\uff41\257\uff41\261\uff41\302\uff41\001\002" +
    "\000\022\002\ufeb6\206\ufeb6\217\327\244\ufeb6\251\ufeb6\257" +
    "\ufeb6\261\331\302\326\001\002\000\014\002\uffc5\206\uff1d" +
    "\244\uff1d\251\013\257\uff1d\001\002\000\004\002\uffc8\001" +
    "\002\000\004\102\u032b\001\002\000\004\277\u0319\001\002" +
    "\000\004\223\u0297\001\002\000\004\277\u0296\001\002\000" +
    "\004\277\u0217\001\002\000\006\107\u0260\277\uff7d\001\002" +
    "\000\006\107\u0260\277\uff7d\001\002\000\004\223\uff80\001" +
    "\002\000\006\107\u0260\277\uff7d\001\002\000\004\277\u0222" +
    "\001\002\000\004\144\u0261\001\002\000\004\063\u0262\001" +
    "\002\000\006\160\uff7e\277\uff7e\001\002\000\004\257\u0225" +
    "\001\002\000\004\174\u0265\001\002\000\046\014\u01b3\021" +
    "\u01af\022\u01bb\023\u01bc\031\u01ad\046\u01ae\047\u01b7\050\u01b6" +
    "\056\u01b8\073\u01bd\123\u01bf\141\u01b9\215\u01b0\220\u01ba\221" +
    "\u01b5\231\u01b1\232\u01b4\245\u01be\001\002\000\004\140\u0267" +
    "\001\002\000\004\305\u0268\001\002\000\026\002\uff2a\033" +
    "\u026c\036\u026b\071\u0269\117\u0272\142\u0273\164\u026e\212\u026a" +
    "\222\u026d\241\u0270\001\002\000\004\273\uff21\001\002\000" +
    "\004\273\uff23\001\002\000\004\273\uff29\001\002\000\004" +
    "\273\uff26\001\002\000\004\273\uff28\001\002\000\004\273" +
    "\uff27\001\002\000\026\002\uff8b\033\u026c\036\u026b\071\u0269" +
    "\117\u0272\142\u0273\164\u026e\212\u026a\222\u026d\241\u0270\001" +
    "\002\000\004\273\uff25\001\002\000\004\273\u0274\001\002" +
    "\000\004\273\uff24\001\002\000\004\273\uff22\001\002\000" +
    "\004\305\u0275\001\002\000\026\002\uff2c\033\uff2c\036\uff2c" +
    "\071\uff2c\117\uff2c\142\uff2c\164\uff2c\212\uff2c\222\uff2c\241" +
    "\uff2c\001\002\000\004\273\u0277\001\002\000\004\305\u0278" +
    "\001\002\000\026\002\uff2b\033\uff2b\036\uff2b\071\uff2b\117" +
    "\uff2b\142\uff2b\164\uff2b\212\uff2b\222\uff2b\241\uff2b\001\002" +
    "\000\004\277\351\001\002\000\010\015\uff58\036\uff58\257" +
    "\u027c\001\002\000\006\015\uff85\036\u01d4\001\002\000\004" +
    "\277\u027e\001\002\000\006\253\u0281\260\u0282\001\002\000" +
    "\010\036\u01d4\253\uff85\260\uff85\001\002\000\006\253\uff57" +
    "\260\uff57\001\002\000\006\253\uff55\260\uff55\001\002\000" +
    "\004\277\u027e\001\002\000\006\015\uff59\036\uff59\001\002" +
    "\000\006\253\uff56\260\uff56\001\002\000\004\015\u0285\001" +
    "\002\000\012\206\uff1d\244\uff1d\251\013\257\uff1d\001\002" +
    "\000\004\002\uff60\001\002\000\004\277\u0288\001\002\000" +
    "\010\002\uff85\036\u01d4\140\uff85\001\002\000\006\002\uff83" +
    "\140\u028a\001\002\000\004\305\u028c\001\002\000\004\002" +
    "\uff95\001\002\000\014\002\uff84\015\uff84\025\uff84\225\uff84" +
    "\237\uff84\001\002\000\006\107\u0260\277\uff7d\001\002\000" +
    "\004\277\u028f\001\002\000\004\140\u0290\001\002\000\004" +
    "\305\u0291\001\002\000\004\032\u0292\001\002\000\004\305" +
    "\u0293\001\002\000\004\013\u0294\001\002\000\004\305\u0295" +
    "\001\002\000\004\002\uff5f\001\002\000\004\002\uffb8\001" +
    "\002\000\006\107\u0260\277\uff7d\001\002\000\004\277\351" +
    "\001\002\000\034\002\uff85\015\uff85\025\uff85\036\u01d4\134" +
    "\u029b\140\uff85\161\u029a\202\uff85\216\uff85\225\uff85\237\uff85" +
    "\251\uff85\257\u029c\001\002\000\004\024\u030e\001\002\000" +
    "\020\017\u02b9\156\u02bb\157\u02bc\167\u02be\210\u02bd\227\u02bf" +
    "\277\351\001\002\000\004\277\u02d3\001\002\000\024\002" +
    "\uff7b\015\uff7b\025\uff7b\140\uff7b\202\u029e\216\uff7b\225\uff7b" +
    "\237\uff7b\251\uff7b\001\002\000\004\076\u02c4\001\002\000" +
    "\022\002\uff68\015\uff68\025\uff68\140\uff68\216\uff68\225\uff68" +
    "\237\uff68\251\u02a0\001\002\000\004\211\u02c0\001\002\000" +
    "\020\002\uff72\015\uff72\025\uff72\140\uff72\216\u02a2\225\uff72" +
    "\237\uff72\001\002\000\004\015\u02b8\001\002\000\016\002" +
    "\uff83\015\uff83\025\uff83\140\u028a\225\uff83\237\uff83\001\002" +
    "\000\014\002\uff87\015\uff87\025\u02a5\225\uff87\237\u02a7\001" +
    "\002\000\004\110\u02b6\001\002\000\010\002\uff6a\015\uff6a" +
    "\225\u02a8\001\002\000\010\002\uff88\015\uff88\225\uff88\001" +
    "\002\000\004\257\u02ac\001\002\000\006\002\uff8f\015\u02aa" +
    "\001\002\000\012\206\uff1d\244\uff1d\251\013\257\uff1d\001" +
    "\002\000\004\002\uff91\001\002\000\004\305\u02ae\001\002" +
    "\000\006\253\u02b1\260\u02b2\001\002\000\004\273\u02af\001" +
    "\002\000\004\305\u02b0\001\002\000\006\253\uff67\260\uff67" +
    "\001\002\000\004\305\u02b3\001\002\000\006\002\uff6b\015" +
    "\uff6b\001\002\000\004\273\u02b4\001\002\000\004\305\u02b5" +
    "\001\002\000\006\253\uff66\260\uff66\001\002\000\004\305" +
    "\u02b7\001\002\000\010\002\uff89\015\uff89\225\uff89\001\002" +
    "\000\016\017\u02b9\156\u02bb\157\u02bc\167\u02be\210\u02bd\227" +
    "\u02bf\001\002\000\020\002\uff6c\015\uff6c\025\uff6c\140\uff6c" +
    "\225\uff6c\237\uff6c\305\uff6c\001\002\000\016\002\uff73\015" +
    "\uff73\025\uff73\140\uff73\225\uff73\237\uff73\001\002\000\020" +
    "\002\uff71\015\uff71\025\uff71\140\uff71\225\uff71\237\uff71\305" +
    "\uff71\001\002\000\020\002\uff70\015\uff70\025\uff70\140\uff70" +
    "\225\uff70\237\uff70\305\uff70\001\002\000\020\002\uff6e\015" +
    "\uff6e\025\uff6e\140\uff6e\225\uff6e\237\uff6e\305\uff6e\001\002" +
    "\000\020\002\uff6d\015\uff6d\025\uff6d\140\uff6d\225\uff6d\237" +
    "\uff6d\305\uff6d\001\002\000\020\002\uff6f\015\uff6f\025\uff6f" +
    "\140\uff6f\225\uff6f\237\uff6f\305\uff6f\001\002\000\004\257" +
    "\u02c1\001\002\000\004\305\u02ae\001\002\000\006\253\u02b1" +
    "\260\u02c3\001\002\000\020\002\uff69\015\uff69\025\uff69\140" +
    "\uff69\216\uff69\225\uff69\237\uff69\001\002\000\004\051\u02c5" +
    "\001\002\000\030\002\uff75\015\uff75\025\uff75\062\uff75\067" +
    "\u02c6\136\uff75\140\uff75\216\uff75\225\uff75\237\uff75\251\uff75" +
    "\001\002\000\004\226\u02cd\001\002\000\026\002\uff79\015" +
    "\uff79\025\uff79\062\u02c8\136\uff79\140\uff79\216\uff79\225\uff79" +
    "\237\uff79\251\uff79\001\002\000\004\024\u02d0\001\002\000" +
    "\024\002\uff77\015\uff77\025\uff77\136\u02cb\140\uff77\216\uff77" +
    "\225\uff77\237\uff77\251\uff77\001\002\000\022\002\uff7c\015" +
    "\uff7c\025\uff7c\140\uff7c\216\uff7c\225\uff7c\237\uff7c\251\uff7c" +
    "\001\002\000\004\226\u02cd\001\002\000\022\002\uff78\015" +
    "\uff78\025\uff78\140\uff78\216\uff78\225\uff78\237\uff78\251\uff78" +
    "\001\002\000\004\024\u02ce\001\002\000\004\305\u02cf\001" +
    "\002\000\026\002\uff74\015\uff74\025\uff74\062\uff74\136\uff74" +
    "\140\uff74\216\uff74\225\uff74\237\uff74\251\uff74\001\002\000" +
    "\004\305\u02d1\001\002\000\024\002\uff7a\015\uff7a\025\uff7a" +
    "\136\uff7a\140\uff7a\216\uff7a\225\uff7a\237\uff7a\251\uff7a\001" +
    "\002\000\026\002\uff76\015\uff76\025\uff76\062\uff76\136\uff76" +
    "\140\uff76\216\uff76\225\uff76\237\uff76\251\uff76\001\002\000" +
    "\046\014\u01b3\021\u01af\022\u01bb\023\u01bc\031\u01ad\046\u01ae" +
    "\047\u01b7\050\u01b6\056\u01b8\073\u01bd\123\u01bf\141\u01b9\215" +
    "\u01b0\220\u01ba\221\u01b5\231\u01b1\232\u01b4\245\u01be\001\002" +
    "\000\006\253\u02d6\260\u02d7\001\002\000\006\253\uff63\260" +
    "\uff63\001\002\000\004\277\u02d3\001\002\000\030\002\uff85" +
    "\025\uff85\036\u01d4\140\uff85\161\u02d8\165\u02d9\202\uff85\216" +
    "\uff85\225\uff85\237\uff85\251\uff85\001\002\000\004\024\u02ea" +
    "\001\002\000\004\024\u02e1\001\002\000\022\002\uff7b\025" +
    "\uff7b\140\uff7b\202\u029e\216\uff7b\225\uff7b\237\uff7b\251\uff7b" +
    "\001\002\000\020\002\uff68\025\uff68\140\uff68\216\uff68\225" +
    "\uff68\237\uff68\251\u02a0\001\002\000\016\002\uff72\025\uff72" +
    "\140\uff72\216\u02a2\225\uff72\237\uff72\001\002\000\014\002" +
    "\uff83\025\uff83\140\u028a\225\uff83\237\uff83\001\002\000\012" +
    "\002\uff87\025\u02a5\225\uff87\237\u02a7\001\002\000\006\002" +
    "\uff6a\225\u02a8\001\002\000\004\002\uff90\001\002\000\004" +
    "\043\u02e2\001\002\000\004\277\u0217\001\002\000\004\277" +
    "\u02e4\001\002\000\010\002\uff81\036\uff81\257\u02e6\001\002" +
    "\000\006\002\uff85\036\u01d4\001\002\000\004\305\u02e7\001" +
    "\002\000\004\260\u02e8\001\002\000\006\002\uff82\036\uff82" +
    "\001\002\000\004\002\uff8e\001\002\000\004\257\u02eb\001" +
    "\002\000\004\277\u02d3\001\002\000\006\253\u02d6\260\u02ed" +
    "\001\002\000\024\002\uff85\025\uff85\036\u01d4\140\uff85\202" +
    "\uff85\216\uff85\225\uff85\237\uff85\251\uff85\001\002\000\022" +
    "\002\uff7b\025\uff7b\140\uff7b\202\u029e\216\uff7b\225\uff7b\237" +
    "\uff7b\251\uff7b\001\002\000\020\002\uff68\025\uff68\140\uff68" +
    "\216\uff68\225\uff68\237\uff68\251\u02a0\001\002\000\016\002" +
    "\uff72\025\uff72\140\uff72\216\u02a2\225\uff72\237\uff72\001\002" +
    "\000\014\002\uff83\025\uff83\140\u028a\225\uff83\237\uff83\001" +
    "\002\000\012\002\uff87\025\u02a5\225\uff87\237\u02a7\001\002" +
    "\000\006\002\uff6a\225\u02a8\001\002\000\004\002\uff8d\001" +
    "\002\000\006\253\uff62\260\uff62\001\002\000\012\002\uff85" +
    "\036\u01d4\253\uff85\260\uff85\001\002\000\010\002\uff61\253" +
    "\uff61\260\uff61\001\002\000\004\305\u0300\001\002\000\012" +
    "\002\uff85\036\u01d4\140\uff85\216\uff85\001\002\000\010\002" +
    "\uff83\140\u028a\216\u02fb\001\002\000\004\015\u02fd\001\002" +
    "\000\004\002\uff93\001\002\000\016\017\u02b9\156\u02bb\157" +
    "\u02bc\167\u02be\210\u02bd\227\u02bf\001\002\000\006\002\uff83" +
    "\140\u028a\001\002\000\004\002\uff94\001\002\000\026\002" +
    "\uff64\025\uff64\036\uff64\140\uff64\161\u0301\202\uff64\216\uff64" +
    "\225\uff64\237\uff64\251\uff64\001\002\000\004\024\u030a\001" +
    "\002\000\024\002\uff85\025\uff85\036\u01d4\140\uff85\202\uff85" +
    "\216\uff85\225\uff85\237\uff85\251\uff85\001\002\000\022\002" +
    "\uff7b\025\uff7b\140\uff7b\202\u029e\216\uff7b\225\uff7b\237\uff7b" +
    "\251\uff7b\001\002\000\020\002\uff68\025\uff68\140\uff68\216" +
    "\uff68\225\uff68\237\uff68\251\u02a0\001\002\000\016\002\uff72" +
    "\025\uff72\140\uff72\216\u02a2\225\uff72\237\uff72\001\002\000" +
    "\014\002\uff83\025\uff83\140\u028a\225\uff83\237\uff83\001\002" +
    "\000\012\002\uff87\025\u02a5\225\uff87\237\u02a7\001\002\000" +
    "\006\002\uff6a\225\u02a8\001\002\000\004\002\uff92\001\002" +
    "\000\004\257\u030b\001\002\000\004\277\u02d3\001\002\000" +
    "\006\253\u02d6\260\u030d\001\002\000\024\002\uff65\025\uff65" +
    "\036\uff65\140\uff65\202\uff65\216\uff65\225\uff65\237\uff65\251" +
    "\uff65\001\002\000\004\257\u030f\001\002\000\004\277\u02d3" +
    "\001\002\000\006\253\u02d6\260\u0311\001\002\000\024\002" +
    "\uff85\025\uff85\036\u01d4\140\uff85\202\uff85\216\uff85\225\uff85" +
    "\237\uff85\251\uff85\001\002\000\022\002\uff7b\025\uff7b\140" +
    "\uff7b\202\u029e\216\uff7b\225\uff7b\237\uff7b\251\uff7b\001\002" +
    "\000\020\002\uff68\025\uff68\140\uff68\216\uff68\225\uff68\237" +
    "\uff68\251\u02a0\001\002\000\016\002\uff72\025\uff72\140\uff72" +
    "\216\u02a2\225\uff72\237\uff72\001\002\000\014\002\uff83\025" +
    "\uff83\140\u028a\225\uff83\237\uff83\001\002\000\012\002\uff87" +
    "\025\u02a5\225\uff87\237\u02a7\001\002\000\006\002\uff6a\225" +
    "\u02a8\001\002\000\004\002\uff8c\001\002\000\004\150\u031a" +
    "\001\002\000\004\223\u031b\001\002\000\004\277\351\001" +
    "\002\000\004\257\u031d\001\002\000\006\260\uffc3\277\333" +
    "\001\002\000\004\260\u031f\001\002\000\004\015\u0320\001" +
    "\002\000\004\277\u0321\001\002\000\010\002\ufef6\116\ufef6" +
    "\251\u0323\001\002\000\006\002\ufef4\116\u0327\001\002\000" +
    "\004\114\u0324\001\002\000\004\115\u0325\001\002\000\006" +
    "\002\ufef7\116\ufef7\001\002\000\004\002\ufef8\001\002\000" +
    "\004\257\u0328\001\002\000\004\305\u02ae\001\002\000\006" +
    "\253\u02b1\260\u032a\001\002\000\004\002\ufef5\001\002\000" +
    "\006\107\u0260\277\uff7d\001\002\000\004\277\u0222\001\002" +
    "\000\004\257\u0225\001\002\000\004\174\u032f\001\002\000" +
    "\046\014\u01b3\021\u01af\022\u01bb\023\u01bc\031\u01ad\046\u01ae" +
    "\047\u01b7\050\u01b6\056\u01b8\073\u01bd\123\u01bf\141\u01b9\215" +
    "\u01b0\220\u01ba\221\u01b5\231\u01b1\232\u01b4\245\u01be\001\002" +
    "\000\006\124\u0332\140\uff2d\001\002\000\004\140\u0334\001" +
    "\002\000\046\014\u01b3\021\u01af\022\u01bb\023\u01bc\031\u01ad" +
    "\046\u01ae\047\u01b7\050\u01b6\056\u01b8\073\u01bd\123\u01bf\141" +
    "\u01b9\215\u01b0\220\u01ba\221\u01b5\231\u01b1\232\u01b4\245\u01be" +
    "\001\002\000\004\140\uff2e\001\002\000\004\305\u0335\001" +
    "\002\000\026\002\uff2a\033\u026c\036\u026b\071\u0269\117\u0272" +
    "\142\u0273\164\u026e\212\u026a\222\u026d\241\u0270\001\002\000" +
    "\026\002\uff8a\033\u026c\036\u026b\071\u0269\117\u0272\142\u0273" +
    "\164\u026e\212\u026a\222\u026d\241\u0270\001\002\000\004\002" +
    "\uffcb\001\002\000\004\002\uffcd\001\002\000\004\002\uffcc" +
    "\001\002\000\006\065\u025d\223\uff7f\001\002\000\004\223" +
    "\u033c\001\002\000\006\107\u0260\277\uff7d\001\002\000\004" +
    "\277\351\001\002\000\024\015\uff85\025\uff85\036\u01d4\140" +
    "\uff85\202\uff85\216\uff85\225\uff85\237\uff85\251\uff85\001\002" +
    "\000\022\015\uff7b\025\uff7b\140\uff7b\202\u029e\216\uff7b\225" +
    "\uff7b\237\uff7b\251\uff7b\001\002\000\020\015\uff68\025\uff68" +
    "\140\uff68\216\uff68\225\uff68\237\uff68\251\u02a0\001\002\000" +
    "\016\015\uff72\025\uff72\140\uff72\216\u02a2\225\uff72\237\uff72" +
    "\001\002\000\014\015\uff83\025\uff83\140\u028a\225\uff83\237" +
    "\uff83\001\002\000\012\015\uff87\025\u02a5\225\uff87\237\u02a7" +
    "\001\002\000\006\015\uff6a\225\u02a8\001\002\000\004\015" +
    "\u02aa\001\002\000\004\277\351\001\002\000\004\233\u0348" +
    "\001\002\000\004\277\351\001\002\000\006\002\uff51\160" +
    "\u0204\001\002\000\004\002\uff50\001\002\000\004\002\uff52" +
    "\001\002\000\006\002\uffd0\277\351\001\002\000\004\002" +
    "\uffcf\001\002\000\004\002\uffce\001\002\000\004\150\uffac" +
    "\001\002\000\004\234\u0362\001\002\000\004\150\uffad\001" +
    "\002\000\004\150\u0359\001\002\000\004\150\uffae\001\002" +
    "\000\004\277\u0355\001\002\000\004\234\u0356\001\002\000" +
    "\004\105\u0357\001\002\000\004\277\u0358\001\002\000\004" +
    "\002\uffb6\001\002\000\010\044\u035a\223\u035e\277\u035b\001" +
    "\002\000\004\277\u0361\001\002\000\012\002\uff5b\100\uff5b" +
    "\234\uff5b\305\uff5c\001\002\000\006\100\uffb2\234\uffb2\001" +
    "\002\000\004\305\u0360\001\002\000\004\277\351\001\002" +
    "\000\006\100\uffb0\234\uffb0\001\002\000\006\100\uffaf\234" +
    "\uffaf\001\002\000\006\100\uffb1\234\uffb1\001\002\000\006" +
    "\200\u0364\277\uffa6\001\002\000\004\277\u0365\001\002\000" +
    "\004\277\uffa7\001\002\000\006\002\uffa8\251\u0367\001\002" +
    "\000\004\002\uffb4\001\002\000\004\104\u0368\001\002\000" +
    "\004\277\u036a\001\002\000\004\002\uffa9\001\002\000\006" +
    "\002\uff5a\075\uff5a\001\002\000\004\277\u039a\001\002\000" +
    "\004\277\351\001\002\000\004\277\351\001\002\000\020" +
    "\004\u036f\030\u0374\057\u0370\160\u0204\172\u0371\173\u0375\213" +
    "\uff3c\001\002\000\010\035\uff96\107\u0260\160\uff7d\001\002" +
    "\000\012\034\u0376\107\u020f\160\uff43\277\uff98\001\002\000" +
    "\004\234\u038a\001\002\000\004\035\u0386\001\002\000\004" +
    "\213\u037a\001\002\000\006\034\u0376\277\uff98\001\002\000" +
    "\004\035\uff97\001\002\000\004\277\uff99\001\002\000\004" +
    "\277\u0378\001\002\000\004\277\u02d3\001\002\000\004\002" +
    "\uffa2\001\002\000\020\002\uff87\025\u02a5\070\u037e\140\u037b" +
    "\211\u0380\225\u037c\237\u02a7\001\002\000\004\305\u0385\001" +
    "\002\000\004\257\uff9b\001\002\000\004\002\uff9c\001\002" +
    "\000\016\017\u02b9\156\u02bb\157\u02bc\167\u02be\210\u02bd\227" +
    "\u02bf\001\002\000\004\257\u0381\001\002\000\004\257\uff9a" +
    "\001\002\000\004\305\u02ae\001\002\000\006\253\u02b1\260" +
    "\u0383\001\002\000\004\002\uff9d\001\002\000\004\002\uffa0" +
    "\001\002\000\004\002\uff9f\001\002\000\004\257\u0387\001" +
    "\002\000\004\277\u02d3\001\002\000\006\253\u02d6\260\u0389" +
    "\001\002\000\004\002\uffa5\001\002\000\004\277\351\001" +
    "\002\000\004\002\uff9e\001\002\000\004\277\u038f\001\002" +
    "\000\004\160\u0204\001\002\000\004\002\uffa1\001\002\000" +
    "\004\002\uffa3\001\002\000\004\160\u0204\001\002\000\012" +
    "\002\uff83\025\uff83\140\u028a\237\uff83\001\002\000\010\002" +
    "\uff87\025\u02a5\237\u02a7\001\002\000\004\002\uffa4\001\002" +
    "\000\006\015\u0396\172\u0395\001\002\000\004\234\u0398\001" +
    "\002\000\012\206\uff1d\244\uff1d\251\013\257\uff1d\001\002" +
    "\000\004\002\uff54\001\002\000\004\277\351\001\002\000" +
    "\004\002\uff53\001\002\000\004\150\u039b\001\002\000\004" +
    "\277\351\001\002\000\006\115\uff3c\160\u0204\001\002\000" +
    "\004\115\u039e\001\002\000\004\002\ufef3\001\002\000\004" +
    "\277\u036a\001\002\000\010\006\u034f\122\u0351\206\u0353\001" +
    "\002\000\004\277\u03a2\001\002\000\004\100\u03a3\001\002" +
    "\000\004\105\u03a4\001\002\000\004\277\u03a5\001\002\000" +
    "\004\002\uffb5\001\002\000\004\100\u03a7\001\002\000\006" +
    "\200\u0364\277\uffa6\001\002\000\004\277\u03a9\001\002\000" +
    "\004\002\uffb3\001\002\000\004\075\u03ab\001\002\000\010" +
    "\006\uffab\122\uffab\206\uffab\001\002\000\004\002\uff09\001" +
    "\002\000\004\277\351\001\002\000\004\277\351\001\002" +
    "\000\004\277\ufee9\001\002\000\004\277\u03b1\001\002\000" +
    "\004\002\ufefa\001\002\000\004\002\ufeea\001\002\000\004" +
    "\121\u03b4\001\002\000\004\305\u03b5\001\002\000\006\126" +
    "\uffd1\155\u03b6\001\002\000\004\126\uffd2\001\002\000\004" +
    "\126\u03b8\001\002\000\004\223\u03b9\001\002\000\004\277" +
    "\351\001\002\000\006\002\uff3c\160\u0204\001\002\000\004" +
    "\002\uffd3\001\002\000\014\122\uff1e\206\uff1e\244\uff1e\253" +
    "\u03c8\257\uff1e\001\002\000\014\122\uff1a\206\uff1a\244\uff1a" +
    "\253\uff1a\257\uff1a\001\002\000\004\015\u03c4\001\002\000" +
    "\004\015\u03c0\001\002\000\004\257\u03c1\001\002\000\012" +
    "\206\uff1d\244\uff1d\251\013\257\uff1d\001\002\000\004\260" +
    "\u03c3\001\002\000\014\122\uff1b\206\uff1b\244\uff1b\253\uff1b" +
    "\257\uff1b\001\002\000\004\257\u03c5\001\002\000\012\206" +
    "\uff1d\244\uff1d\251\013\257\uff1d\001\002\000\004\260\u03c7" +
    "\001\002\000\014\122\uff1c\206\uff1c\244\uff1c\253\uff1c\257" +
    "\uff1c\001\002\000\006\277\u03be\305\u03bf\001\002\000\014" +
    "\122\uff19\206\uff19\244\uff19\253\uff19\257\uff19\001\002\000" +
    "\012\002\uff08\110\u03fd\134\u03dd\305\u03de\001\002\000\004" +
    "\103\ufef2\001\002\000\004\002\uffc0\001\002\000\010\002" +
    "\uff04\134\u03dd\305\u03de\001\002\000\010\002\uff45\134\uff45" +
    "\305\uff45\001\002\000\004\201\u03fb\001\002\000\004\233" +
    "\u03f9\001\002\000\004\104\u03f6\001\002\000\004\277\u03f3" +
    "\001\002\000\004\277\351\001\002\000\004\223\u03f0\001" +
    "\002\000\004\233\u03ee\001\002\000\010\002\uff46\134\uff46" +
    "\305\uff46\001\002\000\004\200\u03e4\001\002\000\004\103" +
    "\u03dc\001\002\000\004\103\ufef1\001\002\000\004\277\351" +
    "\001\002\000\004\002\ufefb\001\002\000\012\002\ufeff\110" +
    "\u03df\134\u03dd\305\u03de\001\002\000\004\305\u03e3\001\002" +
    "\000\004\002\ufeed\001\002\000\004\277\u03e1\001\002\000" +
    "\004\002\ufefe\001\002\000\010\002\ufefd\134\u03dd\305\u03de" +
    "\001\002\000\004\002\ufefc\001\002\000\004\002\ufeec\001" +
    "\002\000\004\277\u03e5\001\002\000\006\002\uffbd\150\u03e6" +
    "\001\002\000\010\044\u03e7\223\u03e9\277\u035b\001\002\000" +
    "\004\277\u03ed\001\002\000\004\002\uffbc\001\002\000\004" +
    "\277\351\001\002\000\004\305\u03eb\001\002\000\004\002" +
    "\uffb9\001\002\000\004\002\uffba\001\002\000\004\002\uffbb" +
    "\001\002\000\004\277\351\001\002\000\004\002\uff02\001" +
    "\002\000\004\277\351\001\002\000\004\002\ufeeb\001\002" +
    "\000\004\002\uff00\001\002\000\010\002\uff5d\134\uff5d\305" +
    "\uff5d\001\002\000\010\002\ufeef\134\u03dd\305\u03de\001\002" +
    "\000\004\002\ufeee\001\002\000\004\105\u03f7\001\002\000" +
    "\004\277\u03f8\001\002\000\004\002\uffbf\001\002\000\004" +
    "\277\351\001\002\000\004\002\uff01\001\002\000\004\002" +
    "\uffbe\001\002\000\004\002\uff03\001\002\000\004\277\u03ff" +
    "\001\002\000\004\002\uff07\001\002\000\010\002\uff06\134" +
    "\u03dd\305\u03de\001\002\000\004\002\uff05\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u03fe\000\140\002\075\005\072\012\041\013\003\014" +
    "\021\015\054\016\042\017\004\021\032\022\062\024\036" +
    "\025\006\107\063\122\055\123\053\134\025\135\073\136" +
    "\044\137\017\140\077\143\016\144\035\145\011\146\047" +
    "\147\033\150\045\151\020\152\052\153\046\154\061\155" +
    "\024\156\050\157\100\160\076\161\007\162\067\223\043" +
    "\224\026\225\005\226\031\227\022\230\070\231\037\251" +
    "\071\252\023\253\064\254\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\217\u03cc\255\u03d7\001\001\000\002" +
    "\001\001\000\006\110\u03bb\111\u03bc\001\001\000\002\001" +
    "\001\000\004\023\u03ac\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\235\u039f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\232\u034f\233\u0351\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\u034d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\u0337\107" +
    "\063\122\u0338\152\u0336\001\001\000\006\175\u0257\216\u025a" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\222\004\224\007\221\010\220\026\223\027\225\001\001" +
    "\000\002\001\001\000\006\216\u01fd\246\u01f6\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\100\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\033\151\034\155\035\154\036\137\044\121\046" +
    "\132\047\133\050\120\051\116\052\143\053\122\054\136" +
    "\071\147\073\152\074\141\100\126\101\117\104\140\113" +
    "\150\121\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\033\u01a8\034\155\035\154" +
    "\036\137\044\121\046\132\047\133\050\120\051\116\052" +
    "\143\053\122\054\136\071\147\073\152\074\141\100\126" +
    "\101\117\104\140\113\150\121\127\001\001\000\056\005" +
    "\212\033\u013f\034\316\035\154\036\137\044\121\046\315" +
    "\047\133\050\120\051\116\052\143\053\122\054\136\071" +
    "\147\073\152\074\141\100\126\101\117\104\140\107\211" +
    "\113\207\121\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\033\u01a7\034\155\035\154\036\137\044\121" +
    "\046\132\047\133\050\120\051\116\052\143\053\122\054" +
    "\136\071\147\073\152\074\141\100\126\101\117\104\140" +
    "\113\150\121\127\001\001\000\054\033\u0198\034\155\035" +
    "\154\036\137\044\121\046\132\047\133\050\120\051\116" +
    "\052\143\053\122\054\136\071\147\073\152\074\141\100" +
    "\126\101\117\102\u0196\104\140\113\150\121\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\033\u0195\034" +
    "\155\035\154\036\137\044\121\046\132\047\133\050\120" +
    "\051\116\052\143\053\122\054\136\071\147\073\152\074" +
    "\141\100\126\101\117\104\140\113\150\121\127\001\001" +
    "\000\052\033\u0193\034\155\035\154\036\137\044\121\046" +
    "\132\047\133\050\120\051\116\052\143\053\122\054\136" +
    "\071\147\073\152\074\141\100\126\101\117\104\140\113" +
    "\150\121\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\033\u0179\034" +
    "\155\035\154\036\137\044\121\046\132\047\133\050\120" +
    "\051\116\052\143\053\122\054\136\071\147\073\152\074" +
    "\141\100\126\101\117\104\140\113\150\121\127\001\001" +
    "\000\002\001\001\000\004\113\u0176\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\033\156\034" +
    "\155\035\154\036\137\044\121\046\132\047\133\050\120" +
    "\051\116\052\143\053\122\054\136\071\147\073\152\074" +
    "\141\100\126\101\117\104\140\113\150\121\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\033\u016f\034\155\035\154\036\137\044\121\046\132" +
    "\047\133\050\120\051\116\052\143\053\122\054\136\071" +
    "\147\073\152\074\141\100\126\101\117\104\140\113\150" +
    "\121\127\001\001\000\052\033\u016e\034\155\035\154\036" +
    "\137\044\121\046\132\047\133\050\120\051\116\052\143" +
    "\053\122\054\136\071\147\073\152\074\141\100\126\101" +
    "\117\104\140\113\150\121\127\001\001\000\002\001\001" +
    "\000\052\033\u015b\034\155\035\154\036\137\044\121\046" +
    "\132\047\133\050\120\051\116\052\143\053\122\054\136" +
    "\071\147\073\152\074\141\100\126\101\117\104\140\113" +
    "\150\121\127\001\001\000\052\033\u015a\034\155\035\154" +
    "\036\137\044\121\046\132\047\133\050\120\051\116\052" +
    "\143\053\122\054\136\071\147\073\152\074\141\100\126" +
    "\101\117\104\140\113\150\121\127\001\001\000\052\033" +
    "\u0159\034\155\035\154\036\137\044\121\046\132\047\133" +
    "\050\120\051\116\052\143\053\122\054\136\071\147\073" +
    "\152\074\141\100\126\101\117\104\140\113\150\121\127" +
    "\001\001\000\002\001\001\000\052\033\u0154\034\155\035" +
    "\154\036\137\044\121\046\132\047\133\050\120\051\116" +
    "\052\143\053\122\054\136\071\147\073\152\074\141\100" +
    "\126\101\117\104\140\113\150\121\127\001\001\000\052" +
    "\033\u0152\034\155\035\154\036\137\044\121\046\132\047" +
    "\133\050\120\051\116\052\143\053\122\054\136\071\147" +
    "\073\152\074\141\100\126\101\117\104\140\113\150\121" +
    "\127\001\001\000\052\033\u014f\034\155\035\154\036\137" +
    "\044\121\046\132\047\133\050\120\051\116\052\143\053" +
    "\122\054\136\071\147\073\152\074\141\100\126\101\117" +
    "\104\140\113\150\121\127\001\001\000\052\033\u014c\034" +
    "\155\035\154\036\137\044\121\046\132\047\133\050\120" +
    "\051\116\052\143\053\122\054\136\071\147\073\152\074" +
    "\141\100\126\101\117\104\140\113\150\121\127\001\001" +
    "\000\052\033\u014b\034\155\035\154\036\137\044\121\046" +
    "\132\047\133\050\120\051\116\052\143\053\122\054\136" +
    "\071\147\073\152\074\141\100\126\101\117\104\140\113" +
    "\150\121\127\001\001\000\052\033\u0146\034\155\035\154" +
    "\036\137\044\121\046\132\047\133\050\120\051\116\052" +
    "\143\053\122\054\136\071\147\073\152\074\141\100\126" +
    "\101\117\104\140\113\150\121\127\001\001\000\052\033" +
    "\u013f\034\u0140\035\154\036\137\044\121\046\u013e\047\133" +
    "\050\120\051\116\052\143\053\122\054\136\071\147\073" +
    "\152\074\141\100\126\101\117\104\140\113\150\121\127" +
    "\001\001\000\052\033\u013d\034\155\035\154\036\137\044" +
    "\121\046\132\047\133\050\120\051\116\052\143\053\122" +
    "\054\136\071\147\073\152\074\141\100\126\101\117\104" +
    "\140\113\150\121\127\001\001\000\052\033\u013c\034\155" +
    "\035\154\036\137\044\121\046\132\047\133\050\120\051" +
    "\116\052\143\053\122\054\136\071\147\073\152\074\141" +
    "\100\126\101\117\104\140\113\150\121\127\001\001\000" +
    "\002\001\001\000\052\033\u0138\034\155\035\154\036\137" +
    "\044\121\046\132\047\133\050\120\051\116\052\143\053" +
    "\122\054\136\071\147\073\152\074\141\100\126\101\117" +
    "\104\140\113\150\121\127\001\001\000\052\033\u0137\034" +
    "\155\035\154\036\137\044\121\046\132\047\133\050\120" +
    "\051\116\052\143\053\122\054\136\071\147\073\152\074" +
    "\141\100\126\101\117\104\140\113\150\121\127\001\001" +
    "\000\052\033\u0136\034\155\035\154\036\137\044\121\046" +
    "\132\047\133\050\120\051\116\052\143\053\122\054\136" +
    "\071\147\073\152\074\141\100\126\101\117\104\140\113" +
    "\150\121\127\001\001\000\052\033\u0134\034\155\035\154" +
    "\036\137\044\121\046\132\047\133\050\120\051\116\052" +
    "\143\053\122\054\136\071\147\073\152\074\141\100\126" +
    "\101\117\104\140\113\150\121\127\001\001\000\004\113" +
    "\205\001\001\000\002\001\001\000\060\005\212\033\210" +
    "\034\155\035\154\036\137\037\213\044\121\046\132\047" +
    "\133\050\120\051\116\052\143\053\122\054\136\071\147" +
    "\073\152\074\141\100\126\101\117\104\140\107\211\113" +
    "\207\121\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\222\004\224\007\221\010\220\026\223\027" +
    "\225\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\033\216\034\155\035\154\036\137\044\121\046\132\047" +
    "\133\050\120\051\116\052\143\053\122\054\136\071\147" +
    "\073\152\074\141\100\126\101\117\104\140\113\150\121" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\133\u0125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\105\345\001\001\000\006\005\343\107\211\001\001\000" +
    "\004\117\327\001\001\000\004\011\231\001\001\000\004" +
    "\061\321\001\001\000\062\011\236\030\240\031\235\032" +
    "\242\033\241\034\155\035\154\036\137\044\121\046\132" +
    "\047\133\050\120\051\116\052\143\053\122\054\136\071" +
    "\147\073\152\074\141\100\126\101\117\104\140\113\150" +
    "\121\127\001\001\000\064\005\212\030\240\031\235\032" +
    "\242\033\241\034\316\035\154\036\137\044\121\046\315" +
    "\047\133\050\120\051\116\052\143\053\122\054\136\071" +
    "\147\073\152\074\141\100\126\101\117\104\140\107\211" +
    "\113\207\121\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\245\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\031\253\032" +
    "\242\033\241\034\155\035\154\036\137\044\121\046\132" +
    "\047\133\050\120\051\116\052\143\053\122\054\136\071" +
    "\147\073\152\074\141\100\126\101\117\104\140\113\150" +
    "\121\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\061\264\001\001\000\006\066\303\067\304" +
    "\001\001\000\002\001\001\000\056\033\271\034\155\035" +
    "\154\036\137\044\121\046\132\047\133\050\120\051\116" +
    "\052\143\053\122\054\136\060\267\062\270\071\147\073" +
    "\152\074\141\100\126\101\117\104\140\113\150\121\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\063" +
    "\272\001\001\000\004\064\276\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\033\271\034\155" +
    "\035\154\036\137\044\121\046\132\047\133\050\120\051" +
    "\116\052\143\053\122\054\136\062\302\071\147\073\152" +
    "\074\141\100\126\101\117\104\140\113\150\121\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\070\310" +
    "\001\001\000\052\033\306\034\155\035\154\036\137\044" +
    "\121\046\132\047\133\050\120\051\116\052\143\053\122" +
    "\054\136\071\147\073\152\074\141\100\126\101\117\104" +
    "\140\113\150\121\127\001\001\000\002\001\001\000\052" +
    "\033\311\034\155\035\154\036\137\044\121\046\132\047" +
    "\133\050\120\051\116\052\143\053\122\054\136\071\147" +
    "\073\152\074\141\100\126\101\117\104\140\113\150\121" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\030\313\031\235\032\242\033\241\034\155\035\154\036" +
    "\137\044\121\046\132\047\133\050\120\051\116\052\143" +
    "\053\122\054\136\071\147\073\152\074\141\100\126\101" +
    "\117\104\140\113\150\121\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\066\322\067\304" +
    "\001\001\000\002\001\001\000\004\117\341\001\001\000" +
    "\004\117\337\001\001\000\002\001\001\000\002\001\001" +
    "\000\060\030\336\031\235\032\242\033\241\034\155\035" +
    "\154\036\137\044\121\046\132\047\133\050\120\051\116" +
    "\052\143\053\122\054\136\071\147\073\152\074\141\100" +
    "\126\101\117\104\140\113\150\121\127\001\001\000\004" +
    "\041\331\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\060\030\340\031\235\032\242\033\241\034" +
    "\155\035\154\036\137\044\121\046\132\047\133\050\120" +
    "\051\116\052\143\053\122\054\136\071\147\073\152\074" +
    "\141\100\126\101\117\104\140\113\150\121\127\001\001" +
    "\000\002\001\001\000\060\030\342\031\235\032\242\033" +
    "\241\034\155\035\154\036\137\044\121\046\132\047\133" +
    "\050\120\051\116\052\143\053\122\054\136\071\147\073" +
    "\152\074\141\100\126\101\117\104\140\113\150\121\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\u0116\001\001\000\010\043\347\106\352" +
    "\112\353\001\001\000\004\040\u0115\001\001\000\002\001" +
    "\001\000\006\005\u0110\107\211\001\001\000\006\114\362" +
    "\115\363\001\001\000\002\001\001\000\006\043\347\112" +
    "\u010f\001\001\000\004\116\u010d\001\001\000\002\001\001" +
    "\000\004\116\u0105\001\001\000\002\001\001\000\004\116" +
    "\377\001\001\000\004\117\365\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\043\347\112\366\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\033\371\034\155" +
    "\035\154\036\137\044\121\046\132\047\133\050\120\051" +
    "\116\052\143\053\122\054\136\071\147\073\152\074\141" +
    "\100\126\101\117\104\140\113\150\121\127\001\001\000" +
    "\002\001\001\000\004\041\373\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\117\u010b\001\001\000\006\043" +
    "\347\112\u010c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\u0112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\u0119\001" +
    "\001\000\052\033\u0118\034\155\035\154\036\137\044\121" +
    "\046\132\047\133\050\120\051\116\052\143\053\122\054" +
    "\136\071\147\073\152\074\141\100\126\101\117\104\140" +
    "\113\150\121\127\001\001\000\002\001\001\000\004\057" +
    "\u011d\001\001\000\002\001\001\000\054\033\210\034\155" +
    "\035\154\036\137\037\u011c\044\121\046\132\047\133\050" +
    "\120\051\116\052\143\053\122\054\136\071\147\073\152" +
    "\074\141\100\126\101\117\104\140\113\150\121\127\001" +
    "\001\000\002\001\001\000\004\061\u0120\001\001\000\052" +
    "\033\u011f\034\155\035\154\036\137\044\121\046\132\047" +
    "\133\050\120\051\116\052\143\053\122\054\136\071\147" +
    "\073\152\074\141\100\126\101\117\104\140\113\150\121" +
    "\127\001\001\000\002\001\001\000\006\066\u0121\067\304" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\033\u0127\034\155\035\154\036\137\044\121" +
    "\046\132\047\133\050\120\051\116\052\143\053\122\054" +
    "\136\071\147\073\152\074\141\100\126\101\117\104\140" +
    "\113\150\121\127\001\001\000\012\003\222\004\224\007" +
    "\u0126\027\225\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\033\271\034\155\035\154\036\137\044\121\046" +
    "\132\047\133\050\120\051\116\052\143\053\122\054\136" +
    "\060\u0129\062\270\071\147\073\152\074\141\100\126\101" +
    "\117\104\140\113\150\121\127\001\001\000\004\065\u012a" +
    "\001\001\000\002\001\001\000\052\033\u012f\034\155\035" +
    "\154\036\137\044\121\046\132\047\133\050\120\051\116" +
    "\052\143\053\122\054\136\071\147\073\152\074\141\100" +
    "\126\101\117\104\140\113\150\121\127\001\001\000\052" +
    "\033\u012d\034\155\035\154\036\137\044\121\046\132\047" +
    "\133\050\120\051\116\052\143\053\122\054\136\071\147" +
    "\073\152\074\141\100\126\101\117\104\140\113\150\121" +
    "\127\001\001\000\004\065\u012e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\033\u0135\034\155\035\154\036\137" +
    "\044\121\046\132\047\133\050\120\051\116\052\143\053" +
    "\122\054\136\071\147\073\152\074\141\100\126\101\117" +
    "\104\140\113\150\121\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\033\u0142\034" +
    "\155\035\154\036\137\044\121\046\132\047\133\050\120" +
    "\051\116\052\143\053\122\054\136\071\147\073\152\074" +
    "\141\100\126\101\117\104\140\113\150\121\127\001\001" +
    "\000\002\001\001\000\052\033\u0144\034\155\035\154\036" +
    "\137\044\121\046\132\047\133\050\120\051\116\052\143" +
    "\053\122\054\136\071\147\073\152\074\141\100\126\101" +
    "\117\104\140\113\150\121\127\001\001\000\002\001\001" +
    "\000\052\033\u0147\034\155\035\154\036\137\044\121\046" +
    "\132\047\133\050\120\051\116\052\143\053\122\054\136" +
    "\071\147\073\152\074\141\100\126\101\117\104\140\113" +
    "\150\121\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\033\u014a\034\155\035\154\036" +
    "\137\044\121\046\132\047\133\050\120\051\116\052\143" +
    "\053\122\054\136\071\147\073\152\074\141\100\126\101" +
    "\117\104\140\113\150\121\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\033\u0151\034" +
    "\155\035\154\036\137\044\121\046\132\047\133\050\120" +
    "\051\116\052\143\053\122\054\136\071\147\073\152\074" +
    "\141\100\126\101\117\104\140\113\150\121\127\001\001" +
    "\000\052\033\u0150\034\155\035\154\036\137\044\121\046" +
    "\132\047\133\050\120\051\116\052\143\053\122\054\136" +
    "\071\147\073\152\074\141\100\126\101\117\104\140\113" +
    "\150\121\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\033\u0155\034" +
    "\155\035\154\036\137\044\121\046\132\047\133\050\120" +
    "\051\116\052\143\053\122\054\136\071\147\073\152\074" +
    "\141\100\126\101\117\104\140\113\150\121\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\033\u0158\034\155\035\154\036\137\044\121\046\132" +
    "\047\133\050\120\051\116\052\143\053\122\054\136\071" +
    "\147\073\152\074\141\100\126\101\117\104\140\113\150" +
    "\121\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\033\u013f\034\u0169" +
    "\035\154\036\137\044\121\046\u0168\047\133\050\120\051" +
    "\116\052\143\053\122\054\136\071\147\073\152\074\141" +
    "\100\126\101\117\104\140\113\150\121\127\001\001\000" +
    "\052\033\u0167\034\155\035\154\036\137\044\121\046\132" +
    "\047\133\050\120\051\116\052\143\053\122\054\136\071" +
    "\147\073\152\074\141\100\126\101\117\104\140\113\150" +
    "\121\127\001\001\000\052\033\u0166\034\155\035\154\036" +
    "\137\044\121\046\132\047\133\050\120\051\116\052\143" +
    "\053\122\054\136\071\147\073\152\074\141\100\126\101" +
    "\117\104\140\113\150\121\127\001\001\000\052\033\u0165" +
    "\034\155\035\154\036\137\044\121\046\132\047\133\050" +
    "\120\051\116\052\143\053\122\054\136\071\147\073\152" +
    "\074\141\100\126\101\117\104\140\113\150\121\127\001" +
    "\001\000\004\113\u0161\001\001\000\002\001\001\000\060" +
    "\005\212\033\210\034\155\035\154\036\137\037\u0163\044" +
    "\121\046\132\047\133\050\120\051\116\052\143\053\122" +
    "\054\136\071\147\073\152\074\141\100\126\101\117\104" +
    "\140\107\211\113\207\121\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\033\u016b\034\155\035\154\036\137\044\121\046\132\047" +
    "\133\050\120\051\116\052\143\053\122\054\136\071\147" +
    "\073\152\074\141\100\126\101\117\104\140\113\150\121" +
    "\127\001\001\000\002\001\001\000\052\033\u016d\034\155" +
    "\035\154\036\137\044\121\046\132\047\133\050\120\051" +
    "\116\052\143\053\122\054\136\071\147\073\152\074\141" +
    "\100\126\101\117\104\140\113\150\121\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\033\210\034\155\035\154\036\137\037\u0171\044\121\046" +
    "\132\047\133\050\120\051\116\052\143\053\122\054\136" +
    "\071\147\073\152\074\141\100\126\101\117\104\140\113" +
    "\150\121\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\212\107\211\113\u0178\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\056\u017d\001\001\000\002\001\001\000\004\061\u017e" +
    "\001\001\000\006\075\u017f\076\u0182\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\033\u0186" +
    "\034\155\035\154\036\137\044\121\046\132\047\133\050" +
    "\120\051\116\052\143\053\122\054\136\071\147\073\152" +
    "\074\141\077\u0185\100\126\101\117\104\140\113\150\121" +
    "\127\001\001\000\002\001\001\000\054\033\u0186\034\155" +
    "\035\154\036\137\044\121\046\132\047\133\050\120\051" +
    "\116\052\143\053\122\054\136\071\147\073\152\074\141" +
    "\077\u018b\100\126\101\117\104\140\113\150\121\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\033\u0186\034\155\035\154\036\137" +
    "\044\121\046\132\047\133\050\120\051\116\052\143\053" +
    "\122\054\136\071\147\073\152\074\141\077\u018d\100\126" +
    "\101\117\104\140\113\150\121\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\033\210\034\155\035\154\036\137\037\u0192\044" +
    "\121\046\132\047\133\050\120\051\116\052\143\053\122" +
    "\054\136\071\147\073\152\074\141\100\126\101\117\104" +
    "\140\113\150\121\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\072" +
    "\u01a5\001\001\000\052\033\u01a2\034\155\035\154\036\137" +
    "\044\121\046\132\047\133\050\120\051\116\052\143\053" +
    "\122\054\136\071\147\073\152\074\141\100\126\101\117" +
    "\104\140\113\150\121\127\001\001\000\004\102\u0199\001" +
    "\001\000\004\072\u019a\001\001\000\002\001\001\000\052" +
    "\033\u01a0\034\155\035\154\036\137\044\121\046\132\047" +
    "\133\050\120\051\116\052\143\053\122\054\136\071\147" +
    "\073\152\074\141\100\126\101\117\104\140\113\150\121" +
    "\127\001\001\000\052\033\u019d\034\155\035\154\036\137" +
    "\044\121\046\132\047\133\050\120\051\116\052\143\053" +
    "\122\054\136\071\147\073\152\074\141\100\126\101\117" +
    "\104\140\113\150\121\127\001\001\000\002\001\001\000" +
    "\052\033\u019f\034\155\035\154\036\137\044\121\046\132" +
    "\047\133\050\120\051\116\052\143\053\122\054\136\071" +
    "\147\073\152\074\141\100\126\101\117\104\140\113\150" +
    "\121\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\033\u01a4\034\155" +
    "\035\154\036\137\044\121\046\132\047\133\050\120\051" +
    "\116\052\143\053\122\054\136\071\147\073\152\074\141" +
    "\100\126\101\117\104\140\113\150\121\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\033\u01aa\034\155\035" +
    "\154\036\137\044\121\046\132\047\133\050\120\051\116" +
    "\052\143\053\122\054\136\071\147\073\152\074\141\100" +
    "\126\101\117\104\140\113\150\121\127\001\001\000\002" +
    "\001\001\000\004\120\u01b1\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\120\u01c3\001\001\000\002" +
    "\001\001\000\004\120\u01c5\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\163\u01cf\172\u01ce\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\120\u01d2\001" +
    "\001\000\004\174\u01d4\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\163\u01d8\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\120\u01da\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\033\210\034\155\035\154\036\137\037\u01e7\044\121\046" +
    "\132\047\133\050\120\051\116\052\143\053\122\054\136" +
    "\071\147\073\152\074\141\100\126\101\117\103\u01e5\104" +
    "\140\113\150\121\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\033\210\034\155\035" +
    "\154\036\137\037\u01f0\044\121\046\132\047\133\050\120" +
    "\051\116\052\143\053\122\054\136\071\147\073\152\074" +
    "\141\100\126\101\117\104\140\113\150\121\127\001\001" +
    "\000\002\001\001\000\054\033\210\034\155\035\154\036" +
    "\137\037\u01ed\044\121\046\132\047\133\050\120\051\116" +
    "\052\143\053\122\054\136\071\147\073\152\074\141\100" +
    "\126\101\117\104\140\113\150\121\127\001\001\000\002" +
    "\001\001\000\052\033\216\034\155\035\154\036\137\044" +
    "\121\046\132\047\133\050\120\051\116\052\143\053\122" +
    "\054\136\071\147\073\152\074\141\100\126\101\117\104" +
    "\140\113\150\121\127\001\001\000\052\033\u01ea\034\155" +
    "\035\154\036\137\044\121\046\132\047\133\050\120\051" +
    "\116\052\143\053\122\054\136\071\147\073\152\074\141" +
    "\100\126\101\117\104\140\113\150\121\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\033\u01f2\034\155\035\154\036\137\044\121" +
    "\046\132\047\133\050\120\051\116\052\143\053\122\054" +
    "\136\071\147\073\152\074\141\100\126\101\117\104\140" +
    "\113\150\121\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\u022f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\237\u0217\001\001\000\002\001\001\000\004" +
    "\201\u0213\001\001\000\004\201\u0211\001\001\000\004\201" +
    "\u020d\001\001\000\002\001\001\000\004\043\u0201\001\001" +
    "\000\004\125\u0202\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\127\u0207\132\u0206\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\132\u020a\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\033\u020c" +
    "\034\155\035\154\036\137\044\121\046\132\047\133\050" +
    "\120\051\116\052\143\053\122\054\136\071\147\073\152" +
    "\074\141\100\126\101\117\104\140\113\150\121\127\001" +
    "\001\000\002\001\001\000\004\043\u0210\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\u0214\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\201" +
    "\u0218\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\u021c\001\001\000\006\124\u021e\125" +
    "\u021d\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\201\u0220\001\001\000\004\044\u0222\001\001\000\002\001" +
    "\001\000\004\244\u0223\001\001\000\002\001\001\000\006" +
    "\120\u0226\245\u0227\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\247\u0229\001\001\000\004\120\u022c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\221\u024a\001\001\000" +
    "\004\221\u0233\001\001\000\004\043\u0235\001\001\000\002" +
    "\001\001\000\004\126\u0238\001\001\000\002\001\001\000" +
    "\006\041\u023c\042\u023b\001\001\000\004\117\u0239\001\001" +
    "\000\006\005\u023a\107\211\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\126\u023e\001\001" +
    "\000\004\117\u023f\001\001\000\010\005\u0241\006\u0240\107" +
    "\211\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\130\u0244\131\u0243\132\u0246\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\131\u0249\132\u0246\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\u024b\001\001\000\004\126\u024d\001\001" +
    "\000\006\041\u023c\042\u0250\001\001\000\004\117\u024e\001" +
    "\001\000\006\005\u024f\107\211\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\126\u0252\001\001\000\004\117" +
    "\u0253\001\001\000\010\005\u0241\006\u0254\107\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\237\u028c\001\001" +
    "\000\004\202\u0286\001\001\000\004\202\u0278\001\001\000" +
    "\002\001\001\000\004\202\u025e\001\001\000\004\044\u0262" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\244\u0263\001\001\000\002\001\001\000\004" +
    "\120\u0265\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\256\u026e\257\u0270\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\257\u0275\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\u0279\001" +
    "\001\000\004\171\u027a\001\001\000\004\174\u0283\001\001" +
    "\000\006\165\u027e\167\u027c\001\001\000\002\001\001\000" +
    "\004\174\u027f\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\165\u0282\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\u0285\107\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\174\u0288\001" +
    "\001\000\004\204\u028a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\202\u028d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\202\u0297" +
    "\001\001\000\004\043\u0298\001\001\000\004\174\u029c\001" +
    "\001\000\002\001\001\000\006\043\u02f8\177\u02f7\001\001" +
    "\000\006\164\u02d4\166\u02d3\001\001\000\004\205\u029e\001" +
    "\001\000\002\001\001\000\004\213\u02a0\001\001\000\002" +
    "\001\001\000\004\200\u02a2\001\001\000\002\001\001\000" +
    "\004\204\u02a3\001\001\000\004\173\u02a5\001\001\000\002" +
    "\001\001\000\004\214\u02a8\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\u02aa\107\211" +
    "\001\001\000\002\001\001\000\004\215\u02ac\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\177\u02b9\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\215\u02c1\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\206\u02c6\001" +
    "\001\000\004\211\u02d1\001\001\000\004\210\u02c8\001\001" +
    "\000\002\001\001\000\004\207\u02c9\001\001\000\002\001" +
    "\001\000\004\211\u02cb\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\120\u02f5" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\164" +
    "\u02f4\001\001\000\004\174\u02d9\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\205\u02da\001\001\000\004\213" +
    "\u02db\001\001\000\004\200\u02dc\001\001\000\004\204\u02dd" +
    "\001\001\000\004\173\u02de\001\001\000\004\214\u02df\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\237\u02e2" +
    "\001\001\000\002\001\001\000\004\176\u02e4\001\001\000" +
    "\004\174\u02e8\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\164\u02d4\166\u02eb\001\001\000\002\001\001\000\004" +
    "\174\u02ed\001\001\000\004\205\u02ee\001\001\000\004\213" +
    "\u02ef\001\001\000\004\200\u02f0\001\001\000\004\204\u02f1" +
    "\001\001\000\004\173\u02f2\001\001\000\004\214\u02f3\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\174\u02f6" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\174" +
    "\u02f9\001\001\000\004\204\u02fb\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\177\u02fd\001\001\000\004\204" +
    "\u02fe\001\001\000\002\001\001\000\004\170\u0301\001\001" +
    "\000\002\001\001\000\004\174\u0302\001\001\000\004\205" +
    "\u0303\001\001\000\004\213\u0304\001\001\000\004\200\u0305" +
    "\001\001\000\004\204\u0306\001\001\000\004\173\u0307\001" +
    "\001\000\004\214\u0308\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\164\u02d4\166\u030b\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\164\u02d4" +
    "\166\u030f\001\001\000\002\001\001\000\004\174\u0311\001" +
    "\001\000\004\205\u0312\001\001\000\004\213\u0313\001\001" +
    "\000\004\200\u0314\001\001\000\004\204\u0315\001\001\000" +
    "\004\173\u0316\001\001\000\004\214\u0317\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\u031b\001\001\000\002\001\001\000\006\041\u023c\042\u031d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\141\u0321\001\001\000\004\142\u0325\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\215\u0328\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\202\u032b\001" +
    "\001\000\004\044\u032c\001\001\000\004\244\u032d\001\001" +
    "\000\002\001\001\000\004\120\u032f\001\001\000\004\250" +
    "\u0330\001\001\000\002\001\001\000\004\120\u0332\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\256\u0335\257" +
    "\u0270\001\001\000\004\257\u0275\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\175\u033a\001" +
    "\001\000\002\001\001\000\004\202\u033c\001\001\000\004" +
    "\043\u033d\001\001\000\004\174\u033e\001\001\000\004\205" +
    "\u033f\001\001\000\004\213\u0340\001\001\000\004\200\u0341" +
    "\001\001\000\004\204\u0342\001\001\000\004\173\u0343\001" +
    "\001\000\004\214\u0344\001\001\000\002\001\001\000\004" +
    "\043\u034a\001\001\000\002\001\001\000\004\043\u0348\001" +
    "\001\000\004\125\u0349\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\u034c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\241\u035b\242\u035c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\u035e\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\236\u0362\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\234\u0365\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\243\u0368" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\u0393\001\001\000\004\043\u036d\001\001" +
    "\000\010\124\u0372\125\u021d\203\u0371\001\001\000\004\202" +
    "\u038f\001\001\000\006\201\u038c\220\u038b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\220" +
    "\u0376\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\164\u0378\001\001\000\002\001\001\000" +
    "\006\173\u037c\212\u037e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\177\u0383\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\215\u0381\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\164\u02d4\166\u0387" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\u038a\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\125\u038d\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\125\u0390\001\001\000\004\204\u0391\001\001\000\004" +
    "\173\u0392\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\u0396\107\211\001\001\000\002" +
    "\001\001\000\004\043\u0398\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\u039b\001\001\000\006\124\u039c" +
    "\125\u021d\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\243\u03a9\001\001\000\006\232\u03a5\233\u0351\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\236\u03a7\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\u03b1\001\001\000\004\043\u03af\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\222\u03b6\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\u03b9\001\001\000\006\124\u03ba\125\u021d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\u03c1\107\211\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\u03c5\107\211\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\111\u03c8" +
    "\001\001\000\002\001\001\000\004\020\u03fd\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\u03fb\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\240\u03f3\001\001\000\004\043\u03f1" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\u03da\001\001\000\002\001\001\000\004\020" +
    "\u03df\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\u03e1\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\241\u03e7\242\u03e9\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\u03eb\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\u03ee\001\001\000\002\001\001\000\004" +
    "\043\u03f0\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\u03f4\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\u03f9\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\u03ff\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SqlParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SqlParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SqlParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  private Symbol errorToken_;

  // Set if the errorToken_ to be printed in the error message has a different name, e.g.
  // when parsing identifiers instead of defined keywords. This is necessary to avoid
  // conflicting keywords.
  private String expectedTokenName_;

  // list of expected tokens ids from current parsing state
  // for generating syntax error message
  private final List<Integer> expectedTokenIds_ = new ArrayList<Integer>();

  // to avoid reporting trivial tokens as expected tokens in error messages
  private boolean reportExpectedToken(Integer tokenId, int numExpectedTokens) {
    if (SqlScanner.isKeyword(tokenId) ||
        tokenId.intValue() == SqlParserSymbols.COMMA ||
        tokenId.intValue() == SqlParserSymbols.IDENT) {
      return true;
    } else {
      // if this is the only valid token, always report it
      return numExpectedTokens == 1;
    }
  }

  private String getErrorTypeMessage(int lastTokenId) {
    String msg = null;
    switch (lastTokenId) {
      case SqlParserSymbols.UNMATCHED_STRING_LITERAL:
        msg = "Unmatched string literal";
        break;
      case SqlParserSymbols.NUMERIC_OVERFLOW:
        msg = "Numeric overflow";
        break;
      default:
        msg = "Syntax error";
        break;
    }
    return msg;
  }

  // override to save error token
  public void syntax_error(java_cup.runtime.Symbol token) {
    errorToken_ = token;

    // derive expected tokens from current parsing state
    expectedTokenIds_.clear();
    int state = ((Symbol)stack.peek()).parse_state;
    // get row of actions table corresponding to current parsing state
    // the row consists of pairs of <tokenId, actionId>
    // a pair is stored as row[i] (tokenId) and row[i+1] (actionId)
    // the last pair is a special error action
    short[] row = action_tab[state];
    short tokenId;
    // the expected tokens are all the symbols with a
    // corresponding action from the current parsing state
    for (int i = 0; i < row.length-2; ++i) {
      // get tokenId and skip actionId
      tokenId = row[i++];
      expectedTokenIds_.add(Integer.valueOf(tokenId));
    }
  }

  // override to keep it from calling report_fatal_error()
  @Override
  public void unrecovered_syntax_error(Symbol cur_token)
      throws Exception {
    throw new Exception(getErrorTypeMessage(cur_token.sym));
  }

  /**
   * Manually throw a parse error on a given symbol for special circumstances.
   *
   * @symbolName
   *   name of symbol on which to fail parsing
   * @symbolId
   *   id of symbol from SqlParserSymbols on which to fail parsing
   */
  public void parseError(String symbolName, int symbolId) throws Exception {
    parseError(symbolName, symbolId, null);
  }

  /**
   * Same as parseError() above but allows the error token to have a different
   * name printed as the expected token.
   */
  public void parseError(String symbolName, int symbolId, String expectedTokenName)
      throws Exception {
    expectedTokenName_ = expectedTokenName;
    Symbol errorToken = getSymbolFactory().newSymbol(symbolName, symbolId,
        ((Symbol) stack.peek()), ((Symbol) stack.peek()), null);
    // Call syntax error to gather information about expected tokens, etc.
    // syntax_error does not throw an exception
    syntax_error(errorToken);
    // Unrecovered_syntax_error throws an exception and will terminate parsing
    unrecovered_syntax_error(errorToken);
  }

  // Returns error string, consisting of a shortened offending line
  // with a '^' under the offending token. Assumes
  // that parse() has been called and threw an exception
  public String getErrorMsg(String stmt) {
    if (errorToken_ == null || stmt == null) return null;
    String[] lines = stmt.split("\n");
    StringBuffer result = new StringBuffer();
    result.append(getErrorTypeMessage(errorToken_.sym) + " in line ");
    result.append(errorToken_.left);
    result.append(":\n");

    // errorToken_.left is the line number of error.
    // errorToken_.right is the column number of the error.
    String errorLine = lines[errorToken_.left - 1];
    // If the error is that additional tokens are expected past the end,
    // errorToken_.right will be past the end of the string.
    int lastCharIndex = Math.min(errorLine.length(), errorToken_.right);
    int maxPrintLength = 60;
    int errorLoc = 0;
    if (errorLine.length() <= maxPrintLength) {
      // The line is short. Print the entire line.
      result.append(errorLine);
      result.append('\n');
      errorLoc = errorToken_.right;
    } else {
      // The line is too long. Print maxPrintLength/2 characters before the error and
      // after the error.
      int contextLength = maxPrintLength / 2 - 3;
      String leftSubStr;
      if (errorToken_.right > maxPrintLength / 2) {
        leftSubStr = "..." + errorLine.substring(errorToken_.right - contextLength,
            lastCharIndex);
      } else {
        leftSubStr = errorLine.substring(0, errorToken_.right);
      }
      errorLoc = leftSubStr.length();
      result.append(leftSubStr);
      if (errorLine.length() - errorToken_.right > maxPrintLength / 2) {
        result.append(errorLine.substring(errorToken_.right,
           errorToken_.right + contextLength) + "...");
      } else {
        result.append(errorLine.substring(lastCharIndex));
      }
      result.append("\n");
    }

    // print error indicator
    for (int i = 0; i < errorLoc - 1; ++i) {
      result.append(' ');
    }
    result.append("^\n");

    // only report encountered and expected tokens for syntax errors
    if (errorToken_.sym == SqlParserSymbols.UNMATCHED_STRING_LITERAL ||
        errorToken_.sym == SqlParserSymbols.NUMERIC_OVERFLOW) {
      return result.toString();
    }

    // append last encountered token
    result.append("Encountered: ");
    String lastToken =
      SqlScanner.tokenIdMap.get(Integer.valueOf(errorToken_.sym));
    if (lastToken != null) {
      result.append(lastToken);
    } else {
      result.append("Unknown last token with id: " + errorToken_.sym);
    }

    // append expected tokens
    result.append('\n');
    result.append("Expected: ");
    if (expectedTokenName_ == null) {
      String expectedToken = null;
      Integer tokenId = null;
      for (int i = 0; i < expectedTokenIds_.size(); ++i) {
        tokenId = expectedTokenIds_.get(i);
        if (reportExpectedToken(tokenId, expectedTokenIds_.size())) {
          expectedToken = SqlScanner.tokenIdMap.get(tokenId);
          result.append(expectedToken + ", ");
        }
      }
      // remove trailing ", "
      result.delete(result.length()-2, result.length());
    } else {
      result.append(expectedTokenName_);
    }
    result.append('\n');

    return result.toString();
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SqlParser$actions {
  private final SqlParser parser;

  /** Constructor */
  CUP$SqlParser$actions(SqlParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SqlParser$do_action(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack            CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SqlParser$result;

      /* select the action based on the action number */
      switch (CUP$SqlParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 489: // struct_field_def_list ::= struct_field_def_list COMMA struct_field_def 
            {
              ArrayList<StructField> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		ArrayList<StructField> list = (ArrayList<StructField>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int field_defleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int field_defright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		StructField field_def = (StructField)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    list.add(field_def);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("struct_field_def_list",120, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 488: // struct_field_def_list ::= struct_field_def 
            {
              ArrayList<StructField> RESULT =null;
		int field_defleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int field_defright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		StructField field_def = (StructField)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    ArrayList<StructField> list = new ArrayList<StructField>();
    list.add(field_def);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("struct_field_def_list",120, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 487: // struct_field_def ::= IDENT COLON type comment_val 
            {
              StructField RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int commentleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new StructField(name, t, comment); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("struct_field_def",113, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 486: // type ::= KW_STRUCT LESSTHAN struct_field_def_list GREATERTHAN 
            {
              Type RESULT =null;
		int fieldsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int fieldsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<StructField> fields = (ArrayList<StructField>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = new StructType(fields); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",78, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 485: // type ::= KW_MAP LESSTHAN type COMMA type GREATERTHAN 
            {
              Type RESULT =null;
		int key_typeleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int key_typeright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Type key_type = (Type)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int value_typeleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int value_typeright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Type value_type = (Type)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = new MapType(key_type, value_type); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",78, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 484: // type ::= KW_ARRAY LESSTHAN type GREATERTHAN 
            {
              Type RESULT =null;
		int value_typeleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int value_typeright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Type value_type = (Type)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = new ArrayType(value_type); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",78, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 483: // type ::= KW_DECIMAL 
            {
              Type RESULT =null;
		 RESULT = ScalarType.createDecimalType(); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",78, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 482: // type ::= KW_DECIMAL LPAREN INTEGER_LITERAL COMMA INTEGER_LITERAL RPAREN 
            {
              Type RESULT =null;
		int precisionleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int precisionright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		BigDecimal precision = (BigDecimal)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int scaleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int scaleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		BigDecimal scale = (BigDecimal)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = ScalarType.createDecimalType(precision.intValue(), scale.intValue()); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",78, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 481: // type ::= KW_DECIMAL LPAREN INTEGER_LITERAL RPAREN 
            {
              Type RESULT =null;
		int precisionleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int precisionright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		BigDecimal precision = (BigDecimal)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = ScalarType.createDecimalType(precision.intValue()); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",78, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 480: // type ::= KW_CHAR LPAREN INTEGER_LITERAL RPAREN 
            {
              Type RESULT =null;
		int lenleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int lenright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		BigDecimal len = (BigDecimal)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = ScalarType.createCharType(len.intValue()); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",78, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 479: // type ::= KW_BINARY 
            {
              Type RESULT =null;
		 RESULT = Type.BINARY; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",78, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 478: // type ::= KW_VARCHAR 
            {
              Type RESULT =null;
		 RESULT = Type.STRING; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",78, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 477: // type ::= KW_VARCHAR LPAREN INTEGER_LITERAL RPAREN 
            {
              Type RESULT =null;
		int lenleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int lenright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		BigDecimal len = (BigDecimal)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = ScalarType.createVarcharType(len.intValue()); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",78, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 476: // type ::= KW_STRING 
            {
              Type RESULT =null;
		 RESULT = Type.STRING; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",78, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // type ::= KW_TIMESTAMP 
            {
              Type RESULT =null;
		 RESULT = Type.TIMESTAMP; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",78, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // type ::= KW_DATETIME 
            {
              Type RESULT =null;
		 RESULT = Type.DATETIME; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",78, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // type ::= KW_DATE 
            {
              Type RESULT =null;
		 RESULT = Type.DATE; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",78, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // type ::= KW_DOUBLE 
            {
              Type RESULT =null;
		 RESULT = Type.DOUBLE; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",78, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // type ::= KW_FLOAT 
            {
              Type RESULT =null;
		 RESULT = Type.FLOAT; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",78, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // type ::= KW_BOOLEAN 
            {
              Type RESULT =null;
		 RESULT = Type.BOOLEAN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",78, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // type ::= KW_BIGINT 
            {
              Type RESULT =null;
		 RESULT = Type.BIGINT; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",78, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // type ::= KW_INT 
            {
              Type RESULT =null;
		 RESULT = Type.INT; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",78, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // type ::= KW_SMALLINT 
            {
              Type RESULT =null;
		 RESULT = Type.SMALLINT; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",78, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // type ::= KW_TINYINT 
            {
              Type RESULT =null;
		 RESULT = Type.TINYINT; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",78, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // column_ref ::= IDENT DOT IDENT DOT IDENT 
            {
              SlotRef RESULT =null;
		int dbleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		String db = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int tblleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int tblright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String tbl = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int colright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new SlotRef(new TableName(db, tbl), col); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_ref",66, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // column_ref ::= IDENT DOT IDENT 
            {
              SlotRef RESULT =null;
		int tblleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int tblright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String tbl = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int colright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new SlotRef(new TableName(null, tbl), col); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_ref",66, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // column_ref ::= IDENT 
            {
              SlotRef RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int colright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new SlotRef(null, col); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_ref",66, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // compound_predicate ::= NOT expr 
            {
              Predicate RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new CompoundPredicate(CompoundPredicate.Operator.NOT, e, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("compound_predicate",39, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // compound_predicate ::= KW_NOT expr 
            {
              Predicate RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new CompoundPredicate(CompoundPredicate.Operator.NOT, e, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("compound_predicate",39, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // compound_predicate ::= expr KW_OR expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new CompoundPredicate(CompoundPredicate.Operator.OR, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("compound_predicate",39, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // compound_predicate ::= expr KW_AND expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new CompoundPredicate(CompoundPredicate.Operator.AND, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("compound_predicate",39, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // subquery ::= LPAREN query_stmt RPAREN 
            {
              Subquery RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		QueryStmt s = (QueryStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = new Subquery(s); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("subquery",73, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // subquery ::= LPAREN subquery RPAREN 
            {
              Subquery RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Subquery s = (Subquery)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = s; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("subquery",73, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // in_predicate ::= expr KW_NOT KW_IN subquery 
            {
              Predicate RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Subquery s = (Subquery)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new InPredicate(e, s, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("in_predicate",40, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // in_predicate ::= expr KW_IN subquery 
            {
              Predicate RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Subquery s = (Subquery)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new InPredicate(e, s, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("in_predicate",40, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // in_predicate ::= expr KW_NOT KW_IN LPAREN expr_list RPAREN 
            {
              Predicate RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<Expr> l = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = new InPredicate(e, l, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("in_predicate",40, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // in_predicate ::= expr KW_IN LPAREN expr_list RPAREN 
            {
              Predicate RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<Expr> l = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = new InPredicate(e, l, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("in_predicate",40, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // between_predicate ::= expr KW_NOT KW_BETWEEN predicate KW_AND expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Predicate e2 = (Predicate)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new BetweenPredicate(e1, e2, e3, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("between_predicate",37, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // between_predicate ::= expr KW_NOT KW_BETWEEN non_pred_expr KW_AND expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new BetweenPredicate(e1, e2, e3, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("between_predicate",37, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // between_predicate ::= expr KW_BETWEEN predicate KW_AND expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Predicate e2 = (Predicate)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new BetweenPredicate(e1, e2, e3, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("between_predicate",37, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // between_predicate ::= expr KW_BETWEEN non_pred_expr KW_AND expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new BetweenPredicate(e1, e2, e3, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("between_predicate",37, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // like_predicate ::= expr KW_NOT KW_REGEXP expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new CompoundPredicate(CompoundPredicate.Operator.NOT,
    new LikePredicate(LikePredicate.Operator.REGEXP, e1, e2), null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("like_predicate",41, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // like_predicate ::= expr KW_NOT KW_RLIKE expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new CompoundPredicate(CompoundPredicate.Operator.NOT,
    new LikePredicate(LikePredicate.Operator.RLIKE, e1, e2), null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("like_predicate",41, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // like_predicate ::= expr KW_NOT KW_LIKE expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new CompoundPredicate(CompoundPredicate.Operator.NOT,
    new LikePredicate(LikePredicate.Operator.LIKE, e1, e2), null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("like_predicate",41, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // like_predicate ::= expr KW_REGEXP expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new LikePredicate(LikePredicate.Operator.REGEXP, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("like_predicate",41, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // like_predicate ::= expr KW_RLIKE expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new LikePredicate(LikePredicate.Operator.RLIKE, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("like_predicate",41, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // like_predicate ::= expr KW_LIKE expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new LikePredicate(LikePredicate.Operator.LIKE, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("like_predicate",41, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // comparison_predicate ::= expr GREATERTHAN expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new BinaryPredicate(BinaryPredicate.Operator.GT, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("comparison_predicate",38, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // comparison_predicate ::= expr LESSTHAN expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new BinaryPredicate(BinaryPredicate.Operator.LT, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("comparison_predicate",38, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // comparison_predicate ::= expr GREATERTHAN EQUAL expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new BinaryPredicate(BinaryPredicate.Operator.GE, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("comparison_predicate",38, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // comparison_predicate ::= expr LESSTHAN EQUAL expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new BinaryPredicate(BinaryPredicate.Operator.LE, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("comparison_predicate",38, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // comparison_predicate ::= expr LESSTHAN GREATERTHAN expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new BinaryPredicate(BinaryPredicate.Operator.NE, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("comparison_predicate",38, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // comparison_predicate ::= expr NOT EQUAL expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new BinaryPredicate(BinaryPredicate.Operator.NE, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("comparison_predicate",38, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // comparison_predicate ::= expr EQUAL expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new BinaryPredicate(BinaryPredicate.Operator.EQ, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("comparison_predicate",38, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // predicate ::= LPAREN predicate RPAREN 
            {
              Predicate RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Predicate p = (Predicate)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		
    p.setPrintSqlInParens(true);
    RESULT = p;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("predicate",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // predicate ::= like_predicate 
            {
              Predicate RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Predicate p = (Predicate)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("predicate",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // predicate ::= exists_predicate 
            {
              Predicate RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Predicate p = (Predicate)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("predicate",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // predicate ::= in_predicate 
            {
              Predicate RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Predicate p = (Predicate)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("predicate",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // predicate ::= compound_predicate 
            {
              Predicate RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Predicate p = (Predicate)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("predicate",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // predicate ::= comparison_predicate 
            {
              Predicate RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Predicate p = (Predicate)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("predicate",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // predicate ::= between_predicate 
            {
              Predicate RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Predicate p = (Predicate)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("predicate",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // predicate ::= expr KW_IS KW_NOT KW_NULL 
            {
              Predicate RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		 RESULT = new IsNullPredicate(e, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("predicate",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // predicate ::= expr KW_IS KW_NULL 
            {
              Predicate RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		 RESULT = new IsNullPredicate(e, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("predicate",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // function_params ::= KW_DISTINCT expr_list 
            {
              FunctionParams RESULT =null;
		int distinctleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int distinctright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object distinct = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ArrayList<Expr> exprs = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new FunctionParams(true, exprs); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("function_params",65, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // function_params ::= KW_ALL expr_list 
            {
              FunctionParams RESULT =null;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ArrayList<Expr> exprs = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new FunctionParams(false, exprs); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("function_params",65, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // function_params ::= expr_list 
            {
              FunctionParams RESULT =null;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ArrayList<Expr> exprs = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new FunctionParams(false, exprs); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("function_params",65, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // function_params ::= KW_ALL STAR 
            {
              FunctionParams RESULT =null;
		 RESULT = FunctionParams.createStarParam(); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("function_params",65, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // function_params ::= STAR 
            {
              FunctionParams RESULT =null;
		 RESULT = FunctionParams.createStarParam(); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("function_params",65, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // literal ::= NUMERIC_OVERFLOW 
            {
              LiteralExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    // similar to the unmatched string literal case
    // we must terminate parsing at this point
    // and generate a corresponding symbol to be reported
    parser.parseError("literal", SqlParserSymbols.NUMERIC_OVERFLOW);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("literal",62, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // literal ::= UNMATCHED_STRING_LITERAL expr 
            {
              LiteralExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    // we have an unmatched string literal.
    // to correctly report the root cause of this syntax error
    // we must force parsing to fail at this point,
    // and generate an unmatched string literal symbol
    // to be passed as the last seen token in the
    // error handling routine (otherwise some other token could be reported)
    parser.parseError("literal", SqlParserSymbols.UNMATCHED_STRING_LITERAL);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("literal",62, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // literal ::= KW_NULL 
            {
              LiteralExpr RESULT =null;
		 RESULT = new NullLiteral(); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("literal",62, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // literal ::= KW_FALSE 
            {
              LiteralExpr RESULT =null;
		 RESULT = new BoolLiteral(false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("literal",62, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // literal ::= KW_TRUE 
            {
              LiteralExpr RESULT =null;
		 RESULT = new BoolLiteral(true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("literal",62, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // literal ::= STRING_LITERAL 
            {
              LiteralExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new StringLiteral(l); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("literal",62, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // literal ::= DECIMAL_LITERAL 
            {
              LiteralExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		BigDecimal l = (BigDecimal)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new NumericLiteral(l); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("literal",62, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // literal ::= INTEGER_LITERAL 
            {
              LiteralExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		BigDecimal l = (BigDecimal)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new NumericLiteral(l); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("literal",62, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // timestamp_arithmetic_expr ::= function_name LPAREN expr_list COMMA KW_INTERVAL expr IDENT RPAREN 
            {
              Expr RESULT =null;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).right;
		FunctionName functionName = (FunctionName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		ArrayList<Expr> l = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		
    if (l.size() > 1) {
      // Report parsing failure on keyword interval.
      parser.parseError("interval", SqlParserSymbols.KW_INTERVAL);
    }
    if (functionName.getDb() != null) {
      // This function should not fully qualified
      throw new Exception("interval should not be qualified by database name");
    }
    RESULT = new TimestampArithmeticExpr(functionName.getFunction(), l.get(0), v, u);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("timestamp_arithmetic_expr",28, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // timestamp_arithmetic_expr ::= expr SUBTRACT KW_INTERVAL expr IDENT 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		Expr t = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT =
        new TimestampArithmeticExpr(ArithmeticExpr.Operator.SUBTRACT, t, v, u, false);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("timestamp_arithmetic_expr",28, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // timestamp_arithmetic_expr ::= expr ADD KW_INTERVAL expr IDENT 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		Expr t = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT = new TimestampArithmeticExpr(ArithmeticExpr.Operator.ADD, t, v, u, false);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("timestamp_arithmetic_expr",28, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // timestamp_arithmetic_expr ::= KW_INTERVAL expr IDENT ADD expr 
            {
              Expr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr t = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new TimestampArithmeticExpr(ArithmeticExpr.Operator.ADD, t, v, u, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("timestamp_arithmetic_expr",28, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // arithmetic_expr ::= BITNOT expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.BITNOT, e, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",27, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // arithmetic_expr ::= expr BITXOR expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.BITXOR, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",27, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // arithmetic_expr ::= expr BITOR expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.BITOR, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",27, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // arithmetic_expr ::= expr BITAND expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.BITAND, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",27, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // arithmetic_expr ::= expr SUBTRACT expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.SUBTRACT, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",27, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // arithmetic_expr ::= expr ADD expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.ADD, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",27, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // arithmetic_expr ::= expr KW_DIV expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.INT_DIVIDE, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",27, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // arithmetic_expr ::= expr MOD expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.MOD, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",27, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // arithmetic_expr ::= expr DIVIDE expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.DIVIDE, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",27, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // arithmetic_expr ::= expr STAR expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.MULTIPLY, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",27, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // window_boundary ::= expr KW_FOLLOWING 
            {
              AnalyticWindow.Boundary RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = new AnalyticWindow.Boundary(AnalyticWindow.BoundaryType.FOLLOWING, e); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("window_boundary",61, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // window_boundary ::= expr KW_PRECEDING 
            {
              AnalyticWindow.Boundary RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = new AnalyticWindow.Boundary(AnalyticWindow.BoundaryType.PRECEDING, e); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("window_boundary",61, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // window_boundary ::= KW_CURRENT KW_ROW 
            {
              AnalyticWindow.Boundary RESULT =null;
		
    RESULT = new AnalyticWindow.Boundary(AnalyticWindow.BoundaryType.CURRENT_ROW, null);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("window_boundary",61, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // window_boundary ::= KW_UNBOUNDED KW_FOLLOWING 
            {
              AnalyticWindow.Boundary RESULT =null;
		
    RESULT = new AnalyticWindow.Boundary(
        AnalyticWindow.BoundaryType.UNBOUNDED_FOLLOWING, null);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("window_boundary",61, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // window_boundary ::= KW_UNBOUNDED KW_PRECEDING 
            {
              AnalyticWindow.Boundary RESULT =null;
		
    RESULT = new AnalyticWindow.Boundary(
        AnalyticWindow.BoundaryType.UNBOUNDED_PRECEDING, null);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("window_boundary",61, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // window_type ::= KW_RANGE 
            {
              AnalyticWindow.Type RESULT =null;
		 RESULT = AnalyticWindow.Type.RANGE; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("window_type",60, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // window_type ::= KW_ROWS 
            {
              AnalyticWindow.Type RESULT =null;
		 RESULT = AnalyticWindow.Type.ROWS; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("window_type",60, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // opt_window_clause ::= 
            {
              AnalyticWindow RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_window_clause",59, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // opt_window_clause ::= window_type KW_BETWEEN window_boundary KW_AND window_boundary 
            {
              AnalyticWindow RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		AnalyticWindow.Type t = (AnalyticWindow.Type)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		AnalyticWindow.Boundary l = (AnalyticWindow.Boundary)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		AnalyticWindow.Boundary r = (AnalyticWindow.Boundary)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new AnalyticWindow(t, l, r); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_window_clause",59, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // opt_window_clause ::= window_type window_boundary 
            {
              AnalyticWindow RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		AnalyticWindow.Type t = (AnalyticWindow.Type)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		AnalyticWindow.Boundary b = (AnalyticWindow.Boundary)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new AnalyticWindow(t, b); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_window_clause",59, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // opt_partition_by_clause ::= 
            {
              ArrayList<Expr> RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_partition_by_clause",44, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // opt_partition_by_clause ::= KW_PARTITION KW_BY expr_list 
            {
              ArrayList<Expr> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ArrayList<Expr> l = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_partition_by_clause",44, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // analytic_expr ::= function_call_expr KW_OVER LPAREN opt_partition_by_clause opt_order_by_clause opt_window_clause RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		ArrayList<Expr> p = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		ArrayList<OrderByElement> o = (ArrayList<OrderByElement>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		AnalyticWindow w = (AnalyticWindow)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		
    // Handle cases where function_call_expr resulted in a plain Expr
    if (!(e instanceof FunctionCallExpr)) {
      parser.parseError("over", SqlParserSymbols.KW_OVER);
    }
    FunctionCallExpr f = (FunctionCallExpr)e;
    f.setIsAnalyticFnCall(true);
    RESULT = new AnalyticExpr(f, p, o, w);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("analytic_expr",57, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // function_call_expr ::= function_name LPAREN IDENT KW_FROM expr RPAREN 
            {
              Expr RESULT =null;
		int fn_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int fn_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		FunctionName fn_name = (FunctionName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Expr t = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		  RESULT = new ExtractFromExpr(fn_name, u, t); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("function_call_expr",58, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // function_call_expr ::= function_name LPAREN function_params RPAREN 
            {
              Expr RESULT =null;
		int fn_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int fn_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		FunctionName fn_name = (FunctionName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		FunctionParams params = (FunctionParams)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = FunctionCallExpr.createExpr(fn_name, params); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("function_call_expr",58, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // function_call_expr ::= function_name LPAREN RPAREN 
            {
              Expr RESULT =null;
		int fn_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int fn_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		FunctionName fn_name = (FunctionName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		
    RESULT = FunctionCallExpr.createExpr(
        fn_name, new FunctionParams(new ArrayList<Expr>()));
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("function_call_expr",58, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // non_pred_expr ::= subquery 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Subquery s = (Subquery)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = s; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",26, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // non_pred_expr ::= LPAREN non_pred_expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		
    e.setPrintSqlInParens(true);
    RESULT = e;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",26, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // non_pred_expr ::= arithmetic_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",26, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // non_pred_expr ::= timestamp_arithmetic_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",26, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // non_pred_expr ::= column_ref 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		SlotRef c = (SlotRef)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",26, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // non_pred_expr ::= case_expr 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		CaseExpr c = (CaseExpr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",26, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // non_pred_expr ::= cast_expr 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",26, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // non_pred_expr ::= KW_IF LPAREN expr_list RPAREN 
            {
              Expr RESULT =null;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<Expr> exprs = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = new FunctionCallExpr("if", exprs); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",26, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // non_pred_expr ::= analytic_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",26, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // non_pred_expr ::= function_call_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",26, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // non_pred_expr ::= literal 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		LiteralExpr l = (LiteralExpr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",26, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // non_pred_expr ::= sign_chain_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",26, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // exists_predicate ::= KW_EXISTS subquery 
            {
              Predicate RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Subquery s = (Subquery)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ExistsPredicate(s, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("exists_predicate",42, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // expr ::= predicate 
            {
              Expr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Predicate p = (Predicate)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // expr ::= non_pred_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // sign_chain_expr ::= ADD expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("sign_chain_expr",79, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // sign_chain_expr ::= SUBTRACT expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    // integrate signs into literals
    // integer literals require analysis to set their type, so the instance check below
    // is not equivalent to e.getType().isNumericType()
    if (e.isLiteral() && e instanceof NumericLiteral) {
      ((LiteralExpr)e).swapSign();
      RESULT = e;
    } else {
      RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.MULTIPLY,
                                  new NumericLiteral(BigDecimal.valueOf(-1)), e);
    }
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("sign_chain_expr",79, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // case_else_clause ::= 
            {
              Expr RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("case_else_clause",56, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // case_else_clause ::= KW_ELSE expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("case_else_clause",56, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // case_when_clause_list ::= case_when_clause_list KW_WHEN expr KW_THEN expr 
            {
              ArrayList<CaseWhenClause> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		ArrayList<CaseWhenClause> list = (ArrayList<CaseWhenClause>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int whenExprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int whenExprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr whenExpr = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int thenExprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int thenExprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr thenExpr = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    list.add(new CaseWhenClause(whenExpr, thenExpr));
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("case_when_clause_list",64, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // case_when_clause_list ::= KW_WHEN expr KW_THEN expr 
            {
              ArrayList<CaseWhenClause> RESULT =null;
		int whenExprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int whenExprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr whenExpr = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int thenExprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int thenExprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr thenExpr = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    ArrayList<CaseWhenClause> list = new ArrayList<CaseWhenClause>();
    list.add(new CaseWhenClause(whenExpr, thenExpr));
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("case_when_clause_list",64, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // case_expr ::= KW_CASE case_when_clause_list case_else_clause KW_END 
            {
              CaseExpr RESULT =null;
		int whenClauseListleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int whenClauseListright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		ArrayList<CaseWhenClause> whenClauseList = (ArrayList<CaseWhenClause>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int elseExprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int elseExprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Expr elseExpr = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = new CaseExpr(null, whenClauseList, elseExpr); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("case_expr",63, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // case_expr ::= KW_CASE expr case_when_clause_list case_else_clause KW_END 
            {
              CaseExpr RESULT =null;
		int caseExprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int caseExprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Expr caseExpr = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int whenClauseListleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int whenClauseListright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		ArrayList<CaseWhenClause> whenClauseList = (ArrayList<CaseWhenClause>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int elseExprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int elseExprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Expr elseExpr = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = new CaseExpr(caseExpr, whenClauseList, elseExpr); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("case_expr",63, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // cast_expr ::= KW_CAST LPAREN expr KW_AS type RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int targetTypeleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int targetTyperight = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Type targetType = (Type)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = new CastExpr(targetType, e, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("cast_expr",55, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // opt_offset_clause ::= 
            {
              Expr RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_offset_clause",54, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // opt_offset_clause ::= KW_OFFSET expr 
            {
              Expr RESULT =null;
		int offsetExprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int offsetExprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr offsetExpr = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = offsetExpr; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_offset_clause",54, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // opt_limit_clause ::= 
            {
              Expr RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_limit_clause",53, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // opt_limit_clause ::= KW_LIMIT expr 
            {
              Expr RESULT =null;
		int limitExprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int limitExprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr limitExpr = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = limitExpr; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_limit_clause",53, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // opt_limit_offset_clause ::= opt_limit_clause opt_offset_clause 
            {
              LimitElement RESULT =null;
		int limitExprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int limitExprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Expr limitExpr = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int offsetExprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int offsetExprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr offsetExpr = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new LimitElement(limitExpr, offsetExpr); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_limit_offset_clause",52, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // opt_offset_param ::= 
            {
              Expr RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_offset_param",51, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // opt_offset_param ::= KW_OFFSET expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_offset_param",51, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // opt_nulls_order_param ::= 
            {
              Boolean RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_nulls_order_param",50, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // opt_nulls_order_param ::= KW_NULLS KW_LAST 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_nulls_order_param",50, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // opt_nulls_order_param ::= KW_NULLS KW_FIRST 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_nulls_order_param",50, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // opt_order_param ::= 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_order_param",49, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // opt_order_param ::= KW_DESC 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_order_param",49, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // opt_order_param ::= KW_ASC 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_order_param",49, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // order_by_element ::= expr opt_order_param opt_nulls_order_param 
            {
              OrderByElement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Boolean o = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Boolean n = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new OrderByElement(e, o, n); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("order_by_element",48, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // order_by_elements ::= order_by_elements COMMA order_by_element 
            {
              ArrayList<OrderByElement> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		ArrayList<OrderByElement> list = (ArrayList<OrderByElement>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		OrderByElement e = (OrderByElement)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    list.add(e);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("order_by_elements",46, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // order_by_elements ::= order_by_element 
            {
              ArrayList<OrderByElement> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		OrderByElement e = (OrderByElement)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    ArrayList<OrderByElement> list = new ArrayList<OrderByElement>();
    list.add(e);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("order_by_elements",46, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // opt_order_by_clause ::= 
            {
              ArrayList<OrderByElement> RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_order_by_clause",47, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // opt_order_by_clause ::= KW_ORDER KW_BY order_by_elements 
            {
              ArrayList<OrderByElement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ArrayList<OrderByElement> l = (ArrayList<OrderByElement>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_order_by_clause",47, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // having_clause ::= 
            {
              Expr RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("having_clause",45, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // having_clause ::= KW_HAVING expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("having_clause",45, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // group_by_clause ::= 
            {
              ArrayList<Expr> RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("group_by_clause",43, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // group_by_clause ::= KW_GROUP KW_BY expr_list 
            {
              ArrayList<Expr> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ArrayList<Expr> l = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("group_by_clause",43, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // where_clause ::= 
            {
              Expr RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("where_clause",35, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // where_clause ::= KW_WHERE expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("where_clause",35, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // expr_list ::= expr_list COMMA expr 
            {
              ArrayList<Expr> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		ArrayList<Expr> list = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    list.add(e);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_list",29, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // expr_list ::= expr 
            {
              ArrayList<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    ArrayList<Expr> list = new ArrayList<Expr>();
    list.add(e);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_list",29, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // ident_list ::= ident_list COMMA IDENT 
            {
              ArrayList<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		ArrayList<String> list = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    list.add(ident);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("ident_list",31, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // ident_list ::= IDENT 
            {
              ArrayList<String> RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    ArrayList<String> list = new ArrayList<String>();
    list.add(ident);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("ident_list",31, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // opt_plan_hints ::= 
            {
              ArrayList<String> RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_plan_hints",77, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // opt_plan_hints ::= LBRACKET ident_list RBRACKET 
            {
              ArrayList<String> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = l; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_plan_hints",77, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // opt_plan_hints ::= KW_STRAIGHT_JOIN 
            {
              ArrayList<String> RESULT =null;
		
    ArrayList<String> hints = new ArrayList<String>();
    hints.add("straight_join");
    RESULT = hints;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_plan_hints",77, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // opt_plan_hints ::= COMMENTED_PLAN_HINTS 
            {
              ArrayList<String> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    ArrayList<String> hints = new ArrayList<String>();
    String[] tokens = l.split(",");
    for (String token: tokens) {
      String trimmedToken = token.trim();
      if (trimmedToken.length() > 0) hints.add(trimmedToken);
    }
    RESULT = hints;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_plan_hints",77, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // opt_outer ::= 
            {
              Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_outer",76, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // opt_outer ::= KW_OUTER 
            {
              Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_outer",76, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // opt_inner ::= 
            {
              Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_inner",75, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // opt_inner ::= KW_INNER 
            {
              Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_inner",75, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // join_operator ::= KW_RIGHT KW_ANTI KW_JOIN 
            {
              JoinOperator RESULT =null;
		 RESULT = JoinOperator.RIGHT_ANTI_JOIN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("join_operator",74, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // join_operator ::= KW_LEFT KW_ANTI KW_JOIN 
            {
              JoinOperator RESULT =null;
		 RESULT = JoinOperator.LEFT_ANTI_JOIN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("join_operator",74, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // join_operator ::= KW_RIGHT KW_SEMI KW_JOIN 
            {
              JoinOperator RESULT =null;
		 RESULT = JoinOperator.RIGHT_SEMI_JOIN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("join_operator",74, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // join_operator ::= KW_LEFT KW_SEMI KW_JOIN 
            {
              JoinOperator RESULT =null;
		 RESULT = JoinOperator.LEFT_SEMI_JOIN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("join_operator",74, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // join_operator ::= KW_FULL opt_outer KW_JOIN 
            {
              JoinOperator RESULT =null;
		 RESULT = JoinOperator.FULL_OUTER_JOIN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("join_operator",74, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // join_operator ::= KW_RIGHT opt_outer KW_JOIN 
            {
              JoinOperator RESULT =null;
		 RESULT = JoinOperator.RIGHT_OUTER_JOIN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("join_operator",74, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // join_operator ::= KW_LEFT opt_outer KW_JOIN 
            {
              JoinOperator RESULT =null;
		 RESULT = JoinOperator.LEFT_OUTER_JOIN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("join_operator",74, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // join_operator ::= opt_inner KW_JOIN 
            {
              JoinOperator RESULT =null;
		 RESULT = JoinOperator.INNER_JOIN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("join_operator",74, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // table_ref ::= LPAREN query_stmt RPAREN alias_clause 
            {
              TableRef RESULT =null;
		int queryleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int queryright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		QueryStmt query = (QueryStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String alias = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new InlineViewRef(alias, query); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("table_ref",72, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // table_ref ::= table_name 
            {
              TableRef RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableName name = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new TableRef(name, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("table_ref",72, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // table_ref ::= table_name alias_clause 
            {
              TableRef RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		TableName name = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String alias = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new TableRef(name, alias); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("table_ref",72, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // table_ref_list ::= table_ref_list join_operator opt_plan_hints table_ref KW_USING LPAREN ident_list RPAREN 
            {
              ArrayList<TableRef> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).right;
		ArrayList<TableRef> list = (ArrayList<TableRef>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).right;
		JoinOperator op = (JoinOperator)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).value;
		int hintsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int hintsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		ArrayList<String> hints = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		TableRef table = (TableRef)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int colNamesleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int colNamesright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<String> colNames = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		
    table.setJoinOp((JoinOperator) op);
    table.setJoinHints(hints);
    table.setUsingClause(colNames);
    list.add(table);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("table_ref_list",68, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // table_ref_list ::= table_ref_list join_operator opt_plan_hints table_ref KW_ON expr 
            {
              ArrayList<TableRef> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		ArrayList<TableRef> list = (ArrayList<TableRef>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		JoinOperator op = (JoinOperator)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int hintsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int hintsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		ArrayList<String> hints = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		TableRef table = (TableRef)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    table.setJoinOp((JoinOperator) op);
    table.setJoinHints(hints);
    table.setOnClause(e);
    list.add(table);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("table_ref_list",68, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // table_ref_list ::= table_ref_list join_operator opt_plan_hints table_ref 
            {
              ArrayList<TableRef> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		ArrayList<TableRef> list = (ArrayList<TableRef>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		JoinOperator op = (JoinOperator)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int hintsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int hintsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<String> hints = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableRef table = (TableRef)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    table.setJoinOp((JoinOperator) op);
    table.setJoinHints(hints);
    list.add(table);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("table_ref_list",68, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // table_ref_list ::= table_ref_list KW_CROSS KW_JOIN opt_plan_hints table_ref 
            {
              ArrayList<TableRef> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		ArrayList<TableRef> list = (ArrayList<TableRef>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int hintsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int hintsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<String> hints = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableRef table = (TableRef)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    table.setJoinOp(JoinOperator.CROSS_JOIN);
    // We will throw an AnalysisException if there are join hints so that we can provide
    // a better error message than a parser exception.
    table.setJoinHints(hints);
    list.add(table);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("table_ref_list",68, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // table_ref_list ::= table_ref_list COMMA table_ref 
            {
              ArrayList<TableRef> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		ArrayList<TableRef> list = (ArrayList<TableRef>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableRef table = (TableRef)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    list.add(table);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("table_ref_list",68, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // table_ref_list ::= table_ref 
            {
              ArrayList<TableRef> RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableRef table = (TableRef)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    ArrayList<TableRef> list = new ArrayList<TableRef>();
    list.add(table);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("table_ref_list",68, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // from_clause ::= KW_FROM table_ref_list 
            {
              ArrayList<TableRef> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ArrayList<TableRef> l = (ArrayList<TableRef>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("from_clause",67, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // function_name ::= IDENT DOT IDENT 
            {
              FunctionName RESULT =null;
		int dbleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String db = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new FunctionName(db, fn); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("function_name",34, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // function_name ::= IDENT 
            {
              FunctionName RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new FunctionName(null, fn); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("function_name",34, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // table_name ::= IDENT DOT IDENT 
            {
              TableName RESULT =null;
		int dbleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String db = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int tblleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tblright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String tbl = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new TableName(db, tbl); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("table_name",33, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // table_name ::= IDENT 
            {
              TableName RESULT =null;
		int tblleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tblright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String tbl = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new TableName(null, tbl); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("table_name",33, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // star_expr ::= IDENT DOT IDENT DOT STAR 
            {
              SelectListItem RESULT =null;
		int dbleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		String db = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int tblleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int tblright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String tbl = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		 RESULT = SelectListItem.createStarItem(new TableName(db, tbl)); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("star_expr",24, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // star_expr ::= IDENT DOT STAR 
            {
              SelectListItem RESULT =null;
		int tblleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int tblright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String tbl = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		 RESULT = SelectListItem.createStarItem(new TableName(null, tbl)); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("star_expr",24, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // star_expr ::= STAR 
            {
              SelectListItem RESULT =null;
		 RESULT = SelectListItem.createStarItem(null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("star_expr",24, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // alias_clause ::= STRING_LITERAL 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alias_clause",30, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // alias_clause ::= KW_AS STRING_LITERAL 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alias_clause",30, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // alias_clause ::= IDENT 
            {
              String RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = ident; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alias_clause",30, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // alias_clause ::= KW_AS IDENT 
            {
              String RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = ident; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alias_clause",30, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // select_list_item ::= star_expr 
            {
              SelectListItem RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		SelectListItem expr = (SelectListItem)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_list_item",23, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // select_list_item ::= expr 
            {
              SelectListItem RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new SelectListItem(expr, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_list_item",23, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // select_list_item ::= expr alias_clause 
            {
              SelectListItem RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String alias = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new SelectListItem(expr, alias); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_list_item",23, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // select_list ::= select_list COMMA select_list_item 
            {
              SelectList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		SelectList list = (SelectList)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int itemleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		SelectListItem item = (SelectListItem)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    list.getItems().add(item);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_list",22, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // select_list ::= select_list_item 
            {
              SelectList RESULT =null;
		int itemleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		SelectListItem item = (SelectListItem)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    SelectList list = new SelectList();
    list.getItems().add(item);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_list",22, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // set_stmt ::= KW_SET 
            {
              SetStmt RESULT =null;
		 RESULT = new SetStmt(null, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("set_stmt",9, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // set_stmt ::= KW_SET IDENT EQUAL IDENT 
            {
              SetStmt RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new SetStmt(key, ident); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("set_stmt",9, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // set_stmt ::= KW_SET IDENT EQUAL literal 
            {
              SetStmt RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		LiteralExpr l = (LiteralExpr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new SetStmt(key, l.getStringValue()); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("set_stmt",9, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // select_clause ::= KW_SELECT KW_DISTINCT opt_plan_hints select_list 
            {
              SelectList RESULT =null;
		int hintsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int hintsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<String> hints = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		SelectList l = (SelectList)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    l.setIsDistinct(true);
    l.setPlanHints(hints);
    RESULT = l;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_clause",21, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // select_clause ::= KW_SELECT KW_ALL opt_plan_hints select_list 
            {
              SelectList RESULT =null;
		int hintsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int hintsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<String> hints = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		SelectList l = (SelectList)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    l.setPlanHints(hints);
    RESULT = l;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_clause",21, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // select_clause ::= KW_SELECT opt_plan_hints select_list 
            {
              SelectList RESULT =null;
		int hintsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int hintsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<String> hints = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		SelectList l = (SelectList)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    l.setPlanHints(hints);
    RESULT = l;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_clause",21, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // select_stmt ::= select_clause from_clause where_clause group_by_clause having_clause opt_order_by_clause opt_limit_offset_clause 
            {
              SelectStmt RESULT =null;
		int selectListleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).left;
		int selectListright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).right;
		SelectList selectList = (SelectList)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).value;
		int tableRefListleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int tableRefListright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		ArrayList<TableRef> tableRefList = (ArrayList<TableRef>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int wherePredicateleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int wherePredicateright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		Expr wherePredicate = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int groupingExprsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int groupingExprsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		ArrayList<Expr> groupingExprs = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int havingPredicateleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int havingPredicateright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Expr havingPredicate = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int orderByClauseleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int orderByClauseright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<OrderByElement> orderByClause = (ArrayList<OrderByElement>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int limitOffsetClauseleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int limitOffsetClauseright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		LimitElement limitOffsetClause = (LimitElement)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT = new SelectStmt(selectList, tableRefList, wherePredicate, groupingExprs,
                            havingPredicate, orderByClause, limitOffsetClause);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_stmt",1, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // select_stmt ::= select_clause 
            {
              SelectStmt RESULT =null;
		int selectListleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int selectListright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		SelectList selectList = (SelectList)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT = new SelectStmt(selectList, null, null, null, null, null, null);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_stmt",1, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // describe_output_style ::= 
            {
              TDescribeTableOutputStyle RESULT =null;
		 RESULT = TDescribeTableOutputStyle.MINIMAL; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("describe_output_style",17, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // describe_output_style ::= KW_FORMATTED 
            {
              TDescribeTableOutputStyle RESULT =null;
		 RESULT = TDescribeTableOutputStyle.FORMATTED; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("describe_output_style",17, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // describe_stmt ::= KW_DESCRIBE describe_output_style table_name 
            {
              DescribeStmt RESULT =null;
		int styleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int styleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		TDescribeTableOutputStyle style = (TDescribeTableOutputStyle)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new DescribeStmt(table, style); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("describe_stmt",15, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // show_create_tbl_stmt ::= KW_SHOW KW_CREATE KW_TABLE table_name 
            {
              ShowCreateTableStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ShowCreateTableStmt(table); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_create_tbl_stmt",16, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // show_pattern ::= KW_LIKE STRING_LITERAL 
            {
              String RESULT =null;
		int showPatternleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int showPatternright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String showPattern = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = showPattern; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_pattern",14, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // show_pattern ::= STRING_LITERAL 
            {
              String RESULT =null;
		int showPatternleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int showPatternright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String showPattern = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = showPattern; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_pattern",14, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // show_data_srcs_stmt ::= KW_SHOW KW_DATA sources_ident show_pattern 
            {
              ShowDataSrcsStmt RESULT =null;
		int is_sources_idleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int is_sources_idright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Boolean is_sources_id = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int showPatternleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int showPatternright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String showPattern = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ShowDataSrcsStmt(showPattern); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_data_srcs_stmt",112, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // show_data_srcs_stmt ::= KW_SHOW KW_DATA sources_ident 
            {
              ShowDataSrcsStmt RESULT =null;
		int is_sources_idleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int is_sources_idright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Boolean is_sources_id = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ShowDataSrcsStmt(); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_data_srcs_stmt",112, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // opt_function_category ::= 
            {
              TFunctionCategory RESULT =null;
		 RESULT = TFunctionCategory.SCALAR; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_function_category",171, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // opt_function_category ::= KW_ANALYTIC 
            {
              TFunctionCategory RESULT =null;
		 RESULT = TFunctionCategory.ANALYTIC; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_function_category",171, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // opt_function_category ::= KW_AGGREGATE 
            {
              TFunctionCategory RESULT =null;
		 RESULT = TFunctionCategory.AGGREGATE; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_function_category",171, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // alter_index_stmt ::= KW_ALTER KW_INDEX IDENT KW_ON table_name opt_partition_spec KW_REBUILD 
            {
              AlterIndexStmt RESULT =null;
		int index_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int index_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		String index_name = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int partitionleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int partitionright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		PartitionSpec partition = (PartitionSpec)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = new AlterIndexStmt(index_name, table, partition); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_index_stmt",93, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // index_properties ::= 
            {
              HashMap RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("index_properties",96, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // index_properties ::= KW_IDXPROPERTIES LPAREN properties_map RPAREN 
            {
              HashMap RESULT =null;
		int mapleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int mapright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		HashMap map = (HashMap)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = map; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("index_properties",96, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // if_with_deferred_rebuild ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("if_with_deferred_rebuild",95, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // if_with_deferred_rebuild ::= KW_WITH KW_DEFERRED KW_REBUILD 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("if_with_deferred_rebuild",95, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // create_index_stmt ::= KW_CREATE KW_INDEX IDENT KW_ON KW_TABLE table_name LPAREN opt_ident_list RPAREN KW_AS IDENT if_with_deferred_rebuild index_properties 
            {
              CreateIndexStmt RESULT =null;
		int index_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).left;
		int index_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).right;
		String index_name = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).value;
		int tbl_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).left;
		int tbl_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).right;
		TableName tbl_name = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).value;
		int col_permleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int col_permright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		ArrayList<String> col_perm = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int index_typeleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int index_typeright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String index_type = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Boolean w = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int index_propertiesleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int index_propertiesright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		HashMap index_properties = (HashMap)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new CreateIndexStmt(index_name, tbl_name,col_perm, index_type, 
  		w, index_properties); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_index_stmt",94, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-12)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // drop_index_stmt ::= KW_DROP KW_INDEX IDENT KW_ON table_name opt_partition_spec 
            {
              DropIndexStmt RESULT =null;
		int index_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int index_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		String index_name = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int partitionleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int partitionright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		PartitionSpec partition = (PartitionSpec)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new DropIndexStmt(index_name, table, partition); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("drop_index_stmt",92, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // desc_index_stmt ::= KW_DESCRIBE KW_INDEX table_name IDENT 
            {
              DescribeIndexStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int index_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int index_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String index_name = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new DescribeIndexStmt(table, index_name); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("desc_index_stmt",91, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // show_indices_stmt ::= KW_SHOW KW_INDICES table_name 
            {
              ShowIndicesStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ShowIndicesStmt(table); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_indices_stmt",90, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // show_functions_stmt ::= KW_SHOW opt_function_category KW_FUNCTIONS KW_IN IDENT show_pattern 
            {
              ShowFunctionsStmt RESULT =null;
		int fn_typeleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int fn_typeright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		TFunctionCategory fn_type = (TFunctionCategory)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int dbleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String db = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int showPatternleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int showPatternright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String showPattern = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ShowFunctionsStmt(db, showPattern, fn_type); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_functions_stmt",169, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // show_functions_stmt ::= KW_SHOW opt_function_category KW_FUNCTIONS KW_IN IDENT 
            {
              ShowFunctionsStmt RESULT =null;
		int fn_typeleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int fn_typeright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		TFunctionCategory fn_type = (TFunctionCategory)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int dbleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String db = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ShowFunctionsStmt(db, null, fn_type); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_functions_stmt",169, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // show_functions_stmt ::= KW_SHOW opt_function_category KW_FUNCTIONS show_pattern 
            {
              ShowFunctionsStmt RESULT =null;
		int fn_typeleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int fn_typeright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		TFunctionCategory fn_type = (TFunctionCategory)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int showPatternleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int showPatternright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String showPattern = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ShowFunctionsStmt(null, showPattern, fn_type); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_functions_stmt",169, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // show_functions_stmt ::= KW_SHOW opt_function_category KW_FUNCTIONS 
            {
              ShowFunctionsStmt RESULT =null;
		int fn_typeleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int fn_typeright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		TFunctionCategory fn_type = (TFunctionCategory)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = new ShowFunctionsStmt(null, null, fn_type); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_functions_stmt",169, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // show_partitions_stmt ::= KW_SHOW KW_PARTITIONS table_name 
            {
              ShowPartitionsStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ShowPartitionsStmt(table); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_partitions_stmt",12, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // show_stats_stmt ::= KW_SHOW KW_COLUMN KW_STATS table_name 
            {
              ShowStatsStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ShowStatsStmt(table, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_stats_stmt",13, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // show_stats_stmt ::= KW_SHOW KW_TABLE KW_STATS table_name 
            {
              ShowStatsStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ShowStatsStmt(table, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_stats_stmt",13, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // show_dbs_stmt ::= KW_SHOW dbs_or_schemas_kw show_pattern 
            {
              ShowDbsStmt RESULT =null;
		int showPatternleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int showPatternright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String showPattern = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ShowDbsStmt(showPattern); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_dbs_stmt",11, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // show_dbs_stmt ::= KW_SHOW dbs_or_schemas_kw 
            {
              ShowDbsStmt RESULT =null;
		 RESULT = new ShowDbsStmt(); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_dbs_stmt",11, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // show_tables_stmt ::= KW_SHOW KW_TABLES KW_IN IDENT show_pattern 
            {
              ShowTablesStmt RESULT =null;
		int dbleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String db = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int showPatternleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int showPatternright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String showPattern = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ShowTablesStmt(db, showPattern); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_tables_stmt",10, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // show_tables_stmt ::= KW_SHOW KW_TABLES KW_IN IDENT 
            {
              ShowTablesStmt RESULT =null;
		int dbleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String db = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ShowTablesStmt(db, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_tables_stmt",10, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // show_tables_stmt ::= KW_SHOW KW_TABLES show_pattern 
            {
              ShowTablesStmt RESULT =null;
		int showPatternleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int showPatternright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String showPattern = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ShowTablesStmt(showPattern); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_tables_stmt",10, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // show_tables_stmt ::= KW_SHOW KW_TABLES 
            {
              ShowTablesStmt RESULT =null;
		 RESULT = new ShowTablesStmt(); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_tables_stmt",10, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // use_stmt ::= KW_USE IDENT 
            {
              UseStmt RESULT =null;
		int dbleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String db = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new UseStmt(db); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("use_stmt",8, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // values_operand_list ::= values_operand_list COMMA LPAREN select_list RPAREN 
            {
              List<UnionOperand> RESULT =null;
		int operandsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int operandsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		List<UnionOperand> operands = (List<UnionOperand>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int selectListleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int selectListright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		SelectList selectList = (SelectList)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		
    operands.add(new UnionOperand(
        new SelectStmt(selectList, null, null, null, null, null, null), Qualifier.ALL));
    RESULT = operands;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("values_operand_list",7, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // values_operand_list ::= LPAREN select_list RPAREN 
            {
              List<UnionOperand> RESULT =null;
		int selectListleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int selectListright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		SelectList selectList = (SelectList)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		
    List<UnionOperand> operands = new ArrayList<UnionOperand>();
    operands.add(new UnionOperand(
        new SelectStmt(selectList, null, null, null, null, null, null), null));
    RESULT = operands;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("values_operand_list",7, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // values_stmt ::= KW_VALUES LPAREN values_operand_list RPAREN opt_order_by_clause opt_limit_offset_clause 
            {
              ValuesStmt RESULT =null;
		int operandsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int operandsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		List<UnionOperand> operands = (List<UnionOperand>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int orderByClauseleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int orderByClauseright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<OrderByElement> orderByClause = (ArrayList<OrderByElement>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int limitOffsetClauseleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int limitOffsetClauseright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		LimitElement limitOffsetClause = (LimitElement)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT = new ValuesStmt(operands, orderByClause, limitOffsetClause);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("values_stmt",2, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // values_stmt ::= KW_VALUES values_operand_list opt_order_by_clause opt_limit_offset_clause 
            {
              ValuesStmt RESULT =null;
		int operandsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int operandsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		List<UnionOperand> operands = (List<UnionOperand>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int orderByClauseleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int orderByClauseright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<OrderByElement> orderByClause = (ArrayList<OrderByElement>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int limitOffsetClauseleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int limitOffsetClauseright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		LimitElement limitOffsetClause = (LimitElement)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT = new ValuesStmt(operands, orderByClause, limitOffsetClause);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("values_stmt",2, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // union_op ::= KW_UNION KW_ALL 
            {
              Qualifier RESULT =null;
		 RESULT = Qualifier.ALL; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("union_op",89, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // union_op ::= KW_UNION KW_DISTINCT 
            {
              Qualifier RESULT =null;
		 RESULT = Qualifier.DISTINCT; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("union_op",89, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // union_op ::= KW_UNION 
            {
              Qualifier RESULT =null;
		 RESULT = Qualifier.DISTINCT; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("union_op",89, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // union_operand_list ::= union_operand_list union_op union_operand 
            {
              List<UnionOperand> RESULT =null;
		int operandsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int operandsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		List<UnionOperand> operands = (List<UnionOperand>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Qualifier op = (Qualifier)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int operandleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int operandright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		QueryStmt operand = (QueryStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    operands.add(new UnionOperand(operand, op));
    RESULT = operands;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("union_operand_list",6, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // union_operand_list ::= union_operand 
            {
              List<UnionOperand> RESULT =null;
		int operandleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int operandright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		QueryStmt operand = (QueryStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    List<UnionOperand> operands = new ArrayList<UnionOperand>();
    operands.add(new UnionOperand(operand, null));
    RESULT = operands;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("union_operand_list",6, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // union_operand ::= LPAREN query_stmt RPAREN 
            {
              QueryStmt RESULT =null;
		int queryleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int queryright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		QueryStmt query = (QueryStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = query; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("union_operand",5, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // union_operand ::= values_stmt 
            {
              QueryStmt RESULT =null;
		int valuesleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int valuesright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ValuesStmt values = (ValuesStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = values; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("union_operand",5, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // union_operand ::= select_stmt 
            {
              QueryStmt RESULT =null;
		int selectleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int selectright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		SelectStmt select = (SelectStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = select; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("union_operand",5, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // union_with_order_by_or_limit ::= union_operand_list KW_ORDER KW_BY order_by_elements KW_LIMIT expr opt_offset_param 
            {
              QueryStmt RESULT =null;
		int operandsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).left;
		int operandsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).right;
		List<UnionOperand> operands = (List<UnionOperand>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).value;
		int orderByClauseleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int orderByClauseright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		ArrayList<OrderByElement> orderByClause = (ArrayList<OrderByElement>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int limitExprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int limitExprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Expr limitExpr = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int offsetExprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int offsetExprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr offsetExpr = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    if (operands.size() == 1) {
      parser.parseError("order", SqlParserSymbols.KW_ORDER);
    }
    RESULT = new UnionStmt(operands, orderByClause,
        new LimitElement(limitExpr, offsetExpr));
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("union_with_order_by_or_limit",20, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // union_with_order_by_or_limit ::= union_operand_list KW_LIMIT expr 
            {
              QueryStmt RESULT =null;
		int operandsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int operandsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		List<UnionOperand> operands = (List<UnionOperand>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int limitExprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int limitExprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr limitExpr = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    if (operands.size() == 1) {
      parser.parseError("limit", SqlParserSymbols.KW_LIMIT);
    }
    RESULT = new UnionStmt(operands, null, new LimitElement(limitExpr, null));
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("union_with_order_by_or_limit",20, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // union_with_order_by_or_limit ::= union_operand_list KW_ORDER KW_BY order_by_elements opt_offset_param 
            {
              QueryStmt RESULT =null;
		int operandsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int operandsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		List<UnionOperand> operands = (List<UnionOperand>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int orderByClauseleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int orderByClauseright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<OrderByElement> orderByClause = (ArrayList<OrderByElement>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int offsetExprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int offsetExprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr offsetExpr = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    if (operands.size() == 1) {
      parser.parseError("order", SqlParserSymbols.KW_ORDER);
    }
    RESULT = new UnionStmt(operands, orderByClause, new LimitElement(null, offsetExpr));
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("union_with_order_by_or_limit",20, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // with_view_def_list ::= with_view_def_list COMMA with_view_def 
            {
              ArrayList<View> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		ArrayList<View> list = (ArrayList<View>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		View v = (View)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    list.add(v);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("with_view_def_list",70, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // with_view_def_list ::= with_view_def 
            {
              ArrayList<View> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		View v = (View)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    ArrayList<View> list = new ArrayList<View>();
    list.add(v);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("with_view_def_list",70, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // with_view_def ::= STRING_LITERAL KW_AS LPAREN query_stmt RPAREN 
            {
              View RESULT =null;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		String alias = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int queryleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int queryright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		QueryStmt query = (QueryStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = new View(alias, query); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("with_view_def",71, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // with_view_def ::= IDENT KW_AS LPAREN query_stmt RPAREN 
            {
              View RESULT =null;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		String alias = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int queryleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int queryright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		QueryStmt query = (QueryStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = new View(alias, query); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("with_view_def",71, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // opt_with_clause ::= 
            {
              WithClause RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_with_clause",69, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // opt_with_clause ::= KW_WITH with_view_def_list 
            {
              WithClause RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ArrayList<View> list = (ArrayList<View>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new WithClause(list); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_with_clause",69, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // query_stmt ::= opt_with_clause union_with_order_by_or_limit 
            {
              QueryStmt RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		WithClause w = (WithClause)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int unionleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int unionright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		QueryStmt union = (QueryStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    union.setWithClause(w);
    RESULT = union;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("query_stmt",3, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // query_stmt ::= opt_with_clause union_operand_list 
            {
              QueryStmt RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		WithClause w = (WithClause)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int operandsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int operandsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		List<UnionOperand> operands = (List<UnionOperand>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    QueryStmt queryStmt = null;
    if (operands.size() == 1) {
      queryStmt = operands.get(0).getQueryStmt();
    } else {
      queryStmt = new UnionStmt(operands, null, null);
    }
    queryStmt.setWithClause(w);
    RESULT = queryStmt;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("query_stmt",3, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // create_function_arg_key ::= KW_FINALIZE_FN 
            {
              CreateFunctionStmtBase.OptArg RESULT =null;
		 RESULT = CreateFunctionStmtBase.OptArg.FINALIZE_FN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_function_arg_key",173, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // create_function_arg_key ::= KW_MERGE_FN 
            {
              CreateFunctionStmtBase.OptArg RESULT =null;
		 RESULT = CreateFunctionStmtBase.OptArg.MERGE_FN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_function_arg_key",173, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // create_function_arg_key ::= KW_SERIALIZE_FN 
            {
              CreateFunctionStmtBase.OptArg RESULT =null;
		 RESULT = CreateFunctionStmtBase.OptArg.SERIALIZE_FN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_function_arg_key",173, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // create_function_arg_key ::= KW_INIT_FN 
            {
              CreateFunctionStmtBase.OptArg RESULT =null;
		 RESULT = CreateFunctionStmtBase.OptArg.INIT_FN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_function_arg_key",173, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // create_function_arg_key ::= KW_UPDATE_FN 
            {
              CreateFunctionStmtBase.OptArg RESULT =null;
		 RESULT = CreateFunctionStmtBase.OptArg.UPDATE_FN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_function_arg_key",173, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // create_function_arg_key ::= KW_CLOSE_FN 
            {
              CreateFunctionStmtBase.OptArg RESULT =null;
		 RESULT = CreateFunctionStmtBase.OptArg.CLOSE_FN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_function_arg_key",173, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // create_function_arg_key ::= KW_PREPARE_FN 
            {
              CreateFunctionStmtBase.OptArg RESULT =null;
		 RESULT = CreateFunctionStmtBase.OptArg.PREPARE_FN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_function_arg_key",173, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // create_function_arg_key ::= KW_SYMBOL 
            {
              CreateFunctionStmtBase.OptArg RESULT =null;
		 RESULT = CreateFunctionStmtBase.OptArg.SYMBOL; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_function_arg_key",173, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // create_function_arg_key ::= KW_COMMENT 
            {
              CreateFunctionStmtBase.OptArg RESULT =null;
		 RESULT = CreateFunctionStmtBase.OptArg.COMMENT; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_function_arg_key",173, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // create_function_args_map ::= 
            {
              HashMap RESULT =null;
		 RESULT = new HashMap<CreateFunctionStmtBase.OptArg, String>(); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_function_args_map",172, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // create_function_args_map ::= create_function_args_map create_function_arg_key EQUAL STRING_LITERAL 
            {
              HashMap RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		HashMap args = (HashMap)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		CreateFunctionStmtBase.OptArg key = (CreateFunctionStmtBase.OptArg)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    if (args.containsKey(key)) throw new Exception("Duplicate argument key: " + key);
    args.put(key, value);
    RESULT = args;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_function_args_map",172, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // create_function_args_map ::= create_function_arg_key EQUAL STRING_LITERAL 
            {
              HashMap RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		CreateFunctionStmtBase.OptArg key = (CreateFunctionStmtBase.OptArg)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    HashMap<CreateFunctionStmtBase.OptArg, String> args =
        new HashMap<CreateFunctionStmtBase.OptArg, String>();
    args.put(key, value);
    RESULT = args;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_function_args_map",172, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // opt_aggregate_fn_intermediate_type ::= 
            {
              Type RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_aggregate_fn_intermediate_type",166, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // opt_aggregate_fn_intermediate_type ::= KW_INTERMEDIATE type 
            {
              Type RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = type; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_aggregate_fn_intermediate_type",166, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // opt_is_varargs ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_is_varargs",165, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // opt_is_varargs ::= DOTDOTDOT 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_is_varargs",165, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // opt_is_aggregate_fn ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_is_aggregate_fn",164, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // opt_is_aggregate_fn ::= KW_AGGREGATE 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_is_aggregate_fn",164, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // function_def_arg_list ::= function_def_arg_list COMMA type 
            {
              FunctionArgs RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		FunctionArgs args = (FunctionArgs)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    args.argTypes.add(type);
    RESULT = args;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("function_def_arg_list",163, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // function_def_arg_list ::= type 
            {
              FunctionArgs RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    FunctionArgs args = new FunctionArgs();
    args.argTypes.add(type);
    RESULT = args;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("function_def_arg_list",163, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // function_def_args ::= LPAREN function_def_arg_list opt_is_varargs RPAREN 
            {
              FunctionArgs RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		FunctionArgs args = (FunctionArgs)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int var_argsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int var_argsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Boolean var_args = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		
    args.setHasVarArgs(var_args);
    RESULT = args;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("function_def_args",162, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // function_def_args ::= LPAREN RPAREN 
            {
              FunctionArgs RESULT =null;
		 RESULT = new FunctionArgs(); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("function_def_args",162, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // static_partition_key_value ::= IDENT EQUAL expr 
            {
              PartitionKeyValue RESULT =null;
		int columnleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int columnright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String column = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new PartitionKeyValue(column, e); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("static_partition_key_value",88, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // partition_key_value ::= static_partition_key_value 
            {
              PartitionKeyValue RESULT =null;
		int partitionleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int partitionright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		PartitionKeyValue partition = (PartitionKeyValue)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = partition; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("partition_key_value",87, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // partition_key_value ::= IDENT 
            {
              PartitionKeyValue RESULT =null;
		int columnleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int columnright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String column = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new PartitionKeyValue(column, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("partition_key_value",87, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // static_partition_key_value_list ::= static_partition_key_value_list COMMA static_partition_key_value 
            {
              ArrayList<PartitionKeyValue> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		ArrayList<PartitionKeyValue> list = (ArrayList<PartitionKeyValue>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int itemleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		PartitionKeyValue item = (PartitionKeyValue)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    list.add(item);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("static_partition_key_value_list",85, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // static_partition_key_value_list ::= static_partition_key_value 
            {
              ArrayList<PartitionKeyValue> RESULT =null;
		int itemleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		PartitionKeyValue item = (PartitionKeyValue)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    ArrayList<PartitionKeyValue> list = new ArrayList<PartitionKeyValue>();
    list.add(item);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("static_partition_key_value_list",85, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // opt_partition_spec ::= 
            {
              PartitionSpec RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_partition_spec",82, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // opt_partition_spec ::= partition_spec 
            {
              PartitionSpec RESULT =null;
		int partition_specleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int partition_specright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		PartitionSpec partition_spec = (PartitionSpec)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = partition_spec; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_partition_spec",82, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // partition_spec ::= KW_PARTITION LPAREN static_partition_key_value_list RPAREN 
            {
              PartitionSpec RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<PartitionKeyValue> list = (ArrayList<PartitionKeyValue>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = new PartitionSpec(list); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("partition_spec",83, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // partition_key_value_list ::= partition_key_value_list COMMA partition_key_value 
            {
              ArrayList<PartitionKeyValue> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		ArrayList<PartitionKeyValue> list = (ArrayList<PartitionKeyValue>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int itemleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		PartitionKeyValue item = (PartitionKeyValue)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    list.add(item);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("partition_key_value_list",86, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // partition_key_value_list ::= partition_key_value 
            {
              ArrayList<PartitionKeyValue> RESULT =null;
		int itemleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		PartitionKeyValue item = (PartitionKeyValue)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    ArrayList<PartitionKeyValue> list = new ArrayList<PartitionKeyValue>();
    list.add(item);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("partition_key_value_list",86, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // partition_clause ::= 
            {
              ArrayList<PartitionKeyValue> RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("partition_clause",84, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // partition_clause ::= KW_PARTITION LPAREN partition_key_value_list RPAREN 
            {
              ArrayList<PartitionKeyValue> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<PartitionKeyValue> list = (ArrayList<PartitionKeyValue>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = list; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("partition_clause",84, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // if_exists_val ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("if_exists_val",127, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // if_exists_val ::= KW_IF KW_EXISTS 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("if_exists_val",127, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // dbs_or_schemas_kw ::= KW_SCHEMAS 
            {
              String RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("dbs_or_schemas_kw",141, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // dbs_or_schemas_kw ::= KW_DATABASES 
            {
              String RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("dbs_or_schemas_kw",141, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // db_or_schema_kw ::= KW_SCHEMA 
            {
              String RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("db_or_schema_kw",140, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // db_or_schema_kw ::= KW_DATABASE 
            {
              String RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("db_or_schema_kw",140, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // drop_data_src_stmt ::= KW_DROP KW_DATA source_ident if_exists_val IDENT 
            {
              DropDataSrcStmt RESULT =null;
		int is_source_idleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int is_source_idright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Boolean is_source_id = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int if_existsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int if_existsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Boolean if_exists = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int data_src_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int data_src_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String data_src_name = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new DropDataSrcStmt(data_src_name, if_exists); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("drop_data_src_stmt",111, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // drop_function_stmt ::= KW_DROP opt_is_aggregate_fn KW_FUNCTION if_exists_val function_name function_def_args 
            {
              DropFunctionStmt RESULT =null;
		int is_aggregateleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int is_aggregateright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		Boolean is_aggregate = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int if_existsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int if_existsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Boolean if_exists = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int fn_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int fn_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		FunctionName fn_name = (FunctionName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int fn_argsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int fn_argsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		FunctionArgs fn_args = (FunctionArgs)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new DropFunctionStmt(fn_name, fn_args, if_exists); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("drop_function_stmt",170, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // drop_tbl_or_view_stmt ::= KW_DROP KW_VIEW if_exists_val table_name 
            {
              DropTableOrViewStmt RESULT =null;
		int if_existsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int if_existsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Boolean if_exists = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new DropTableOrViewStmt(table, if_exists, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("drop_tbl_or_view_stmt",102, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // drop_tbl_or_view_stmt ::= KW_DROP KW_TABLE if_exists_val table_name 
            {
              DropTableOrViewStmt RESULT =null;
		int if_existsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int if_existsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Boolean if_exists = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new DropTableOrViewStmt(table, if_exists, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("drop_tbl_or_view_stmt",102, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // drop_db_stmt ::= KW_DROP db_or_schema_kw if_exists_val IDENT 
            {
              DropDbStmt RESULT =null;
		int if_existsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int if_existsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Boolean if_exists = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int db_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int db_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String db_name = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new DropDbStmt(db_name, if_exists); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("drop_db_stmt",100, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // drop_stats_stmt ::= KW_DROP KW_INCREMENTAL KW_STATS table_name partition_spec 
            {
              DropStatsStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int specleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int specright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		PartitionSpec spec = (PartitionSpec)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new DropStatsStmt(table, spec); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("drop_stats_stmt",101, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // drop_stats_stmt ::= KW_DROP KW_STATS table_name 
            {
              DropStatsStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new DropStatsStmt(table); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("drop_stats_stmt",101, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // compute_stats_stmt ::= KW_COMPUTE KW_INCREMENTAL KW_STATS table_name partition_spec 
            {
              ComputeStatsStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int specleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int specright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		PartitionSpec spec = (PartitionSpec)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ComputeStatsStmt(table, true, spec); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("compute_stats_stmt",99, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // compute_stats_stmt ::= KW_COMPUTE KW_INCREMENTAL KW_STATS table_name 
            {
              ComputeStatsStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ComputeStatsStmt(table, true, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("compute_stats_stmt",99, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // compute_stats_stmt ::= KW_COMPUTE KW_STATS table_name 
            {
              ComputeStatsStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ComputeStatsStmt(table); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("compute_stats_stmt",99, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // alter_view_stmt ::= KW_ALTER KW_VIEW table_name KW_RENAME KW_TO table_name 
            {
              StatementBase RESULT =null;
		int before_tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int before_tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		TableName before_table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int new_tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int new_tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableName new_table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new AlterTableOrViewRenameStmt(before_table, new_table, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_view_stmt",98, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // alter_view_stmt ::= KW_ALTER KW_VIEW table_name KW_AS query_stmt 
            {
              StatementBase RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int view_defleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int view_defright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		QueryStmt view_def = (QueryStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new AlterViewStmt(table, view_def); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_view_stmt",98, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // view_column_def ::= IDENT comment_val 
            {
              ColumnDesc RESULT =null;
		int col_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int col_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String col_name = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int commentleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ColumnDesc(col_name, null, comment); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("view_column_def",115, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // view_column_def_list ::= view_column_def_list COMMA view_column_def 
            {
              ArrayList<ColumnDesc> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		ArrayList<ColumnDesc> list = (ArrayList<ColumnDesc>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int col_defleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int col_defright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ColumnDesc col_def = (ColumnDesc)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    list.add(col_def);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("view_column_def_list",117, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // view_column_def_list ::= view_column_def 
            {
              ArrayList<ColumnDesc> RESULT =null;
		int col_defleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int col_defright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ColumnDesc col_def = (ColumnDesc)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    ArrayList<ColumnDesc> list = new ArrayList<ColumnDesc>();
    list.add(col_def);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("view_column_def_list",117, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // view_column_defs ::= 
            {
              ArrayList<ColumnDesc> RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("view_column_defs",119, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // view_column_defs ::= LPAREN view_column_def_list RPAREN 
            {
              ArrayList<ColumnDesc> RESULT =null;
		int view_col_defsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int view_col_defsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<ColumnDesc> view_col_defs = (ArrayList<ColumnDesc>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = view_col_defs; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("view_column_defs",119, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // option_ident ::= IDENT 
            {
              Boolean RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    if (!ident.toUpperCase().equals("OPTION")) {
      parser.parseError("identifier", SqlParserSymbols.IDENT, "OPTION");
    }
    RESULT = true;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("option_ident",161, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // server_ident ::= IDENT 
            {
              Boolean RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    if (!ident.toUpperCase().equals("SERVER")) {
      parser.parseError("identifier", SqlParserSymbols.IDENT, "SERVER");
    }
    RESULT = true;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("server_ident",159, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // uri_ident ::= IDENT 
            {
              Boolean RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    if (!ident.toUpperCase().equals("URI")) {
      parser.parseError("identifier", SqlParserSymbols.IDENT, "URI");
    }
    RESULT = true;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("uri_ident",160, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // sources_ident ::= IDENT 
            {
              Boolean RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    if (!ident.toUpperCase().equals("SOURCES")) {
      parser.parseError("identifier", SqlParserSymbols.IDENT, "SOURCES");
    }
    RESULT = true;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("sources_ident",158, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // source_ident ::= IDENT 
            {
              Boolean RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    if (!ident.toUpperCase().equals("SOURCE")) {
      parser.parseError("identifier", SqlParserSymbols.IDENT, "SOURCE");
    }
    RESULT = true;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("source_ident",157, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // create_data_src_stmt ::= KW_CREATE KW_DATA source_ident if_not_exists_val IDENT KW_LOCATION STRING_LITERAL KW_CLASS STRING_LITERAL KW_API_VERSION STRING_LITERAL 
            {
              CreateDataSrcStmt RESULT =null;
		int is_source_idleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).left;
		int is_source_idright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).right;
		Boolean is_source_id = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).value;
		int if_not_existsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).left;
		int if_not_existsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).right;
		Boolean if_not_exists = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).value;
		int data_src_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).left;
		int data_src_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).right;
		String data_src_name = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).value;
		int locationleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int locationright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		String location = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int class_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int class_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String class_name = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int api_versionleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int api_versionright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String api_version = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT = new CreateDataSrcStmt(data_src_name, new HdfsUri(location), class_name,
        api_version, if_not_exists);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_data_src_stmt",110, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // create_view_stmt ::= KW_CREATE KW_VIEW if_not_exists_val table_name view_column_defs comment_val KW_AS query_stmt 
            {
              CreateViewStmt RESULT =null;
		int if_not_existsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int if_not_existsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		Boolean if_not_exists = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int view_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int view_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		TableName view_name = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int col_defsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int col_defsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		ArrayList<ColumnDesc> col_defs = (ArrayList<ColumnDesc>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int commentleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int view_defleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int view_defright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		QueryStmt view_def = (QueryStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT = new CreateViewStmt(if_not_exists, view_name, col_defs, comment, view_def);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_view_stmt",109, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // column_def ::= IDENT type comment_val 
            {
              ColumnDesc RESULT =null;
		int col_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int col_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String col_name = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int targetTypeleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int targetTyperight = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Type targetType = (Type)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int commentleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ColumnDesc(col_name, targetType, comment); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_def",114, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // column_def_list ::= column_def_list COMMA column_def 
            {
              ArrayList<ColumnDesc> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		ArrayList<ColumnDesc> list = (ArrayList<ColumnDesc>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int col_defleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int col_defright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ColumnDesc col_def = (ColumnDesc)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    list.add(col_def);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_def_list",116, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // column_def_list ::= column_def 
            {
              ArrayList<ColumnDesc> RESULT =null;
		int col_defleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int col_defright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ColumnDesc col_def = (ColumnDesc)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    ArrayList<ColumnDesc> list = new ArrayList<ColumnDesc>();
    list.add(col_def);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_def_list",116, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // partition_column_defs ::= 
            {
              ArrayList<ColumnDesc> RESULT =null;
		 RESULT = new ArrayList<ColumnDesc>(); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("partition_column_defs",118, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // partition_column_defs ::= KW_PARTITIONED KW_BY LPAREN column_def_list RPAREN 
            {
              ArrayList<ColumnDesc> RESULT =null;
		int col_defsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int col_defsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<ColumnDesc> col_defs = (ArrayList<ColumnDesc>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = col_defs; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("partition_column_defs",118, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // properties_map ::= properties_map COMMA STRING_LITERAL EQUAL STRING_LITERAL 
            {
              HashMap RESULT =null;
		int propertiesleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int propertiesright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		HashMap properties = (HashMap)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    properties.put(key, value);
    RESULT = properties;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("properties_map",139, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // properties_map ::= STRING_LITERAL EQUAL STRING_LITERAL 
            {
              HashMap RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    HashMap<String, String> properties = new HashMap<String, String>();
    properties.put(key, value);
    RESULT = properties;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("properties_map",139, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // serde_properties ::= 
            {
              HashMap RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("serde_properties",137, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // serde_properties ::= KW_WITH KW_SERDEPROPERTIES LPAREN properties_map RPAREN 
            {
              HashMap RESULT =null;
		int mapleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int mapright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		HashMap map = (HashMap)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = map; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("serde_properties",137, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // tbl_properties ::= 
            {
              HashMap RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("tbl_properties",138, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // tbl_properties ::= KW_TBLPROPERTIES LPAREN properties_map RPAREN 
            {
              HashMap RESULT =null;
		int mapleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int mapright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		HashMap map = (HashMap)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = map; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("tbl_properties",138, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // file_format_val ::= KW_AVRO 
            {
              THdfsFileFormat RESULT =null;
		 RESULT = THdfsFileFormat.AVRO; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("file_format_val",125, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // file_format_val ::= KW_RCFILE 
            {
              THdfsFileFormat RESULT =null;
		 RESULT = THdfsFileFormat.RC_FILE; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("file_format_val",125, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // file_format_val ::= KW_SEQUENCEFILE 
            {
              THdfsFileFormat RESULT =null;
		 RESULT = THdfsFileFormat.SEQUENCE_FILE; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("file_format_val",125, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // file_format_val ::= KW_TEXTFILE 
            {
              THdfsFileFormat RESULT =null;
		 RESULT = THdfsFileFormat.TEXT; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("file_format_val",125, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // file_format_val ::= KW_PARQUETFILE 
            {
              THdfsFileFormat RESULT =null;
		 RESULT = THdfsFileFormat.PARQUET; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("file_format_val",125, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // file_format_val ::= KW_PARQUET 
            {
              THdfsFileFormat RESULT =null;
		 RESULT = THdfsFileFormat.PARQUET; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("file_format_val",125, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // file_format_create_table_val ::= 
            {
              THdfsFileFormat RESULT =null;
		 RESULT = THdfsFileFormat.TEXT; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("file_format_create_table_val",126, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // file_format_create_table_val ::= KW_STORED KW_AS file_format_val 
            {
              THdfsFileFormat RESULT =null;
		int file_formatleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int file_formatright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		THdfsFileFormat file_format = (THdfsFileFormat)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = file_format; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("file_format_create_table_val",126, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // terminator_val ::= KW_TERMINATED KW_BY STRING_LITERAL 
            {
              String RESULT =null;
		int terminatorleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int terminatorright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String terminator = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = terminator; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("terminator_val",135, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // field_terminator_val ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("field_terminator_val",132, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // field_terminator_val ::= KW_FIELDS terminator_val 
            {
              String RESULT =null;
		int field_terminatorleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int field_terminatorright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String field_terminator = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = field_terminator; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("field_terminator_val",132, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // line_terminator_val ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("line_terminator_val",133, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // line_terminator_val ::= KW_LINES terminator_val 
            {
              String RESULT =null;
		int line_terminatorleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int line_terminatorright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String line_terminator = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = line_terminator; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("line_terminator_val",133, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // escaped_by_val ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("escaped_by_val",134, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // escaped_by_val ::= KW_ESCAPED KW_BY STRING_LITERAL 
            {
              String RESULT =null;
		int escaped_byleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int escaped_byright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String escaped_by = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = escaped_by; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("escaped_by_val",134, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // row_format_val ::= 
            {
              RowFormat RESULT =null;
		 RESULT = RowFormat.DEFAULT_ROW_FORMAT; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("row_format_val",131, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // row_format_val ::= KW_ROW KW_FORMAT KW_DELIMITED field_terminator_val escaped_by_val line_terminator_val 
            {
              RowFormat RESULT =null;
		int field_terminatorleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int field_terminatorright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String field_terminator = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int escaped_byleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int escaped_byright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String escaped_by = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int line_terminatorleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int line_terminatorright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String line_terminator = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new RowFormat(field_terminator, line_terminator, escaped_by); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("row_format_val",131, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // if_not_exists_val ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("if_not_exists_val",128, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // if_not_exists_val ::= KW_IF KW_NOT KW_EXISTS 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("if_not_exists_val",128, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // external_val ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("external_val",123, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // external_val ::= KW_EXTERNAL 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("external_val",123, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // opt_init_string_val ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_init_string_val",124, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // opt_init_string_val ::= LPAREN STRING_LITERAL RPAREN 
            {
              String RESULT =null;
		int init_stringleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int init_stringright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String init_string = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = init_string; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_init_string_val",124, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // location_val ::= 
            {
              HdfsUri RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("location_val",130, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // location_val ::= KW_LOCATION STRING_LITERAL 
            {
              HdfsUri RESULT =null;
		int locationleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int locationright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String location = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new HdfsUri(location); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("location_val",130, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // comment_val ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("comment_val",122, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // comment_val ::= KW_COMMENT STRING_LITERAL 
            {
              String RESULT =null;
		int commentleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = comment; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("comment_val",122, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // cache_op_val ::= 
            {
              HdfsCachingOp RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("cache_op_val",121, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // cache_op_val ::= KW_UNCACHED 
            {
              HdfsCachingOp RESULT =null;
		 RESULT = new HdfsCachingOp(); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("cache_op_val",121, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // cache_op_val ::= KW_CACHED KW_IN STRING_LITERAL 
            {
              HdfsCachingOp RESULT =null;
		int pool_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int pool_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String pool_name = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new HdfsCachingOp(pool_name); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("cache_op_val",121, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // create_uda_stmt ::= KW_CREATE KW_AGGREGATE KW_FUNCTION if_not_exists_val function_name function_def_args KW_RETURNS type opt_aggregate_fn_intermediate_type KW_LOCATION STRING_LITERAL create_function_args_map 
            {
              CreateUdaStmt RESULT =null;
		int if_not_existsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).left;
		int if_not_existsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).right;
		Boolean if_not_exists = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).value;
		int fn_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).left;
		int fn_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).right;
		FunctionName fn_name = (FunctionName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).value;
		int fn_argsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).left;
		int fn_argsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).right;
		FunctionArgs fn_args = (FunctionArgs)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).value;
		int return_typeleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int return_typeright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		Type return_type = (Type)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int intermediate_typeleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int intermediate_typeright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Type intermediate_type = (Type)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int binary_pathleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int binary_pathright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String binary_path = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int arg_mapleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int arg_mapright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		HashMap arg_map = (HashMap)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT = new CreateUdaStmt(fn_name, fn_args, return_type, intermediate_type,
        new HdfsUri(binary_path), if_not_exists, arg_map);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_uda_stmt",168, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-11)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // create_udf_stmt ::= KW_CREATE KW_FUNCTION if_not_exists_val function_name function_def_args KW_RETURNS type KW_LOCATION STRING_LITERAL create_function_args_map 
            {
              CreateUdfStmt RESULT =null;
		int if_not_existsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).left;
		int if_not_existsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).right;
		Boolean if_not_exists = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).value;
		int fn_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).left;
		int fn_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).right;
		FunctionName fn_name = (FunctionName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).value;
		int fn_argsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int fn_argsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		FunctionArgs fn_args = (FunctionArgs)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int return_typeleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int return_typeright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Type return_type = (Type)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int binary_pathleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int binary_pathright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String binary_path = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int arg_mapleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int arg_mapright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		HashMap arg_map = (HashMap)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT = new CreateUdfStmt(fn_name, fn_args, return_type, new HdfsUri(binary_path),
        if_not_exists, arg_map);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_udf_stmt",167, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-9)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // create_partitioned_tbl_stmt ::= KW_CREATE external_val KW_TABLE if_not_exists_val table_name KW_PARTITIONED KW_BY LPAREN column_def_list RPAREN comment_val row_format_val serde_properties file_format_create_table_val location_val cache_op_val tbl_properties 
            {
              CreateTableStmt RESULT =null;
		int externalleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-15)).left;
		int externalright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-15)).right;
		Boolean external = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-15)).value;
		int if_not_existsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-13)).left;
		int if_not_existsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-13)).right;
		Boolean if_not_exists = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-13)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-12)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-12)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-12)).value;
		int partition_col_defsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).left;
		int partition_col_defsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).right;
		ArrayList<ColumnDesc> partition_col_defs = (ArrayList<ColumnDesc>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).value;
		int commentleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).value;
		int row_formatleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int row_formatright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		RowFormat row_format = (RowFormat)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int serde_propsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int serde_propsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		HashMap serde_props = (HashMap)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int file_formatleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int file_formatright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		THdfsFileFormat file_format = (THdfsFileFormat)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int locationleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int locationright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		HdfsUri location = (HdfsUri)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int cache_opleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int cache_opright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		HdfsCachingOp cache_op = (HdfsCachingOp)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int tbl_propsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tbl_propsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		HashMap tbl_props = (HashMap)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT = new CreateTableStmt(table, new ArrayList<ColumnDesc>(), partition_col_defs,
        external, comment, row_format, file_format, location, cache_op, if_not_exists,
        tbl_props, serde_props);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_partitioned_tbl_stmt",108, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-16)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // create_partitioned_tbl_stmt ::= KW_CREATE external_val KW_TABLE if_not_exists_val table_name LPAREN column_def_list RPAREN KW_PARTITIONED KW_BY LPAREN column_def_list RPAREN comment_val row_format_val serde_properties file_format_create_table_val location_val cache_op_val tbl_properties 
            {
              CreateTableStmt RESULT =null;
		int externalleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-18)).left;
		int externalright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-18)).right;
		Boolean external = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-18)).value;
		int if_not_existsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-16)).left;
		int if_not_existsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-16)).right;
		Boolean if_not_exists = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-16)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-15)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-15)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-15)).value;
		int col_defsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-13)).left;
		int col_defsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-13)).right;
		ArrayList<ColumnDesc> col_defs = (ArrayList<ColumnDesc>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-13)).value;
		int partition_col_defsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).left;
		int partition_col_defsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).right;
		ArrayList<ColumnDesc> partition_col_defs = (ArrayList<ColumnDesc>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).value;
		int commentleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).value;
		int row_formatleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int row_formatright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		RowFormat row_format = (RowFormat)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int serde_propsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int serde_propsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		HashMap serde_props = (HashMap)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int file_formatleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int file_formatright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		THdfsFileFormat file_format = (THdfsFileFormat)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int locationleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int locationright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		HdfsUri location = (HdfsUri)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int cache_opleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int cache_opright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		HdfsCachingOp cache_op = (HdfsCachingOp)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int tbl_propsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tbl_propsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		HashMap tbl_props = (HashMap)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT = new CreateTableStmt(table, col_defs, partition_col_defs, external, comment,
        row_format, file_format, location, cache_op, if_not_exists, tbl_props,
        serde_props);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_partitioned_tbl_stmt",108, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-19)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // create_unpartitioned_tbl_stmt ::= KW_CREATE external_val KW_TABLE if_not_exists_val table_name LPAREN column_def_list RPAREN KW_PRODUCED KW_BY KW_DATA source_ident IDENT opt_init_string_val comment_val 
            {
              CreateTableStmt RESULT =null;
		int externalleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-13)).left;
		int externalright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-13)).right;
		Boolean external = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-13)).value;
		int if_not_existsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-11)).left;
		int if_not_existsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-11)).right;
		Boolean if_not_exists = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-11)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).value;
		int col_defsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).left;
		int col_defsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).right;
		ArrayList<ColumnDesc> col_defs = (ArrayList<ColumnDesc>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).value;
		int is_source_idleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int is_source_idright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Boolean is_source_id = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int data_src_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int data_src_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String data_src_name = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int init_stringleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int init_stringright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String init_string = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int commentleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    // Need external_val in the grammar to avoid shift/reduce conflict with other
    // CREATE TABLE statements.
    if (external) parser.parseError("external", SqlParserSymbols.KW_EXTERNAL);
    RESULT = new CreateTableDataSrcStmt(table, col_defs, data_src_name, init_string,
        comment, if_not_exists);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_unpartitioned_tbl_stmt",107, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-14)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // create_unpartitioned_tbl_stmt ::= KW_CREATE external_val KW_TABLE if_not_exists_val table_name comment_val row_format_val serde_properties file_format_create_table_val location_val cache_op_val tbl_properties 
            {
              CreateTableStmt RESULT =null;
		int externalleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).left;
		int externalright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).right;
		Boolean external = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).value;
		int if_not_existsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).left;
		int if_not_existsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).right;
		Boolean if_not_exists = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).value;
		int commentleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).value;
		int row_formatleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int row_formatright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		RowFormat row_format = (RowFormat)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int serde_propsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int serde_propsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		HashMap serde_props = (HashMap)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int file_formatleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int file_formatright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		THdfsFileFormat file_format = (THdfsFileFormat)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int locationleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int locationright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		HdfsUri location = (HdfsUri)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int cache_opleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int cache_opright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		HdfsCachingOp cache_op = (HdfsCachingOp)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int tbl_propsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tbl_propsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		HashMap tbl_props = (HashMap)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT = new CreateTableStmt(table, new ArrayList<ColumnDesc>(),
        new ArrayList<ColumnDesc>(), external, comment, row_format, file_format,
        location, cache_op, if_not_exists, tbl_props, serde_props);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_unpartitioned_tbl_stmt",107, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-11)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // create_unpartitioned_tbl_stmt ::= KW_CREATE external_val KW_TABLE if_not_exists_val table_name LPAREN column_def_list RPAREN comment_val row_format_val serde_properties file_format_create_table_val location_val cache_op_val tbl_properties 
            {
              CreateTableStmt RESULT =null;
		int externalleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-13)).left;
		int externalright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-13)).right;
		Boolean external = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-13)).value;
		int if_not_existsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-11)).left;
		int if_not_existsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-11)).right;
		Boolean if_not_exists = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-11)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).value;
		int col_defsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).left;
		int col_defsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).right;
		ArrayList<ColumnDesc> col_defs = (ArrayList<ColumnDesc>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).value;
		int commentleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).value;
		int row_formatleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int row_formatright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		RowFormat row_format = (RowFormat)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int serde_propsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int serde_propsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		HashMap serde_props = (HashMap)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int file_formatleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int file_formatright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		THdfsFileFormat file_format = (THdfsFileFormat)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int locationleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int locationright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		HdfsUri location = (HdfsUri)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int cache_opleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int cache_opright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		HdfsCachingOp cache_op = (HdfsCachingOp)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int tbl_propsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tbl_propsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		HashMap tbl_props = (HashMap)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT = new CreateTableStmt(table, col_defs, new ArrayList<ColumnDesc>(), external,
        comment, row_format, file_format, location, cache_op, if_not_exists, tbl_props,
        serde_props);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_unpartitioned_tbl_stmt",107, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-14)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // create_tbl_as_select_stmt ::= KW_CREATE external_val KW_TABLE if_not_exists_val table_name comment_val row_format_val serde_properties file_format_create_table_val location_val cache_op_val tbl_properties KW_AS query_stmt 
            {
              CreateTableAsSelectStmt RESULT =null;
		int externalleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-12)).left;
		int externalright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-12)).right;
		Boolean external = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-12)).value;
		int if_not_existsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).left;
		int if_not_existsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).right;
		Boolean if_not_exists = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-9)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-9)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-9)).value;
		int commentleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).value;
		int row_formatleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).left;
		int row_formatright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).right;
		RowFormat row_format = (RowFormat)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).value;
		int serde_propsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).left;
		int serde_propsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).right;
		HashMap serde_props = (HashMap)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).value;
		int file_formatleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int file_formatright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		THdfsFileFormat file_format = (THdfsFileFormat)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int locationleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int locationright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		HdfsUri location = (HdfsUri)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int cache_opleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int cache_opright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		HdfsCachingOp cache_op = (HdfsCachingOp)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int tbl_propsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int tbl_propsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		HashMap tbl_props = (HashMap)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int queryleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int queryright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		QueryStmt query = (QueryStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    // Initialize with empty List of columns and partition columns. The
    // columns will be added from the query statement during analysis
    CreateTableStmt create_stmt = new CreateTableStmt(table, new ArrayList<ColumnDesc>(),
        new ArrayList<ColumnDesc>(), external, comment, row_format,
        file_format, location, cache_op, if_not_exists, tbl_props, serde_props);
    RESULT = new CreateTableAsSelectStmt(create_stmt, query);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_tbl_as_select_stmt",104, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-13)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // create_tbl_like_file_stmt ::= KW_CREATE external_val KW_TABLE if_not_exists_val table_name KW_LIKE file_format_val STRING_LITERAL partition_column_defs comment_val row_format_val serde_properties file_format_create_table_val location_val cache_op_val tbl_properties 
            {
              CreateTableLikeFileStmt RESULT =null;
		int externalleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-14)).left;
		int externalright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-14)).right;
		Boolean external = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-14)).value;
		int if_not_existsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-12)).left;
		int if_not_existsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-12)).right;
		Boolean if_not_exists = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-12)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-11)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-11)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-11)).value;
		int schema_file_formatleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-9)).left;
		int schema_file_formatright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-9)).right;
		THdfsFileFormat schema_file_format = (THdfsFileFormat)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-9)).value;
		int schema_locationleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).left;
		int schema_locationright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).right;
		String schema_location = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).value;
		int partition_col_defsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).left;
		int partition_col_defsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).right;
		ArrayList<ColumnDesc> partition_col_defs = (ArrayList<ColumnDesc>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).value;
		int commentleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).value;
		int row_formatleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int row_formatright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		RowFormat row_format = (RowFormat)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int serde_propsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int serde_propsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		HashMap serde_props = (HashMap)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int file_formatleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int file_formatright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		THdfsFileFormat file_format = (THdfsFileFormat)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int locationleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int locationright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		HdfsUri location = (HdfsUri)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int cache_opleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int cache_opright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		HdfsCachingOp cache_op = (HdfsCachingOp)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int tbl_propsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tbl_propsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		HashMap tbl_props = (HashMap)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT = new CreateTableLikeFileStmt(table, schema_file_format,
        new HdfsUri(schema_location), partition_col_defs, external, comment, row_format,
        file_format, location, cache_op, if_not_exists, tbl_props, serde_props);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_tbl_like_file_stmt",106, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-15)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // create_tbl_like_stmt ::= KW_CREATE external_val KW_TABLE if_not_exists_val table_name KW_LIKE table_name comment_val location_val 
            {
              CreateTableLikeStmt RESULT =null;
		int externalleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).left;
		int externalright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).right;
		Boolean external = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).value;
		int if_not_existsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int if_not_existsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		Boolean if_not_exists = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int other_tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int other_tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		TableName other_table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int commentleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int locationleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int locationright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		HdfsUri location = (HdfsUri)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT = new CreateTableLikeStmt(table, other_table, external, comment,
        null, location, if_not_exists);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_tbl_like_stmt",105, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // create_tbl_like_stmt ::= KW_CREATE external_val KW_TABLE if_not_exists_val table_name KW_LIKE table_name comment_val KW_STORED KW_AS file_format_val location_val 
            {
              CreateTableLikeStmt RESULT =null;
		int externalleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).left;
		int externalright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).right;
		Boolean external = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).value;
		int if_not_existsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).left;
		int if_not_existsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).right;
		Boolean if_not_exists = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).value;
		int other_tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int other_tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		TableName other_table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int commentleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int file_formatleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int file_formatright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		THdfsFileFormat file_format = (THdfsFileFormat)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int locationleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int locationright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		HdfsUri location = (HdfsUri)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT = new CreateTableLikeStmt(table, other_table, external, comment,
        file_format, location, if_not_exists);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_tbl_like_stmt",105, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-11)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // create_db_stmt ::= KW_CREATE db_or_schema_kw if_not_exists_val IDENT comment_val location_val 
            {
              CreateDbStmt RESULT =null;
		int if_not_existsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int if_not_existsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Boolean if_not_exists = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int db_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int db_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String db_name = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int commentleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int locationleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int locationright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		HdfsUri location = (HdfsUri)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new CreateDbStmt(db_name, comment, location, if_not_exists); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_db_stmt",103, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // replace_existing_cols_val ::= KW_ADD 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("replace_existing_cols_val",129, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // replace_existing_cols_val ::= KW_REPLACE 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("replace_existing_cols_val",129, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // opt_kw_column ::= 
            {
              String RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_kw_column",142, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // opt_kw_column ::= KW_COLUMN 
            {
              String RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_kw_column",142, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // table_property_type ::= KW_SERDEPROPERTIES 
            {
              TTablePropertyType RESULT =null;
		 RESULT = TTablePropertyType.SERDE_PROPERTY; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("table_property_type",136, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // table_property_type ::= KW_TBLPROPERTIES 
            {
              TTablePropertyType RESULT =null;
		 RESULT = TTablePropertyType.TBL_PROPERTY; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("table_property_type",136, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // alter_tbl_stmt ::= KW_ALTER KW_TABLE table_name opt_partition_spec KW_SET cache_op_val 
            {
              AlterTableStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int partitionleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int partitionright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		PartitionSpec partition = (PartitionSpec)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int cache_opleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int cache_opright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		HdfsCachingOp cache_op = (HdfsCachingOp)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    // Ensure a parser error is thrown for ALTER statements if no cache op is specified.
    if (cache_op == null) {
      parser.parseError("set", SqlParserSymbols.KW_SET);
    }
    RESULT = new AlterTableSetCachedStmt(table, partition, cache_op);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_tbl_stmt",97, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // alter_tbl_stmt ::= KW_ALTER KW_TABLE table_name opt_partition_spec KW_SET table_property_type LPAREN properties_map RPAREN 
            {
              AlterTableStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).value;
		int partitionleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int partitionright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		PartitionSpec partition = (PartitionSpec)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int targetleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		TTablePropertyType target = (TTablePropertyType)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int propertiesleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int propertiesright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		HashMap properties = (HashMap)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = new AlterTableSetTblProperties(table, partition, target, properties); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_tbl_stmt",97, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // alter_tbl_stmt ::= KW_ALTER KW_TABLE table_name KW_RENAME KW_TO table_name 
            {
              AlterTableStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int new_tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int new_tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableName new_table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new AlterTableOrViewRenameStmt(table, new_table, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_tbl_stmt",97, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // alter_tbl_stmt ::= KW_ALTER KW_TABLE table_name opt_partition_spec KW_SET KW_LOCATION STRING_LITERAL 
            {
              AlterTableStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int partitionleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int partitionright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		PartitionSpec partition = (PartitionSpec)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int locationleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int locationright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String location = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new AlterTableSetLocationStmt(table, partition, new HdfsUri(location)); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_tbl_stmt",97, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // alter_tbl_stmt ::= KW_ALTER KW_TABLE table_name opt_partition_spec KW_SET KW_FILEFORMAT file_format_val 
            {
              AlterTableStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int partitionleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int partitionright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		PartitionSpec partition = (PartitionSpec)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int file_formatleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int file_formatright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		THdfsFileFormat file_format = (THdfsFileFormat)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new AlterTableSetFileFormatStmt(table, partition, file_format); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_tbl_stmt",97, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // alter_tbl_stmt ::= KW_ALTER KW_TABLE table_name KW_DROP if_exists_val partition_spec 
            {
              AlterTableStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int if_existsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int if_existsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Boolean if_exists = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int partitionleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int partitionright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		PartitionSpec partition = (PartitionSpec)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new AlterTableDropPartitionStmt(table, partition, if_exists); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_tbl_stmt",97, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // alter_tbl_stmt ::= KW_ALTER KW_TABLE table_name KW_CHANGE opt_kw_column IDENT column_def 
            {
              AlterTableStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int col_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int col_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String col_name = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int col_defleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int col_defright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ColumnDesc col_def = (ColumnDesc)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new AlterTableChangeColStmt(table, col_name, col_def); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_tbl_stmt",97, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // alter_tbl_stmt ::= KW_ALTER KW_TABLE table_name KW_DROP opt_kw_column IDENT 
            {
              AlterTableStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int col_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int col_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String col_name = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new AlterTableDropColStmt(table, col_name); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_tbl_stmt",97, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // alter_tbl_stmt ::= KW_ALTER KW_TABLE table_name KW_ADD if_not_exists_val partition_spec location_val cache_op_val 
            {
              AlterTableStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int if_not_existsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int if_not_existsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Boolean if_not_exists = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int partitionleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int partitionright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		PartitionSpec partition = (PartitionSpec)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int locationleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int locationright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		HdfsUri location = (HdfsUri)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int cache_opleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int cache_opright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		HdfsCachingOp cache_op = (HdfsCachingOp)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT = new AlterTableAddPartitionStmt(table, partition,
        location, if_not_exists, cache_op);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_tbl_stmt",97, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // alter_tbl_stmt ::= KW_ALTER KW_TABLE table_name replace_existing_cols_val KW_COLUMNS LPAREN column_def_list RPAREN 
            {
              AlterTableStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int replaceleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int replaceright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		Boolean replace = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int col_defsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int col_defsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<ColumnDesc> col_defs = (ArrayList<ColumnDesc>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = new AlterTableAddReplaceColsStmt(table, col_defs, replace); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_tbl_stmt",97, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // opt_kw_role ::= 
            {
              Boolean RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_kw_role",156, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // opt_kw_role ::= KW_ROLE 
            {
              Boolean RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_kw_role",156, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // opt_with_grantopt ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_with_grantopt",154, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // opt_with_grantopt ::= KW_WITH KW_GRANT option_ident 
            {
              Boolean RESULT =null;
		int optionleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int optionright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Boolean option = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = true; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_with_grantopt",154, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // opt_grantopt_for ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_grantopt_for",155, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // opt_grantopt_for ::= KW_GRANT option_ident KW_FOR 
            {
              Boolean RESULT =null;
		int optionleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int optionright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Boolean option = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = true; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_grantopt_for",155, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // privilege ::= KW_ALL 
            {
              TPrivilegeLevel RESULT =null;
		 RESULT = TPrivilegeLevel.ALL; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("privilege",153, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // privilege ::= KW_INSERT 
            {
              TPrivilegeLevel RESULT =null;
		 RESULT = TPrivilegeLevel.INSERT; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("privilege",153, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // privilege ::= KW_SELECT 
            {
              TPrivilegeLevel RESULT =null;
		 RESULT = TPrivilegeLevel.SELECT; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("privilege",153, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // privilege_spec ::= privilege KW_ON uri_ident STRING_LITERAL 
            {
              PrivilegeSpec RESULT =null;
		int privleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int privright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		TPrivilegeLevel priv = (TPrivilegeLevel)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int uri_kwleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int uri_kwright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Boolean uri_kw = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int urileft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int uriright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String uri = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = PrivilegeSpec.createUriScopedPriv(priv, new HdfsUri(uri)); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("privilege_spec",152, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // privilege_spec ::= privilege KW_ON KW_TABLE table_name 
            {
              PrivilegeSpec RESULT =null;
		int privleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int privright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		TPrivilegeLevel priv = (TPrivilegeLevel)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int tbl_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tbl_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableName tbl_name = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = PrivilegeSpec.createTableScopedPriv(priv, tbl_name); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("privilege_spec",152, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // privilege_spec ::= privilege KW_ON KW_DATABASE IDENT 
            {
              PrivilegeSpec RESULT =null;
		int privleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int privright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		TPrivilegeLevel priv = (TPrivilegeLevel)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int db_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int db_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String db_name = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = PrivilegeSpec.createDbScopedPriv(priv, db_name); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("privilege_spec",152, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // privilege_spec ::= privilege KW_ON server_ident 
            {
              PrivilegeSpec RESULT =null;
		int privleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int privright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		TPrivilegeLevel priv = (TPrivilegeLevel)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int server_kwleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int server_kwright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Boolean server_kw = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = PrivilegeSpec.createServerScopedPriv(priv); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("privilege_spec",152, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // revoke_privilege_stmt ::= KW_REVOKE opt_grantopt_for privilege_spec KW_FROM opt_kw_role IDENT 
            {
              GrantRevokePrivStmt RESULT =null;
		int grant_optleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int grant_optright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		Boolean grant_opt = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int privleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int privright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		PrivilegeSpec priv = (PrivilegeSpec)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int opt_roleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int opt_roleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Boolean opt_role = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int roleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int roleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String role = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new GrantRevokePrivStmt(role, priv, false, grant_opt); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("revoke_privilege_stmt",151, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // grant_privilege_stmt ::= KW_GRANT privilege_spec KW_TO opt_kw_role IDENT opt_with_grantopt 
            {
              GrantRevokePrivStmt RESULT =null;
		int privleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int privright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		PrivilegeSpec priv = (PrivilegeSpec)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int opt_roleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int opt_roleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Boolean opt_role = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int roleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int roleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String role = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int grant_optleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int grant_optright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Boolean grant_opt = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new GrantRevokePrivStmt(role, priv, true, grant_opt); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("grant_privilege_stmt",150, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // revoke_role_stmt ::= KW_REVOKE KW_ROLE IDENT KW_FROM KW_GROUP IDENT 
            {
              GrantRevokeRoleStmt RESULT =null;
		int roleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int roleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		String role = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int groupleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int groupright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String group = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new GrantRevokeRoleStmt(role, group, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("revoke_role_stmt",149, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // grant_role_stmt ::= KW_GRANT KW_ROLE IDENT KW_TO KW_GROUP IDENT 
            {
              GrantRevokeRoleStmt RESULT =null;
		int roleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int roleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		String role = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int groupleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int groupright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String group = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new GrantRevokeRoleStmt(role, group, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("grant_role_stmt",148, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // create_drop_role_stmt ::= KW_DROP KW_ROLE IDENT 
            {
              CreateDropRoleStmt RESULT =null;
		int roleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int roleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String role = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new CreateDropRoleStmt(role, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_drop_role_stmt",147, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // create_drop_role_stmt ::= KW_CREATE KW_ROLE IDENT 
            {
              CreateDropRoleStmt RESULT =null;
		int roleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int roleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String role = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new CreateDropRoleStmt(role, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_drop_role_stmt",147, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // show_grant_role_stmt ::= KW_SHOW KW_GRANT KW_ROLE IDENT KW_ON uri_ident STRING_LITERAL 
            {
              ShowGrantRoleStmt RESULT =null;
		int roleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int roleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		String role = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int uri_kwleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int uri_kwright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Boolean uri_kw = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int urileft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int uriright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String uri = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT = new ShowGrantRoleStmt(role,
        PrivilegeSpec.createUriScopedPriv(TPrivilegeLevel.ALL, new HdfsUri(uri)));
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_grant_role_stmt",146, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // show_grant_role_stmt ::= KW_SHOW KW_GRANT KW_ROLE IDENT KW_ON KW_TABLE table_name 
            {
              ShowGrantRoleStmt RESULT =null;
		int roleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int roleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		String role = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int tbl_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tbl_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableName tbl_name = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT = new ShowGrantRoleStmt(role,
        PrivilegeSpec.createTableScopedPriv(TPrivilegeLevel.ALL, tbl_name));
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_grant_role_stmt",146, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // show_grant_role_stmt ::= KW_SHOW KW_GRANT KW_ROLE IDENT KW_ON KW_DATABASE IDENT 
            {
              ShowGrantRoleStmt RESULT =null;
		int roleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int roleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		String role = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int db_nameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int db_nameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String db_name = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT = new ShowGrantRoleStmt(role,
        PrivilegeSpec.createDbScopedPriv(TPrivilegeLevel.ALL, db_name));
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_grant_role_stmt",146, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // show_grant_role_stmt ::= KW_SHOW KW_GRANT KW_ROLE IDENT KW_ON server_ident 
            {
              ShowGrantRoleStmt RESULT =null;
		int roleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int roleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String role = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int server_kwleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int server_kwright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Boolean server_kw = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
    RESULT = new ShowGrantRoleStmt(role,
        PrivilegeSpec.createServerScopedPriv(TPrivilegeLevel.ALL));
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_grant_role_stmt",146, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // show_grant_role_stmt ::= KW_SHOW KW_GRANT KW_ROLE IDENT 
            {
              ShowGrantRoleStmt RESULT =null;
		int roleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int roleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String role = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ShowGrantRoleStmt(role, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_grant_role_stmt",146, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // show_roles_stmt ::= KW_SHOW KW_CURRENT KW_ROLES 
            {
              ShowRolesStmt RESULT =null;
		 RESULT = new ShowRolesStmt(true, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_roles_stmt",145, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // show_roles_stmt ::= KW_SHOW KW_ROLE KW_GRANT KW_GROUP IDENT 
            {
              ShowRolesStmt RESULT =null;
		int groupleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int groupright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String group = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ShowRolesStmt(false, group); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_roles_stmt",145, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // show_roles_stmt ::= KW_SHOW KW_ROLES 
            {
              ShowRolesStmt RESULT =null;
		 RESULT = new ShowRolesStmt(false, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_roles_stmt",145, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // opt_kw_table ::= 
            {
              String RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_kw_table",143, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // opt_kw_table ::= KW_TABLE 
            {
              String RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_kw_table",143, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // opt_ident_list ::= 
            {
              ArrayList<String> RESULT =null;
		 RESULT = Lists.newArrayList(); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_ident_list",32, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // opt_ident_list ::= ident_list 
            {
              ArrayList<String> RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ArrayList<String> ident = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = ident; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_ident_list",32, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // opt_query_stmt ::= 
            {
              QueryStmt RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_query_stmt",4, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // opt_query_stmt ::= query_stmt 
            {
              QueryStmt RESULT =null;
		int queryleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int queryright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		QueryStmt query = (QueryStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = query; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_query_stmt",4, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // insert_stmt ::= opt_with_clause KW_INSERT KW_INTO opt_kw_table table_name partition_clause opt_plan_hints query_stmt 
            {
              InsertStmt RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).right;
		WithClause w = (WithClause)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		ArrayList<PartitionKeyValue> list = (ArrayList<PartitionKeyValue>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int hintsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int hintsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<String> hints = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int queryleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int queryright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		QueryStmt query = (QueryStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new InsertStmt(w, table, false, list, hints, query, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("insert_stmt",80, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // insert_stmt ::= opt_with_clause KW_INSERT KW_INTO opt_kw_table table_name LPAREN opt_ident_list RPAREN partition_clause opt_plan_hints opt_query_stmt 
            {
              InsertStmt RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).right;
		WithClause w = (WithClause)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).value;
		int col_permleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int col_permright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		ArrayList<String> col_perm = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		ArrayList<PartitionKeyValue> list = (ArrayList<PartitionKeyValue>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int hintsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int hintsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<String> hints = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int queryleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int queryright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		QueryStmt query = (QueryStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new InsertStmt(w, table, false, list, hints, query, col_perm); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("insert_stmt",80, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // insert_stmt ::= opt_with_clause KW_INSERT KW_OVERWRITE opt_kw_table table_name partition_clause opt_plan_hints query_stmt 
            {
              InsertStmt RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).right;
		WithClause w = (WithClause)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		ArrayList<PartitionKeyValue> list = (ArrayList<PartitionKeyValue>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int hintsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int hintsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<String> hints = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int queryleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int queryright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		QueryStmt query = (QueryStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new InsertStmt(w, table, true, list, hints, query, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("insert_stmt",80, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // insert_stmt ::= opt_with_clause KW_INSERT KW_OVERWRITE opt_kw_table table_name LPAREN opt_ident_list RPAREN partition_clause opt_plan_hints opt_query_stmt 
            {
              InsertStmt RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).right;
		WithClause w = (WithClause)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).value;
		int col_permleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int col_permright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		ArrayList<String> col_perm = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		ArrayList<PartitionKeyValue> list = (ArrayList<PartitionKeyValue>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int hintsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int hintsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<String> hints = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int queryleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int queryright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		QueryStmt query = (QueryStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new InsertStmt(w, table, true, list, hints, query, col_perm); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("insert_stmt",80, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // explain_stmt ::= KW_EXPLAIN create_tbl_as_select_stmt 
            {
              StatementBase RESULT =null;
		int ctas_stmtleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int ctas_stmtright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		CreateTableAsSelectStmt ctas_stmt = (CreateTableAsSelectStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
     ctas_stmt.setIsExplain();
     RESULT = ctas_stmt;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("explain_stmt",81, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // explain_stmt ::= KW_EXPLAIN insert_stmt 
            {
              StatementBase RESULT =null;
		int insertleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int insertright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		InsertStmt insert = (InsertStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
     insert.setIsExplain();
     RESULT = insert;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("explain_stmt",81, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // explain_stmt ::= KW_EXPLAIN query_stmt 
            {
              StatementBase RESULT =null;
		int queryleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int queryright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		QueryStmt query = (QueryStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
     query.setIsExplain();
     RESULT = query;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("explain_stmt",81, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // reset_metadata_stmt ::= KW_REFRESH table_name 
            {
              ResetMetadataStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ResetMetadataStmt(table, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("reset_metadata_stmt",19, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // reset_metadata_stmt ::= KW_INVALIDATE KW_METADATA table_name 
            {
              ResetMetadataStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ResetMetadataStmt(table, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("reset_metadata_stmt",19, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // reset_metadata_stmt ::= KW_INVALIDATE KW_METADATA 
            {
              ResetMetadataStmt RESULT =null;
		 RESULT = new ResetMetadataStmt(null, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("reset_metadata_stmt",19, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // overwrite_val ::= 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.FALSE; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("overwrite_val",144, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // overwrite_val ::= KW_OVERWRITE 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.TRUE; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("overwrite_val",144, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // load_stmt ::= KW_LOAD KW_DATA KW_INPATH STRING_LITERAL overwrite_val KW_INTO KW_TABLE table_name opt_partition_spec 
            {
              LoadDataStmt RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		String path = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int overwriteleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int overwriteright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		Boolean overwrite = (Boolean)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int partitionleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int partitionright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		PartitionSpec partition = (PartitionSpec)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new LoadDataStmt(table, new HdfsUri(path), overwrite, partition); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("load_stmt",18, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // stmt ::= revoke_privilege_stmt 
            {
              StatementBase RESULT =null;
		int revoke_privilegeleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int revoke_privilegeright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		GrantRevokePrivStmt revoke_privilege = (GrantRevokePrivStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = revoke_privilege; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // stmt ::= grant_privilege_stmt 
            {
              StatementBase RESULT =null;
		int grant_privilegeleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int grant_privilegeright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		GrantRevokePrivStmt grant_privilege = (GrantRevokePrivStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = grant_privilege; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // stmt ::= revoke_role_stmt 
            {
              StatementBase RESULT =null;
		int revoke_roleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int revoke_roleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		GrantRevokeRoleStmt revoke_role = (GrantRevokeRoleStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = revoke_role; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // stmt ::= grant_role_stmt 
            {
              StatementBase RESULT =null;
		int grant_roleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int grant_roleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		GrantRevokeRoleStmt grant_role = (GrantRevokeRoleStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = grant_role; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stmt ::= create_drop_role_stmt 
            {
              StatementBase RESULT =null;
		int create_drop_roleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int create_drop_roleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		CreateDropRoleStmt create_drop_role = (CreateDropRoleStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = create_drop_role; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stmt ::= show_grant_role_stmt 
            {
              StatementBase RESULT =null;
		int show_grant_roleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int show_grant_roleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ShowGrantRoleStmt show_grant_role = (ShowGrantRoleStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = show_grant_role; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmt ::= alter_index_stmt 
            {
              StatementBase RESULT =null;
		int alter_indexleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int alter_indexright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		AlterIndexStmt alter_index = (AlterIndexStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = alter_index; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= create_index_stmt 
            {
              StatementBase RESULT =null;
		int create_indexleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int create_indexright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		CreateIndexStmt create_index = (CreateIndexStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = create_index; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= drop_index_stmt 
            {
              StatementBase RESULT =null;
		int drop_indexleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int drop_indexright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		DropIndexStmt drop_index = (DropIndexStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = drop_index; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= desc_index_stmt 
            {
              StatementBase RESULT =null;
		int desc_indexleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int desc_indexright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		DescribeIndexStmt desc_index = (DescribeIndexStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = desc_index; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= show_indices_stmt 
            {
              StatementBase RESULT =null;
		int show_indicesleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int show_indicesright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ShowIndicesStmt show_indices = (ShowIndicesStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = show_indices; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= show_roles_stmt 
            {
              StatementBase RESULT =null;
		int show_rolesleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int show_rolesright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ShowRolesStmt show_roles = (ShowRolesStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = show_roles; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= set_stmt 
            {
              StatementBase RESULT =null;
		int setleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int setright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		SetStmt set = (SetStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = set; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= reset_metadata_stmt 
            {
              StatementBase RESULT =null;
		int reset_metadataleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int reset_metadataright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ResetMetadataStmt reset_metadata = (ResetMetadataStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = reset_metadata; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= load_stmt 
            {
              StatementBase RESULT =null;
		int loadleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int loadright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		LoadDataStmt load = (LoadDataStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = load; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= explain_stmt 
            {
              StatementBase RESULT =null;
		int explainleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int explainright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		StatementBase explain = (StatementBase)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = explain; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= drop_data_src_stmt 
            {
              StatementBase RESULT =null;
		int drop_data_srcleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int drop_data_srcright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		DropDataSrcStmt drop_data_src = (DropDataSrcStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = drop_data_src; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= drop_function_stmt 
            {
              StatementBase RESULT =null;
		int drop_functionleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int drop_functionright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		DropFunctionStmt drop_function = (DropFunctionStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = drop_function; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= drop_tbl_or_view_stmt 
            {
              StatementBase RESULT =null;
		int drop_tblleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int drop_tblright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		DropTableOrViewStmt drop_tbl = (DropTableOrViewStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = drop_tbl; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= drop_db_stmt 
            {
              StatementBase RESULT =null;
		int drop_dbleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int drop_dbright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		DropDbStmt drop_db = (DropDbStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = drop_db; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= create_uda_stmt 
            {
              StatementBase RESULT =null;
		int create_udaleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int create_udaright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		CreateUdaStmt create_uda = (CreateUdaStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = create_uda; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= create_udf_stmt 
            {
              StatementBase RESULT =null;
		int create_udfleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int create_udfright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		CreateUdfStmt create_udf = (CreateUdfStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = create_udf; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= create_db_stmt 
            {
              StatementBase RESULT =null;
		int create_dbleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int create_dbright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		CreateDbStmt create_db = (CreateDbStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = create_db; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= create_data_src_stmt 
            {
              StatementBase RESULT =null;
		int create_data_srcleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int create_data_srcright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		CreateDataSrcStmt create_data_src = (CreateDataSrcStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = create_data_src; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt ::= create_view_stmt 
            {
              StatementBase RESULT =null;
		int create_viewleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int create_viewright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		CreateViewStmt create_view = (CreateViewStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = create_view; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= create_partitioned_tbl_stmt 
            {
              StatementBase RESULT =null;
		int create_tblleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int create_tblright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		CreateTableStmt create_tbl = (CreateTableStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = create_tbl; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= create_unpartitioned_tbl_stmt 
            {
              StatementBase RESULT =null;
		int create_tblleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int create_tblright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		CreateTableStmt create_tbl = (CreateTableStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = create_tbl; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= create_tbl_like_file_stmt 
            {
              StatementBase RESULT =null;
		int create_tbl_like_fileleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int create_tbl_like_fileright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		CreateTableLikeFileStmt create_tbl_like_file = (CreateTableLikeFileStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = create_tbl_like_file; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= create_tbl_like_stmt 
            {
              StatementBase RESULT =null;
		int create_tbl_likeleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int create_tbl_likeright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		CreateTableLikeStmt create_tbl_like = (CreateTableLikeStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = create_tbl_like; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= create_tbl_as_select_stmt 
            {
              StatementBase RESULT =null;
		int create_tbl_as_selectleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int create_tbl_as_selectright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		CreateTableAsSelectStmt create_tbl_as_select = (CreateTableAsSelectStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = create_tbl_as_select; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= drop_stats_stmt 
            {
              StatementBase RESULT =null;
		int drop_statsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int drop_statsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		DropStatsStmt drop_stats = (DropStatsStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = drop_stats; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= compute_stats_stmt 
            {
              StatementBase RESULT =null;
		int compute_statsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int compute_statsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ComputeStatsStmt compute_stats = (ComputeStatsStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = compute_stats; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= alter_view_stmt 
            {
              StatementBase RESULT =null;
		int alter_viewleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int alter_viewright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		StatementBase alter_view = (StatementBase)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = alter_view; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= alter_tbl_stmt 
            {
              StatementBase RESULT =null;
		int alter_tblleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int alter_tblright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		AlterTableStmt alter_tbl = (AlterTableStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = alter_tbl; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= describe_stmt 
            {
              StatementBase RESULT =null;
		int describeleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int describeright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		DescribeStmt describe = (DescribeStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = describe; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= show_create_tbl_stmt 
            {
              StatementBase RESULT =null;
		int show_create_tblleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int show_create_tblright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ShowCreateTableStmt show_create_tbl = (ShowCreateTableStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = show_create_tbl; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= show_data_srcs_stmt 
            {
              StatementBase RESULT =null;
		int show_data_srcsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int show_data_srcsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ShowDataSrcsStmt show_data_srcs = (ShowDataSrcsStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = show_data_srcs; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= show_functions_stmt 
            {
              StatementBase RESULT =null;
		int show_functionsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int show_functionsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ShowFunctionsStmt show_functions = (ShowFunctionsStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = show_functions; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= show_stats_stmt 
            {
              StatementBase RESULT =null;
		int show_statsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int show_statsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ShowStatsStmt show_stats = (ShowStatsStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = show_stats; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= show_partitions_stmt 
            {
              StatementBase RESULT =null;
		int show_partitionsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int show_partitionsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ShowPartitionsStmt show_partitions = (ShowPartitionsStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = show_partitions; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= show_dbs_stmt 
            {
              StatementBase RESULT =null;
		int show_dbsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int show_dbsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ShowDbsStmt show_dbs = (ShowDbsStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = show_dbs; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= show_tables_stmt 
            {
              StatementBase RESULT =null;
		int show_tablesleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int show_tablesright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ShowTablesStmt show_tables = (ShowTablesStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = show_tables; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmt ::= use_stmt 
            {
              StatementBase RESULT =null;
		int useleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int useright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		UseStmt use = (UseStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = use; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmt ::= insert_stmt 
            {
              StatementBase RESULT =null;
		int insertleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int insertright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		InsertStmt insert = (InsertStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = insert; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // stmt ::= query_stmt 
            {
              StatementBase RESULT =null;
		int queryleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int queryright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		QueryStmt query = (QueryStmt)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = query; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= stmt EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		StatementBase start_val = (StatementBase)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		RESULT = start_val;
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SqlParser$parser.done_parsing();
          return CUP$SqlParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

