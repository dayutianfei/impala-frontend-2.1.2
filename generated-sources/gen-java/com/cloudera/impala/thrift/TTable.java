/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TTable implements org.apache.thrift.TBase<TTable, TTable._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTable");

  private static final org.apache.thrift.protocol.TField DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("db_name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TBL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tbl_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LOAD_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("load_status", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ACCESS_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("access_level", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("columns", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField CLUSTERING_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("clustering_columns", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField TABLE_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("table_stats", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField TABLE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("table_type", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField HDFS_TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("hdfs_table", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField HBASE_TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("hbase_table", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField METASTORE_TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("metastore_table", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField DATA_SOURCE_TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("data_source_table", org.apache.thrift.protocol.TType.STRUCT, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TTableStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TTableTupleSchemeFactory());
  }

  public String db_name; // required
  public String tbl_name; // required
  public com.cloudera.impala.thrift.TStatus load_status; // optional
  public int id; // optional
  /**
   * 
   * @see TAccessLevel
   */
  public TAccessLevel access_level; // optional
  public List<TColumn> columns; // optional
  public List<TColumn> clustering_columns; // optional
  public TTableStats table_stats; // optional
  /**
   * 
   * @see TTableType
   */
  public TTableType table_type; // optional
  public THdfsTable hdfs_table; // optional
  public THBaseTable hbase_table; // optional
  public org.apache.hadoop.hive.metastore.api.Table metastore_table; // optional
  public TDataSourceTable data_source_table; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DB_NAME((short)1, "db_name"),
    TBL_NAME((short)2, "tbl_name"),
    LOAD_STATUS((short)3, "load_status"),
    ID((short)4, "id"),
    /**
     * 
     * @see TAccessLevel
     */
    ACCESS_LEVEL((short)5, "access_level"),
    COLUMNS((short)6, "columns"),
    CLUSTERING_COLUMNS((short)7, "clustering_columns"),
    TABLE_STATS((short)8, "table_stats"),
    /**
     * 
     * @see TTableType
     */
    TABLE_TYPE((short)9, "table_type"),
    HDFS_TABLE((short)10, "hdfs_table"),
    HBASE_TABLE((short)11, "hbase_table"),
    METASTORE_TABLE((short)12, "metastore_table"),
    DATA_SOURCE_TABLE((short)13, "data_source_table");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DB_NAME
          return DB_NAME;
        case 2: // TBL_NAME
          return TBL_NAME;
        case 3: // LOAD_STATUS
          return LOAD_STATUS;
        case 4: // ID
          return ID;
        case 5: // ACCESS_LEVEL
          return ACCESS_LEVEL;
        case 6: // COLUMNS
          return COLUMNS;
        case 7: // CLUSTERING_COLUMNS
          return CLUSTERING_COLUMNS;
        case 8: // TABLE_STATS
          return TABLE_STATS;
        case 9: // TABLE_TYPE
          return TABLE_TYPE;
        case 10: // HDFS_TABLE
          return HDFS_TABLE;
        case 11: // HBASE_TABLE
          return HBASE_TABLE;
        case 12: // METASTORE_TABLE
          return METASTORE_TABLE;
        case 13: // DATA_SOURCE_TABLE
          return DATA_SOURCE_TABLE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.LOAD_STATUS,_Fields.ID,_Fields.ACCESS_LEVEL,_Fields.COLUMNS,_Fields.CLUSTERING_COLUMNS,_Fields.TABLE_STATS,_Fields.TABLE_TYPE,_Fields.HDFS_TABLE,_Fields.HBASE_TABLE,_Fields.METASTORE_TABLE,_Fields.DATA_SOURCE_TABLE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("db_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TBL_NAME, new org.apache.thrift.meta_data.FieldMetaData("tbl_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAD_STATUS, new org.apache.thrift.meta_data.FieldMetaData("load_status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TStatus.class)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TTableId")));
    tmpMap.put(_Fields.ACCESS_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("access_level", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TAccessLevel.class)));
    tmpMap.put(_Fields.COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("columns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TColumn.class))));
    tmpMap.put(_Fields.CLUSTERING_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("clustering_columns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TColumn.class))));
    tmpMap.put(_Fields.TABLE_STATS, new org.apache.thrift.meta_data.FieldMetaData("table_stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTableStats.class)));
    tmpMap.put(_Fields.TABLE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("table_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TTableType.class)));
    tmpMap.put(_Fields.HDFS_TABLE, new org.apache.thrift.meta_data.FieldMetaData("hdfs_table", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THdfsTable.class)));
    tmpMap.put(_Fields.HBASE_TABLE, new org.apache.thrift.meta_data.FieldMetaData("hbase_table", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THBaseTable.class)));
    tmpMap.put(_Fields.METASTORE_TABLE, new org.apache.thrift.meta_data.FieldMetaData("metastore_table", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.hadoop.hive.metastore.api.Table.class)));
    tmpMap.put(_Fields.DATA_SOURCE_TABLE, new org.apache.thrift.meta_data.FieldMetaData("data_source_table", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDataSourceTable.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTable.class, metaDataMap);
  }

  public TTable() {
  }

  public TTable(
    String db_name,
    String tbl_name)
  {
    this();
    this.db_name = db_name;
    this.tbl_name = tbl_name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTable(TTable other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDb_name()) {
      this.db_name = other.db_name;
    }
    if (other.isSetTbl_name()) {
      this.tbl_name = other.tbl_name;
    }
    if (other.isSetLoad_status()) {
      this.load_status = new com.cloudera.impala.thrift.TStatus(other.load_status);
    }
    this.id = other.id;
    if (other.isSetAccess_level()) {
      this.access_level = other.access_level;
    }
    if (other.isSetColumns()) {
      List<TColumn> __this__columns = new ArrayList<TColumn>();
      for (TColumn other_element : other.columns) {
        __this__columns.add(new TColumn(other_element));
      }
      this.columns = __this__columns;
    }
    if (other.isSetClustering_columns()) {
      List<TColumn> __this__clustering_columns = new ArrayList<TColumn>();
      for (TColumn other_element : other.clustering_columns) {
        __this__clustering_columns.add(new TColumn(other_element));
      }
      this.clustering_columns = __this__clustering_columns;
    }
    if (other.isSetTable_stats()) {
      this.table_stats = new TTableStats(other.table_stats);
    }
    if (other.isSetTable_type()) {
      this.table_type = other.table_type;
    }
    if (other.isSetHdfs_table()) {
      this.hdfs_table = new THdfsTable(other.hdfs_table);
    }
    if (other.isSetHbase_table()) {
      this.hbase_table = new THBaseTable(other.hbase_table);
    }
    if (other.isSetMetastore_table()) {
      this.metastore_table = new org.apache.hadoop.hive.metastore.api.Table(other.metastore_table);
    }
    if (other.isSetData_source_table()) {
      this.data_source_table = new TDataSourceTable(other.data_source_table);
    }
  }

  public TTable deepCopy() {
    return new TTable(this);
  }

  @Override
  public void clear() {
    this.db_name = null;
    this.tbl_name = null;
    this.load_status = null;
    setIdIsSet(false);
    this.id = 0;
    this.access_level = null;
    this.columns = null;
    this.clustering_columns = null;
    this.table_stats = null;
    this.table_type = null;
    this.hdfs_table = null;
    this.hbase_table = null;
    this.metastore_table = null;
    this.data_source_table = null;
  }

  public String getDb_name() {
    return this.db_name;
  }

  public TTable setDb_name(String db_name) {
    this.db_name = db_name;
    return this;
  }

  public void unsetDb_name() {
    this.db_name = null;
  }

  /** Returns true if field db_name is set (has been assigned a value) and false otherwise */
  public boolean isSetDb_name() {
    return this.db_name != null;
  }

  public void setDb_nameIsSet(boolean value) {
    if (!value) {
      this.db_name = null;
    }
  }

  public String getTbl_name() {
    return this.tbl_name;
  }

  public TTable setTbl_name(String tbl_name) {
    this.tbl_name = tbl_name;
    return this;
  }

  public void unsetTbl_name() {
    this.tbl_name = null;
  }

  /** Returns true if field tbl_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTbl_name() {
    return this.tbl_name != null;
  }

  public void setTbl_nameIsSet(boolean value) {
    if (!value) {
      this.tbl_name = null;
    }
  }

  public com.cloudera.impala.thrift.TStatus getLoad_status() {
    return this.load_status;
  }

  public TTable setLoad_status(com.cloudera.impala.thrift.TStatus load_status) {
    this.load_status = load_status;
    return this;
  }

  public void unsetLoad_status() {
    this.load_status = null;
  }

  /** Returns true if field load_status is set (has been assigned a value) and false otherwise */
  public boolean isSetLoad_status() {
    return this.load_status != null;
  }

  public void setLoad_statusIsSet(boolean value) {
    if (!value) {
      this.load_status = null;
    }
  }

  public int getId() {
    return this.id;
  }

  public TTable setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  /**
   * 
   * @see TAccessLevel
   */
  public TAccessLevel getAccess_level() {
    return this.access_level;
  }

  /**
   * 
   * @see TAccessLevel
   */
  public TTable setAccess_level(TAccessLevel access_level) {
    this.access_level = access_level;
    return this;
  }

  public void unsetAccess_level() {
    this.access_level = null;
  }

  /** Returns true if field access_level is set (has been assigned a value) and false otherwise */
  public boolean isSetAccess_level() {
    return this.access_level != null;
  }

  public void setAccess_levelIsSet(boolean value) {
    if (!value) {
      this.access_level = null;
    }
  }

  public int getColumnsSize() {
    return (this.columns == null) ? 0 : this.columns.size();
  }

  public java.util.Iterator<TColumn> getColumnsIterator() {
    return (this.columns == null) ? null : this.columns.iterator();
  }

  public void addToColumns(TColumn elem) {
    if (this.columns == null) {
      this.columns = new ArrayList<TColumn>();
    }
    this.columns.add(elem);
  }

  public List<TColumn> getColumns() {
    return this.columns;
  }

  public TTable setColumns(List<TColumn> columns) {
    this.columns = columns;
    return this;
  }

  public void unsetColumns() {
    this.columns = null;
  }

  /** Returns true if field columns is set (has been assigned a value) and false otherwise */
  public boolean isSetColumns() {
    return this.columns != null;
  }

  public void setColumnsIsSet(boolean value) {
    if (!value) {
      this.columns = null;
    }
  }

  public int getClustering_columnsSize() {
    return (this.clustering_columns == null) ? 0 : this.clustering_columns.size();
  }

  public java.util.Iterator<TColumn> getClustering_columnsIterator() {
    return (this.clustering_columns == null) ? null : this.clustering_columns.iterator();
  }

  public void addToClustering_columns(TColumn elem) {
    if (this.clustering_columns == null) {
      this.clustering_columns = new ArrayList<TColumn>();
    }
    this.clustering_columns.add(elem);
  }

  public List<TColumn> getClustering_columns() {
    return this.clustering_columns;
  }

  public TTable setClustering_columns(List<TColumn> clustering_columns) {
    this.clustering_columns = clustering_columns;
    return this;
  }

  public void unsetClustering_columns() {
    this.clustering_columns = null;
  }

  /** Returns true if field clustering_columns is set (has been assigned a value) and false otherwise */
  public boolean isSetClustering_columns() {
    return this.clustering_columns != null;
  }

  public void setClustering_columnsIsSet(boolean value) {
    if (!value) {
      this.clustering_columns = null;
    }
  }

  public TTableStats getTable_stats() {
    return this.table_stats;
  }

  public TTable setTable_stats(TTableStats table_stats) {
    this.table_stats = table_stats;
    return this;
  }

  public void unsetTable_stats() {
    this.table_stats = null;
  }

  /** Returns true if field table_stats is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_stats() {
    return this.table_stats != null;
  }

  public void setTable_statsIsSet(boolean value) {
    if (!value) {
      this.table_stats = null;
    }
  }

  /**
   * 
   * @see TTableType
   */
  public TTableType getTable_type() {
    return this.table_type;
  }

  /**
   * 
   * @see TTableType
   */
  public TTable setTable_type(TTableType table_type) {
    this.table_type = table_type;
    return this;
  }

  public void unsetTable_type() {
    this.table_type = null;
  }

  /** Returns true if field table_type is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_type() {
    return this.table_type != null;
  }

  public void setTable_typeIsSet(boolean value) {
    if (!value) {
      this.table_type = null;
    }
  }

  public THdfsTable getHdfs_table() {
    return this.hdfs_table;
  }

  public TTable setHdfs_table(THdfsTable hdfs_table) {
    this.hdfs_table = hdfs_table;
    return this;
  }

  public void unsetHdfs_table() {
    this.hdfs_table = null;
  }

  /** Returns true if field hdfs_table is set (has been assigned a value) and false otherwise */
  public boolean isSetHdfs_table() {
    return this.hdfs_table != null;
  }

  public void setHdfs_tableIsSet(boolean value) {
    if (!value) {
      this.hdfs_table = null;
    }
  }

  public THBaseTable getHbase_table() {
    return this.hbase_table;
  }

  public TTable setHbase_table(THBaseTable hbase_table) {
    this.hbase_table = hbase_table;
    return this;
  }

  public void unsetHbase_table() {
    this.hbase_table = null;
  }

  /** Returns true if field hbase_table is set (has been assigned a value) and false otherwise */
  public boolean isSetHbase_table() {
    return this.hbase_table != null;
  }

  public void setHbase_tableIsSet(boolean value) {
    if (!value) {
      this.hbase_table = null;
    }
  }

  public org.apache.hadoop.hive.metastore.api.Table getMetastore_table() {
    return this.metastore_table;
  }

  public TTable setMetastore_table(org.apache.hadoop.hive.metastore.api.Table metastore_table) {
    this.metastore_table = metastore_table;
    return this;
  }

  public void unsetMetastore_table() {
    this.metastore_table = null;
  }

  /** Returns true if field metastore_table is set (has been assigned a value) and false otherwise */
  public boolean isSetMetastore_table() {
    return this.metastore_table != null;
  }

  public void setMetastore_tableIsSet(boolean value) {
    if (!value) {
      this.metastore_table = null;
    }
  }

  public TDataSourceTable getData_source_table() {
    return this.data_source_table;
  }

  public TTable setData_source_table(TDataSourceTable data_source_table) {
    this.data_source_table = data_source_table;
    return this;
  }

  public void unsetData_source_table() {
    this.data_source_table = null;
  }

  /** Returns true if field data_source_table is set (has been assigned a value) and false otherwise */
  public boolean isSetData_source_table() {
    return this.data_source_table != null;
  }

  public void setData_source_tableIsSet(boolean value) {
    if (!value) {
      this.data_source_table = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DB_NAME:
      if (value == null) {
        unsetDb_name();
      } else {
        setDb_name((String)value);
      }
      break;

    case TBL_NAME:
      if (value == null) {
        unsetTbl_name();
      } else {
        setTbl_name((String)value);
      }
      break;

    case LOAD_STATUS:
      if (value == null) {
        unsetLoad_status();
      } else {
        setLoad_status((com.cloudera.impala.thrift.TStatus)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case ACCESS_LEVEL:
      if (value == null) {
        unsetAccess_level();
      } else {
        setAccess_level((TAccessLevel)value);
      }
      break;

    case COLUMNS:
      if (value == null) {
        unsetColumns();
      } else {
        setColumns((List<TColumn>)value);
      }
      break;

    case CLUSTERING_COLUMNS:
      if (value == null) {
        unsetClustering_columns();
      } else {
        setClustering_columns((List<TColumn>)value);
      }
      break;

    case TABLE_STATS:
      if (value == null) {
        unsetTable_stats();
      } else {
        setTable_stats((TTableStats)value);
      }
      break;

    case TABLE_TYPE:
      if (value == null) {
        unsetTable_type();
      } else {
        setTable_type((TTableType)value);
      }
      break;

    case HDFS_TABLE:
      if (value == null) {
        unsetHdfs_table();
      } else {
        setHdfs_table((THdfsTable)value);
      }
      break;

    case HBASE_TABLE:
      if (value == null) {
        unsetHbase_table();
      } else {
        setHbase_table((THBaseTable)value);
      }
      break;

    case METASTORE_TABLE:
      if (value == null) {
        unsetMetastore_table();
      } else {
        setMetastore_table((org.apache.hadoop.hive.metastore.api.Table)value);
      }
      break;

    case DATA_SOURCE_TABLE:
      if (value == null) {
        unsetData_source_table();
      } else {
        setData_source_table((TDataSourceTable)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DB_NAME:
      return getDb_name();

    case TBL_NAME:
      return getTbl_name();

    case LOAD_STATUS:
      return getLoad_status();

    case ID:
      return Integer.valueOf(getId());

    case ACCESS_LEVEL:
      return getAccess_level();

    case COLUMNS:
      return getColumns();

    case CLUSTERING_COLUMNS:
      return getClustering_columns();

    case TABLE_STATS:
      return getTable_stats();

    case TABLE_TYPE:
      return getTable_type();

    case HDFS_TABLE:
      return getHdfs_table();

    case HBASE_TABLE:
      return getHbase_table();

    case METASTORE_TABLE:
      return getMetastore_table();

    case DATA_SOURCE_TABLE:
      return getData_source_table();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DB_NAME:
      return isSetDb_name();
    case TBL_NAME:
      return isSetTbl_name();
    case LOAD_STATUS:
      return isSetLoad_status();
    case ID:
      return isSetId();
    case ACCESS_LEVEL:
      return isSetAccess_level();
    case COLUMNS:
      return isSetColumns();
    case CLUSTERING_COLUMNS:
      return isSetClustering_columns();
    case TABLE_STATS:
      return isSetTable_stats();
    case TABLE_TYPE:
      return isSetTable_type();
    case HDFS_TABLE:
      return isSetHdfs_table();
    case HBASE_TABLE:
      return isSetHbase_table();
    case METASTORE_TABLE:
      return isSetMetastore_table();
    case DATA_SOURCE_TABLE:
      return isSetData_source_table();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TTable)
      return this.equals((TTable)that);
    return false;
  }

  public boolean equals(TTable that) {
    if (that == null)
      return false;

    boolean this_present_db_name = true && this.isSetDb_name();
    boolean that_present_db_name = true && that.isSetDb_name();
    if (this_present_db_name || that_present_db_name) {
      if (!(this_present_db_name && that_present_db_name))
        return false;
      if (!this.db_name.equals(that.db_name))
        return false;
    }

    boolean this_present_tbl_name = true && this.isSetTbl_name();
    boolean that_present_tbl_name = true && that.isSetTbl_name();
    if (this_present_tbl_name || that_present_tbl_name) {
      if (!(this_present_tbl_name && that_present_tbl_name))
        return false;
      if (!this.tbl_name.equals(that.tbl_name))
        return false;
    }

    boolean this_present_load_status = true && this.isSetLoad_status();
    boolean that_present_load_status = true && that.isSetLoad_status();
    if (this_present_load_status || that_present_load_status) {
      if (!(this_present_load_status && that_present_load_status))
        return false;
      if (!this.load_status.equals(that.load_status))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_access_level = true && this.isSetAccess_level();
    boolean that_present_access_level = true && that.isSetAccess_level();
    if (this_present_access_level || that_present_access_level) {
      if (!(this_present_access_level && that_present_access_level))
        return false;
      if (!this.access_level.equals(that.access_level))
        return false;
    }

    boolean this_present_columns = true && this.isSetColumns();
    boolean that_present_columns = true && that.isSetColumns();
    if (this_present_columns || that_present_columns) {
      if (!(this_present_columns && that_present_columns))
        return false;
      if (!this.columns.equals(that.columns))
        return false;
    }

    boolean this_present_clustering_columns = true && this.isSetClustering_columns();
    boolean that_present_clustering_columns = true && that.isSetClustering_columns();
    if (this_present_clustering_columns || that_present_clustering_columns) {
      if (!(this_present_clustering_columns && that_present_clustering_columns))
        return false;
      if (!this.clustering_columns.equals(that.clustering_columns))
        return false;
    }

    boolean this_present_table_stats = true && this.isSetTable_stats();
    boolean that_present_table_stats = true && that.isSetTable_stats();
    if (this_present_table_stats || that_present_table_stats) {
      if (!(this_present_table_stats && that_present_table_stats))
        return false;
      if (!this.table_stats.equals(that.table_stats))
        return false;
    }

    boolean this_present_table_type = true && this.isSetTable_type();
    boolean that_present_table_type = true && that.isSetTable_type();
    if (this_present_table_type || that_present_table_type) {
      if (!(this_present_table_type && that_present_table_type))
        return false;
      if (!this.table_type.equals(that.table_type))
        return false;
    }

    boolean this_present_hdfs_table = true && this.isSetHdfs_table();
    boolean that_present_hdfs_table = true && that.isSetHdfs_table();
    if (this_present_hdfs_table || that_present_hdfs_table) {
      if (!(this_present_hdfs_table && that_present_hdfs_table))
        return false;
      if (!this.hdfs_table.equals(that.hdfs_table))
        return false;
    }

    boolean this_present_hbase_table = true && this.isSetHbase_table();
    boolean that_present_hbase_table = true && that.isSetHbase_table();
    if (this_present_hbase_table || that_present_hbase_table) {
      if (!(this_present_hbase_table && that_present_hbase_table))
        return false;
      if (!this.hbase_table.equals(that.hbase_table))
        return false;
    }

    boolean this_present_metastore_table = true && this.isSetMetastore_table();
    boolean that_present_metastore_table = true && that.isSetMetastore_table();
    if (this_present_metastore_table || that_present_metastore_table) {
      if (!(this_present_metastore_table && that_present_metastore_table))
        return false;
      if (!this.metastore_table.equals(that.metastore_table))
        return false;
    }

    boolean this_present_data_source_table = true && this.isSetData_source_table();
    boolean that_present_data_source_table = true && that.isSetData_source_table();
    if (this_present_data_source_table || that_present_data_source_table) {
      if (!(this_present_data_source_table && that_present_data_source_table))
        return false;
      if (!this.data_source_table.equals(that.data_source_table))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_db_name = true && (isSetDb_name());
    builder.append(present_db_name);
    if (present_db_name)
      builder.append(db_name);

    boolean present_tbl_name = true && (isSetTbl_name());
    builder.append(present_tbl_name);
    if (present_tbl_name)
      builder.append(tbl_name);

    boolean present_load_status = true && (isSetLoad_status());
    builder.append(present_load_status);
    if (present_load_status)
      builder.append(load_status);

    boolean present_id = true && (isSetId());
    builder.append(present_id);
    if (present_id)
      builder.append(id);

    boolean present_access_level = true && (isSetAccess_level());
    builder.append(present_access_level);
    if (present_access_level)
      builder.append(access_level.getValue());

    boolean present_columns = true && (isSetColumns());
    builder.append(present_columns);
    if (present_columns)
      builder.append(columns);

    boolean present_clustering_columns = true && (isSetClustering_columns());
    builder.append(present_clustering_columns);
    if (present_clustering_columns)
      builder.append(clustering_columns);

    boolean present_table_stats = true && (isSetTable_stats());
    builder.append(present_table_stats);
    if (present_table_stats)
      builder.append(table_stats);

    boolean present_table_type = true && (isSetTable_type());
    builder.append(present_table_type);
    if (present_table_type)
      builder.append(table_type.getValue());

    boolean present_hdfs_table = true && (isSetHdfs_table());
    builder.append(present_hdfs_table);
    if (present_hdfs_table)
      builder.append(hdfs_table);

    boolean present_hbase_table = true && (isSetHbase_table());
    builder.append(present_hbase_table);
    if (present_hbase_table)
      builder.append(hbase_table);

    boolean present_metastore_table = true && (isSetMetastore_table());
    builder.append(present_metastore_table);
    if (present_metastore_table)
      builder.append(metastore_table);

    boolean present_data_source_table = true && (isSetData_source_table());
    builder.append(present_data_source_table);
    if (present_data_source_table)
      builder.append(data_source_table);

    return builder.toHashCode();
  }

  public int compareTo(TTable other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TTable typedOther = (TTable)other;

    lastComparison = Boolean.valueOf(isSetDb_name()).compareTo(typedOther.isSetDb_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db_name, typedOther.db_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTbl_name()).compareTo(typedOther.isSetTbl_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTbl_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tbl_name, typedOther.tbl_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoad_status()).compareTo(typedOther.isSetLoad_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoad_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.load_status, typedOther.load_status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccess_level()).compareTo(typedOther.isSetAccess_level());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccess_level()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_level, typedOther.access_level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumns()).compareTo(typedOther.isSetColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, typedOther.columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClustering_columns()).compareTo(typedOther.isSetClustering_columns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClustering_columns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clustering_columns, typedOther.clustering_columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTable_stats()).compareTo(typedOther.isSetTable_stats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_stats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_stats, typedOther.table_stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTable_type()).compareTo(typedOther.isSetTable_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_type, typedOther.table_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHdfs_table()).compareTo(typedOther.isSetHdfs_table());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHdfs_table()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hdfs_table, typedOther.hdfs_table);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHbase_table()).compareTo(typedOther.isSetHbase_table());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHbase_table()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hbase_table, typedOther.hbase_table);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetastore_table()).compareTo(typedOther.isSetMetastore_table());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetastore_table()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metastore_table, typedOther.metastore_table);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetData_source_table()).compareTo(typedOther.isSetData_source_table());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData_source_table()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data_source_table, typedOther.data_source_table);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TTable(");
    boolean first = true;

    sb.append("db_name:");
    if (this.db_name == null) {
      sb.append("null");
    } else {
      sb.append(this.db_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tbl_name:");
    if (this.tbl_name == null) {
      sb.append("null");
    } else {
      sb.append(this.tbl_name);
    }
    first = false;
    if (isSetLoad_status()) {
      if (!first) sb.append(", ");
      sb.append("load_status:");
      if (this.load_status == null) {
        sb.append("null");
      } else {
        sb.append(this.load_status);
      }
      first = false;
    }
    if (isSetId()) {
      if (!first) sb.append(", ");
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetAccess_level()) {
      if (!first) sb.append(", ");
      sb.append("access_level:");
      if (this.access_level == null) {
        sb.append("null");
      } else {
        sb.append(this.access_level);
      }
      first = false;
    }
    if (isSetColumns()) {
      if (!first) sb.append(", ");
      sb.append("columns:");
      if (this.columns == null) {
        sb.append("null");
      } else {
        sb.append(this.columns);
      }
      first = false;
    }
    if (isSetClustering_columns()) {
      if (!first) sb.append(", ");
      sb.append("clustering_columns:");
      if (this.clustering_columns == null) {
        sb.append("null");
      } else {
        sb.append(this.clustering_columns);
      }
      first = false;
    }
    if (isSetTable_stats()) {
      if (!first) sb.append(", ");
      sb.append("table_stats:");
      if (this.table_stats == null) {
        sb.append("null");
      } else {
        sb.append(this.table_stats);
      }
      first = false;
    }
    if (isSetTable_type()) {
      if (!first) sb.append(", ");
      sb.append("table_type:");
      if (this.table_type == null) {
        sb.append("null");
      } else {
        sb.append(this.table_type);
      }
      first = false;
    }
    if (isSetHdfs_table()) {
      if (!first) sb.append(", ");
      sb.append("hdfs_table:");
      if (this.hdfs_table == null) {
        sb.append("null");
      } else {
        sb.append(this.hdfs_table);
      }
      first = false;
    }
    if (isSetHbase_table()) {
      if (!first) sb.append(", ");
      sb.append("hbase_table:");
      if (this.hbase_table == null) {
        sb.append("null");
      } else {
        sb.append(this.hbase_table);
      }
      first = false;
    }
    if (isSetMetastore_table()) {
      if (!first) sb.append(", ");
      sb.append("metastore_table:");
      if (this.metastore_table == null) {
        sb.append("null");
      } else {
        sb.append(this.metastore_table);
      }
      first = false;
    }
    if (isSetData_source_table()) {
      if (!first) sb.append(", ");
      sb.append("data_source_table:");
      if (this.data_source_table == null) {
        sb.append("null");
      } else {
        sb.append(this.data_source_table);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (db_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'db_name' was not present! Struct: " + toString());
    }
    if (tbl_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tbl_name' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (load_status != null) {
      load_status.validate();
    }
    if (table_stats != null) {
      table_stats.validate();
    }
    if (hdfs_table != null) {
      hdfs_table.validate();
    }
    if (hbase_table != null) {
      hbase_table.validate();
    }
    if (metastore_table != null) {
      metastore_table.validate();
    }
    if (data_source_table != null) {
      data_source_table.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTableStandardSchemeFactory implements SchemeFactory {
    public TTableStandardScheme getScheme() {
      return new TTableStandardScheme();
    }
  }

  private static class TTableStandardScheme extends StandardScheme<TTable> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TTable struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.db_name = iprot.readString();
              struct.setDb_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TBL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tbl_name = iprot.readString();
              struct.setTbl_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOAD_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.load_status = new com.cloudera.impala.thrift.TStatus();
              struct.load_status.read(iprot);
              struct.setLoad_statusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ACCESS_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.access_level = TAccessLevel.findByValue(iprot.readI32());
              struct.setAccess_levelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list118 = iprot.readListBegin();
                struct.columns = new ArrayList<TColumn>(_list118.size);
                for (int _i119 = 0; _i119 < _list118.size; ++_i119)
                {
                  TColumn _elem120; // required
                  _elem120 = new TColumn();
                  _elem120.read(iprot);
                  struct.columns.add(_elem120);
                }
                iprot.readListEnd();
              }
              struct.setColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CLUSTERING_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list121 = iprot.readListBegin();
                struct.clustering_columns = new ArrayList<TColumn>(_list121.size);
                for (int _i122 = 0; _i122 < _list121.size; ++_i122)
                {
                  TColumn _elem123; // required
                  _elem123 = new TColumn();
                  _elem123.read(iprot);
                  struct.clustering_columns.add(_elem123);
                }
                iprot.readListEnd();
              }
              struct.setClustering_columnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TABLE_STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.table_stats = new TTableStats();
              struct.table_stats.read(iprot);
              struct.setTable_statsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TABLE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.table_type = TTableType.findByValue(iprot.readI32());
              struct.setTable_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // HDFS_TABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.hdfs_table = new THdfsTable();
              struct.hdfs_table.read(iprot);
              struct.setHdfs_tableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // HBASE_TABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.hbase_table = new THBaseTable();
              struct.hbase_table.read(iprot);
              struct.setHbase_tableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // METASTORE_TABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.metastore_table = new org.apache.hadoop.hive.metastore.api.Table();
              struct.metastore_table.read(iprot);
              struct.setMetastore_tableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DATA_SOURCE_TABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.data_source_table = new TDataSourceTable();
              struct.data_source_table.read(iprot);
              struct.setData_source_tableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TTable struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.db_name != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(struct.db_name);
        oprot.writeFieldEnd();
      }
      if (struct.tbl_name != null) {
        oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);
        oprot.writeString(struct.tbl_name);
        oprot.writeFieldEnd();
      }
      if (struct.load_status != null) {
        if (struct.isSetLoad_status()) {
          oprot.writeFieldBegin(LOAD_STATUS_FIELD_DESC);
          struct.load_status.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.access_level != null) {
        if (struct.isSetAccess_level()) {
          oprot.writeFieldBegin(ACCESS_LEVEL_FIELD_DESC);
          oprot.writeI32(struct.access_level.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.columns != null) {
        if (struct.isSetColumns()) {
          oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.columns.size()));
            for (TColumn _iter124 : struct.columns)
            {
              _iter124.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.clustering_columns != null) {
        if (struct.isSetClustering_columns()) {
          oprot.writeFieldBegin(CLUSTERING_COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.clustering_columns.size()));
            for (TColumn _iter125 : struct.clustering_columns)
            {
              _iter125.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.table_stats != null) {
        if (struct.isSetTable_stats()) {
          oprot.writeFieldBegin(TABLE_STATS_FIELD_DESC);
          struct.table_stats.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.table_type != null) {
        if (struct.isSetTable_type()) {
          oprot.writeFieldBegin(TABLE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.table_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.hdfs_table != null) {
        if (struct.isSetHdfs_table()) {
          oprot.writeFieldBegin(HDFS_TABLE_FIELD_DESC);
          struct.hdfs_table.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.hbase_table != null) {
        if (struct.isSetHbase_table()) {
          oprot.writeFieldBegin(HBASE_TABLE_FIELD_DESC);
          struct.hbase_table.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.metastore_table != null) {
        if (struct.isSetMetastore_table()) {
          oprot.writeFieldBegin(METASTORE_TABLE_FIELD_DESC);
          struct.metastore_table.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.data_source_table != null) {
        if (struct.isSetData_source_table()) {
          oprot.writeFieldBegin(DATA_SOURCE_TABLE_FIELD_DESC);
          struct.data_source_table.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTableTupleSchemeFactory implements SchemeFactory {
    public TTableTupleScheme getScheme() {
      return new TTableTupleScheme();
    }
  }

  private static class TTableTupleScheme extends TupleScheme<TTable> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTable struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.db_name);
      oprot.writeString(struct.tbl_name);
      BitSet optionals = new BitSet();
      if (struct.isSetLoad_status()) {
        optionals.set(0);
      }
      if (struct.isSetId()) {
        optionals.set(1);
      }
      if (struct.isSetAccess_level()) {
        optionals.set(2);
      }
      if (struct.isSetColumns()) {
        optionals.set(3);
      }
      if (struct.isSetClustering_columns()) {
        optionals.set(4);
      }
      if (struct.isSetTable_stats()) {
        optionals.set(5);
      }
      if (struct.isSetTable_type()) {
        optionals.set(6);
      }
      if (struct.isSetHdfs_table()) {
        optionals.set(7);
      }
      if (struct.isSetHbase_table()) {
        optionals.set(8);
      }
      if (struct.isSetMetastore_table()) {
        optionals.set(9);
      }
      if (struct.isSetData_source_table()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetLoad_status()) {
        struct.load_status.write(oprot);
      }
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetAccess_level()) {
        oprot.writeI32(struct.access_level.getValue());
      }
      if (struct.isSetColumns()) {
        {
          oprot.writeI32(struct.columns.size());
          for (TColumn _iter126 : struct.columns)
          {
            _iter126.write(oprot);
          }
        }
      }
      if (struct.isSetClustering_columns()) {
        {
          oprot.writeI32(struct.clustering_columns.size());
          for (TColumn _iter127 : struct.clustering_columns)
          {
            _iter127.write(oprot);
          }
        }
      }
      if (struct.isSetTable_stats()) {
        struct.table_stats.write(oprot);
      }
      if (struct.isSetTable_type()) {
        oprot.writeI32(struct.table_type.getValue());
      }
      if (struct.isSetHdfs_table()) {
        struct.hdfs_table.write(oprot);
      }
      if (struct.isSetHbase_table()) {
        struct.hbase_table.write(oprot);
      }
      if (struct.isSetMetastore_table()) {
        struct.metastore_table.write(oprot);
      }
      if (struct.isSetData_source_table()) {
        struct.data_source_table.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTable struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.db_name = iprot.readString();
      struct.setDb_nameIsSet(true);
      struct.tbl_name = iprot.readString();
      struct.setTbl_nameIsSet(true);
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.load_status = new com.cloudera.impala.thrift.TStatus();
        struct.load_status.read(iprot);
        struct.setLoad_statusIsSet(true);
      }
      if (incoming.get(1)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.access_level = TAccessLevel.findByValue(iprot.readI32());
        struct.setAccess_levelIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list128 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.columns = new ArrayList<TColumn>(_list128.size);
          for (int _i129 = 0; _i129 < _list128.size; ++_i129)
          {
            TColumn _elem130; // required
            _elem130 = new TColumn();
            _elem130.read(iprot);
            struct.columns.add(_elem130);
          }
        }
        struct.setColumnsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list131 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.clustering_columns = new ArrayList<TColumn>(_list131.size);
          for (int _i132 = 0; _i132 < _list131.size; ++_i132)
          {
            TColumn _elem133; // required
            _elem133 = new TColumn();
            _elem133.read(iprot);
            struct.clustering_columns.add(_elem133);
          }
        }
        struct.setClustering_columnsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.table_stats = new TTableStats();
        struct.table_stats.read(iprot);
        struct.setTable_statsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.table_type = TTableType.findByValue(iprot.readI32());
        struct.setTable_typeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.hdfs_table = new THdfsTable();
        struct.hdfs_table.read(iprot);
        struct.setHdfs_tableIsSet(true);
      }
      if (incoming.get(8)) {
        struct.hbase_table = new THBaseTable();
        struct.hbase_table.read(iprot);
        struct.setHbase_tableIsSet(true);
      }
      if (incoming.get(9)) {
        struct.metastore_table = new org.apache.hadoop.hive.metastore.api.Table();
        struct.metastore_table.read(iprot);
        struct.setMetastore_tableIsSet(true);
      }
      if (incoming.get(10)) {
        struct.data_source_table = new TDataSourceTable();
        struct.data_source_table.read(iprot);
        struct.setData_source_tableIsSet(true);
      }
    }
  }

}

