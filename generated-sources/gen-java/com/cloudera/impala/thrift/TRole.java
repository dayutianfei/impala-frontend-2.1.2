/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TRole implements org.apache.thrift.TBase<TRole, TRole._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TRole");

  private static final org.apache.thrift.protocol.TField ROLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("role_name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ROLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("role_id", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField GRANT_GROUPS_FIELD_DESC = new org.apache.thrift.protocol.TField("grant_groups", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TRoleStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TRoleTupleSchemeFactory());
  }

  public String role_name; // required
  public int role_id; // required
  public List<String> grant_groups; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ROLE_NAME((short)1, "role_name"),
    ROLE_ID((short)2, "role_id"),
    GRANT_GROUPS((short)3, "grant_groups");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ROLE_NAME
          return ROLE_NAME;
        case 2: // ROLE_ID
          return ROLE_ID;
        case 3: // GRANT_GROUPS
          return GRANT_GROUPS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ROLE_ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ROLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("role_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROLE_ID, new org.apache.thrift.meta_data.FieldMetaData("role_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GRANT_GROUPS, new org.apache.thrift.meta_data.FieldMetaData("grant_groups", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TRole.class, metaDataMap);
  }

  public TRole() {
  }

  public TRole(
    String role_name,
    int role_id,
    List<String> grant_groups)
  {
    this();
    this.role_name = role_name;
    this.role_id = role_id;
    setRole_idIsSet(true);
    this.grant_groups = grant_groups;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TRole(TRole other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRole_name()) {
      this.role_name = other.role_name;
    }
    this.role_id = other.role_id;
    if (other.isSetGrant_groups()) {
      List<String> __this__grant_groups = new ArrayList<String>();
      for (String other_element : other.grant_groups) {
        __this__grant_groups.add(other_element);
      }
      this.grant_groups = __this__grant_groups;
    }
  }

  public TRole deepCopy() {
    return new TRole(this);
  }

  @Override
  public void clear() {
    this.role_name = null;
    setRole_idIsSet(false);
    this.role_id = 0;
    this.grant_groups = null;
  }

  public String getRole_name() {
    return this.role_name;
  }

  public TRole setRole_name(String role_name) {
    this.role_name = role_name;
    return this;
  }

  public void unsetRole_name() {
    this.role_name = null;
  }

  /** Returns true if field role_name is set (has been assigned a value) and false otherwise */
  public boolean isSetRole_name() {
    return this.role_name != null;
  }

  public void setRole_nameIsSet(boolean value) {
    if (!value) {
      this.role_name = null;
    }
  }

  public int getRole_id() {
    return this.role_id;
  }

  public TRole setRole_id(int role_id) {
    this.role_id = role_id;
    setRole_idIsSet(true);
    return this;
  }

  public void unsetRole_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROLE_ID_ISSET_ID);
  }

  /** Returns true if field role_id is set (has been assigned a value) and false otherwise */
  public boolean isSetRole_id() {
    return EncodingUtils.testBit(__isset_bitfield, __ROLE_ID_ISSET_ID);
  }

  public void setRole_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROLE_ID_ISSET_ID, value);
  }

  public int getGrant_groupsSize() {
    return (this.grant_groups == null) ? 0 : this.grant_groups.size();
  }

  public java.util.Iterator<String> getGrant_groupsIterator() {
    return (this.grant_groups == null) ? null : this.grant_groups.iterator();
  }

  public void addToGrant_groups(String elem) {
    if (this.grant_groups == null) {
      this.grant_groups = new ArrayList<String>();
    }
    this.grant_groups.add(elem);
  }

  public List<String> getGrant_groups() {
    return this.grant_groups;
  }

  public TRole setGrant_groups(List<String> grant_groups) {
    this.grant_groups = grant_groups;
    return this;
  }

  public void unsetGrant_groups() {
    this.grant_groups = null;
  }

  /** Returns true if field grant_groups is set (has been assigned a value) and false otherwise */
  public boolean isSetGrant_groups() {
    return this.grant_groups != null;
  }

  public void setGrant_groupsIsSet(boolean value) {
    if (!value) {
      this.grant_groups = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ROLE_NAME:
      if (value == null) {
        unsetRole_name();
      } else {
        setRole_name((String)value);
      }
      break;

    case ROLE_ID:
      if (value == null) {
        unsetRole_id();
      } else {
        setRole_id((Integer)value);
      }
      break;

    case GRANT_GROUPS:
      if (value == null) {
        unsetGrant_groups();
      } else {
        setGrant_groups((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ROLE_NAME:
      return getRole_name();

    case ROLE_ID:
      return Integer.valueOf(getRole_id());

    case GRANT_GROUPS:
      return getGrant_groups();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ROLE_NAME:
      return isSetRole_name();
    case ROLE_ID:
      return isSetRole_id();
    case GRANT_GROUPS:
      return isSetGrant_groups();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TRole)
      return this.equals((TRole)that);
    return false;
  }

  public boolean equals(TRole that) {
    if (that == null)
      return false;

    boolean this_present_role_name = true && this.isSetRole_name();
    boolean that_present_role_name = true && that.isSetRole_name();
    if (this_present_role_name || that_present_role_name) {
      if (!(this_present_role_name && that_present_role_name))
        return false;
      if (!this.role_name.equals(that.role_name))
        return false;
    }

    boolean this_present_role_id = true;
    boolean that_present_role_id = true;
    if (this_present_role_id || that_present_role_id) {
      if (!(this_present_role_id && that_present_role_id))
        return false;
      if (this.role_id != that.role_id)
        return false;
    }

    boolean this_present_grant_groups = true && this.isSetGrant_groups();
    boolean that_present_grant_groups = true && that.isSetGrant_groups();
    if (this_present_grant_groups || that_present_grant_groups) {
      if (!(this_present_grant_groups && that_present_grant_groups))
        return false;
      if (!this.grant_groups.equals(that.grant_groups))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_role_name = true && (isSetRole_name());
    builder.append(present_role_name);
    if (present_role_name)
      builder.append(role_name);

    boolean present_role_id = true;
    builder.append(present_role_id);
    if (present_role_id)
      builder.append(role_id);

    boolean present_grant_groups = true && (isSetGrant_groups());
    builder.append(present_grant_groups);
    if (present_grant_groups)
      builder.append(grant_groups);

    return builder.toHashCode();
  }

  public int compareTo(TRole other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TRole typedOther = (TRole)other;

    lastComparison = Boolean.valueOf(isSetRole_name()).compareTo(typedOther.isSetRole_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRole_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.role_name, typedOther.role_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRole_id()).compareTo(typedOther.isSetRole_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRole_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.role_id, typedOther.role_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGrant_groups()).compareTo(typedOther.isSetGrant_groups());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGrant_groups()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.grant_groups, typedOther.grant_groups);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TRole(");
    boolean first = true;

    sb.append("role_name:");
    if (this.role_name == null) {
      sb.append("null");
    } else {
      sb.append(this.role_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("role_id:");
    sb.append(this.role_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("grant_groups:");
    if (this.grant_groups == null) {
      sb.append("null");
    } else {
      sb.append(this.grant_groups);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (role_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'role_name' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'role_id' because it's a primitive and you chose the non-beans generator.
    if (grant_groups == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'grant_groups' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TRoleStandardSchemeFactory implements SchemeFactory {
    public TRoleStandardScheme getScheme() {
      return new TRoleStandardScheme();
    }
  }

  private static class TRoleStandardScheme extends StandardScheme<TRole> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TRole struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ROLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.role_name = iprot.readString();
              struct.setRole_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ROLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.role_id = iprot.readI32();
              struct.setRole_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GRANT_GROUPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list134 = iprot.readListBegin();
                struct.grant_groups = new ArrayList<String>(_list134.size);
                for (int _i135 = 0; _i135 < _list134.size; ++_i135)
                {
                  String _elem136; // required
                  _elem136 = iprot.readString();
                  struct.grant_groups.add(_elem136);
                }
                iprot.readListEnd();
              }
              struct.setGrant_groupsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetRole_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'role_id' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TRole struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.role_name != null) {
        oprot.writeFieldBegin(ROLE_NAME_FIELD_DESC);
        oprot.writeString(struct.role_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ROLE_ID_FIELD_DESC);
      oprot.writeI32(struct.role_id);
      oprot.writeFieldEnd();
      if (struct.grant_groups != null) {
        oprot.writeFieldBegin(GRANT_GROUPS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.grant_groups.size()));
          for (String _iter137 : struct.grant_groups)
          {
            oprot.writeString(_iter137);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TRoleTupleSchemeFactory implements SchemeFactory {
    public TRoleTupleScheme getScheme() {
      return new TRoleTupleScheme();
    }
  }

  private static class TRoleTupleScheme extends TupleScheme<TRole> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TRole struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.role_name);
      oprot.writeI32(struct.role_id);
      {
        oprot.writeI32(struct.grant_groups.size());
        for (String _iter138 : struct.grant_groups)
        {
          oprot.writeString(_iter138);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TRole struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.role_name = iprot.readString();
      struct.setRole_nameIsSet(true);
      struct.role_id = iprot.readI32();
      struct.setRole_idIsSet(true);
      {
        org.apache.thrift.protocol.TList _list139 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.grant_groups = new ArrayList<String>(_list139.size);
        for (int _i140 = 0; _i140 < _list139.size; ++_i140)
        {
          String _elem141; // required
          _elem141 = iprot.readString();
          struct.grant_groups.add(_elem141);
        }
      }
      struct.setGrant_groupsIsSet(true);
    }
  }

}

