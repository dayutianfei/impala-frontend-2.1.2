/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TExprNode implements org.apache.thrift.TBase<TExprNode, TExprNode._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TExprNode");

  private static final org.apache.thrift.protocol.TField NODE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("node_type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField NUM_CHILDREN_FIELD_DESC = new org.apache.thrift.protocol.TField("num_children", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField FN_FIELD_DESC = new org.apache.thrift.protocol.TField("fn", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField VARARG_START_IDX_FIELD_DESC = new org.apache.thrift.protocol.TField("vararg_start_idx", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField BOOL_LITERAL_FIELD_DESC = new org.apache.thrift.protocol.TField("bool_literal", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField CASE_EXPR_FIELD_DESC = new org.apache.thrift.protocol.TField("case_expr", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField DATE_LITERAL_FIELD_DESC = new org.apache.thrift.protocol.TField("date_literal", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField FLOAT_LITERAL_FIELD_DESC = new org.apache.thrift.protocol.TField("float_literal", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField INT_LITERAL_FIELD_DESC = new org.apache.thrift.protocol.TField("int_literal", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField IN_PREDICATE_FIELD_DESC = new org.apache.thrift.protocol.TField("in_predicate", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField IS_NULL_PRED_FIELD_DESC = new org.apache.thrift.protocol.TField("is_null_pred", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField LITERAL_PRED_FIELD_DESC = new org.apache.thrift.protocol.TField("literal_pred", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField SLOT_REF_FIELD_DESC = new org.apache.thrift.protocol.TField("slot_ref", org.apache.thrift.protocol.TType.STRUCT, (short)14);
  private static final org.apache.thrift.protocol.TField STRING_LITERAL_FIELD_DESC = new org.apache.thrift.protocol.TField("string_literal", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField TUPLE_IS_NULL_PRED_FIELD_DESC = new org.apache.thrift.protocol.TField("tuple_is_null_pred", org.apache.thrift.protocol.TType.STRUCT, (short)16);
  private static final org.apache.thrift.protocol.TField DECIMAL_LITERAL_FIELD_DESC = new org.apache.thrift.protocol.TField("decimal_literal", org.apache.thrift.protocol.TType.STRUCT, (short)17);
  private static final org.apache.thrift.protocol.TField AGG_EXPR_FIELD_DESC = new org.apache.thrift.protocol.TField("agg_expr", org.apache.thrift.protocol.TType.STRUCT, (short)18);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TExprNodeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TExprNodeTupleSchemeFactory());
  }

  /**
   * 
   * @see TExprNodeType
   */
  public TExprNodeType node_type; // required
  public com.cloudera.impala.thrift.TColumnType type; // required
  public int num_children; // required
  public com.cloudera.impala.thrift.TFunction fn; // optional
  public int vararg_start_idx; // optional
  public TBoolLiteral bool_literal; // optional
  public TCaseExpr case_expr; // optional
  public TDateLiteral date_literal; // optional
  public TFloatLiteral float_literal; // optional
  public TIntLiteral int_literal; // optional
  public TInPredicate in_predicate; // optional
  public TIsNullPredicate is_null_pred; // optional
  public TLiteralPredicate literal_pred; // optional
  public TSlotRef slot_ref; // optional
  public TStringLiteral string_literal; // optional
  public TTupleIsNullPredicate tuple_is_null_pred; // optional
  public TDecimalLiteral decimal_literal; // optional
  public TAggregateExpr agg_expr; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TExprNodeType
     */
    NODE_TYPE((short)1, "node_type"),
    TYPE((short)2, "type"),
    NUM_CHILDREN((short)3, "num_children"),
    FN((short)4, "fn"),
    VARARG_START_IDX((short)5, "vararg_start_idx"),
    BOOL_LITERAL((short)6, "bool_literal"),
    CASE_EXPR((short)7, "case_expr"),
    DATE_LITERAL((short)8, "date_literal"),
    FLOAT_LITERAL((short)9, "float_literal"),
    INT_LITERAL((short)10, "int_literal"),
    IN_PREDICATE((short)11, "in_predicate"),
    IS_NULL_PRED((short)12, "is_null_pred"),
    LITERAL_PRED((short)13, "literal_pred"),
    SLOT_REF((short)14, "slot_ref"),
    STRING_LITERAL((short)15, "string_literal"),
    TUPLE_IS_NULL_PRED((short)16, "tuple_is_null_pred"),
    DECIMAL_LITERAL((short)17, "decimal_literal"),
    AGG_EXPR((short)18, "agg_expr");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NODE_TYPE
          return NODE_TYPE;
        case 2: // TYPE
          return TYPE;
        case 3: // NUM_CHILDREN
          return NUM_CHILDREN;
        case 4: // FN
          return FN;
        case 5: // VARARG_START_IDX
          return VARARG_START_IDX;
        case 6: // BOOL_LITERAL
          return BOOL_LITERAL;
        case 7: // CASE_EXPR
          return CASE_EXPR;
        case 8: // DATE_LITERAL
          return DATE_LITERAL;
        case 9: // FLOAT_LITERAL
          return FLOAT_LITERAL;
        case 10: // INT_LITERAL
          return INT_LITERAL;
        case 11: // IN_PREDICATE
          return IN_PREDICATE;
        case 12: // IS_NULL_PRED
          return IS_NULL_PRED;
        case 13: // LITERAL_PRED
          return LITERAL_PRED;
        case 14: // SLOT_REF
          return SLOT_REF;
        case 15: // STRING_LITERAL
          return STRING_LITERAL;
        case 16: // TUPLE_IS_NULL_PRED
          return TUPLE_IS_NULL_PRED;
        case 17: // DECIMAL_LITERAL
          return DECIMAL_LITERAL;
        case 18: // AGG_EXPR
          return AGG_EXPR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUM_CHILDREN_ISSET_ID = 0;
  private static final int __VARARG_START_IDX_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.FN,_Fields.VARARG_START_IDX,_Fields.BOOL_LITERAL,_Fields.CASE_EXPR,_Fields.DATE_LITERAL,_Fields.FLOAT_LITERAL,_Fields.INT_LITERAL,_Fields.IN_PREDICATE,_Fields.IS_NULL_PRED,_Fields.LITERAL_PRED,_Fields.SLOT_REF,_Fields.STRING_LITERAL,_Fields.TUPLE_IS_NULL_PRED,_Fields.DECIMAL_LITERAL,_Fields.AGG_EXPR};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NODE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("node_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TExprNodeType.class)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TColumnType.class)));
    tmpMap.put(_Fields.NUM_CHILDREN, new org.apache.thrift.meta_data.FieldMetaData("num_children", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FN, new org.apache.thrift.meta_data.FieldMetaData("fn", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TFunction.class)));
    tmpMap.put(_Fields.VARARG_START_IDX, new org.apache.thrift.meta_data.FieldMetaData("vararg_start_idx", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BOOL_LITERAL, new org.apache.thrift.meta_data.FieldMetaData("bool_literal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBoolLiteral.class)));
    tmpMap.put(_Fields.CASE_EXPR, new org.apache.thrift.meta_data.FieldMetaData("case_expr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCaseExpr.class)));
    tmpMap.put(_Fields.DATE_LITERAL, new org.apache.thrift.meta_data.FieldMetaData("date_literal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDateLiteral.class)));
    tmpMap.put(_Fields.FLOAT_LITERAL, new org.apache.thrift.meta_data.FieldMetaData("float_literal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TFloatLiteral.class)));
    tmpMap.put(_Fields.INT_LITERAL, new org.apache.thrift.meta_data.FieldMetaData("int_literal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TIntLiteral.class)));
    tmpMap.put(_Fields.IN_PREDICATE, new org.apache.thrift.meta_data.FieldMetaData("in_predicate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInPredicate.class)));
    tmpMap.put(_Fields.IS_NULL_PRED, new org.apache.thrift.meta_data.FieldMetaData("is_null_pred", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TIsNullPredicate.class)));
    tmpMap.put(_Fields.LITERAL_PRED, new org.apache.thrift.meta_data.FieldMetaData("literal_pred", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLiteralPredicate.class)));
    tmpMap.put(_Fields.SLOT_REF, new org.apache.thrift.meta_data.FieldMetaData("slot_ref", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSlotRef.class)));
    tmpMap.put(_Fields.STRING_LITERAL, new org.apache.thrift.meta_data.FieldMetaData("string_literal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TStringLiteral.class)));
    tmpMap.put(_Fields.TUPLE_IS_NULL_PRED, new org.apache.thrift.meta_data.FieldMetaData("tuple_is_null_pred", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTupleIsNullPredicate.class)));
    tmpMap.put(_Fields.DECIMAL_LITERAL, new org.apache.thrift.meta_data.FieldMetaData("decimal_literal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDecimalLiteral.class)));
    tmpMap.put(_Fields.AGG_EXPR, new org.apache.thrift.meta_data.FieldMetaData("agg_expr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAggregateExpr.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TExprNode.class, metaDataMap);
  }

  public TExprNode() {
  }

  public TExprNode(
    TExprNodeType node_type,
    com.cloudera.impala.thrift.TColumnType type,
    int num_children)
  {
    this();
    this.node_type = node_type;
    this.type = type;
    this.num_children = num_children;
    setNum_childrenIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TExprNode(TExprNode other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetNode_type()) {
      this.node_type = other.node_type;
    }
    if (other.isSetType()) {
      this.type = new com.cloudera.impala.thrift.TColumnType(other.type);
    }
    this.num_children = other.num_children;
    if (other.isSetFn()) {
      this.fn = new com.cloudera.impala.thrift.TFunction(other.fn);
    }
    this.vararg_start_idx = other.vararg_start_idx;
    if (other.isSetBool_literal()) {
      this.bool_literal = new TBoolLiteral(other.bool_literal);
    }
    if (other.isSetCase_expr()) {
      this.case_expr = new TCaseExpr(other.case_expr);
    }
    if (other.isSetDate_literal()) {
      this.date_literal = new TDateLiteral(other.date_literal);
    }
    if (other.isSetFloat_literal()) {
      this.float_literal = new TFloatLiteral(other.float_literal);
    }
    if (other.isSetInt_literal()) {
      this.int_literal = new TIntLiteral(other.int_literal);
    }
    if (other.isSetIn_predicate()) {
      this.in_predicate = new TInPredicate(other.in_predicate);
    }
    if (other.isSetIs_null_pred()) {
      this.is_null_pred = new TIsNullPredicate(other.is_null_pred);
    }
    if (other.isSetLiteral_pred()) {
      this.literal_pred = new TLiteralPredicate(other.literal_pred);
    }
    if (other.isSetSlot_ref()) {
      this.slot_ref = new TSlotRef(other.slot_ref);
    }
    if (other.isSetString_literal()) {
      this.string_literal = new TStringLiteral(other.string_literal);
    }
    if (other.isSetTuple_is_null_pred()) {
      this.tuple_is_null_pred = new TTupleIsNullPredicate(other.tuple_is_null_pred);
    }
    if (other.isSetDecimal_literal()) {
      this.decimal_literal = new TDecimalLiteral(other.decimal_literal);
    }
    if (other.isSetAgg_expr()) {
      this.agg_expr = new TAggregateExpr(other.agg_expr);
    }
  }

  public TExprNode deepCopy() {
    return new TExprNode(this);
  }

  @Override
  public void clear() {
    this.node_type = null;
    this.type = null;
    setNum_childrenIsSet(false);
    this.num_children = 0;
    this.fn = null;
    setVararg_start_idxIsSet(false);
    this.vararg_start_idx = 0;
    this.bool_literal = null;
    this.case_expr = null;
    this.date_literal = null;
    this.float_literal = null;
    this.int_literal = null;
    this.in_predicate = null;
    this.is_null_pred = null;
    this.literal_pred = null;
    this.slot_ref = null;
    this.string_literal = null;
    this.tuple_is_null_pred = null;
    this.decimal_literal = null;
    this.agg_expr = null;
  }

  /**
   * 
   * @see TExprNodeType
   */
  public TExprNodeType getNode_type() {
    return this.node_type;
  }

  /**
   * 
   * @see TExprNodeType
   */
  public TExprNode setNode_type(TExprNodeType node_type) {
    this.node_type = node_type;
    return this;
  }

  public void unsetNode_type() {
    this.node_type = null;
  }

  /** Returns true if field node_type is set (has been assigned a value) and false otherwise */
  public boolean isSetNode_type() {
    return this.node_type != null;
  }

  public void setNode_typeIsSet(boolean value) {
    if (!value) {
      this.node_type = null;
    }
  }

  public com.cloudera.impala.thrift.TColumnType getType() {
    return this.type;
  }

  public TExprNode setType(com.cloudera.impala.thrift.TColumnType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getNum_children() {
    return this.num_children;
  }

  public TExprNode setNum_children(int num_children) {
    this.num_children = num_children;
    setNum_childrenIsSet(true);
    return this;
  }

  public void unsetNum_children() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_CHILDREN_ISSET_ID);
  }

  /** Returns true if field num_children is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_children() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_CHILDREN_ISSET_ID);
  }

  public void setNum_childrenIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_CHILDREN_ISSET_ID, value);
  }

  public com.cloudera.impala.thrift.TFunction getFn() {
    return this.fn;
  }

  public TExprNode setFn(com.cloudera.impala.thrift.TFunction fn) {
    this.fn = fn;
    return this;
  }

  public void unsetFn() {
    this.fn = null;
  }

  /** Returns true if field fn is set (has been assigned a value) and false otherwise */
  public boolean isSetFn() {
    return this.fn != null;
  }

  public void setFnIsSet(boolean value) {
    if (!value) {
      this.fn = null;
    }
  }

  public int getVararg_start_idx() {
    return this.vararg_start_idx;
  }

  public TExprNode setVararg_start_idx(int vararg_start_idx) {
    this.vararg_start_idx = vararg_start_idx;
    setVararg_start_idxIsSet(true);
    return this;
  }

  public void unsetVararg_start_idx() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VARARG_START_IDX_ISSET_ID);
  }

  /** Returns true if field vararg_start_idx is set (has been assigned a value) and false otherwise */
  public boolean isSetVararg_start_idx() {
    return EncodingUtils.testBit(__isset_bitfield, __VARARG_START_IDX_ISSET_ID);
  }

  public void setVararg_start_idxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VARARG_START_IDX_ISSET_ID, value);
  }

  public TBoolLiteral getBool_literal() {
    return this.bool_literal;
  }

  public TExprNode setBool_literal(TBoolLiteral bool_literal) {
    this.bool_literal = bool_literal;
    return this;
  }

  public void unsetBool_literal() {
    this.bool_literal = null;
  }

  /** Returns true if field bool_literal is set (has been assigned a value) and false otherwise */
  public boolean isSetBool_literal() {
    return this.bool_literal != null;
  }

  public void setBool_literalIsSet(boolean value) {
    if (!value) {
      this.bool_literal = null;
    }
  }

  public TCaseExpr getCase_expr() {
    return this.case_expr;
  }

  public TExprNode setCase_expr(TCaseExpr case_expr) {
    this.case_expr = case_expr;
    return this;
  }

  public void unsetCase_expr() {
    this.case_expr = null;
  }

  /** Returns true if field case_expr is set (has been assigned a value) and false otherwise */
  public boolean isSetCase_expr() {
    return this.case_expr != null;
  }

  public void setCase_exprIsSet(boolean value) {
    if (!value) {
      this.case_expr = null;
    }
  }

  public TDateLiteral getDate_literal() {
    return this.date_literal;
  }

  public TExprNode setDate_literal(TDateLiteral date_literal) {
    this.date_literal = date_literal;
    return this;
  }

  public void unsetDate_literal() {
    this.date_literal = null;
  }

  /** Returns true if field date_literal is set (has been assigned a value) and false otherwise */
  public boolean isSetDate_literal() {
    return this.date_literal != null;
  }

  public void setDate_literalIsSet(boolean value) {
    if (!value) {
      this.date_literal = null;
    }
  }

  public TFloatLiteral getFloat_literal() {
    return this.float_literal;
  }

  public TExprNode setFloat_literal(TFloatLiteral float_literal) {
    this.float_literal = float_literal;
    return this;
  }

  public void unsetFloat_literal() {
    this.float_literal = null;
  }

  /** Returns true if field float_literal is set (has been assigned a value) and false otherwise */
  public boolean isSetFloat_literal() {
    return this.float_literal != null;
  }

  public void setFloat_literalIsSet(boolean value) {
    if (!value) {
      this.float_literal = null;
    }
  }

  public TIntLiteral getInt_literal() {
    return this.int_literal;
  }

  public TExprNode setInt_literal(TIntLiteral int_literal) {
    this.int_literal = int_literal;
    return this;
  }

  public void unsetInt_literal() {
    this.int_literal = null;
  }

  /** Returns true if field int_literal is set (has been assigned a value) and false otherwise */
  public boolean isSetInt_literal() {
    return this.int_literal != null;
  }

  public void setInt_literalIsSet(boolean value) {
    if (!value) {
      this.int_literal = null;
    }
  }

  public TInPredicate getIn_predicate() {
    return this.in_predicate;
  }

  public TExprNode setIn_predicate(TInPredicate in_predicate) {
    this.in_predicate = in_predicate;
    return this;
  }

  public void unsetIn_predicate() {
    this.in_predicate = null;
  }

  /** Returns true if field in_predicate is set (has been assigned a value) and false otherwise */
  public boolean isSetIn_predicate() {
    return this.in_predicate != null;
  }

  public void setIn_predicateIsSet(boolean value) {
    if (!value) {
      this.in_predicate = null;
    }
  }

  public TIsNullPredicate getIs_null_pred() {
    return this.is_null_pred;
  }

  public TExprNode setIs_null_pred(TIsNullPredicate is_null_pred) {
    this.is_null_pred = is_null_pred;
    return this;
  }

  public void unsetIs_null_pred() {
    this.is_null_pred = null;
  }

  /** Returns true if field is_null_pred is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_null_pred() {
    return this.is_null_pred != null;
  }

  public void setIs_null_predIsSet(boolean value) {
    if (!value) {
      this.is_null_pred = null;
    }
  }

  public TLiteralPredicate getLiteral_pred() {
    return this.literal_pred;
  }

  public TExprNode setLiteral_pred(TLiteralPredicate literal_pred) {
    this.literal_pred = literal_pred;
    return this;
  }

  public void unsetLiteral_pred() {
    this.literal_pred = null;
  }

  /** Returns true if field literal_pred is set (has been assigned a value) and false otherwise */
  public boolean isSetLiteral_pred() {
    return this.literal_pred != null;
  }

  public void setLiteral_predIsSet(boolean value) {
    if (!value) {
      this.literal_pred = null;
    }
  }

  public TSlotRef getSlot_ref() {
    return this.slot_ref;
  }

  public TExprNode setSlot_ref(TSlotRef slot_ref) {
    this.slot_ref = slot_ref;
    return this;
  }

  public void unsetSlot_ref() {
    this.slot_ref = null;
  }

  /** Returns true if field slot_ref is set (has been assigned a value) and false otherwise */
  public boolean isSetSlot_ref() {
    return this.slot_ref != null;
  }

  public void setSlot_refIsSet(boolean value) {
    if (!value) {
      this.slot_ref = null;
    }
  }

  public TStringLiteral getString_literal() {
    return this.string_literal;
  }

  public TExprNode setString_literal(TStringLiteral string_literal) {
    this.string_literal = string_literal;
    return this;
  }

  public void unsetString_literal() {
    this.string_literal = null;
  }

  /** Returns true if field string_literal is set (has been assigned a value) and false otherwise */
  public boolean isSetString_literal() {
    return this.string_literal != null;
  }

  public void setString_literalIsSet(boolean value) {
    if (!value) {
      this.string_literal = null;
    }
  }

  public TTupleIsNullPredicate getTuple_is_null_pred() {
    return this.tuple_is_null_pred;
  }

  public TExprNode setTuple_is_null_pred(TTupleIsNullPredicate tuple_is_null_pred) {
    this.tuple_is_null_pred = tuple_is_null_pred;
    return this;
  }

  public void unsetTuple_is_null_pred() {
    this.tuple_is_null_pred = null;
  }

  /** Returns true if field tuple_is_null_pred is set (has been assigned a value) and false otherwise */
  public boolean isSetTuple_is_null_pred() {
    return this.tuple_is_null_pred != null;
  }

  public void setTuple_is_null_predIsSet(boolean value) {
    if (!value) {
      this.tuple_is_null_pred = null;
    }
  }

  public TDecimalLiteral getDecimal_literal() {
    return this.decimal_literal;
  }

  public TExprNode setDecimal_literal(TDecimalLiteral decimal_literal) {
    this.decimal_literal = decimal_literal;
    return this;
  }

  public void unsetDecimal_literal() {
    this.decimal_literal = null;
  }

  /** Returns true if field decimal_literal is set (has been assigned a value) and false otherwise */
  public boolean isSetDecimal_literal() {
    return this.decimal_literal != null;
  }

  public void setDecimal_literalIsSet(boolean value) {
    if (!value) {
      this.decimal_literal = null;
    }
  }

  public TAggregateExpr getAgg_expr() {
    return this.agg_expr;
  }

  public TExprNode setAgg_expr(TAggregateExpr agg_expr) {
    this.agg_expr = agg_expr;
    return this;
  }

  public void unsetAgg_expr() {
    this.agg_expr = null;
  }

  /** Returns true if field agg_expr is set (has been assigned a value) and false otherwise */
  public boolean isSetAgg_expr() {
    return this.agg_expr != null;
  }

  public void setAgg_exprIsSet(boolean value) {
    if (!value) {
      this.agg_expr = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NODE_TYPE:
      if (value == null) {
        unsetNode_type();
      } else {
        setNode_type((TExprNodeType)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((com.cloudera.impala.thrift.TColumnType)value);
      }
      break;

    case NUM_CHILDREN:
      if (value == null) {
        unsetNum_children();
      } else {
        setNum_children((Integer)value);
      }
      break;

    case FN:
      if (value == null) {
        unsetFn();
      } else {
        setFn((com.cloudera.impala.thrift.TFunction)value);
      }
      break;

    case VARARG_START_IDX:
      if (value == null) {
        unsetVararg_start_idx();
      } else {
        setVararg_start_idx((Integer)value);
      }
      break;

    case BOOL_LITERAL:
      if (value == null) {
        unsetBool_literal();
      } else {
        setBool_literal((TBoolLiteral)value);
      }
      break;

    case CASE_EXPR:
      if (value == null) {
        unsetCase_expr();
      } else {
        setCase_expr((TCaseExpr)value);
      }
      break;

    case DATE_LITERAL:
      if (value == null) {
        unsetDate_literal();
      } else {
        setDate_literal((TDateLiteral)value);
      }
      break;

    case FLOAT_LITERAL:
      if (value == null) {
        unsetFloat_literal();
      } else {
        setFloat_literal((TFloatLiteral)value);
      }
      break;

    case INT_LITERAL:
      if (value == null) {
        unsetInt_literal();
      } else {
        setInt_literal((TIntLiteral)value);
      }
      break;

    case IN_PREDICATE:
      if (value == null) {
        unsetIn_predicate();
      } else {
        setIn_predicate((TInPredicate)value);
      }
      break;

    case IS_NULL_PRED:
      if (value == null) {
        unsetIs_null_pred();
      } else {
        setIs_null_pred((TIsNullPredicate)value);
      }
      break;

    case LITERAL_PRED:
      if (value == null) {
        unsetLiteral_pred();
      } else {
        setLiteral_pred((TLiteralPredicate)value);
      }
      break;

    case SLOT_REF:
      if (value == null) {
        unsetSlot_ref();
      } else {
        setSlot_ref((TSlotRef)value);
      }
      break;

    case STRING_LITERAL:
      if (value == null) {
        unsetString_literal();
      } else {
        setString_literal((TStringLiteral)value);
      }
      break;

    case TUPLE_IS_NULL_PRED:
      if (value == null) {
        unsetTuple_is_null_pred();
      } else {
        setTuple_is_null_pred((TTupleIsNullPredicate)value);
      }
      break;

    case DECIMAL_LITERAL:
      if (value == null) {
        unsetDecimal_literal();
      } else {
        setDecimal_literal((TDecimalLiteral)value);
      }
      break;

    case AGG_EXPR:
      if (value == null) {
        unsetAgg_expr();
      } else {
        setAgg_expr((TAggregateExpr)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NODE_TYPE:
      return getNode_type();

    case TYPE:
      return getType();

    case NUM_CHILDREN:
      return Integer.valueOf(getNum_children());

    case FN:
      return getFn();

    case VARARG_START_IDX:
      return Integer.valueOf(getVararg_start_idx());

    case BOOL_LITERAL:
      return getBool_literal();

    case CASE_EXPR:
      return getCase_expr();

    case DATE_LITERAL:
      return getDate_literal();

    case FLOAT_LITERAL:
      return getFloat_literal();

    case INT_LITERAL:
      return getInt_literal();

    case IN_PREDICATE:
      return getIn_predicate();

    case IS_NULL_PRED:
      return getIs_null_pred();

    case LITERAL_PRED:
      return getLiteral_pred();

    case SLOT_REF:
      return getSlot_ref();

    case STRING_LITERAL:
      return getString_literal();

    case TUPLE_IS_NULL_PRED:
      return getTuple_is_null_pred();

    case DECIMAL_LITERAL:
      return getDecimal_literal();

    case AGG_EXPR:
      return getAgg_expr();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NODE_TYPE:
      return isSetNode_type();
    case TYPE:
      return isSetType();
    case NUM_CHILDREN:
      return isSetNum_children();
    case FN:
      return isSetFn();
    case VARARG_START_IDX:
      return isSetVararg_start_idx();
    case BOOL_LITERAL:
      return isSetBool_literal();
    case CASE_EXPR:
      return isSetCase_expr();
    case DATE_LITERAL:
      return isSetDate_literal();
    case FLOAT_LITERAL:
      return isSetFloat_literal();
    case INT_LITERAL:
      return isSetInt_literal();
    case IN_PREDICATE:
      return isSetIn_predicate();
    case IS_NULL_PRED:
      return isSetIs_null_pred();
    case LITERAL_PRED:
      return isSetLiteral_pred();
    case SLOT_REF:
      return isSetSlot_ref();
    case STRING_LITERAL:
      return isSetString_literal();
    case TUPLE_IS_NULL_PRED:
      return isSetTuple_is_null_pred();
    case DECIMAL_LITERAL:
      return isSetDecimal_literal();
    case AGG_EXPR:
      return isSetAgg_expr();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TExprNode)
      return this.equals((TExprNode)that);
    return false;
  }

  public boolean equals(TExprNode that) {
    if (that == null)
      return false;

    boolean this_present_node_type = true && this.isSetNode_type();
    boolean that_present_node_type = true && that.isSetNode_type();
    if (this_present_node_type || that_present_node_type) {
      if (!(this_present_node_type && that_present_node_type))
        return false;
      if (!this.node_type.equals(that.node_type))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_num_children = true;
    boolean that_present_num_children = true;
    if (this_present_num_children || that_present_num_children) {
      if (!(this_present_num_children && that_present_num_children))
        return false;
      if (this.num_children != that.num_children)
        return false;
    }

    boolean this_present_fn = true && this.isSetFn();
    boolean that_present_fn = true && that.isSetFn();
    if (this_present_fn || that_present_fn) {
      if (!(this_present_fn && that_present_fn))
        return false;
      if (!this.fn.equals(that.fn))
        return false;
    }

    boolean this_present_vararg_start_idx = true && this.isSetVararg_start_idx();
    boolean that_present_vararg_start_idx = true && that.isSetVararg_start_idx();
    if (this_present_vararg_start_idx || that_present_vararg_start_idx) {
      if (!(this_present_vararg_start_idx && that_present_vararg_start_idx))
        return false;
      if (this.vararg_start_idx != that.vararg_start_idx)
        return false;
    }

    boolean this_present_bool_literal = true && this.isSetBool_literal();
    boolean that_present_bool_literal = true && that.isSetBool_literal();
    if (this_present_bool_literal || that_present_bool_literal) {
      if (!(this_present_bool_literal && that_present_bool_literal))
        return false;
      if (!this.bool_literal.equals(that.bool_literal))
        return false;
    }

    boolean this_present_case_expr = true && this.isSetCase_expr();
    boolean that_present_case_expr = true && that.isSetCase_expr();
    if (this_present_case_expr || that_present_case_expr) {
      if (!(this_present_case_expr && that_present_case_expr))
        return false;
      if (!this.case_expr.equals(that.case_expr))
        return false;
    }

    boolean this_present_date_literal = true && this.isSetDate_literal();
    boolean that_present_date_literal = true && that.isSetDate_literal();
    if (this_present_date_literal || that_present_date_literal) {
      if (!(this_present_date_literal && that_present_date_literal))
        return false;
      if (!this.date_literal.equals(that.date_literal))
        return false;
    }

    boolean this_present_float_literal = true && this.isSetFloat_literal();
    boolean that_present_float_literal = true && that.isSetFloat_literal();
    if (this_present_float_literal || that_present_float_literal) {
      if (!(this_present_float_literal && that_present_float_literal))
        return false;
      if (!this.float_literal.equals(that.float_literal))
        return false;
    }

    boolean this_present_int_literal = true && this.isSetInt_literal();
    boolean that_present_int_literal = true && that.isSetInt_literal();
    if (this_present_int_literal || that_present_int_literal) {
      if (!(this_present_int_literal && that_present_int_literal))
        return false;
      if (!this.int_literal.equals(that.int_literal))
        return false;
    }

    boolean this_present_in_predicate = true && this.isSetIn_predicate();
    boolean that_present_in_predicate = true && that.isSetIn_predicate();
    if (this_present_in_predicate || that_present_in_predicate) {
      if (!(this_present_in_predicate && that_present_in_predicate))
        return false;
      if (!this.in_predicate.equals(that.in_predicate))
        return false;
    }

    boolean this_present_is_null_pred = true && this.isSetIs_null_pred();
    boolean that_present_is_null_pred = true && that.isSetIs_null_pred();
    if (this_present_is_null_pred || that_present_is_null_pred) {
      if (!(this_present_is_null_pred && that_present_is_null_pred))
        return false;
      if (!this.is_null_pred.equals(that.is_null_pred))
        return false;
    }

    boolean this_present_literal_pred = true && this.isSetLiteral_pred();
    boolean that_present_literal_pred = true && that.isSetLiteral_pred();
    if (this_present_literal_pred || that_present_literal_pred) {
      if (!(this_present_literal_pred && that_present_literal_pred))
        return false;
      if (!this.literal_pred.equals(that.literal_pred))
        return false;
    }

    boolean this_present_slot_ref = true && this.isSetSlot_ref();
    boolean that_present_slot_ref = true && that.isSetSlot_ref();
    if (this_present_slot_ref || that_present_slot_ref) {
      if (!(this_present_slot_ref && that_present_slot_ref))
        return false;
      if (!this.slot_ref.equals(that.slot_ref))
        return false;
    }

    boolean this_present_string_literal = true && this.isSetString_literal();
    boolean that_present_string_literal = true && that.isSetString_literal();
    if (this_present_string_literal || that_present_string_literal) {
      if (!(this_present_string_literal && that_present_string_literal))
        return false;
      if (!this.string_literal.equals(that.string_literal))
        return false;
    }

    boolean this_present_tuple_is_null_pred = true && this.isSetTuple_is_null_pred();
    boolean that_present_tuple_is_null_pred = true && that.isSetTuple_is_null_pred();
    if (this_present_tuple_is_null_pred || that_present_tuple_is_null_pred) {
      if (!(this_present_tuple_is_null_pred && that_present_tuple_is_null_pred))
        return false;
      if (!this.tuple_is_null_pred.equals(that.tuple_is_null_pred))
        return false;
    }

    boolean this_present_decimal_literal = true && this.isSetDecimal_literal();
    boolean that_present_decimal_literal = true && that.isSetDecimal_literal();
    if (this_present_decimal_literal || that_present_decimal_literal) {
      if (!(this_present_decimal_literal && that_present_decimal_literal))
        return false;
      if (!this.decimal_literal.equals(that.decimal_literal))
        return false;
    }

    boolean this_present_agg_expr = true && this.isSetAgg_expr();
    boolean that_present_agg_expr = true && that.isSetAgg_expr();
    if (this_present_agg_expr || that_present_agg_expr) {
      if (!(this_present_agg_expr && that_present_agg_expr))
        return false;
      if (!this.agg_expr.equals(that.agg_expr))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_node_type = true && (isSetNode_type());
    builder.append(present_node_type);
    if (present_node_type)
      builder.append(node_type.getValue());

    boolean present_type = true && (isSetType());
    builder.append(present_type);
    if (present_type)
      builder.append(type);

    boolean present_num_children = true;
    builder.append(present_num_children);
    if (present_num_children)
      builder.append(num_children);

    boolean present_fn = true && (isSetFn());
    builder.append(present_fn);
    if (present_fn)
      builder.append(fn);

    boolean present_vararg_start_idx = true && (isSetVararg_start_idx());
    builder.append(present_vararg_start_idx);
    if (present_vararg_start_idx)
      builder.append(vararg_start_idx);

    boolean present_bool_literal = true && (isSetBool_literal());
    builder.append(present_bool_literal);
    if (present_bool_literal)
      builder.append(bool_literal);

    boolean present_case_expr = true && (isSetCase_expr());
    builder.append(present_case_expr);
    if (present_case_expr)
      builder.append(case_expr);

    boolean present_date_literal = true && (isSetDate_literal());
    builder.append(present_date_literal);
    if (present_date_literal)
      builder.append(date_literal);

    boolean present_float_literal = true && (isSetFloat_literal());
    builder.append(present_float_literal);
    if (present_float_literal)
      builder.append(float_literal);

    boolean present_int_literal = true && (isSetInt_literal());
    builder.append(present_int_literal);
    if (present_int_literal)
      builder.append(int_literal);

    boolean present_in_predicate = true && (isSetIn_predicate());
    builder.append(present_in_predicate);
    if (present_in_predicate)
      builder.append(in_predicate);

    boolean present_is_null_pred = true && (isSetIs_null_pred());
    builder.append(present_is_null_pred);
    if (present_is_null_pred)
      builder.append(is_null_pred);

    boolean present_literal_pred = true && (isSetLiteral_pred());
    builder.append(present_literal_pred);
    if (present_literal_pred)
      builder.append(literal_pred);

    boolean present_slot_ref = true && (isSetSlot_ref());
    builder.append(present_slot_ref);
    if (present_slot_ref)
      builder.append(slot_ref);

    boolean present_string_literal = true && (isSetString_literal());
    builder.append(present_string_literal);
    if (present_string_literal)
      builder.append(string_literal);

    boolean present_tuple_is_null_pred = true && (isSetTuple_is_null_pred());
    builder.append(present_tuple_is_null_pred);
    if (present_tuple_is_null_pred)
      builder.append(tuple_is_null_pred);

    boolean present_decimal_literal = true && (isSetDecimal_literal());
    builder.append(present_decimal_literal);
    if (present_decimal_literal)
      builder.append(decimal_literal);

    boolean present_agg_expr = true && (isSetAgg_expr());
    builder.append(present_agg_expr);
    if (present_agg_expr)
      builder.append(agg_expr);

    return builder.toHashCode();
  }

  public int compareTo(TExprNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TExprNode typedOther = (TExprNode)other;

    lastComparison = Boolean.valueOf(isSetNode_type()).compareTo(typedOther.isSetNode_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNode_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.node_type, typedOther.node_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_children()).compareTo(typedOther.isSetNum_children());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_children()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_children, typedOther.num_children);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFn()).compareTo(typedOther.isSetFn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fn, typedOther.fn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVararg_start_idx()).compareTo(typedOther.isSetVararg_start_idx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVararg_start_idx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vararg_start_idx, typedOther.vararg_start_idx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBool_literal()).compareTo(typedOther.isSetBool_literal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBool_literal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bool_literal, typedOther.bool_literal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCase_expr()).compareTo(typedOther.isSetCase_expr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCase_expr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.case_expr, typedOther.case_expr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDate_literal()).compareTo(typedOther.isSetDate_literal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate_literal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date_literal, typedOther.date_literal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFloat_literal()).compareTo(typedOther.isSetFloat_literal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFloat_literal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.float_literal, typedOther.float_literal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInt_literal()).compareTo(typedOther.isSetInt_literal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInt_literal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.int_literal, typedOther.int_literal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIn_predicate()).compareTo(typedOther.isSetIn_predicate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIn_predicate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.in_predicate, typedOther.in_predicate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_null_pred()).compareTo(typedOther.isSetIs_null_pred());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_null_pred()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_null_pred, typedOther.is_null_pred);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLiteral_pred()).compareTo(typedOther.isSetLiteral_pred());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLiteral_pred()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.literal_pred, typedOther.literal_pred);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSlot_ref()).compareTo(typedOther.isSetSlot_ref());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlot_ref()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slot_ref, typedOther.slot_ref);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetString_literal()).compareTo(typedOther.isSetString_literal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetString_literal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.string_literal, typedOther.string_literal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTuple_is_null_pred()).compareTo(typedOther.isSetTuple_is_null_pred());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTuple_is_null_pred()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tuple_is_null_pred, typedOther.tuple_is_null_pred);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDecimal_literal()).compareTo(typedOther.isSetDecimal_literal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDecimal_literal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.decimal_literal, typedOther.decimal_literal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAgg_expr()).compareTo(typedOther.isSetAgg_expr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgg_expr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agg_expr, typedOther.agg_expr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TExprNode(");
    boolean first = true;

    sb.append("node_type:");
    if (this.node_type == null) {
      sb.append("null");
    } else {
      sb.append(this.node_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_children:");
    sb.append(this.num_children);
    first = false;
    if (isSetFn()) {
      if (!first) sb.append(", ");
      sb.append("fn:");
      if (this.fn == null) {
        sb.append("null");
      } else {
        sb.append(this.fn);
      }
      first = false;
    }
    if (isSetVararg_start_idx()) {
      if (!first) sb.append(", ");
      sb.append("vararg_start_idx:");
      sb.append(this.vararg_start_idx);
      first = false;
    }
    if (isSetBool_literal()) {
      if (!first) sb.append(", ");
      sb.append("bool_literal:");
      if (this.bool_literal == null) {
        sb.append("null");
      } else {
        sb.append(this.bool_literal);
      }
      first = false;
    }
    if (isSetCase_expr()) {
      if (!first) sb.append(", ");
      sb.append("case_expr:");
      if (this.case_expr == null) {
        sb.append("null");
      } else {
        sb.append(this.case_expr);
      }
      first = false;
    }
    if (isSetDate_literal()) {
      if (!first) sb.append(", ");
      sb.append("date_literal:");
      if (this.date_literal == null) {
        sb.append("null");
      } else {
        sb.append(this.date_literal);
      }
      first = false;
    }
    if (isSetFloat_literal()) {
      if (!first) sb.append(", ");
      sb.append("float_literal:");
      if (this.float_literal == null) {
        sb.append("null");
      } else {
        sb.append(this.float_literal);
      }
      first = false;
    }
    if (isSetInt_literal()) {
      if (!first) sb.append(", ");
      sb.append("int_literal:");
      if (this.int_literal == null) {
        sb.append("null");
      } else {
        sb.append(this.int_literal);
      }
      first = false;
    }
    if (isSetIn_predicate()) {
      if (!first) sb.append(", ");
      sb.append("in_predicate:");
      if (this.in_predicate == null) {
        sb.append("null");
      } else {
        sb.append(this.in_predicate);
      }
      first = false;
    }
    if (isSetIs_null_pred()) {
      if (!first) sb.append(", ");
      sb.append("is_null_pred:");
      if (this.is_null_pred == null) {
        sb.append("null");
      } else {
        sb.append(this.is_null_pred);
      }
      first = false;
    }
    if (isSetLiteral_pred()) {
      if (!first) sb.append(", ");
      sb.append("literal_pred:");
      if (this.literal_pred == null) {
        sb.append("null");
      } else {
        sb.append(this.literal_pred);
      }
      first = false;
    }
    if (isSetSlot_ref()) {
      if (!first) sb.append(", ");
      sb.append("slot_ref:");
      if (this.slot_ref == null) {
        sb.append("null");
      } else {
        sb.append(this.slot_ref);
      }
      first = false;
    }
    if (isSetString_literal()) {
      if (!first) sb.append(", ");
      sb.append("string_literal:");
      if (this.string_literal == null) {
        sb.append("null");
      } else {
        sb.append(this.string_literal);
      }
      first = false;
    }
    if (isSetTuple_is_null_pred()) {
      if (!first) sb.append(", ");
      sb.append("tuple_is_null_pred:");
      if (this.tuple_is_null_pred == null) {
        sb.append("null");
      } else {
        sb.append(this.tuple_is_null_pred);
      }
      first = false;
    }
    if (isSetDecimal_literal()) {
      if (!first) sb.append(", ");
      sb.append("decimal_literal:");
      if (this.decimal_literal == null) {
        sb.append("null");
      } else {
        sb.append(this.decimal_literal);
      }
      first = false;
    }
    if (isSetAgg_expr()) {
      if (!first) sb.append(", ");
      sb.append("agg_expr:");
      if (this.agg_expr == null) {
        sb.append("null");
      } else {
        sb.append(this.agg_expr);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (node_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'node_type' was not present! Struct: " + toString());
    }
    if (type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'num_children' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (type != null) {
      type.validate();
    }
    if (fn != null) {
      fn.validate();
    }
    if (bool_literal != null) {
      bool_literal.validate();
    }
    if (case_expr != null) {
      case_expr.validate();
    }
    if (date_literal != null) {
      date_literal.validate();
    }
    if (float_literal != null) {
      float_literal.validate();
    }
    if (int_literal != null) {
      int_literal.validate();
    }
    if (in_predicate != null) {
      in_predicate.validate();
    }
    if (is_null_pred != null) {
      is_null_pred.validate();
    }
    if (literal_pred != null) {
      literal_pred.validate();
    }
    if (slot_ref != null) {
      slot_ref.validate();
    }
    if (string_literal != null) {
      string_literal.validate();
    }
    if (tuple_is_null_pred != null) {
      tuple_is_null_pred.validate();
    }
    if (decimal_literal != null) {
      decimal_literal.validate();
    }
    if (agg_expr != null) {
      agg_expr.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TExprNodeStandardSchemeFactory implements SchemeFactory {
    public TExprNodeStandardScheme getScheme() {
      return new TExprNodeStandardScheme();
    }
  }

  private static class TExprNodeStandardScheme extends StandardScheme<TExprNode> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TExprNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NODE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.node_type = TExprNodeType.findByValue(iprot.readI32());
              struct.setNode_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.type = new com.cloudera.impala.thrift.TColumnType();
              struct.type.read(iprot);
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NUM_CHILDREN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_children = iprot.readI32();
              struct.setNum_childrenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fn = new com.cloudera.impala.thrift.TFunction();
              struct.fn.read(iprot);
              struct.setFnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VARARG_START_IDX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vararg_start_idx = iprot.readI32();
              struct.setVararg_start_idxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BOOL_LITERAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.bool_literal = new TBoolLiteral();
              struct.bool_literal.read(iprot);
              struct.setBool_literalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CASE_EXPR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.case_expr = new TCaseExpr();
              struct.case_expr.read(iprot);
              struct.setCase_exprIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DATE_LITERAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.date_literal = new TDateLiteral();
              struct.date_literal.read(iprot);
              struct.setDate_literalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FLOAT_LITERAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.float_literal = new TFloatLiteral();
              struct.float_literal.read(iprot);
              struct.setFloat_literalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // INT_LITERAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.int_literal = new TIntLiteral();
              struct.int_literal.read(iprot);
              struct.setInt_literalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IN_PREDICATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.in_predicate = new TInPredicate();
              struct.in_predicate.read(iprot);
              struct.setIn_predicateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // IS_NULL_PRED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.is_null_pred = new TIsNullPredicate();
              struct.is_null_pred.read(iprot);
              struct.setIs_null_predIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LITERAL_PRED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.literal_pred = new TLiteralPredicate();
              struct.literal_pred.read(iprot);
              struct.setLiteral_predIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SLOT_REF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.slot_ref = new TSlotRef();
              struct.slot_ref.read(iprot);
              struct.setSlot_refIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // STRING_LITERAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.string_literal = new TStringLiteral();
              struct.string_literal.read(iprot);
              struct.setString_literalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // TUPLE_IS_NULL_PRED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tuple_is_null_pred = new TTupleIsNullPredicate();
              struct.tuple_is_null_pred.read(iprot);
              struct.setTuple_is_null_predIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // DECIMAL_LITERAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.decimal_literal = new TDecimalLiteral();
              struct.decimal_literal.read(iprot);
              struct.setDecimal_literalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // AGG_EXPR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.agg_expr = new TAggregateExpr();
              struct.agg_expr.read(iprot);
              struct.setAgg_exprIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetNum_children()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'num_children' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TExprNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.node_type != null) {
        oprot.writeFieldBegin(NODE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.node_type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        struct.type.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUM_CHILDREN_FIELD_DESC);
      oprot.writeI32(struct.num_children);
      oprot.writeFieldEnd();
      if (struct.fn != null) {
        if (struct.isSetFn()) {
          oprot.writeFieldBegin(FN_FIELD_DESC);
          struct.fn.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetVararg_start_idx()) {
        oprot.writeFieldBegin(VARARG_START_IDX_FIELD_DESC);
        oprot.writeI32(struct.vararg_start_idx);
        oprot.writeFieldEnd();
      }
      if (struct.bool_literal != null) {
        if (struct.isSetBool_literal()) {
          oprot.writeFieldBegin(BOOL_LITERAL_FIELD_DESC);
          struct.bool_literal.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.case_expr != null) {
        if (struct.isSetCase_expr()) {
          oprot.writeFieldBegin(CASE_EXPR_FIELD_DESC);
          struct.case_expr.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.date_literal != null) {
        if (struct.isSetDate_literal()) {
          oprot.writeFieldBegin(DATE_LITERAL_FIELD_DESC);
          struct.date_literal.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.float_literal != null) {
        if (struct.isSetFloat_literal()) {
          oprot.writeFieldBegin(FLOAT_LITERAL_FIELD_DESC);
          struct.float_literal.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.int_literal != null) {
        if (struct.isSetInt_literal()) {
          oprot.writeFieldBegin(INT_LITERAL_FIELD_DESC);
          struct.int_literal.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.in_predicate != null) {
        if (struct.isSetIn_predicate()) {
          oprot.writeFieldBegin(IN_PREDICATE_FIELD_DESC);
          struct.in_predicate.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.is_null_pred != null) {
        if (struct.isSetIs_null_pred()) {
          oprot.writeFieldBegin(IS_NULL_PRED_FIELD_DESC);
          struct.is_null_pred.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.literal_pred != null) {
        if (struct.isSetLiteral_pred()) {
          oprot.writeFieldBegin(LITERAL_PRED_FIELD_DESC);
          struct.literal_pred.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.slot_ref != null) {
        if (struct.isSetSlot_ref()) {
          oprot.writeFieldBegin(SLOT_REF_FIELD_DESC);
          struct.slot_ref.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.string_literal != null) {
        if (struct.isSetString_literal()) {
          oprot.writeFieldBegin(STRING_LITERAL_FIELD_DESC);
          struct.string_literal.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tuple_is_null_pred != null) {
        if (struct.isSetTuple_is_null_pred()) {
          oprot.writeFieldBegin(TUPLE_IS_NULL_PRED_FIELD_DESC);
          struct.tuple_is_null_pred.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.decimal_literal != null) {
        if (struct.isSetDecimal_literal()) {
          oprot.writeFieldBegin(DECIMAL_LITERAL_FIELD_DESC);
          struct.decimal_literal.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.agg_expr != null) {
        if (struct.isSetAgg_expr()) {
          oprot.writeFieldBegin(AGG_EXPR_FIELD_DESC);
          struct.agg_expr.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TExprNodeTupleSchemeFactory implements SchemeFactory {
    public TExprNodeTupleScheme getScheme() {
      return new TExprNodeTupleScheme();
    }
  }

  private static class TExprNodeTupleScheme extends TupleScheme<TExprNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TExprNode struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.node_type.getValue());
      struct.type.write(oprot);
      oprot.writeI32(struct.num_children);
      BitSet optionals = new BitSet();
      if (struct.isSetFn()) {
        optionals.set(0);
      }
      if (struct.isSetVararg_start_idx()) {
        optionals.set(1);
      }
      if (struct.isSetBool_literal()) {
        optionals.set(2);
      }
      if (struct.isSetCase_expr()) {
        optionals.set(3);
      }
      if (struct.isSetDate_literal()) {
        optionals.set(4);
      }
      if (struct.isSetFloat_literal()) {
        optionals.set(5);
      }
      if (struct.isSetInt_literal()) {
        optionals.set(6);
      }
      if (struct.isSetIn_predicate()) {
        optionals.set(7);
      }
      if (struct.isSetIs_null_pred()) {
        optionals.set(8);
      }
      if (struct.isSetLiteral_pred()) {
        optionals.set(9);
      }
      if (struct.isSetSlot_ref()) {
        optionals.set(10);
      }
      if (struct.isSetString_literal()) {
        optionals.set(11);
      }
      if (struct.isSetTuple_is_null_pred()) {
        optionals.set(12);
      }
      if (struct.isSetDecimal_literal()) {
        optionals.set(13);
      }
      if (struct.isSetAgg_expr()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetFn()) {
        struct.fn.write(oprot);
      }
      if (struct.isSetVararg_start_idx()) {
        oprot.writeI32(struct.vararg_start_idx);
      }
      if (struct.isSetBool_literal()) {
        struct.bool_literal.write(oprot);
      }
      if (struct.isSetCase_expr()) {
        struct.case_expr.write(oprot);
      }
      if (struct.isSetDate_literal()) {
        struct.date_literal.write(oprot);
      }
      if (struct.isSetFloat_literal()) {
        struct.float_literal.write(oprot);
      }
      if (struct.isSetInt_literal()) {
        struct.int_literal.write(oprot);
      }
      if (struct.isSetIn_predicate()) {
        struct.in_predicate.write(oprot);
      }
      if (struct.isSetIs_null_pred()) {
        struct.is_null_pred.write(oprot);
      }
      if (struct.isSetLiteral_pred()) {
        struct.literal_pred.write(oprot);
      }
      if (struct.isSetSlot_ref()) {
        struct.slot_ref.write(oprot);
      }
      if (struct.isSetString_literal()) {
        struct.string_literal.write(oprot);
      }
      if (struct.isSetTuple_is_null_pred()) {
        struct.tuple_is_null_pred.write(oprot);
      }
      if (struct.isSetDecimal_literal()) {
        struct.decimal_literal.write(oprot);
      }
      if (struct.isSetAgg_expr()) {
        struct.agg_expr.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TExprNode struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.node_type = TExprNodeType.findByValue(iprot.readI32());
      struct.setNode_typeIsSet(true);
      struct.type = new com.cloudera.impala.thrift.TColumnType();
      struct.type.read(iprot);
      struct.setTypeIsSet(true);
      struct.num_children = iprot.readI32();
      struct.setNum_childrenIsSet(true);
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.fn = new com.cloudera.impala.thrift.TFunction();
        struct.fn.read(iprot);
        struct.setFnIsSet(true);
      }
      if (incoming.get(1)) {
        struct.vararg_start_idx = iprot.readI32();
        struct.setVararg_start_idxIsSet(true);
      }
      if (incoming.get(2)) {
        struct.bool_literal = new TBoolLiteral();
        struct.bool_literal.read(iprot);
        struct.setBool_literalIsSet(true);
      }
      if (incoming.get(3)) {
        struct.case_expr = new TCaseExpr();
        struct.case_expr.read(iprot);
        struct.setCase_exprIsSet(true);
      }
      if (incoming.get(4)) {
        struct.date_literal = new TDateLiteral();
        struct.date_literal.read(iprot);
        struct.setDate_literalIsSet(true);
      }
      if (incoming.get(5)) {
        struct.float_literal = new TFloatLiteral();
        struct.float_literal.read(iprot);
        struct.setFloat_literalIsSet(true);
      }
      if (incoming.get(6)) {
        struct.int_literal = new TIntLiteral();
        struct.int_literal.read(iprot);
        struct.setInt_literalIsSet(true);
      }
      if (incoming.get(7)) {
        struct.in_predicate = new TInPredicate();
        struct.in_predicate.read(iprot);
        struct.setIn_predicateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.is_null_pred = new TIsNullPredicate();
        struct.is_null_pred.read(iprot);
        struct.setIs_null_predIsSet(true);
      }
      if (incoming.get(9)) {
        struct.literal_pred = new TLiteralPredicate();
        struct.literal_pred.read(iprot);
        struct.setLiteral_predIsSet(true);
      }
      if (incoming.get(10)) {
        struct.slot_ref = new TSlotRef();
        struct.slot_ref.read(iprot);
        struct.setSlot_refIsSet(true);
      }
      if (incoming.get(11)) {
        struct.string_literal = new TStringLiteral();
        struct.string_literal.read(iprot);
        struct.setString_literalIsSet(true);
      }
      if (incoming.get(12)) {
        struct.tuple_is_null_pred = new TTupleIsNullPredicate();
        struct.tuple_is_null_pred.read(iprot);
        struct.setTuple_is_null_predIsSet(true);
      }
      if (incoming.get(13)) {
        struct.decimal_literal = new TDecimalLiteral();
        struct.decimal_literal.read(iprot);
        struct.setDecimal_literalIsSet(true);
      }
      if (incoming.get(14)) {
        struct.agg_expr = new TAggregateExpr();
        struct.agg_expr.read(iprot);
        struct.setAgg_exprIsSet(true);
      }
    }
  }

}

