/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TColumnStats implements org.apache.thrift.TBase<TColumnStats, TColumnStats._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TColumnStats");

  private static final org.apache.thrift.protocol.TField AVG_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("avg_size", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField MAX_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("max_size", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField NUM_DISTINCT_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("num_distinct_values", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField NUM_NULLS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_nulls", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TColumnStatsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TColumnStatsTupleSchemeFactory());
  }

  public double avg_size; // required
  public long max_size; // required
  public long num_distinct_values; // required
  public long num_nulls; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AVG_SIZE((short)1, "avg_size"),
    MAX_SIZE((short)2, "max_size"),
    NUM_DISTINCT_VALUES((short)3, "num_distinct_values"),
    NUM_NULLS((short)4, "num_nulls");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AVG_SIZE
          return AVG_SIZE;
        case 2: // MAX_SIZE
          return MAX_SIZE;
        case 3: // NUM_DISTINCT_VALUES
          return NUM_DISTINCT_VALUES;
        case 4: // NUM_NULLS
          return NUM_NULLS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __AVG_SIZE_ISSET_ID = 0;
  private static final int __MAX_SIZE_ISSET_ID = 1;
  private static final int __NUM_DISTINCT_VALUES_ISSET_ID = 2;
  private static final int __NUM_NULLS_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AVG_SIZE, new org.apache.thrift.meta_data.FieldMetaData("avg_size", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MAX_SIZE, new org.apache.thrift.meta_data.FieldMetaData("max_size", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_DISTINCT_VALUES, new org.apache.thrift.meta_data.FieldMetaData("num_distinct_values", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_NULLS, new org.apache.thrift.meta_data.FieldMetaData("num_nulls", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TColumnStats.class, metaDataMap);
  }

  public TColumnStats() {
  }

  public TColumnStats(
    double avg_size,
    long max_size,
    long num_distinct_values,
    long num_nulls)
  {
    this();
    this.avg_size = avg_size;
    setAvg_sizeIsSet(true);
    this.max_size = max_size;
    setMax_sizeIsSet(true);
    this.num_distinct_values = num_distinct_values;
    setNum_distinct_valuesIsSet(true);
    this.num_nulls = num_nulls;
    setNum_nullsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TColumnStats(TColumnStats other) {
    __isset_bitfield = other.__isset_bitfield;
    this.avg_size = other.avg_size;
    this.max_size = other.max_size;
    this.num_distinct_values = other.num_distinct_values;
    this.num_nulls = other.num_nulls;
  }

  public TColumnStats deepCopy() {
    return new TColumnStats(this);
  }

  @Override
  public void clear() {
    setAvg_sizeIsSet(false);
    this.avg_size = 0.0;
    setMax_sizeIsSet(false);
    this.max_size = 0;
    setNum_distinct_valuesIsSet(false);
    this.num_distinct_values = 0;
    setNum_nullsIsSet(false);
    this.num_nulls = 0;
  }

  public double getAvg_size() {
    return this.avg_size;
  }

  public TColumnStats setAvg_size(double avg_size) {
    this.avg_size = avg_size;
    setAvg_sizeIsSet(true);
    return this;
  }

  public void unsetAvg_size() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVG_SIZE_ISSET_ID);
  }

  /** Returns true if field avg_size is set (has been assigned a value) and false otherwise */
  public boolean isSetAvg_size() {
    return EncodingUtils.testBit(__isset_bitfield, __AVG_SIZE_ISSET_ID);
  }

  public void setAvg_sizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVG_SIZE_ISSET_ID, value);
  }

  public long getMax_size() {
    return this.max_size;
  }

  public TColumnStats setMax_size(long max_size) {
    this.max_size = max_size;
    setMax_sizeIsSet(true);
    return this;
  }

  public void unsetMax_size() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_SIZE_ISSET_ID);
  }

  /** Returns true if field max_size is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_size() {
    return EncodingUtils.testBit(__isset_bitfield, __MAX_SIZE_ISSET_ID);
  }

  public void setMax_sizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_SIZE_ISSET_ID, value);
  }

  public long getNum_distinct_values() {
    return this.num_distinct_values;
  }

  public TColumnStats setNum_distinct_values(long num_distinct_values) {
    this.num_distinct_values = num_distinct_values;
    setNum_distinct_valuesIsSet(true);
    return this;
  }

  public void unsetNum_distinct_values() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_DISTINCT_VALUES_ISSET_ID);
  }

  /** Returns true if field num_distinct_values is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_distinct_values() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_DISTINCT_VALUES_ISSET_ID);
  }

  public void setNum_distinct_valuesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_DISTINCT_VALUES_ISSET_ID, value);
  }

  public long getNum_nulls() {
    return this.num_nulls;
  }

  public TColumnStats setNum_nulls(long num_nulls) {
    this.num_nulls = num_nulls;
    setNum_nullsIsSet(true);
    return this;
  }

  public void unsetNum_nulls() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_NULLS_ISSET_ID);
  }

  /** Returns true if field num_nulls is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_nulls() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_NULLS_ISSET_ID);
  }

  public void setNum_nullsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_NULLS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case AVG_SIZE:
      if (value == null) {
        unsetAvg_size();
      } else {
        setAvg_size((Double)value);
      }
      break;

    case MAX_SIZE:
      if (value == null) {
        unsetMax_size();
      } else {
        setMax_size((Long)value);
      }
      break;

    case NUM_DISTINCT_VALUES:
      if (value == null) {
        unsetNum_distinct_values();
      } else {
        setNum_distinct_values((Long)value);
      }
      break;

    case NUM_NULLS:
      if (value == null) {
        unsetNum_nulls();
      } else {
        setNum_nulls((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case AVG_SIZE:
      return Double.valueOf(getAvg_size());

    case MAX_SIZE:
      return Long.valueOf(getMax_size());

    case NUM_DISTINCT_VALUES:
      return Long.valueOf(getNum_distinct_values());

    case NUM_NULLS:
      return Long.valueOf(getNum_nulls());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case AVG_SIZE:
      return isSetAvg_size();
    case MAX_SIZE:
      return isSetMax_size();
    case NUM_DISTINCT_VALUES:
      return isSetNum_distinct_values();
    case NUM_NULLS:
      return isSetNum_nulls();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TColumnStats)
      return this.equals((TColumnStats)that);
    return false;
  }

  public boolean equals(TColumnStats that) {
    if (that == null)
      return false;

    boolean this_present_avg_size = true;
    boolean that_present_avg_size = true;
    if (this_present_avg_size || that_present_avg_size) {
      if (!(this_present_avg_size && that_present_avg_size))
        return false;
      if (this.avg_size != that.avg_size)
        return false;
    }

    boolean this_present_max_size = true;
    boolean that_present_max_size = true;
    if (this_present_max_size || that_present_max_size) {
      if (!(this_present_max_size && that_present_max_size))
        return false;
      if (this.max_size != that.max_size)
        return false;
    }

    boolean this_present_num_distinct_values = true;
    boolean that_present_num_distinct_values = true;
    if (this_present_num_distinct_values || that_present_num_distinct_values) {
      if (!(this_present_num_distinct_values && that_present_num_distinct_values))
        return false;
      if (this.num_distinct_values != that.num_distinct_values)
        return false;
    }

    boolean this_present_num_nulls = true;
    boolean that_present_num_nulls = true;
    if (this_present_num_nulls || that_present_num_nulls) {
      if (!(this_present_num_nulls && that_present_num_nulls))
        return false;
      if (this.num_nulls != that.num_nulls)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_avg_size = true;
    builder.append(present_avg_size);
    if (present_avg_size)
      builder.append(avg_size);

    boolean present_max_size = true;
    builder.append(present_max_size);
    if (present_max_size)
      builder.append(max_size);

    boolean present_num_distinct_values = true;
    builder.append(present_num_distinct_values);
    if (present_num_distinct_values)
      builder.append(num_distinct_values);

    boolean present_num_nulls = true;
    builder.append(present_num_nulls);
    if (present_num_nulls)
      builder.append(num_nulls);

    return builder.toHashCode();
  }

  public int compareTo(TColumnStats other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TColumnStats typedOther = (TColumnStats)other;

    lastComparison = Boolean.valueOf(isSetAvg_size()).compareTo(typedOther.isSetAvg_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvg_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avg_size, typedOther.avg_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax_size()).compareTo(typedOther.isSetMax_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_size, typedOther.max_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_distinct_values()).compareTo(typedOther.isSetNum_distinct_values());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_distinct_values()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_distinct_values, typedOther.num_distinct_values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_nulls()).compareTo(typedOther.isSetNum_nulls());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_nulls()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_nulls, typedOther.num_nulls);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TColumnStats(");
    boolean first = true;

    sb.append("avg_size:");
    sb.append(this.avg_size);
    first = false;
    if (!first) sb.append(", ");
    sb.append("max_size:");
    sb.append(this.max_size);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_distinct_values:");
    sb.append(this.num_distinct_values);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_nulls:");
    sb.append(this.num_nulls);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'avg_size' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'max_size' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'num_distinct_values' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'num_nulls' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TColumnStatsStandardSchemeFactory implements SchemeFactory {
    public TColumnStatsStandardScheme getScheme() {
      return new TColumnStatsStandardScheme();
    }
  }

  private static class TColumnStatsStandardScheme extends StandardScheme<TColumnStats> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TColumnStats struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AVG_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.avg_size = iprot.readDouble();
              struct.setAvg_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MAX_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_size = iprot.readI64();
              struct.setMax_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NUM_DISTINCT_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num_distinct_values = iprot.readI64();
              struct.setNum_distinct_valuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NUM_NULLS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num_nulls = iprot.readI64();
              struct.setNum_nullsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetAvg_size()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'avg_size' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMax_size()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'max_size' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNum_distinct_values()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'num_distinct_values' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNum_nulls()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'num_nulls' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TColumnStats struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(AVG_SIZE_FIELD_DESC);
      oprot.writeDouble(struct.avg_size);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_SIZE_FIELD_DESC);
      oprot.writeI64(struct.max_size);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_DISTINCT_VALUES_FIELD_DESC);
      oprot.writeI64(struct.num_distinct_values);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_NULLS_FIELD_DESC);
      oprot.writeI64(struct.num_nulls);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TColumnStatsTupleSchemeFactory implements SchemeFactory {
    public TColumnStatsTupleScheme getScheme() {
      return new TColumnStatsTupleScheme();
    }
  }

  private static class TColumnStatsTupleScheme extends TupleScheme<TColumnStats> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TColumnStats struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeDouble(struct.avg_size);
      oprot.writeI64(struct.max_size);
      oprot.writeI64(struct.num_distinct_values);
      oprot.writeI64(struct.num_nulls);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TColumnStats struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.avg_size = iprot.readDouble();
      struct.setAvg_sizeIsSet(true);
      struct.max_size = iprot.readI64();
      struct.setMax_sizeIsSet(true);
      struct.num_distinct_values = iprot.readI64();
      struct.setNum_distinct_valuesIsSet(true);
      struct.num_nulls = iprot.readI64();
      struct.setNum_nullsIsSet(true);
    }
  }

}

