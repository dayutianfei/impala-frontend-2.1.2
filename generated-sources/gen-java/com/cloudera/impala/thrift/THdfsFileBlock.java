/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class THdfsFileBlock implements org.apache.thrift.TBase<THdfsFileBlock, THdfsFileBlock._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("THdfsFileBlock");

  private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField REPLICA_HOST_IDXS_FIELD_DESC = new org.apache.thrift.protocol.TField("replica_host_idxs", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField DISK_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("disk_ids", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField IS_REPLICA_CACHED_FIELD_DESC = new org.apache.thrift.protocol.TField("is_replica_cached", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new THdfsFileBlockStandardSchemeFactory());
    schemes.put(TupleScheme.class, new THdfsFileBlockTupleSchemeFactory());
  }

  public long offset; // required
  public long length; // required
  public List<Integer> replica_host_idxs; // required
  public List<Integer> disk_ids; // optional
  public List<Boolean> is_replica_cached; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OFFSET((short)1, "offset"),
    LENGTH((short)2, "length"),
    REPLICA_HOST_IDXS((short)3, "replica_host_idxs"),
    DISK_IDS((short)4, "disk_ids"),
    IS_REPLICA_CACHED((short)5, "is_replica_cached");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OFFSET
          return OFFSET;
        case 2: // LENGTH
          return LENGTH;
        case 3: // REPLICA_HOST_IDXS
          return REPLICA_HOST_IDXS;
        case 4: // DISK_IDS
          return DISK_IDS;
        case 5: // IS_REPLICA_CACHED
          return IS_REPLICA_CACHED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OFFSET_ISSET_ID = 0;
  private static final int __LENGTH_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.DISK_IDS,_Fields.IS_REPLICA_CACHED};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REPLICA_HOST_IDXS, new org.apache.thrift.meta_data.FieldMetaData("replica_host_idxs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.DISK_IDS, new org.apache.thrift.meta_data.FieldMetaData("disk_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.IS_REPLICA_CACHED, new org.apache.thrift.meta_data.FieldMetaData("is_replica_cached", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(THdfsFileBlock.class, metaDataMap);
  }

  public THdfsFileBlock() {
  }

  public THdfsFileBlock(
    long offset,
    long length,
    List<Integer> replica_host_idxs)
  {
    this();
    this.offset = offset;
    setOffsetIsSet(true);
    this.length = length;
    setLengthIsSet(true);
    this.replica_host_idxs = replica_host_idxs;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public THdfsFileBlock(THdfsFileBlock other) {
    __isset_bitfield = other.__isset_bitfield;
    this.offset = other.offset;
    this.length = other.length;
    if (other.isSetReplica_host_idxs()) {
      List<Integer> __this__replica_host_idxs = new ArrayList<Integer>();
      for (Integer other_element : other.replica_host_idxs) {
        __this__replica_host_idxs.add(other_element);
      }
      this.replica_host_idxs = __this__replica_host_idxs;
    }
    if (other.isSetDisk_ids()) {
      List<Integer> __this__disk_ids = new ArrayList<Integer>();
      for (Integer other_element : other.disk_ids) {
        __this__disk_ids.add(other_element);
      }
      this.disk_ids = __this__disk_ids;
    }
    if (other.isSetIs_replica_cached()) {
      List<Boolean> __this__is_replica_cached = new ArrayList<Boolean>();
      for (Boolean other_element : other.is_replica_cached) {
        __this__is_replica_cached.add(other_element);
      }
      this.is_replica_cached = __this__is_replica_cached;
    }
  }

  public THdfsFileBlock deepCopy() {
    return new THdfsFileBlock(this);
  }

  @Override
  public void clear() {
    setOffsetIsSet(false);
    this.offset = 0;
    setLengthIsSet(false);
    this.length = 0;
    this.replica_host_idxs = null;
    this.disk_ids = null;
    this.is_replica_cached = null;
  }

  public long getOffset() {
    return this.offset;
  }

  public THdfsFileBlock setOffset(long offset) {
    this.offset = offset;
    setOffsetIsSet(true);
    return this;
  }

  public void unsetOffset() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  /** Returns true if field offset is set (has been assigned a value) and false otherwise */
  public boolean isSetOffset() {
    return EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  public void setOffsetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
  }

  public long getLength() {
    return this.length;
  }

  public THdfsFileBlock setLength(long length) {
    this.length = length;
    setLengthIsSet(true);
    return this;
  }

  public void unsetLength() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENGTH_ISSET_ID);
  }

  /** Returns true if field length is set (has been assigned a value) and false otherwise */
  public boolean isSetLength() {
    return EncodingUtils.testBit(__isset_bitfield, __LENGTH_ISSET_ID);
  }

  public void setLengthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENGTH_ISSET_ID, value);
  }

  public int getReplica_host_idxsSize() {
    return (this.replica_host_idxs == null) ? 0 : this.replica_host_idxs.size();
  }

  public java.util.Iterator<Integer> getReplica_host_idxsIterator() {
    return (this.replica_host_idxs == null) ? null : this.replica_host_idxs.iterator();
  }

  public void addToReplica_host_idxs(int elem) {
    if (this.replica_host_idxs == null) {
      this.replica_host_idxs = new ArrayList<Integer>();
    }
    this.replica_host_idxs.add(elem);
  }

  public List<Integer> getReplica_host_idxs() {
    return this.replica_host_idxs;
  }

  public THdfsFileBlock setReplica_host_idxs(List<Integer> replica_host_idxs) {
    this.replica_host_idxs = replica_host_idxs;
    return this;
  }

  public void unsetReplica_host_idxs() {
    this.replica_host_idxs = null;
  }

  /** Returns true if field replica_host_idxs is set (has been assigned a value) and false otherwise */
  public boolean isSetReplica_host_idxs() {
    return this.replica_host_idxs != null;
  }

  public void setReplica_host_idxsIsSet(boolean value) {
    if (!value) {
      this.replica_host_idxs = null;
    }
  }

  public int getDisk_idsSize() {
    return (this.disk_ids == null) ? 0 : this.disk_ids.size();
  }

  public java.util.Iterator<Integer> getDisk_idsIterator() {
    return (this.disk_ids == null) ? null : this.disk_ids.iterator();
  }

  public void addToDisk_ids(int elem) {
    if (this.disk_ids == null) {
      this.disk_ids = new ArrayList<Integer>();
    }
    this.disk_ids.add(elem);
  }

  public List<Integer> getDisk_ids() {
    return this.disk_ids;
  }

  public THdfsFileBlock setDisk_ids(List<Integer> disk_ids) {
    this.disk_ids = disk_ids;
    return this;
  }

  public void unsetDisk_ids() {
    this.disk_ids = null;
  }

  /** Returns true if field disk_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetDisk_ids() {
    return this.disk_ids != null;
  }

  public void setDisk_idsIsSet(boolean value) {
    if (!value) {
      this.disk_ids = null;
    }
  }

  public int getIs_replica_cachedSize() {
    return (this.is_replica_cached == null) ? 0 : this.is_replica_cached.size();
  }

  public java.util.Iterator<Boolean> getIs_replica_cachedIterator() {
    return (this.is_replica_cached == null) ? null : this.is_replica_cached.iterator();
  }

  public void addToIs_replica_cached(boolean elem) {
    if (this.is_replica_cached == null) {
      this.is_replica_cached = new ArrayList<Boolean>();
    }
    this.is_replica_cached.add(elem);
  }

  public List<Boolean> getIs_replica_cached() {
    return this.is_replica_cached;
  }

  public THdfsFileBlock setIs_replica_cached(List<Boolean> is_replica_cached) {
    this.is_replica_cached = is_replica_cached;
    return this;
  }

  public void unsetIs_replica_cached() {
    this.is_replica_cached = null;
  }

  /** Returns true if field is_replica_cached is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_replica_cached() {
    return this.is_replica_cached != null;
  }

  public void setIs_replica_cachedIsSet(boolean value) {
    if (!value) {
      this.is_replica_cached = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OFFSET:
      if (value == null) {
        unsetOffset();
      } else {
        setOffset((Long)value);
      }
      break;

    case LENGTH:
      if (value == null) {
        unsetLength();
      } else {
        setLength((Long)value);
      }
      break;

    case REPLICA_HOST_IDXS:
      if (value == null) {
        unsetReplica_host_idxs();
      } else {
        setReplica_host_idxs((List<Integer>)value);
      }
      break;

    case DISK_IDS:
      if (value == null) {
        unsetDisk_ids();
      } else {
        setDisk_ids((List<Integer>)value);
      }
      break;

    case IS_REPLICA_CACHED:
      if (value == null) {
        unsetIs_replica_cached();
      } else {
        setIs_replica_cached((List<Boolean>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OFFSET:
      return Long.valueOf(getOffset());

    case LENGTH:
      return Long.valueOf(getLength());

    case REPLICA_HOST_IDXS:
      return getReplica_host_idxs();

    case DISK_IDS:
      return getDisk_ids();

    case IS_REPLICA_CACHED:
      return getIs_replica_cached();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OFFSET:
      return isSetOffset();
    case LENGTH:
      return isSetLength();
    case REPLICA_HOST_IDXS:
      return isSetReplica_host_idxs();
    case DISK_IDS:
      return isSetDisk_ids();
    case IS_REPLICA_CACHED:
      return isSetIs_replica_cached();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof THdfsFileBlock)
      return this.equals((THdfsFileBlock)that);
    return false;
  }

  public boolean equals(THdfsFileBlock that) {
    if (that == null)
      return false;

    boolean this_present_offset = true;
    boolean that_present_offset = true;
    if (this_present_offset || that_present_offset) {
      if (!(this_present_offset && that_present_offset))
        return false;
      if (this.offset != that.offset)
        return false;
    }

    boolean this_present_length = true;
    boolean that_present_length = true;
    if (this_present_length || that_present_length) {
      if (!(this_present_length && that_present_length))
        return false;
      if (this.length != that.length)
        return false;
    }

    boolean this_present_replica_host_idxs = true && this.isSetReplica_host_idxs();
    boolean that_present_replica_host_idxs = true && that.isSetReplica_host_idxs();
    if (this_present_replica_host_idxs || that_present_replica_host_idxs) {
      if (!(this_present_replica_host_idxs && that_present_replica_host_idxs))
        return false;
      if (!this.replica_host_idxs.equals(that.replica_host_idxs))
        return false;
    }

    boolean this_present_disk_ids = true && this.isSetDisk_ids();
    boolean that_present_disk_ids = true && that.isSetDisk_ids();
    if (this_present_disk_ids || that_present_disk_ids) {
      if (!(this_present_disk_ids && that_present_disk_ids))
        return false;
      if (!this.disk_ids.equals(that.disk_ids))
        return false;
    }

    boolean this_present_is_replica_cached = true && this.isSetIs_replica_cached();
    boolean that_present_is_replica_cached = true && that.isSetIs_replica_cached();
    if (this_present_is_replica_cached || that_present_is_replica_cached) {
      if (!(this_present_is_replica_cached && that_present_is_replica_cached))
        return false;
      if (!this.is_replica_cached.equals(that.is_replica_cached))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_offset = true;
    builder.append(present_offset);
    if (present_offset)
      builder.append(offset);

    boolean present_length = true;
    builder.append(present_length);
    if (present_length)
      builder.append(length);

    boolean present_replica_host_idxs = true && (isSetReplica_host_idxs());
    builder.append(present_replica_host_idxs);
    if (present_replica_host_idxs)
      builder.append(replica_host_idxs);

    boolean present_disk_ids = true && (isSetDisk_ids());
    builder.append(present_disk_ids);
    if (present_disk_ids)
      builder.append(disk_ids);

    boolean present_is_replica_cached = true && (isSetIs_replica_cached());
    builder.append(present_is_replica_cached);
    if (present_is_replica_cached)
      builder.append(is_replica_cached);

    return builder.toHashCode();
  }

  public int compareTo(THdfsFileBlock other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    THdfsFileBlock typedOther = (THdfsFileBlock)other;

    lastComparison = Boolean.valueOf(isSetOffset()).compareTo(typedOther.isSetOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, typedOther.offset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLength()).compareTo(typedOther.isSetLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, typedOther.length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplica_host_idxs()).compareTo(typedOther.isSetReplica_host_idxs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplica_host_idxs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replica_host_idxs, typedOther.replica_host_idxs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisk_ids()).compareTo(typedOther.isSetDisk_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisk_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disk_ids, typedOther.disk_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_replica_cached()).compareTo(typedOther.isSetIs_replica_cached());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_replica_cached()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_replica_cached, typedOther.is_replica_cached);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("THdfsFileBlock(");
    boolean first = true;

    sb.append("offset:");
    sb.append(this.offset);
    first = false;
    if (!first) sb.append(", ");
    sb.append("length:");
    sb.append(this.length);
    first = false;
    if (!first) sb.append(", ");
    sb.append("replica_host_idxs:");
    if (this.replica_host_idxs == null) {
      sb.append("null");
    } else {
      sb.append(this.replica_host_idxs);
    }
    first = false;
    if (isSetDisk_ids()) {
      if (!first) sb.append(", ");
      sb.append("disk_ids:");
      if (this.disk_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.disk_ids);
      }
      first = false;
    }
    if (isSetIs_replica_cached()) {
      if (!first) sb.append(", ");
      sb.append("is_replica_cached:");
      if (this.is_replica_cached == null) {
        sb.append("null");
      } else {
        sb.append(this.is_replica_cached);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'offset' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'length' because it's a primitive and you chose the non-beans generator.
    if (replica_host_idxs == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'replica_host_idxs' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class THdfsFileBlockStandardSchemeFactory implements SchemeFactory {
    public THdfsFileBlockStandardScheme getScheme() {
      return new THdfsFileBlockStandardScheme();
    }
  }

  private static class THdfsFileBlockStandardScheme extends StandardScheme<THdfsFileBlock> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, THdfsFileBlock struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.offset = iprot.readI64();
              struct.setOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.length = iprot.readI64();
              struct.setLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REPLICA_HOST_IDXS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                struct.replica_host_idxs = new ArrayList<Integer>(_list10.size);
                for (int _i11 = 0; _i11 < _list10.size; ++_i11)
                {
                  int _elem12; // required
                  _elem12 = iprot.readI32();
                  struct.replica_host_idxs.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setReplica_host_idxsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DISK_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list13 = iprot.readListBegin();
                struct.disk_ids = new ArrayList<Integer>(_list13.size);
                for (int _i14 = 0; _i14 < _list13.size; ++_i14)
                {
                  int _elem15; // required
                  _elem15 = iprot.readI32();
                  struct.disk_ids.add(_elem15);
                }
                iprot.readListEnd();
              }
              struct.setDisk_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_REPLICA_CACHED
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.is_replica_cached = new ArrayList<Boolean>(_list16.size);
                for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                {
                  boolean _elem18; // required
                  _elem18 = iprot.readBool();
                  struct.is_replica_cached.add(_elem18);
                }
                iprot.readListEnd();
              }
              struct.setIs_replica_cachedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetOffset()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'offset' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLength()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'length' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, THdfsFileBlock struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(OFFSET_FIELD_DESC);
      oprot.writeI64(struct.offset);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LENGTH_FIELD_DESC);
      oprot.writeI64(struct.length);
      oprot.writeFieldEnd();
      if (struct.replica_host_idxs != null) {
        oprot.writeFieldBegin(REPLICA_HOST_IDXS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.replica_host_idxs.size()));
          for (int _iter19 : struct.replica_host_idxs)
          {
            oprot.writeI32(_iter19);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.disk_ids != null) {
        if (struct.isSetDisk_ids()) {
          oprot.writeFieldBegin(DISK_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.disk_ids.size()));
            for (int _iter20 : struct.disk_ids)
            {
              oprot.writeI32(_iter20);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.is_replica_cached != null) {
        if (struct.isSetIs_replica_cached()) {
          oprot.writeFieldBegin(IS_REPLICA_CACHED_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.is_replica_cached.size()));
            for (boolean _iter21 : struct.is_replica_cached)
            {
              oprot.writeBool(_iter21);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class THdfsFileBlockTupleSchemeFactory implements SchemeFactory {
    public THdfsFileBlockTupleScheme getScheme() {
      return new THdfsFileBlockTupleScheme();
    }
  }

  private static class THdfsFileBlockTupleScheme extends TupleScheme<THdfsFileBlock> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, THdfsFileBlock struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.offset);
      oprot.writeI64(struct.length);
      {
        oprot.writeI32(struct.replica_host_idxs.size());
        for (int _iter22 : struct.replica_host_idxs)
        {
          oprot.writeI32(_iter22);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetDisk_ids()) {
        optionals.set(0);
      }
      if (struct.isSetIs_replica_cached()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetDisk_ids()) {
        {
          oprot.writeI32(struct.disk_ids.size());
          for (int _iter23 : struct.disk_ids)
          {
            oprot.writeI32(_iter23);
          }
        }
      }
      if (struct.isSetIs_replica_cached()) {
        {
          oprot.writeI32(struct.is_replica_cached.size());
          for (boolean _iter24 : struct.is_replica_cached)
          {
            oprot.writeBool(_iter24);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, THdfsFileBlock struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.offset = iprot.readI64();
      struct.setOffsetIsSet(true);
      struct.length = iprot.readI64();
      struct.setLengthIsSet(true);
      {
        org.apache.thrift.protocol.TList _list25 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.replica_host_idxs = new ArrayList<Integer>(_list25.size);
        for (int _i26 = 0; _i26 < _list25.size; ++_i26)
        {
          int _elem27; // required
          _elem27 = iprot.readI32();
          struct.replica_host_idxs.add(_elem27);
        }
      }
      struct.setReplica_host_idxsIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list28 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.disk_ids = new ArrayList<Integer>(_list28.size);
          for (int _i29 = 0; _i29 < _list28.size; ++_i29)
          {
            int _elem30; // required
            _elem30 = iprot.readI32();
            struct.disk_ids.add(_elem30);
          }
        }
        struct.setDisk_idsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
          struct.is_replica_cached = new ArrayList<Boolean>(_list31.size);
          for (int _i32 = 0; _i32 < _list31.size; ++_i32)
          {
            boolean _elem33; // required
            _elem33 = iprot.readBool();
            struct.is_replica_cached.add(_elem33);
          }
        }
        struct.setIs_replica_cachedIsSet(true);
      }
    }
  }

}

