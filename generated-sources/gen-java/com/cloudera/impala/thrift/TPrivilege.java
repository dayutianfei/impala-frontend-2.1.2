/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TPrivilege implements org.apache.thrift.TBase<TPrivilege, TPrivilege._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPrivilege");

  private static final org.apache.thrift.protocol.TField PRIVILEGE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("privilege_name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PRIVILEGE_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("privilege_level", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SCOPE_FIELD_DESC = new org.apache.thrift.protocol.TField("scope", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField HAS_GRANT_OPT_FIELD_DESC = new org.apache.thrift.protocol.TField("has_grant_opt", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField ROLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("role_id", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SERVER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("server_name", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("db_name", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField URI_FIELD_DESC = new org.apache.thrift.protocol.TField("uri", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("create_time_ms", org.apache.thrift.protocol.TType.I64, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPrivilegeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPrivilegeTupleSchemeFactory());
  }

  public String privilege_name; // required
  /**
   * 
   * @see TPrivilegeLevel
   */
  public TPrivilegeLevel privilege_level; // required
  /**
   * 
   * @see TPrivilegeScope
   */
  public TPrivilegeScope scope; // required
  public boolean has_grant_opt; // required
  public int role_id; // optional
  public String server_name; // optional
  public String db_name; // optional
  public String table_name; // optional
  public String uri; // optional
  public long create_time_ms; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PRIVILEGE_NAME((short)1, "privilege_name"),
    /**
     * 
     * @see TPrivilegeLevel
     */
    PRIVILEGE_LEVEL((short)2, "privilege_level"),
    /**
     * 
     * @see TPrivilegeScope
     */
    SCOPE((short)3, "scope"),
    HAS_GRANT_OPT((short)4, "has_grant_opt"),
    ROLE_ID((short)5, "role_id"),
    SERVER_NAME((short)6, "server_name"),
    DB_NAME((short)7, "db_name"),
    TABLE_NAME((short)8, "table_name"),
    URI((short)9, "uri"),
    CREATE_TIME_MS((short)10, "create_time_ms");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRIVILEGE_NAME
          return PRIVILEGE_NAME;
        case 2: // PRIVILEGE_LEVEL
          return PRIVILEGE_LEVEL;
        case 3: // SCOPE
          return SCOPE;
        case 4: // HAS_GRANT_OPT
          return HAS_GRANT_OPT;
        case 5: // ROLE_ID
          return ROLE_ID;
        case 6: // SERVER_NAME
          return SERVER_NAME;
        case 7: // DB_NAME
          return DB_NAME;
        case 8: // TABLE_NAME
          return TABLE_NAME;
        case 9: // URI
          return URI;
        case 10: // CREATE_TIME_MS
          return CREATE_TIME_MS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HAS_GRANT_OPT_ISSET_ID = 0;
  private static final int __ROLE_ID_ISSET_ID = 1;
  private static final int __CREATE_TIME_MS_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ROLE_ID,_Fields.SERVER_NAME,_Fields.DB_NAME,_Fields.TABLE_NAME,_Fields.URI,_Fields.CREATE_TIME_MS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRIVILEGE_NAME, new org.apache.thrift.meta_data.FieldMetaData("privilege_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRIVILEGE_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("privilege_level", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TPrivilegeLevel.class)));
    tmpMap.put(_Fields.SCOPE, new org.apache.thrift.meta_data.FieldMetaData("scope", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TPrivilegeScope.class)));
    tmpMap.put(_Fields.HAS_GRANT_OPT, new org.apache.thrift.meta_data.FieldMetaData("has_grant_opt", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ROLE_ID, new org.apache.thrift.meta_data.FieldMetaData("role_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SERVER_NAME, new org.apache.thrift.meta_data.FieldMetaData("server_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("db_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URI, new org.apache.thrift.meta_data.FieldMetaData("uri", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME_MS, new org.apache.thrift.meta_data.FieldMetaData("create_time_ms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPrivilege.class, metaDataMap);
  }

  public TPrivilege() {
  }

  public TPrivilege(
    String privilege_name,
    TPrivilegeLevel privilege_level,
    TPrivilegeScope scope,
    boolean has_grant_opt)
  {
    this();
    this.privilege_name = privilege_name;
    this.privilege_level = privilege_level;
    this.scope = scope;
    this.has_grant_opt = has_grant_opt;
    setHas_grant_optIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPrivilege(TPrivilege other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPrivilege_name()) {
      this.privilege_name = other.privilege_name;
    }
    if (other.isSetPrivilege_level()) {
      this.privilege_level = other.privilege_level;
    }
    if (other.isSetScope()) {
      this.scope = other.scope;
    }
    this.has_grant_opt = other.has_grant_opt;
    this.role_id = other.role_id;
    if (other.isSetServer_name()) {
      this.server_name = other.server_name;
    }
    if (other.isSetDb_name()) {
      this.db_name = other.db_name;
    }
    if (other.isSetTable_name()) {
      this.table_name = other.table_name;
    }
    if (other.isSetUri()) {
      this.uri = other.uri;
    }
    this.create_time_ms = other.create_time_ms;
  }

  public TPrivilege deepCopy() {
    return new TPrivilege(this);
  }

  @Override
  public void clear() {
    this.privilege_name = null;
    this.privilege_level = null;
    this.scope = null;
    setHas_grant_optIsSet(false);
    this.has_grant_opt = false;
    setRole_idIsSet(false);
    this.role_id = 0;
    this.server_name = null;
    this.db_name = null;
    this.table_name = null;
    this.uri = null;
    setCreate_time_msIsSet(false);
    this.create_time_ms = 0;
  }

  public String getPrivilege_name() {
    return this.privilege_name;
  }

  public TPrivilege setPrivilege_name(String privilege_name) {
    this.privilege_name = privilege_name;
    return this;
  }

  public void unsetPrivilege_name() {
    this.privilege_name = null;
  }

  /** Returns true if field privilege_name is set (has been assigned a value) and false otherwise */
  public boolean isSetPrivilege_name() {
    return this.privilege_name != null;
  }

  public void setPrivilege_nameIsSet(boolean value) {
    if (!value) {
      this.privilege_name = null;
    }
  }

  /**
   * 
   * @see TPrivilegeLevel
   */
  public TPrivilegeLevel getPrivilege_level() {
    return this.privilege_level;
  }

  /**
   * 
   * @see TPrivilegeLevel
   */
  public TPrivilege setPrivilege_level(TPrivilegeLevel privilege_level) {
    this.privilege_level = privilege_level;
    return this;
  }

  public void unsetPrivilege_level() {
    this.privilege_level = null;
  }

  /** Returns true if field privilege_level is set (has been assigned a value) and false otherwise */
  public boolean isSetPrivilege_level() {
    return this.privilege_level != null;
  }

  public void setPrivilege_levelIsSet(boolean value) {
    if (!value) {
      this.privilege_level = null;
    }
  }

  /**
   * 
   * @see TPrivilegeScope
   */
  public TPrivilegeScope getScope() {
    return this.scope;
  }

  /**
   * 
   * @see TPrivilegeScope
   */
  public TPrivilege setScope(TPrivilegeScope scope) {
    this.scope = scope;
    return this;
  }

  public void unsetScope() {
    this.scope = null;
  }

  /** Returns true if field scope is set (has been assigned a value) and false otherwise */
  public boolean isSetScope() {
    return this.scope != null;
  }

  public void setScopeIsSet(boolean value) {
    if (!value) {
      this.scope = null;
    }
  }

  public boolean isHas_grant_opt() {
    return this.has_grant_opt;
  }

  public TPrivilege setHas_grant_opt(boolean has_grant_opt) {
    this.has_grant_opt = has_grant_opt;
    setHas_grant_optIsSet(true);
    return this;
  }

  public void unsetHas_grant_opt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HAS_GRANT_OPT_ISSET_ID);
  }

  /** Returns true if field has_grant_opt is set (has been assigned a value) and false otherwise */
  public boolean isSetHas_grant_opt() {
    return EncodingUtils.testBit(__isset_bitfield, __HAS_GRANT_OPT_ISSET_ID);
  }

  public void setHas_grant_optIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HAS_GRANT_OPT_ISSET_ID, value);
  }

  public int getRole_id() {
    return this.role_id;
  }

  public TPrivilege setRole_id(int role_id) {
    this.role_id = role_id;
    setRole_idIsSet(true);
    return this;
  }

  public void unsetRole_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROLE_ID_ISSET_ID);
  }

  /** Returns true if field role_id is set (has been assigned a value) and false otherwise */
  public boolean isSetRole_id() {
    return EncodingUtils.testBit(__isset_bitfield, __ROLE_ID_ISSET_ID);
  }

  public void setRole_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROLE_ID_ISSET_ID, value);
  }

  public String getServer_name() {
    return this.server_name;
  }

  public TPrivilege setServer_name(String server_name) {
    this.server_name = server_name;
    return this;
  }

  public void unsetServer_name() {
    this.server_name = null;
  }

  /** Returns true if field server_name is set (has been assigned a value) and false otherwise */
  public boolean isSetServer_name() {
    return this.server_name != null;
  }

  public void setServer_nameIsSet(boolean value) {
    if (!value) {
      this.server_name = null;
    }
  }

  public String getDb_name() {
    return this.db_name;
  }

  public TPrivilege setDb_name(String db_name) {
    this.db_name = db_name;
    return this;
  }

  public void unsetDb_name() {
    this.db_name = null;
  }

  /** Returns true if field db_name is set (has been assigned a value) and false otherwise */
  public boolean isSetDb_name() {
    return this.db_name != null;
  }

  public void setDb_nameIsSet(boolean value) {
    if (!value) {
      this.db_name = null;
    }
  }

  public String getTable_name() {
    return this.table_name;
  }

  public TPrivilege setTable_name(String table_name) {
    this.table_name = table_name;
    return this;
  }

  public void unsetTable_name() {
    this.table_name = null;
  }

  /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_name() {
    return this.table_name != null;
  }

  public void setTable_nameIsSet(boolean value) {
    if (!value) {
      this.table_name = null;
    }
  }

  public String getUri() {
    return this.uri;
  }

  public TPrivilege setUri(String uri) {
    this.uri = uri;
    return this;
  }

  public void unsetUri() {
    this.uri = null;
  }

  /** Returns true if field uri is set (has been assigned a value) and false otherwise */
  public boolean isSetUri() {
    return this.uri != null;
  }

  public void setUriIsSet(boolean value) {
    if (!value) {
      this.uri = null;
    }
  }

  public long getCreate_time_ms() {
    return this.create_time_ms;
  }

  public TPrivilege setCreate_time_ms(long create_time_ms) {
    this.create_time_ms = create_time_ms;
    setCreate_time_msIsSet(true);
    return this;
  }

  public void unsetCreate_time_ms() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATE_TIME_MS_ISSET_ID);
  }

  /** Returns true if field create_time_ms is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_time_ms() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATE_TIME_MS_ISSET_ID);
  }

  public void setCreate_time_msIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATE_TIME_MS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRIVILEGE_NAME:
      if (value == null) {
        unsetPrivilege_name();
      } else {
        setPrivilege_name((String)value);
      }
      break;

    case PRIVILEGE_LEVEL:
      if (value == null) {
        unsetPrivilege_level();
      } else {
        setPrivilege_level((TPrivilegeLevel)value);
      }
      break;

    case SCOPE:
      if (value == null) {
        unsetScope();
      } else {
        setScope((TPrivilegeScope)value);
      }
      break;

    case HAS_GRANT_OPT:
      if (value == null) {
        unsetHas_grant_opt();
      } else {
        setHas_grant_opt((Boolean)value);
      }
      break;

    case ROLE_ID:
      if (value == null) {
        unsetRole_id();
      } else {
        setRole_id((Integer)value);
      }
      break;

    case SERVER_NAME:
      if (value == null) {
        unsetServer_name();
      } else {
        setServer_name((String)value);
      }
      break;

    case DB_NAME:
      if (value == null) {
        unsetDb_name();
      } else {
        setDb_name((String)value);
      }
      break;

    case TABLE_NAME:
      if (value == null) {
        unsetTable_name();
      } else {
        setTable_name((String)value);
      }
      break;

    case URI:
      if (value == null) {
        unsetUri();
      } else {
        setUri((String)value);
      }
      break;

    case CREATE_TIME_MS:
      if (value == null) {
        unsetCreate_time_ms();
      } else {
        setCreate_time_ms((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRIVILEGE_NAME:
      return getPrivilege_name();

    case PRIVILEGE_LEVEL:
      return getPrivilege_level();

    case SCOPE:
      return getScope();

    case HAS_GRANT_OPT:
      return Boolean.valueOf(isHas_grant_opt());

    case ROLE_ID:
      return Integer.valueOf(getRole_id());

    case SERVER_NAME:
      return getServer_name();

    case DB_NAME:
      return getDb_name();

    case TABLE_NAME:
      return getTable_name();

    case URI:
      return getUri();

    case CREATE_TIME_MS:
      return Long.valueOf(getCreate_time_ms());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRIVILEGE_NAME:
      return isSetPrivilege_name();
    case PRIVILEGE_LEVEL:
      return isSetPrivilege_level();
    case SCOPE:
      return isSetScope();
    case HAS_GRANT_OPT:
      return isSetHas_grant_opt();
    case ROLE_ID:
      return isSetRole_id();
    case SERVER_NAME:
      return isSetServer_name();
    case DB_NAME:
      return isSetDb_name();
    case TABLE_NAME:
      return isSetTable_name();
    case URI:
      return isSetUri();
    case CREATE_TIME_MS:
      return isSetCreate_time_ms();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPrivilege)
      return this.equals((TPrivilege)that);
    return false;
  }

  public boolean equals(TPrivilege that) {
    if (that == null)
      return false;

    boolean this_present_privilege_name = true && this.isSetPrivilege_name();
    boolean that_present_privilege_name = true && that.isSetPrivilege_name();
    if (this_present_privilege_name || that_present_privilege_name) {
      if (!(this_present_privilege_name && that_present_privilege_name))
        return false;
      if (!this.privilege_name.equals(that.privilege_name))
        return false;
    }

    boolean this_present_privilege_level = true && this.isSetPrivilege_level();
    boolean that_present_privilege_level = true && that.isSetPrivilege_level();
    if (this_present_privilege_level || that_present_privilege_level) {
      if (!(this_present_privilege_level && that_present_privilege_level))
        return false;
      if (!this.privilege_level.equals(that.privilege_level))
        return false;
    }

    boolean this_present_scope = true && this.isSetScope();
    boolean that_present_scope = true && that.isSetScope();
    if (this_present_scope || that_present_scope) {
      if (!(this_present_scope && that_present_scope))
        return false;
      if (!this.scope.equals(that.scope))
        return false;
    }

    boolean this_present_has_grant_opt = true;
    boolean that_present_has_grant_opt = true;
    if (this_present_has_grant_opt || that_present_has_grant_opt) {
      if (!(this_present_has_grant_opt && that_present_has_grant_opt))
        return false;
      if (this.has_grant_opt != that.has_grant_opt)
        return false;
    }

    boolean this_present_role_id = true && this.isSetRole_id();
    boolean that_present_role_id = true && that.isSetRole_id();
    if (this_present_role_id || that_present_role_id) {
      if (!(this_present_role_id && that_present_role_id))
        return false;
      if (this.role_id != that.role_id)
        return false;
    }

    boolean this_present_server_name = true && this.isSetServer_name();
    boolean that_present_server_name = true && that.isSetServer_name();
    if (this_present_server_name || that_present_server_name) {
      if (!(this_present_server_name && that_present_server_name))
        return false;
      if (!this.server_name.equals(that.server_name))
        return false;
    }

    boolean this_present_db_name = true && this.isSetDb_name();
    boolean that_present_db_name = true && that.isSetDb_name();
    if (this_present_db_name || that_present_db_name) {
      if (!(this_present_db_name && that_present_db_name))
        return false;
      if (!this.db_name.equals(that.db_name))
        return false;
    }

    boolean this_present_table_name = true && this.isSetTable_name();
    boolean that_present_table_name = true && that.isSetTable_name();
    if (this_present_table_name || that_present_table_name) {
      if (!(this_present_table_name && that_present_table_name))
        return false;
      if (!this.table_name.equals(that.table_name))
        return false;
    }

    boolean this_present_uri = true && this.isSetUri();
    boolean that_present_uri = true && that.isSetUri();
    if (this_present_uri || that_present_uri) {
      if (!(this_present_uri && that_present_uri))
        return false;
      if (!this.uri.equals(that.uri))
        return false;
    }

    boolean this_present_create_time_ms = true && this.isSetCreate_time_ms();
    boolean that_present_create_time_ms = true && that.isSetCreate_time_ms();
    if (this_present_create_time_ms || that_present_create_time_ms) {
      if (!(this_present_create_time_ms && that_present_create_time_ms))
        return false;
      if (this.create_time_ms != that.create_time_ms)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_privilege_name = true && (isSetPrivilege_name());
    builder.append(present_privilege_name);
    if (present_privilege_name)
      builder.append(privilege_name);

    boolean present_privilege_level = true && (isSetPrivilege_level());
    builder.append(present_privilege_level);
    if (present_privilege_level)
      builder.append(privilege_level.getValue());

    boolean present_scope = true && (isSetScope());
    builder.append(present_scope);
    if (present_scope)
      builder.append(scope.getValue());

    boolean present_has_grant_opt = true;
    builder.append(present_has_grant_opt);
    if (present_has_grant_opt)
      builder.append(has_grant_opt);

    boolean present_role_id = true && (isSetRole_id());
    builder.append(present_role_id);
    if (present_role_id)
      builder.append(role_id);

    boolean present_server_name = true && (isSetServer_name());
    builder.append(present_server_name);
    if (present_server_name)
      builder.append(server_name);

    boolean present_db_name = true && (isSetDb_name());
    builder.append(present_db_name);
    if (present_db_name)
      builder.append(db_name);

    boolean present_table_name = true && (isSetTable_name());
    builder.append(present_table_name);
    if (present_table_name)
      builder.append(table_name);

    boolean present_uri = true && (isSetUri());
    builder.append(present_uri);
    if (present_uri)
      builder.append(uri);

    boolean present_create_time_ms = true && (isSetCreate_time_ms());
    builder.append(present_create_time_ms);
    if (present_create_time_ms)
      builder.append(create_time_ms);

    return builder.toHashCode();
  }

  public int compareTo(TPrivilege other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TPrivilege typedOther = (TPrivilege)other;

    lastComparison = Boolean.valueOf(isSetPrivilege_name()).compareTo(typedOther.isSetPrivilege_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrivilege_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privilege_name, typedOther.privilege_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrivilege_level()).compareTo(typedOther.isSetPrivilege_level());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrivilege_level()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privilege_level, typedOther.privilege_level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScope()).compareTo(typedOther.isSetScope());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScope()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scope, typedOther.scope);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHas_grant_opt()).compareTo(typedOther.isSetHas_grant_opt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHas_grant_opt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.has_grant_opt, typedOther.has_grant_opt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRole_id()).compareTo(typedOther.isSetRole_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRole_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.role_id, typedOther.role_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServer_name()).compareTo(typedOther.isSetServer_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServer_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.server_name, typedOther.server_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDb_name()).compareTo(typedOther.isSetDb_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db_name, typedOther.db_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUri()).compareTo(typedOther.isSetUri());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUri()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uri, typedOther.uri);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreate_time_ms()).compareTo(typedOther.isSetCreate_time_ms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_time_ms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_time_ms, typedOther.create_time_ms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPrivilege(");
    boolean first = true;

    sb.append("privilege_name:");
    if (this.privilege_name == null) {
      sb.append("null");
    } else {
      sb.append(this.privilege_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("privilege_level:");
    if (this.privilege_level == null) {
      sb.append("null");
    } else {
      sb.append(this.privilege_level);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("scope:");
    if (this.scope == null) {
      sb.append("null");
    } else {
      sb.append(this.scope);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("has_grant_opt:");
    sb.append(this.has_grant_opt);
    first = false;
    if (isSetRole_id()) {
      if (!first) sb.append(", ");
      sb.append("role_id:");
      sb.append(this.role_id);
      first = false;
    }
    if (isSetServer_name()) {
      if (!first) sb.append(", ");
      sb.append("server_name:");
      if (this.server_name == null) {
        sb.append("null");
      } else {
        sb.append(this.server_name);
      }
      first = false;
    }
    if (isSetDb_name()) {
      if (!first) sb.append(", ");
      sb.append("db_name:");
      if (this.db_name == null) {
        sb.append("null");
      } else {
        sb.append(this.db_name);
      }
      first = false;
    }
    if (isSetTable_name()) {
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
    }
    if (isSetUri()) {
      if (!first) sb.append(", ");
      sb.append("uri:");
      if (this.uri == null) {
        sb.append("null");
      } else {
        sb.append(this.uri);
      }
      first = false;
    }
    if (isSetCreate_time_ms()) {
      if (!first) sb.append(", ");
      sb.append("create_time_ms:");
      sb.append(this.create_time_ms);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (privilege_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'privilege_name' was not present! Struct: " + toString());
    }
    if (privilege_level == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'privilege_level' was not present! Struct: " + toString());
    }
    if (scope == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'scope' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'has_grant_opt' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPrivilegeStandardSchemeFactory implements SchemeFactory {
    public TPrivilegeStandardScheme getScheme() {
      return new TPrivilegeStandardScheme();
    }
  }

  private static class TPrivilegeStandardScheme extends StandardScheme<TPrivilege> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPrivilege struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PRIVILEGE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.privilege_name = iprot.readString();
              struct.setPrivilege_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRIVILEGE_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.privilege_level = TPrivilegeLevel.findByValue(iprot.readI32());
              struct.setPrivilege_levelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SCOPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.scope = TPrivilegeScope.findByValue(iprot.readI32());
              struct.setScopeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HAS_GRANT_OPT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.has_grant_opt = iprot.readBool();
              struct.setHas_grant_optIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ROLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.role_id = iprot.readI32();
              struct.setRole_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SERVER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.server_name = iprot.readString();
              struct.setServer_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.db_name = iprot.readString();
              struct.setDb_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table_name = iprot.readString();
              struct.setTable_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // URI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uri = iprot.readString();
              struct.setUriIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CREATE_TIME_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.create_time_ms = iprot.readI64();
              struct.setCreate_time_msIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetHas_grant_opt()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'has_grant_opt' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPrivilege struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.privilege_name != null) {
        oprot.writeFieldBegin(PRIVILEGE_NAME_FIELD_DESC);
        oprot.writeString(struct.privilege_name);
        oprot.writeFieldEnd();
      }
      if (struct.privilege_level != null) {
        oprot.writeFieldBegin(PRIVILEGE_LEVEL_FIELD_DESC);
        oprot.writeI32(struct.privilege_level.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.scope != null) {
        oprot.writeFieldBegin(SCOPE_FIELD_DESC);
        oprot.writeI32(struct.scope.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HAS_GRANT_OPT_FIELD_DESC);
      oprot.writeBool(struct.has_grant_opt);
      oprot.writeFieldEnd();
      if (struct.isSetRole_id()) {
        oprot.writeFieldBegin(ROLE_ID_FIELD_DESC);
        oprot.writeI32(struct.role_id);
        oprot.writeFieldEnd();
      }
      if (struct.server_name != null) {
        if (struct.isSetServer_name()) {
          oprot.writeFieldBegin(SERVER_NAME_FIELD_DESC);
          oprot.writeString(struct.server_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.db_name != null) {
        if (struct.isSetDb_name()) {
          oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
          oprot.writeString(struct.db_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.table_name != null) {
        if (struct.isSetTable_name()) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.uri != null) {
        if (struct.isSetUri()) {
          oprot.writeFieldBegin(URI_FIELD_DESC);
          oprot.writeString(struct.uri);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreate_time_ms()) {
        oprot.writeFieldBegin(CREATE_TIME_MS_FIELD_DESC);
        oprot.writeI64(struct.create_time_ms);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPrivilegeTupleSchemeFactory implements SchemeFactory {
    public TPrivilegeTupleScheme getScheme() {
      return new TPrivilegeTupleScheme();
    }
  }

  private static class TPrivilegeTupleScheme extends TupleScheme<TPrivilege> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPrivilege struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.privilege_name);
      oprot.writeI32(struct.privilege_level.getValue());
      oprot.writeI32(struct.scope.getValue());
      oprot.writeBool(struct.has_grant_opt);
      BitSet optionals = new BitSet();
      if (struct.isSetRole_id()) {
        optionals.set(0);
      }
      if (struct.isSetServer_name()) {
        optionals.set(1);
      }
      if (struct.isSetDb_name()) {
        optionals.set(2);
      }
      if (struct.isSetTable_name()) {
        optionals.set(3);
      }
      if (struct.isSetUri()) {
        optionals.set(4);
      }
      if (struct.isSetCreate_time_ms()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetRole_id()) {
        oprot.writeI32(struct.role_id);
      }
      if (struct.isSetServer_name()) {
        oprot.writeString(struct.server_name);
      }
      if (struct.isSetDb_name()) {
        oprot.writeString(struct.db_name);
      }
      if (struct.isSetTable_name()) {
        oprot.writeString(struct.table_name);
      }
      if (struct.isSetUri()) {
        oprot.writeString(struct.uri);
      }
      if (struct.isSetCreate_time_ms()) {
        oprot.writeI64(struct.create_time_ms);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPrivilege struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.privilege_name = iprot.readString();
      struct.setPrivilege_nameIsSet(true);
      struct.privilege_level = TPrivilegeLevel.findByValue(iprot.readI32());
      struct.setPrivilege_levelIsSet(true);
      struct.scope = TPrivilegeScope.findByValue(iprot.readI32());
      struct.setScopeIsSet(true);
      struct.has_grant_opt = iprot.readBool();
      struct.setHas_grant_optIsSet(true);
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.role_id = iprot.readI32();
        struct.setRole_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.server_name = iprot.readString();
        struct.setServer_nameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.db_name = iprot.readString();
        struct.setDb_nameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.table_name = iprot.readString();
        struct.setTable_nameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.uri = iprot.readString();
        struct.setUriIsSet(true);
      }
      if (incoming.get(5)) {
        struct.create_time_ms = iprot.readI64();
        struct.setCreate_time_msIsSet(true);
      }
    }
  }

}

