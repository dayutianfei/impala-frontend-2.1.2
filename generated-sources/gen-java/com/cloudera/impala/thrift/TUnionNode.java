/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TUnionNode implements org.apache.thrift.TBase<TUnionNode, TUnionNode._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TUnionNode");

  private static final org.apache.thrift.protocol.TField TUPLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tuple_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField RESULT_EXPR_LISTS_FIELD_DESC = new org.apache.thrift.protocol.TField("result_expr_lists", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField CONST_EXPR_LISTS_FIELD_DESC = new org.apache.thrift.protocol.TField("const_expr_lists", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TUnionNodeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TUnionNodeTupleSchemeFactory());
  }

  public int tuple_id; // required
  public List<List<com.cloudera.impala.thrift.TExpr>> result_expr_lists; // required
  public List<List<com.cloudera.impala.thrift.TExpr>> const_expr_lists; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TUPLE_ID((short)1, "tuple_id"),
    RESULT_EXPR_LISTS((short)2, "result_expr_lists"),
    CONST_EXPR_LISTS((short)3, "const_expr_lists");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TUPLE_ID
          return TUPLE_ID;
        case 2: // RESULT_EXPR_LISTS
          return RESULT_EXPR_LISTS;
        case 3: // CONST_EXPR_LISTS
          return CONST_EXPR_LISTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TUPLE_ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TUPLE_ID, new org.apache.thrift.meta_data.FieldMetaData("tuple_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TTupleId")));
    tmpMap.put(_Fields.RESULT_EXPR_LISTS, new org.apache.thrift.meta_data.FieldMetaData("result_expr_lists", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TExpr.class)))));
    tmpMap.put(_Fields.CONST_EXPR_LISTS, new org.apache.thrift.meta_data.FieldMetaData("const_expr_lists", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TExpr.class)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TUnionNode.class, metaDataMap);
  }

  public TUnionNode() {
  }

  public TUnionNode(
    int tuple_id,
    List<List<com.cloudera.impala.thrift.TExpr>> result_expr_lists,
    List<List<com.cloudera.impala.thrift.TExpr>> const_expr_lists)
  {
    this();
    this.tuple_id = tuple_id;
    setTuple_idIsSet(true);
    this.result_expr_lists = result_expr_lists;
    this.const_expr_lists = const_expr_lists;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TUnionNode(TUnionNode other) {
    __isset_bitfield = other.__isset_bitfield;
    this.tuple_id = other.tuple_id;
    if (other.isSetResult_expr_lists()) {
      List<List<com.cloudera.impala.thrift.TExpr>> __this__result_expr_lists = new ArrayList<List<com.cloudera.impala.thrift.TExpr>>();
      for (List<com.cloudera.impala.thrift.TExpr> other_element : other.result_expr_lists) {
        List<com.cloudera.impala.thrift.TExpr> __this__result_expr_lists_copy = new ArrayList<com.cloudera.impala.thrift.TExpr>();
        for (com.cloudera.impala.thrift.TExpr other_element_element : other_element) {
          __this__result_expr_lists_copy.add(new com.cloudera.impala.thrift.TExpr(other_element_element));
        }
        __this__result_expr_lists.add(__this__result_expr_lists_copy);
      }
      this.result_expr_lists = __this__result_expr_lists;
    }
    if (other.isSetConst_expr_lists()) {
      List<List<com.cloudera.impala.thrift.TExpr>> __this__const_expr_lists = new ArrayList<List<com.cloudera.impala.thrift.TExpr>>();
      for (List<com.cloudera.impala.thrift.TExpr> other_element : other.const_expr_lists) {
        List<com.cloudera.impala.thrift.TExpr> __this__const_expr_lists_copy = new ArrayList<com.cloudera.impala.thrift.TExpr>();
        for (com.cloudera.impala.thrift.TExpr other_element_element : other_element) {
          __this__const_expr_lists_copy.add(new com.cloudera.impala.thrift.TExpr(other_element_element));
        }
        __this__const_expr_lists.add(__this__const_expr_lists_copy);
      }
      this.const_expr_lists = __this__const_expr_lists;
    }
  }

  public TUnionNode deepCopy() {
    return new TUnionNode(this);
  }

  @Override
  public void clear() {
    setTuple_idIsSet(false);
    this.tuple_id = 0;
    this.result_expr_lists = null;
    this.const_expr_lists = null;
  }

  public int getTuple_id() {
    return this.tuple_id;
  }

  public TUnionNode setTuple_id(int tuple_id) {
    this.tuple_id = tuple_id;
    setTuple_idIsSet(true);
    return this;
  }

  public void unsetTuple_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TUPLE_ID_ISSET_ID);
  }

  /** Returns true if field tuple_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTuple_id() {
    return EncodingUtils.testBit(__isset_bitfield, __TUPLE_ID_ISSET_ID);
  }

  public void setTuple_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TUPLE_ID_ISSET_ID, value);
  }

  public int getResult_expr_listsSize() {
    return (this.result_expr_lists == null) ? 0 : this.result_expr_lists.size();
  }

  public java.util.Iterator<List<com.cloudera.impala.thrift.TExpr>> getResult_expr_listsIterator() {
    return (this.result_expr_lists == null) ? null : this.result_expr_lists.iterator();
  }

  public void addToResult_expr_lists(List<com.cloudera.impala.thrift.TExpr> elem) {
    if (this.result_expr_lists == null) {
      this.result_expr_lists = new ArrayList<List<com.cloudera.impala.thrift.TExpr>>();
    }
    this.result_expr_lists.add(elem);
  }

  public List<List<com.cloudera.impala.thrift.TExpr>> getResult_expr_lists() {
    return this.result_expr_lists;
  }

  public TUnionNode setResult_expr_lists(List<List<com.cloudera.impala.thrift.TExpr>> result_expr_lists) {
    this.result_expr_lists = result_expr_lists;
    return this;
  }

  public void unsetResult_expr_lists() {
    this.result_expr_lists = null;
  }

  /** Returns true if field result_expr_lists is set (has been assigned a value) and false otherwise */
  public boolean isSetResult_expr_lists() {
    return this.result_expr_lists != null;
  }

  public void setResult_expr_listsIsSet(boolean value) {
    if (!value) {
      this.result_expr_lists = null;
    }
  }

  public int getConst_expr_listsSize() {
    return (this.const_expr_lists == null) ? 0 : this.const_expr_lists.size();
  }

  public java.util.Iterator<List<com.cloudera.impala.thrift.TExpr>> getConst_expr_listsIterator() {
    return (this.const_expr_lists == null) ? null : this.const_expr_lists.iterator();
  }

  public void addToConst_expr_lists(List<com.cloudera.impala.thrift.TExpr> elem) {
    if (this.const_expr_lists == null) {
      this.const_expr_lists = new ArrayList<List<com.cloudera.impala.thrift.TExpr>>();
    }
    this.const_expr_lists.add(elem);
  }

  public List<List<com.cloudera.impala.thrift.TExpr>> getConst_expr_lists() {
    return this.const_expr_lists;
  }

  public TUnionNode setConst_expr_lists(List<List<com.cloudera.impala.thrift.TExpr>> const_expr_lists) {
    this.const_expr_lists = const_expr_lists;
    return this;
  }

  public void unsetConst_expr_lists() {
    this.const_expr_lists = null;
  }

  /** Returns true if field const_expr_lists is set (has been assigned a value) and false otherwise */
  public boolean isSetConst_expr_lists() {
    return this.const_expr_lists != null;
  }

  public void setConst_expr_listsIsSet(boolean value) {
    if (!value) {
      this.const_expr_lists = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TUPLE_ID:
      if (value == null) {
        unsetTuple_id();
      } else {
        setTuple_id((Integer)value);
      }
      break;

    case RESULT_EXPR_LISTS:
      if (value == null) {
        unsetResult_expr_lists();
      } else {
        setResult_expr_lists((List<List<com.cloudera.impala.thrift.TExpr>>)value);
      }
      break;

    case CONST_EXPR_LISTS:
      if (value == null) {
        unsetConst_expr_lists();
      } else {
        setConst_expr_lists((List<List<com.cloudera.impala.thrift.TExpr>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TUPLE_ID:
      return Integer.valueOf(getTuple_id());

    case RESULT_EXPR_LISTS:
      return getResult_expr_lists();

    case CONST_EXPR_LISTS:
      return getConst_expr_lists();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TUPLE_ID:
      return isSetTuple_id();
    case RESULT_EXPR_LISTS:
      return isSetResult_expr_lists();
    case CONST_EXPR_LISTS:
      return isSetConst_expr_lists();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TUnionNode)
      return this.equals((TUnionNode)that);
    return false;
  }

  public boolean equals(TUnionNode that) {
    if (that == null)
      return false;

    boolean this_present_tuple_id = true;
    boolean that_present_tuple_id = true;
    if (this_present_tuple_id || that_present_tuple_id) {
      if (!(this_present_tuple_id && that_present_tuple_id))
        return false;
      if (this.tuple_id != that.tuple_id)
        return false;
    }

    boolean this_present_result_expr_lists = true && this.isSetResult_expr_lists();
    boolean that_present_result_expr_lists = true && that.isSetResult_expr_lists();
    if (this_present_result_expr_lists || that_present_result_expr_lists) {
      if (!(this_present_result_expr_lists && that_present_result_expr_lists))
        return false;
      if (!this.result_expr_lists.equals(that.result_expr_lists))
        return false;
    }

    boolean this_present_const_expr_lists = true && this.isSetConst_expr_lists();
    boolean that_present_const_expr_lists = true && that.isSetConst_expr_lists();
    if (this_present_const_expr_lists || that_present_const_expr_lists) {
      if (!(this_present_const_expr_lists && that_present_const_expr_lists))
        return false;
      if (!this.const_expr_lists.equals(that.const_expr_lists))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_tuple_id = true;
    builder.append(present_tuple_id);
    if (present_tuple_id)
      builder.append(tuple_id);

    boolean present_result_expr_lists = true && (isSetResult_expr_lists());
    builder.append(present_result_expr_lists);
    if (present_result_expr_lists)
      builder.append(result_expr_lists);

    boolean present_const_expr_lists = true && (isSetConst_expr_lists());
    builder.append(present_const_expr_lists);
    if (present_const_expr_lists)
      builder.append(const_expr_lists);

    return builder.toHashCode();
  }

  public int compareTo(TUnionNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TUnionNode typedOther = (TUnionNode)other;

    lastComparison = Boolean.valueOf(isSetTuple_id()).compareTo(typedOther.isSetTuple_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTuple_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tuple_id, typedOther.tuple_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResult_expr_lists()).compareTo(typedOther.isSetResult_expr_lists());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult_expr_lists()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result_expr_lists, typedOther.result_expr_lists);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConst_expr_lists()).compareTo(typedOther.isSetConst_expr_lists());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConst_expr_lists()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.const_expr_lists, typedOther.const_expr_lists);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TUnionNode(");
    boolean first = true;

    sb.append("tuple_id:");
    sb.append(this.tuple_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("result_expr_lists:");
    if (this.result_expr_lists == null) {
      sb.append("null");
    } else {
      sb.append(this.result_expr_lists);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("const_expr_lists:");
    if (this.const_expr_lists == null) {
      sb.append("null");
    } else {
      sb.append(this.const_expr_lists);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'tuple_id' because it's a primitive and you chose the non-beans generator.
    if (result_expr_lists == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'result_expr_lists' was not present! Struct: " + toString());
    }
    if (const_expr_lists == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'const_expr_lists' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TUnionNodeStandardSchemeFactory implements SchemeFactory {
    public TUnionNodeStandardScheme getScheme() {
      return new TUnionNodeStandardScheme();
    }
  }

  private static class TUnionNodeStandardScheme extends StandardScheme<TUnionNode> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TUnionNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TUPLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tuple_id = iprot.readI32();
              struct.setTuple_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESULT_EXPR_LISTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                struct.result_expr_lists = new ArrayList<List<com.cloudera.impala.thrift.TExpr>>(_list112.size);
                for (int _i113 = 0; _i113 < _list112.size; ++_i113)
                {
                  List<com.cloudera.impala.thrift.TExpr> _elem114; // required
                  {
                    org.apache.thrift.protocol.TList _list115 = iprot.readListBegin();
                    _elem114 = new ArrayList<com.cloudera.impala.thrift.TExpr>(_list115.size);
                    for (int _i116 = 0; _i116 < _list115.size; ++_i116)
                    {
                      com.cloudera.impala.thrift.TExpr _elem117; // required
                      _elem117 = new com.cloudera.impala.thrift.TExpr();
                      _elem117.read(iprot);
                      _elem114.add(_elem117);
                    }
                    iprot.readListEnd();
                  }
                  struct.result_expr_lists.add(_elem114);
                }
                iprot.readListEnd();
              }
              struct.setResult_expr_listsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONST_EXPR_LISTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list118 = iprot.readListBegin();
                struct.const_expr_lists = new ArrayList<List<com.cloudera.impala.thrift.TExpr>>(_list118.size);
                for (int _i119 = 0; _i119 < _list118.size; ++_i119)
                {
                  List<com.cloudera.impala.thrift.TExpr> _elem120; // required
                  {
                    org.apache.thrift.protocol.TList _list121 = iprot.readListBegin();
                    _elem120 = new ArrayList<com.cloudera.impala.thrift.TExpr>(_list121.size);
                    for (int _i122 = 0; _i122 < _list121.size; ++_i122)
                    {
                      com.cloudera.impala.thrift.TExpr _elem123; // required
                      _elem123 = new com.cloudera.impala.thrift.TExpr();
                      _elem123.read(iprot);
                      _elem120.add(_elem123);
                    }
                    iprot.readListEnd();
                  }
                  struct.const_expr_lists.add(_elem120);
                }
                iprot.readListEnd();
              }
              struct.setConst_expr_listsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTuple_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'tuple_id' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TUnionNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TUPLE_ID_FIELD_DESC);
      oprot.writeI32(struct.tuple_id);
      oprot.writeFieldEnd();
      if (struct.result_expr_lists != null) {
        oprot.writeFieldBegin(RESULT_EXPR_LISTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.result_expr_lists.size()));
          for (List<com.cloudera.impala.thrift.TExpr> _iter124 : struct.result_expr_lists)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter124.size()));
              for (com.cloudera.impala.thrift.TExpr _iter125 : _iter124)
              {
                _iter125.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.const_expr_lists != null) {
        oprot.writeFieldBegin(CONST_EXPR_LISTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.const_expr_lists.size()));
          for (List<com.cloudera.impala.thrift.TExpr> _iter126 : struct.const_expr_lists)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter126.size()));
              for (com.cloudera.impala.thrift.TExpr _iter127 : _iter126)
              {
                _iter127.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TUnionNodeTupleSchemeFactory implements SchemeFactory {
    public TUnionNodeTupleScheme getScheme() {
      return new TUnionNodeTupleScheme();
    }
  }

  private static class TUnionNodeTupleScheme extends TupleScheme<TUnionNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TUnionNode struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.tuple_id);
      {
        oprot.writeI32(struct.result_expr_lists.size());
        for (List<com.cloudera.impala.thrift.TExpr> _iter128 : struct.result_expr_lists)
        {
          {
            oprot.writeI32(_iter128.size());
            for (com.cloudera.impala.thrift.TExpr _iter129 : _iter128)
            {
              _iter129.write(oprot);
            }
          }
        }
      }
      {
        oprot.writeI32(struct.const_expr_lists.size());
        for (List<com.cloudera.impala.thrift.TExpr> _iter130 : struct.const_expr_lists)
        {
          {
            oprot.writeI32(_iter130.size());
            for (com.cloudera.impala.thrift.TExpr _iter131 : _iter130)
            {
              _iter131.write(oprot);
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TUnionNode struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.tuple_id = iprot.readI32();
      struct.setTuple_idIsSet(true);
      {
        org.apache.thrift.protocol.TList _list132 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
        struct.result_expr_lists = new ArrayList<List<com.cloudera.impala.thrift.TExpr>>(_list132.size);
        for (int _i133 = 0; _i133 < _list132.size; ++_i133)
        {
          List<com.cloudera.impala.thrift.TExpr> _elem134; // required
          {
            org.apache.thrift.protocol.TList _list135 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            _elem134 = new ArrayList<com.cloudera.impala.thrift.TExpr>(_list135.size);
            for (int _i136 = 0; _i136 < _list135.size; ++_i136)
            {
              com.cloudera.impala.thrift.TExpr _elem137; // required
              _elem137 = new com.cloudera.impala.thrift.TExpr();
              _elem137.read(iprot);
              _elem134.add(_elem137);
            }
          }
          struct.result_expr_lists.add(_elem134);
        }
      }
      struct.setResult_expr_listsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list138 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
        struct.const_expr_lists = new ArrayList<List<com.cloudera.impala.thrift.TExpr>>(_list138.size);
        for (int _i139 = 0; _i139 < _list138.size; ++_i139)
        {
          List<com.cloudera.impala.thrift.TExpr> _elem140; // required
          {
            org.apache.thrift.protocol.TList _list141 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            _elem140 = new ArrayList<com.cloudera.impala.thrift.TExpr>(_list141.size);
            for (int _i142 = 0; _i142 < _list141.size; ++_i142)
            {
              com.cloudera.impala.thrift.TExpr _elem143; // required
              _elem143 = new com.cloudera.impala.thrift.TExpr();
              _elem143.read(iprot);
              _elem140.add(_elem143);
            }
          }
          struct.const_expr_lists.add(_elem140);
        }
      }
      struct.setConst_expr_listsIsSet(true);
    }
  }

}

