/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TPoolConfigResult implements org.apache.thrift.TBase<TPoolConfigResult, TPoolConfigResult._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPoolConfigResult");

  private static final org.apache.thrift.protocol.TField MAX_REQUESTS_FIELD_DESC = new org.apache.thrift.protocol.TField("max_requests", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField MAX_QUEUED_FIELD_DESC = new org.apache.thrift.protocol.TField("max_queued", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField MEM_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("mem_limit", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPoolConfigResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPoolConfigResultTupleSchemeFactory());
  }

  public long max_requests; // required
  public long max_queued; // required
  public long mem_limit; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MAX_REQUESTS((short)1, "max_requests"),
    MAX_QUEUED((short)2, "max_queued"),
    MEM_LIMIT((short)3, "mem_limit");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MAX_REQUESTS
          return MAX_REQUESTS;
        case 2: // MAX_QUEUED
          return MAX_QUEUED;
        case 3: // MEM_LIMIT
          return MEM_LIMIT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MAX_REQUESTS_ISSET_ID = 0;
  private static final int __MAX_QUEUED_ISSET_ID = 1;
  private static final int __MEM_LIMIT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MAX_REQUESTS, new org.apache.thrift.meta_data.FieldMetaData("max_requests", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_QUEUED, new org.apache.thrift.meta_data.FieldMetaData("max_queued", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MEM_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("mem_limit", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPoolConfigResult.class, metaDataMap);
  }

  public TPoolConfigResult() {
  }

  public TPoolConfigResult(
    long max_requests,
    long max_queued,
    long mem_limit)
  {
    this();
    this.max_requests = max_requests;
    setMax_requestsIsSet(true);
    this.max_queued = max_queued;
    setMax_queuedIsSet(true);
    this.mem_limit = mem_limit;
    setMem_limitIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPoolConfigResult(TPoolConfigResult other) {
    __isset_bitfield = other.__isset_bitfield;
    this.max_requests = other.max_requests;
    this.max_queued = other.max_queued;
    this.mem_limit = other.mem_limit;
  }

  public TPoolConfigResult deepCopy() {
    return new TPoolConfigResult(this);
  }

  @Override
  public void clear() {
    setMax_requestsIsSet(false);
    this.max_requests = 0;
    setMax_queuedIsSet(false);
    this.max_queued = 0;
    setMem_limitIsSet(false);
    this.mem_limit = 0;
  }

  public long getMax_requests() {
    return this.max_requests;
  }

  public TPoolConfigResult setMax_requests(long max_requests) {
    this.max_requests = max_requests;
    setMax_requestsIsSet(true);
    return this;
  }

  public void unsetMax_requests() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_REQUESTS_ISSET_ID);
  }

  /** Returns true if field max_requests is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_requests() {
    return EncodingUtils.testBit(__isset_bitfield, __MAX_REQUESTS_ISSET_ID);
  }

  public void setMax_requestsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_REQUESTS_ISSET_ID, value);
  }

  public long getMax_queued() {
    return this.max_queued;
  }

  public TPoolConfigResult setMax_queued(long max_queued) {
    this.max_queued = max_queued;
    setMax_queuedIsSet(true);
    return this;
  }

  public void unsetMax_queued() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_QUEUED_ISSET_ID);
  }

  /** Returns true if field max_queued is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_queued() {
    return EncodingUtils.testBit(__isset_bitfield, __MAX_QUEUED_ISSET_ID);
  }

  public void setMax_queuedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_QUEUED_ISSET_ID, value);
  }

  public long getMem_limit() {
    return this.mem_limit;
  }

  public TPoolConfigResult setMem_limit(long mem_limit) {
    this.mem_limit = mem_limit;
    setMem_limitIsSet(true);
    return this;
  }

  public void unsetMem_limit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEM_LIMIT_ISSET_ID);
  }

  /** Returns true if field mem_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetMem_limit() {
    return EncodingUtils.testBit(__isset_bitfield, __MEM_LIMIT_ISSET_ID);
  }

  public void setMem_limitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEM_LIMIT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MAX_REQUESTS:
      if (value == null) {
        unsetMax_requests();
      } else {
        setMax_requests((Long)value);
      }
      break;

    case MAX_QUEUED:
      if (value == null) {
        unsetMax_queued();
      } else {
        setMax_queued((Long)value);
      }
      break;

    case MEM_LIMIT:
      if (value == null) {
        unsetMem_limit();
      } else {
        setMem_limit((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MAX_REQUESTS:
      return Long.valueOf(getMax_requests());

    case MAX_QUEUED:
      return Long.valueOf(getMax_queued());

    case MEM_LIMIT:
      return Long.valueOf(getMem_limit());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MAX_REQUESTS:
      return isSetMax_requests();
    case MAX_QUEUED:
      return isSetMax_queued();
    case MEM_LIMIT:
      return isSetMem_limit();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPoolConfigResult)
      return this.equals((TPoolConfigResult)that);
    return false;
  }

  public boolean equals(TPoolConfigResult that) {
    if (that == null)
      return false;

    boolean this_present_max_requests = true;
    boolean that_present_max_requests = true;
    if (this_present_max_requests || that_present_max_requests) {
      if (!(this_present_max_requests && that_present_max_requests))
        return false;
      if (this.max_requests != that.max_requests)
        return false;
    }

    boolean this_present_max_queued = true;
    boolean that_present_max_queued = true;
    if (this_present_max_queued || that_present_max_queued) {
      if (!(this_present_max_queued && that_present_max_queued))
        return false;
      if (this.max_queued != that.max_queued)
        return false;
    }

    boolean this_present_mem_limit = true;
    boolean that_present_mem_limit = true;
    if (this_present_mem_limit || that_present_mem_limit) {
      if (!(this_present_mem_limit && that_present_mem_limit))
        return false;
      if (this.mem_limit != that.mem_limit)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_max_requests = true;
    builder.append(present_max_requests);
    if (present_max_requests)
      builder.append(max_requests);

    boolean present_max_queued = true;
    builder.append(present_max_queued);
    if (present_max_queued)
      builder.append(max_queued);

    boolean present_mem_limit = true;
    builder.append(present_mem_limit);
    if (present_mem_limit)
      builder.append(mem_limit);

    return builder.toHashCode();
  }

  public int compareTo(TPoolConfigResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TPoolConfigResult typedOther = (TPoolConfigResult)other;

    lastComparison = Boolean.valueOf(isSetMax_requests()).compareTo(typedOther.isSetMax_requests());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_requests()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_requests, typedOther.max_requests);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax_queued()).compareTo(typedOther.isSetMax_queued());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_queued()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_queued, typedOther.max_queued);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMem_limit()).compareTo(typedOther.isSetMem_limit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMem_limit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mem_limit, typedOther.mem_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPoolConfigResult(");
    boolean first = true;

    sb.append("max_requests:");
    sb.append(this.max_requests);
    first = false;
    if (!first) sb.append(", ");
    sb.append("max_queued:");
    sb.append(this.max_queued);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mem_limit:");
    sb.append(this.mem_limit);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'max_requests' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'max_queued' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'mem_limit' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPoolConfigResultStandardSchemeFactory implements SchemeFactory {
    public TPoolConfigResultStandardScheme getScheme() {
      return new TPoolConfigResultStandardScheme();
    }
  }

  private static class TPoolConfigResultStandardScheme extends StandardScheme<TPoolConfigResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPoolConfigResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MAX_REQUESTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_requests = iprot.readI64();
              struct.setMax_requestsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MAX_QUEUED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_queued = iprot.readI64();
              struct.setMax_queuedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEM_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mem_limit = iprot.readI64();
              struct.setMem_limitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetMax_requests()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'max_requests' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMax_queued()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'max_queued' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMem_limit()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'mem_limit' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPoolConfigResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MAX_REQUESTS_FIELD_DESC);
      oprot.writeI64(struct.max_requests);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_QUEUED_FIELD_DESC);
      oprot.writeI64(struct.max_queued);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEM_LIMIT_FIELD_DESC);
      oprot.writeI64(struct.mem_limit);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPoolConfigResultTupleSchemeFactory implements SchemeFactory {
    public TPoolConfigResultTupleScheme getScheme() {
      return new TPoolConfigResultTupleScheme();
    }
  }

  private static class TPoolConfigResultTupleScheme extends TupleScheme<TPoolConfigResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPoolConfigResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.max_requests);
      oprot.writeI64(struct.max_queued);
      oprot.writeI64(struct.mem_limit);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPoolConfigResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.max_requests = iprot.readI64();
      struct.setMax_requestsIsSet(true);
      struct.max_queued = iprot.readI64();
      struct.setMax_queuedIsSet(true);
      struct.mem_limit = iprot.readI64();
      struct.setMem_limitIsSet(true);
    }
  }

}

