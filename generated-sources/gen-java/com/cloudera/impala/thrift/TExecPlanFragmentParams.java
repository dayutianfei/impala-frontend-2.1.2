/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TExecPlanFragmentParams implements org.apache.thrift.TBase<TExecPlanFragmentParams, TExecPlanFragmentParams._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TExecPlanFragmentParams");

  private static final org.apache.thrift.protocol.TField PROTOCOL_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("protocol_version", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FRAGMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("fragment", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField DESC_TBL_FIELD_DESC = new org.apache.thrift.protocol.TField("desc_tbl", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField FRAGMENT_INSTANCE_CTX_FIELD_DESC = new org.apache.thrift.protocol.TField("fragment_instance_ctx", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField RESERVED_RESOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("reserved_resource", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField LOCAL_RESOURCE_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("local_resource_address", org.apache.thrift.protocol.TType.STRUCT, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TExecPlanFragmentParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TExecPlanFragmentParamsTupleSchemeFactory());
  }

  /**
   * 
   * @see ImpalaInternalServiceVersion
   */
  public ImpalaInternalServiceVersion protocol_version; // required
  public com.cloudera.impala.thrift.TPlanFragment fragment; // optional
  public com.cloudera.impala.thrift.TDescriptorTable desc_tbl; // optional
  public TPlanFragmentExecParams params; // optional
  public TPlanFragmentInstanceCtx fragment_instance_ctx; // optional
  public com.cloudera.llama.thrift.TAllocatedResource reserved_resource; // optional
  public com.cloudera.impala.thrift.TNetworkAddress local_resource_address; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see ImpalaInternalServiceVersion
     */
    PROTOCOL_VERSION((short)1, "protocol_version"),
    FRAGMENT((short)2, "fragment"),
    DESC_TBL((short)3, "desc_tbl"),
    PARAMS((short)4, "params"),
    FRAGMENT_INSTANCE_CTX((short)5, "fragment_instance_ctx"),
    RESERVED_RESOURCE((short)6, "reserved_resource"),
    LOCAL_RESOURCE_ADDRESS((short)7, "local_resource_address");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROTOCOL_VERSION
          return PROTOCOL_VERSION;
        case 2: // FRAGMENT
          return FRAGMENT;
        case 3: // DESC_TBL
          return DESC_TBL;
        case 4: // PARAMS
          return PARAMS;
        case 5: // FRAGMENT_INSTANCE_CTX
          return FRAGMENT_INSTANCE_CTX;
        case 6: // RESERVED_RESOURCE
          return RESERVED_RESOURCE;
        case 7: // LOCAL_RESOURCE_ADDRESS
          return LOCAL_RESOURCE_ADDRESS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.FRAGMENT,_Fields.DESC_TBL,_Fields.PARAMS,_Fields.FRAGMENT_INSTANCE_CTX,_Fields.RESERVED_RESOURCE,_Fields.LOCAL_RESOURCE_ADDRESS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROTOCOL_VERSION, new org.apache.thrift.meta_data.FieldMetaData("protocol_version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ImpalaInternalServiceVersion.class)));
    tmpMap.put(_Fields.FRAGMENT, new org.apache.thrift.meta_data.FieldMetaData("fragment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TPlanFragment.class)));
    tmpMap.put(_Fields.DESC_TBL, new org.apache.thrift.meta_data.FieldMetaData("desc_tbl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TDescriptorTable.class)));
    tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPlanFragmentExecParams.class)));
    tmpMap.put(_Fields.FRAGMENT_INSTANCE_CTX, new org.apache.thrift.meta_data.FieldMetaData("fragment_instance_ctx", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPlanFragmentInstanceCtx.class)));
    tmpMap.put(_Fields.RESERVED_RESOURCE, new org.apache.thrift.meta_data.FieldMetaData("reserved_resource", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.llama.thrift.TAllocatedResource.class)));
    tmpMap.put(_Fields.LOCAL_RESOURCE_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("local_resource_address", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TNetworkAddress.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TExecPlanFragmentParams.class, metaDataMap);
  }

  public TExecPlanFragmentParams() {
  }

  public TExecPlanFragmentParams(
    ImpalaInternalServiceVersion protocol_version)
  {
    this();
    this.protocol_version = protocol_version;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TExecPlanFragmentParams(TExecPlanFragmentParams other) {
    if (other.isSetProtocol_version()) {
      this.protocol_version = other.protocol_version;
    }
    if (other.isSetFragment()) {
      this.fragment = new com.cloudera.impala.thrift.TPlanFragment(other.fragment);
    }
    if (other.isSetDesc_tbl()) {
      this.desc_tbl = new com.cloudera.impala.thrift.TDescriptorTable(other.desc_tbl);
    }
    if (other.isSetParams()) {
      this.params = new TPlanFragmentExecParams(other.params);
    }
    if (other.isSetFragment_instance_ctx()) {
      this.fragment_instance_ctx = new TPlanFragmentInstanceCtx(other.fragment_instance_ctx);
    }
    if (other.isSetReserved_resource()) {
      this.reserved_resource = new com.cloudera.llama.thrift.TAllocatedResource(other.reserved_resource);
    }
    if (other.isSetLocal_resource_address()) {
      this.local_resource_address = new com.cloudera.impala.thrift.TNetworkAddress(other.local_resource_address);
    }
  }

  public TExecPlanFragmentParams deepCopy() {
    return new TExecPlanFragmentParams(this);
  }

  @Override
  public void clear() {
    this.protocol_version = null;
    this.fragment = null;
    this.desc_tbl = null;
    this.params = null;
    this.fragment_instance_ctx = null;
    this.reserved_resource = null;
    this.local_resource_address = null;
  }

  /**
   * 
   * @see ImpalaInternalServiceVersion
   */
  public ImpalaInternalServiceVersion getProtocol_version() {
    return this.protocol_version;
  }

  /**
   * 
   * @see ImpalaInternalServiceVersion
   */
  public TExecPlanFragmentParams setProtocol_version(ImpalaInternalServiceVersion protocol_version) {
    this.protocol_version = protocol_version;
    return this;
  }

  public void unsetProtocol_version() {
    this.protocol_version = null;
  }

  /** Returns true if field protocol_version is set (has been assigned a value) and false otherwise */
  public boolean isSetProtocol_version() {
    return this.protocol_version != null;
  }

  public void setProtocol_versionIsSet(boolean value) {
    if (!value) {
      this.protocol_version = null;
    }
  }

  public com.cloudera.impala.thrift.TPlanFragment getFragment() {
    return this.fragment;
  }

  public TExecPlanFragmentParams setFragment(com.cloudera.impala.thrift.TPlanFragment fragment) {
    this.fragment = fragment;
    return this;
  }

  public void unsetFragment() {
    this.fragment = null;
  }

  /** Returns true if field fragment is set (has been assigned a value) and false otherwise */
  public boolean isSetFragment() {
    return this.fragment != null;
  }

  public void setFragmentIsSet(boolean value) {
    if (!value) {
      this.fragment = null;
    }
  }

  public com.cloudera.impala.thrift.TDescriptorTable getDesc_tbl() {
    return this.desc_tbl;
  }

  public TExecPlanFragmentParams setDesc_tbl(com.cloudera.impala.thrift.TDescriptorTable desc_tbl) {
    this.desc_tbl = desc_tbl;
    return this;
  }

  public void unsetDesc_tbl() {
    this.desc_tbl = null;
  }

  /** Returns true if field desc_tbl is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc_tbl() {
    return this.desc_tbl != null;
  }

  public void setDesc_tblIsSet(boolean value) {
    if (!value) {
      this.desc_tbl = null;
    }
  }

  public TPlanFragmentExecParams getParams() {
    return this.params;
  }

  public TExecPlanFragmentParams setParams(TPlanFragmentExecParams params) {
    this.params = params;
    return this;
  }

  public void unsetParams() {
    this.params = null;
  }

  /** Returns true if field params is set (has been assigned a value) and false otherwise */
  public boolean isSetParams() {
    return this.params != null;
  }

  public void setParamsIsSet(boolean value) {
    if (!value) {
      this.params = null;
    }
  }

  public TPlanFragmentInstanceCtx getFragment_instance_ctx() {
    return this.fragment_instance_ctx;
  }

  public TExecPlanFragmentParams setFragment_instance_ctx(TPlanFragmentInstanceCtx fragment_instance_ctx) {
    this.fragment_instance_ctx = fragment_instance_ctx;
    return this;
  }

  public void unsetFragment_instance_ctx() {
    this.fragment_instance_ctx = null;
  }

  /** Returns true if field fragment_instance_ctx is set (has been assigned a value) and false otherwise */
  public boolean isSetFragment_instance_ctx() {
    return this.fragment_instance_ctx != null;
  }

  public void setFragment_instance_ctxIsSet(boolean value) {
    if (!value) {
      this.fragment_instance_ctx = null;
    }
  }

  public com.cloudera.llama.thrift.TAllocatedResource getReserved_resource() {
    return this.reserved_resource;
  }

  public TExecPlanFragmentParams setReserved_resource(com.cloudera.llama.thrift.TAllocatedResource reserved_resource) {
    this.reserved_resource = reserved_resource;
    return this;
  }

  public void unsetReserved_resource() {
    this.reserved_resource = null;
  }

  /** Returns true if field reserved_resource is set (has been assigned a value) and false otherwise */
  public boolean isSetReserved_resource() {
    return this.reserved_resource != null;
  }

  public void setReserved_resourceIsSet(boolean value) {
    if (!value) {
      this.reserved_resource = null;
    }
  }

  public com.cloudera.impala.thrift.TNetworkAddress getLocal_resource_address() {
    return this.local_resource_address;
  }

  public TExecPlanFragmentParams setLocal_resource_address(com.cloudera.impala.thrift.TNetworkAddress local_resource_address) {
    this.local_resource_address = local_resource_address;
    return this;
  }

  public void unsetLocal_resource_address() {
    this.local_resource_address = null;
  }

  /** Returns true if field local_resource_address is set (has been assigned a value) and false otherwise */
  public boolean isSetLocal_resource_address() {
    return this.local_resource_address != null;
  }

  public void setLocal_resource_addressIsSet(boolean value) {
    if (!value) {
      this.local_resource_address = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROTOCOL_VERSION:
      if (value == null) {
        unsetProtocol_version();
      } else {
        setProtocol_version((ImpalaInternalServiceVersion)value);
      }
      break;

    case FRAGMENT:
      if (value == null) {
        unsetFragment();
      } else {
        setFragment((com.cloudera.impala.thrift.TPlanFragment)value);
      }
      break;

    case DESC_TBL:
      if (value == null) {
        unsetDesc_tbl();
      } else {
        setDesc_tbl((com.cloudera.impala.thrift.TDescriptorTable)value);
      }
      break;

    case PARAMS:
      if (value == null) {
        unsetParams();
      } else {
        setParams((TPlanFragmentExecParams)value);
      }
      break;

    case FRAGMENT_INSTANCE_CTX:
      if (value == null) {
        unsetFragment_instance_ctx();
      } else {
        setFragment_instance_ctx((TPlanFragmentInstanceCtx)value);
      }
      break;

    case RESERVED_RESOURCE:
      if (value == null) {
        unsetReserved_resource();
      } else {
        setReserved_resource((com.cloudera.llama.thrift.TAllocatedResource)value);
      }
      break;

    case LOCAL_RESOURCE_ADDRESS:
      if (value == null) {
        unsetLocal_resource_address();
      } else {
        setLocal_resource_address((com.cloudera.impala.thrift.TNetworkAddress)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROTOCOL_VERSION:
      return getProtocol_version();

    case FRAGMENT:
      return getFragment();

    case DESC_TBL:
      return getDesc_tbl();

    case PARAMS:
      return getParams();

    case FRAGMENT_INSTANCE_CTX:
      return getFragment_instance_ctx();

    case RESERVED_RESOURCE:
      return getReserved_resource();

    case LOCAL_RESOURCE_ADDRESS:
      return getLocal_resource_address();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROTOCOL_VERSION:
      return isSetProtocol_version();
    case FRAGMENT:
      return isSetFragment();
    case DESC_TBL:
      return isSetDesc_tbl();
    case PARAMS:
      return isSetParams();
    case FRAGMENT_INSTANCE_CTX:
      return isSetFragment_instance_ctx();
    case RESERVED_RESOURCE:
      return isSetReserved_resource();
    case LOCAL_RESOURCE_ADDRESS:
      return isSetLocal_resource_address();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TExecPlanFragmentParams)
      return this.equals((TExecPlanFragmentParams)that);
    return false;
  }

  public boolean equals(TExecPlanFragmentParams that) {
    if (that == null)
      return false;

    boolean this_present_protocol_version = true && this.isSetProtocol_version();
    boolean that_present_protocol_version = true && that.isSetProtocol_version();
    if (this_present_protocol_version || that_present_protocol_version) {
      if (!(this_present_protocol_version && that_present_protocol_version))
        return false;
      if (!this.protocol_version.equals(that.protocol_version))
        return false;
    }

    boolean this_present_fragment = true && this.isSetFragment();
    boolean that_present_fragment = true && that.isSetFragment();
    if (this_present_fragment || that_present_fragment) {
      if (!(this_present_fragment && that_present_fragment))
        return false;
      if (!this.fragment.equals(that.fragment))
        return false;
    }

    boolean this_present_desc_tbl = true && this.isSetDesc_tbl();
    boolean that_present_desc_tbl = true && that.isSetDesc_tbl();
    if (this_present_desc_tbl || that_present_desc_tbl) {
      if (!(this_present_desc_tbl && that_present_desc_tbl))
        return false;
      if (!this.desc_tbl.equals(that.desc_tbl))
        return false;
    }

    boolean this_present_params = true && this.isSetParams();
    boolean that_present_params = true && that.isSetParams();
    if (this_present_params || that_present_params) {
      if (!(this_present_params && that_present_params))
        return false;
      if (!this.params.equals(that.params))
        return false;
    }

    boolean this_present_fragment_instance_ctx = true && this.isSetFragment_instance_ctx();
    boolean that_present_fragment_instance_ctx = true && that.isSetFragment_instance_ctx();
    if (this_present_fragment_instance_ctx || that_present_fragment_instance_ctx) {
      if (!(this_present_fragment_instance_ctx && that_present_fragment_instance_ctx))
        return false;
      if (!this.fragment_instance_ctx.equals(that.fragment_instance_ctx))
        return false;
    }

    boolean this_present_reserved_resource = true && this.isSetReserved_resource();
    boolean that_present_reserved_resource = true && that.isSetReserved_resource();
    if (this_present_reserved_resource || that_present_reserved_resource) {
      if (!(this_present_reserved_resource && that_present_reserved_resource))
        return false;
      if (!this.reserved_resource.equals(that.reserved_resource))
        return false;
    }

    boolean this_present_local_resource_address = true && this.isSetLocal_resource_address();
    boolean that_present_local_resource_address = true && that.isSetLocal_resource_address();
    if (this_present_local_resource_address || that_present_local_resource_address) {
      if (!(this_present_local_resource_address && that_present_local_resource_address))
        return false;
      if (!this.local_resource_address.equals(that.local_resource_address))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_protocol_version = true && (isSetProtocol_version());
    builder.append(present_protocol_version);
    if (present_protocol_version)
      builder.append(protocol_version.getValue());

    boolean present_fragment = true && (isSetFragment());
    builder.append(present_fragment);
    if (present_fragment)
      builder.append(fragment);

    boolean present_desc_tbl = true && (isSetDesc_tbl());
    builder.append(present_desc_tbl);
    if (present_desc_tbl)
      builder.append(desc_tbl);

    boolean present_params = true && (isSetParams());
    builder.append(present_params);
    if (present_params)
      builder.append(params);

    boolean present_fragment_instance_ctx = true && (isSetFragment_instance_ctx());
    builder.append(present_fragment_instance_ctx);
    if (present_fragment_instance_ctx)
      builder.append(fragment_instance_ctx);

    boolean present_reserved_resource = true && (isSetReserved_resource());
    builder.append(present_reserved_resource);
    if (present_reserved_resource)
      builder.append(reserved_resource);

    boolean present_local_resource_address = true && (isSetLocal_resource_address());
    builder.append(present_local_resource_address);
    if (present_local_resource_address)
      builder.append(local_resource_address);

    return builder.toHashCode();
  }

  public int compareTo(TExecPlanFragmentParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TExecPlanFragmentParams typedOther = (TExecPlanFragmentParams)other;

    lastComparison = Boolean.valueOf(isSetProtocol_version()).compareTo(typedOther.isSetProtocol_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtocol_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocol_version, typedOther.protocol_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFragment()).compareTo(typedOther.isSetFragment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFragment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fragment, typedOther.fragment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc_tbl()).compareTo(typedOther.isSetDesc_tbl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc_tbl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc_tbl, typedOther.desc_tbl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParams()).compareTo(typedOther.isSetParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, typedOther.params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFragment_instance_ctx()).compareTo(typedOther.isSetFragment_instance_ctx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFragment_instance_ctx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fragment_instance_ctx, typedOther.fragment_instance_ctx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReserved_resource()).compareTo(typedOther.isSetReserved_resource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReserved_resource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reserved_resource, typedOther.reserved_resource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocal_resource_address()).compareTo(typedOther.isSetLocal_resource_address());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocal_resource_address()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.local_resource_address, typedOther.local_resource_address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TExecPlanFragmentParams(");
    boolean first = true;

    sb.append("protocol_version:");
    if (this.protocol_version == null) {
      sb.append("null");
    } else {
      sb.append(this.protocol_version);
    }
    first = false;
    if (isSetFragment()) {
      if (!first) sb.append(", ");
      sb.append("fragment:");
      if (this.fragment == null) {
        sb.append("null");
      } else {
        sb.append(this.fragment);
      }
      first = false;
    }
    if (isSetDesc_tbl()) {
      if (!first) sb.append(", ");
      sb.append("desc_tbl:");
      if (this.desc_tbl == null) {
        sb.append("null");
      } else {
        sb.append(this.desc_tbl);
      }
      first = false;
    }
    if (isSetParams()) {
      if (!first) sb.append(", ");
      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
    }
    if (isSetFragment_instance_ctx()) {
      if (!first) sb.append(", ");
      sb.append("fragment_instance_ctx:");
      if (this.fragment_instance_ctx == null) {
        sb.append("null");
      } else {
        sb.append(this.fragment_instance_ctx);
      }
      first = false;
    }
    if (isSetReserved_resource()) {
      if (!first) sb.append(", ");
      sb.append("reserved_resource:");
      if (this.reserved_resource == null) {
        sb.append("null");
      } else {
        sb.append(this.reserved_resource);
      }
      first = false;
    }
    if (isSetLocal_resource_address()) {
      if (!first) sb.append(", ");
      sb.append("local_resource_address:");
      if (this.local_resource_address == null) {
        sb.append("null");
      } else {
        sb.append(this.local_resource_address);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (protocol_version == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'protocol_version' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (fragment != null) {
      fragment.validate();
    }
    if (desc_tbl != null) {
      desc_tbl.validate();
    }
    if (params != null) {
      params.validate();
    }
    if (fragment_instance_ctx != null) {
      fragment_instance_ctx.validate();
    }
    if (reserved_resource != null) {
      reserved_resource.validate();
    }
    if (local_resource_address != null) {
      local_resource_address.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TExecPlanFragmentParamsStandardSchemeFactory implements SchemeFactory {
    public TExecPlanFragmentParamsStandardScheme getScheme() {
      return new TExecPlanFragmentParamsStandardScheme();
    }
  }

  private static class TExecPlanFragmentParamsStandardScheme extends StandardScheme<TExecPlanFragmentParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TExecPlanFragmentParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROTOCOL_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.protocol_version = ImpalaInternalServiceVersion.findByValue(iprot.readI32());
              struct.setProtocol_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FRAGMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fragment = new com.cloudera.impala.thrift.TPlanFragment();
              struct.fragment.read(iprot);
              struct.setFragmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESC_TBL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.desc_tbl = new com.cloudera.impala.thrift.TDescriptorTable();
              struct.desc_tbl.read(iprot);
              struct.setDesc_tblIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.params = new TPlanFragmentExecParams();
              struct.params.read(iprot);
              struct.setParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FRAGMENT_INSTANCE_CTX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fragment_instance_ctx = new TPlanFragmentInstanceCtx();
              struct.fragment_instance_ctx.read(iprot);
              struct.setFragment_instance_ctxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RESERVED_RESOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.reserved_resource = new com.cloudera.llama.thrift.TAllocatedResource();
              struct.reserved_resource.read(iprot);
              struct.setReserved_resourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LOCAL_RESOURCE_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.local_resource_address = new com.cloudera.impala.thrift.TNetworkAddress();
              struct.local_resource_address.read(iprot);
              struct.setLocal_resource_addressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TExecPlanFragmentParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.protocol_version != null) {
        oprot.writeFieldBegin(PROTOCOL_VERSION_FIELD_DESC);
        oprot.writeI32(struct.protocol_version.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.fragment != null) {
        if (struct.isSetFragment()) {
          oprot.writeFieldBegin(FRAGMENT_FIELD_DESC);
          struct.fragment.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.desc_tbl != null) {
        if (struct.isSetDesc_tbl()) {
          oprot.writeFieldBegin(DESC_TBL_FIELD_DESC);
          struct.desc_tbl.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.params != null) {
        if (struct.isSetParams()) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          struct.params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fragment_instance_ctx != null) {
        if (struct.isSetFragment_instance_ctx()) {
          oprot.writeFieldBegin(FRAGMENT_INSTANCE_CTX_FIELD_DESC);
          struct.fragment_instance_ctx.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.reserved_resource != null) {
        if (struct.isSetReserved_resource()) {
          oprot.writeFieldBegin(RESERVED_RESOURCE_FIELD_DESC);
          struct.reserved_resource.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.local_resource_address != null) {
        if (struct.isSetLocal_resource_address()) {
          oprot.writeFieldBegin(LOCAL_RESOURCE_ADDRESS_FIELD_DESC);
          struct.local_resource_address.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TExecPlanFragmentParamsTupleSchemeFactory implements SchemeFactory {
    public TExecPlanFragmentParamsTupleScheme getScheme() {
      return new TExecPlanFragmentParamsTupleScheme();
    }
  }

  private static class TExecPlanFragmentParamsTupleScheme extends TupleScheme<TExecPlanFragmentParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TExecPlanFragmentParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.protocol_version.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetFragment()) {
        optionals.set(0);
      }
      if (struct.isSetDesc_tbl()) {
        optionals.set(1);
      }
      if (struct.isSetParams()) {
        optionals.set(2);
      }
      if (struct.isSetFragment_instance_ctx()) {
        optionals.set(3);
      }
      if (struct.isSetReserved_resource()) {
        optionals.set(4);
      }
      if (struct.isSetLocal_resource_address()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetFragment()) {
        struct.fragment.write(oprot);
      }
      if (struct.isSetDesc_tbl()) {
        struct.desc_tbl.write(oprot);
      }
      if (struct.isSetParams()) {
        struct.params.write(oprot);
      }
      if (struct.isSetFragment_instance_ctx()) {
        struct.fragment_instance_ctx.write(oprot);
      }
      if (struct.isSetReserved_resource()) {
        struct.reserved_resource.write(oprot);
      }
      if (struct.isSetLocal_resource_address()) {
        struct.local_resource_address.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TExecPlanFragmentParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.protocol_version = ImpalaInternalServiceVersion.findByValue(iprot.readI32());
      struct.setProtocol_versionIsSet(true);
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.fragment = new com.cloudera.impala.thrift.TPlanFragment();
        struct.fragment.read(iprot);
        struct.setFragmentIsSet(true);
      }
      if (incoming.get(1)) {
        struct.desc_tbl = new com.cloudera.impala.thrift.TDescriptorTable();
        struct.desc_tbl.read(iprot);
        struct.setDesc_tblIsSet(true);
      }
      if (incoming.get(2)) {
        struct.params = new TPlanFragmentExecParams();
        struct.params.read(iprot);
        struct.setParamsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.fragment_instance_ctx = new TPlanFragmentInstanceCtx();
        struct.fragment_instance_ctx.read(iprot);
        struct.setFragment_instance_ctxIsSet(true);
      }
      if (incoming.get(4)) {
        struct.reserved_resource = new com.cloudera.llama.thrift.TAllocatedResource();
        struct.reserved_resource.read(iprot);
        struct.setReserved_resourceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.local_resource_address = new com.cloudera.impala.thrift.TNetworkAddress();
        struct.local_resource_address.read(iprot);
        struct.setLocal_resource_addressIsSet(true);
      }
    }
  }

}

