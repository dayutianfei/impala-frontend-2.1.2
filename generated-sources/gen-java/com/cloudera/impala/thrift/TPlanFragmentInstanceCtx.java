/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TPlanFragmentInstanceCtx implements org.apache.thrift.TBase<TPlanFragmentInstanceCtx, TPlanFragmentInstanceCtx._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPlanFragmentInstanceCtx");

  private static final org.apache.thrift.protocol.TField QUERY_CTX_FIELD_DESC = new org.apache.thrift.protocol.TField("query_ctx", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField FRAGMENT_INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fragment_instance_id", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField FRAGMENT_INSTANCE_IDX_FIELD_DESC = new org.apache.thrift.protocol.TField("fragment_instance_idx", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField NUM_FRAGMENT_INSTANCES_FIELD_DESC = new org.apache.thrift.protocol.TField("num_fragment_instances", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField BACKEND_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("backend_num", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPlanFragmentInstanceCtxStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPlanFragmentInstanceCtxTupleSchemeFactory());
  }

  public TQueryCtx query_ctx; // required
  public com.cloudera.impala.thrift.TUniqueId fragment_instance_id; // required
  public int fragment_instance_idx; // required
  public int num_fragment_instances; // required
  public int backend_num; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    QUERY_CTX((short)1, "query_ctx"),
    FRAGMENT_INSTANCE_ID((short)2, "fragment_instance_id"),
    FRAGMENT_INSTANCE_IDX((short)3, "fragment_instance_idx"),
    NUM_FRAGMENT_INSTANCES((short)4, "num_fragment_instances"),
    BACKEND_NUM((short)5, "backend_num");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUERY_CTX
          return QUERY_CTX;
        case 2: // FRAGMENT_INSTANCE_ID
          return FRAGMENT_INSTANCE_ID;
        case 3: // FRAGMENT_INSTANCE_IDX
          return FRAGMENT_INSTANCE_IDX;
        case 4: // NUM_FRAGMENT_INSTANCES
          return NUM_FRAGMENT_INSTANCES;
        case 5: // BACKEND_NUM
          return BACKEND_NUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FRAGMENT_INSTANCE_IDX_ISSET_ID = 0;
  private static final int __NUM_FRAGMENT_INSTANCES_ISSET_ID = 1;
  private static final int __BACKEND_NUM_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUERY_CTX, new org.apache.thrift.meta_data.FieldMetaData("query_ctx", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TQueryCtx.class)));
    tmpMap.put(_Fields.FRAGMENT_INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("fragment_instance_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TUniqueId.class)));
    tmpMap.put(_Fields.FRAGMENT_INSTANCE_IDX, new org.apache.thrift.meta_data.FieldMetaData("fragment_instance_idx", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_FRAGMENT_INSTANCES, new org.apache.thrift.meta_data.FieldMetaData("num_fragment_instances", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BACKEND_NUM, new org.apache.thrift.meta_data.FieldMetaData("backend_num", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPlanFragmentInstanceCtx.class, metaDataMap);
  }

  public TPlanFragmentInstanceCtx() {
  }

  public TPlanFragmentInstanceCtx(
    TQueryCtx query_ctx,
    com.cloudera.impala.thrift.TUniqueId fragment_instance_id,
    int fragment_instance_idx,
    int num_fragment_instances,
    int backend_num)
  {
    this();
    this.query_ctx = query_ctx;
    this.fragment_instance_id = fragment_instance_id;
    this.fragment_instance_idx = fragment_instance_idx;
    setFragment_instance_idxIsSet(true);
    this.num_fragment_instances = num_fragment_instances;
    setNum_fragment_instancesIsSet(true);
    this.backend_num = backend_num;
    setBackend_numIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPlanFragmentInstanceCtx(TPlanFragmentInstanceCtx other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetQuery_ctx()) {
      this.query_ctx = new TQueryCtx(other.query_ctx);
    }
    if (other.isSetFragment_instance_id()) {
      this.fragment_instance_id = new com.cloudera.impala.thrift.TUniqueId(other.fragment_instance_id);
    }
    this.fragment_instance_idx = other.fragment_instance_idx;
    this.num_fragment_instances = other.num_fragment_instances;
    this.backend_num = other.backend_num;
  }

  public TPlanFragmentInstanceCtx deepCopy() {
    return new TPlanFragmentInstanceCtx(this);
  }

  @Override
  public void clear() {
    this.query_ctx = null;
    this.fragment_instance_id = null;
    setFragment_instance_idxIsSet(false);
    this.fragment_instance_idx = 0;
    setNum_fragment_instancesIsSet(false);
    this.num_fragment_instances = 0;
    setBackend_numIsSet(false);
    this.backend_num = 0;
  }

  public TQueryCtx getQuery_ctx() {
    return this.query_ctx;
  }

  public TPlanFragmentInstanceCtx setQuery_ctx(TQueryCtx query_ctx) {
    this.query_ctx = query_ctx;
    return this;
  }

  public void unsetQuery_ctx() {
    this.query_ctx = null;
  }

  /** Returns true if field query_ctx is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_ctx() {
    return this.query_ctx != null;
  }

  public void setQuery_ctxIsSet(boolean value) {
    if (!value) {
      this.query_ctx = null;
    }
  }

  public com.cloudera.impala.thrift.TUniqueId getFragment_instance_id() {
    return this.fragment_instance_id;
  }

  public TPlanFragmentInstanceCtx setFragment_instance_id(com.cloudera.impala.thrift.TUniqueId fragment_instance_id) {
    this.fragment_instance_id = fragment_instance_id;
    return this;
  }

  public void unsetFragment_instance_id() {
    this.fragment_instance_id = null;
  }

  /** Returns true if field fragment_instance_id is set (has been assigned a value) and false otherwise */
  public boolean isSetFragment_instance_id() {
    return this.fragment_instance_id != null;
  }

  public void setFragment_instance_idIsSet(boolean value) {
    if (!value) {
      this.fragment_instance_id = null;
    }
  }

  public int getFragment_instance_idx() {
    return this.fragment_instance_idx;
  }

  public TPlanFragmentInstanceCtx setFragment_instance_idx(int fragment_instance_idx) {
    this.fragment_instance_idx = fragment_instance_idx;
    setFragment_instance_idxIsSet(true);
    return this;
  }

  public void unsetFragment_instance_idx() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FRAGMENT_INSTANCE_IDX_ISSET_ID);
  }

  /** Returns true if field fragment_instance_idx is set (has been assigned a value) and false otherwise */
  public boolean isSetFragment_instance_idx() {
    return EncodingUtils.testBit(__isset_bitfield, __FRAGMENT_INSTANCE_IDX_ISSET_ID);
  }

  public void setFragment_instance_idxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FRAGMENT_INSTANCE_IDX_ISSET_ID, value);
  }

  public int getNum_fragment_instances() {
    return this.num_fragment_instances;
  }

  public TPlanFragmentInstanceCtx setNum_fragment_instances(int num_fragment_instances) {
    this.num_fragment_instances = num_fragment_instances;
    setNum_fragment_instancesIsSet(true);
    return this;
  }

  public void unsetNum_fragment_instances() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_FRAGMENT_INSTANCES_ISSET_ID);
  }

  /** Returns true if field num_fragment_instances is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_fragment_instances() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_FRAGMENT_INSTANCES_ISSET_ID);
  }

  public void setNum_fragment_instancesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_FRAGMENT_INSTANCES_ISSET_ID, value);
  }

  public int getBackend_num() {
    return this.backend_num;
  }

  public TPlanFragmentInstanceCtx setBackend_num(int backend_num) {
    this.backend_num = backend_num;
    setBackend_numIsSet(true);
    return this;
  }

  public void unsetBackend_num() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BACKEND_NUM_ISSET_ID);
  }

  /** Returns true if field backend_num is set (has been assigned a value) and false otherwise */
  public boolean isSetBackend_num() {
    return EncodingUtils.testBit(__isset_bitfield, __BACKEND_NUM_ISSET_ID);
  }

  public void setBackend_numIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BACKEND_NUM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUERY_CTX:
      if (value == null) {
        unsetQuery_ctx();
      } else {
        setQuery_ctx((TQueryCtx)value);
      }
      break;

    case FRAGMENT_INSTANCE_ID:
      if (value == null) {
        unsetFragment_instance_id();
      } else {
        setFragment_instance_id((com.cloudera.impala.thrift.TUniqueId)value);
      }
      break;

    case FRAGMENT_INSTANCE_IDX:
      if (value == null) {
        unsetFragment_instance_idx();
      } else {
        setFragment_instance_idx((Integer)value);
      }
      break;

    case NUM_FRAGMENT_INSTANCES:
      if (value == null) {
        unsetNum_fragment_instances();
      } else {
        setNum_fragment_instances((Integer)value);
      }
      break;

    case BACKEND_NUM:
      if (value == null) {
        unsetBackend_num();
      } else {
        setBackend_num((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUERY_CTX:
      return getQuery_ctx();

    case FRAGMENT_INSTANCE_ID:
      return getFragment_instance_id();

    case FRAGMENT_INSTANCE_IDX:
      return Integer.valueOf(getFragment_instance_idx());

    case NUM_FRAGMENT_INSTANCES:
      return Integer.valueOf(getNum_fragment_instances());

    case BACKEND_NUM:
      return Integer.valueOf(getBackend_num());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case QUERY_CTX:
      return isSetQuery_ctx();
    case FRAGMENT_INSTANCE_ID:
      return isSetFragment_instance_id();
    case FRAGMENT_INSTANCE_IDX:
      return isSetFragment_instance_idx();
    case NUM_FRAGMENT_INSTANCES:
      return isSetNum_fragment_instances();
    case BACKEND_NUM:
      return isSetBackend_num();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPlanFragmentInstanceCtx)
      return this.equals((TPlanFragmentInstanceCtx)that);
    return false;
  }

  public boolean equals(TPlanFragmentInstanceCtx that) {
    if (that == null)
      return false;

    boolean this_present_query_ctx = true && this.isSetQuery_ctx();
    boolean that_present_query_ctx = true && that.isSetQuery_ctx();
    if (this_present_query_ctx || that_present_query_ctx) {
      if (!(this_present_query_ctx && that_present_query_ctx))
        return false;
      if (!this.query_ctx.equals(that.query_ctx))
        return false;
    }

    boolean this_present_fragment_instance_id = true && this.isSetFragment_instance_id();
    boolean that_present_fragment_instance_id = true && that.isSetFragment_instance_id();
    if (this_present_fragment_instance_id || that_present_fragment_instance_id) {
      if (!(this_present_fragment_instance_id && that_present_fragment_instance_id))
        return false;
      if (!this.fragment_instance_id.equals(that.fragment_instance_id))
        return false;
    }

    boolean this_present_fragment_instance_idx = true;
    boolean that_present_fragment_instance_idx = true;
    if (this_present_fragment_instance_idx || that_present_fragment_instance_idx) {
      if (!(this_present_fragment_instance_idx && that_present_fragment_instance_idx))
        return false;
      if (this.fragment_instance_idx != that.fragment_instance_idx)
        return false;
    }

    boolean this_present_num_fragment_instances = true;
    boolean that_present_num_fragment_instances = true;
    if (this_present_num_fragment_instances || that_present_num_fragment_instances) {
      if (!(this_present_num_fragment_instances && that_present_num_fragment_instances))
        return false;
      if (this.num_fragment_instances != that.num_fragment_instances)
        return false;
    }

    boolean this_present_backend_num = true;
    boolean that_present_backend_num = true;
    if (this_present_backend_num || that_present_backend_num) {
      if (!(this_present_backend_num && that_present_backend_num))
        return false;
      if (this.backend_num != that.backend_num)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_query_ctx = true && (isSetQuery_ctx());
    builder.append(present_query_ctx);
    if (present_query_ctx)
      builder.append(query_ctx);

    boolean present_fragment_instance_id = true && (isSetFragment_instance_id());
    builder.append(present_fragment_instance_id);
    if (present_fragment_instance_id)
      builder.append(fragment_instance_id);

    boolean present_fragment_instance_idx = true;
    builder.append(present_fragment_instance_idx);
    if (present_fragment_instance_idx)
      builder.append(fragment_instance_idx);

    boolean present_num_fragment_instances = true;
    builder.append(present_num_fragment_instances);
    if (present_num_fragment_instances)
      builder.append(num_fragment_instances);

    boolean present_backend_num = true;
    builder.append(present_backend_num);
    if (present_backend_num)
      builder.append(backend_num);

    return builder.toHashCode();
  }

  public int compareTo(TPlanFragmentInstanceCtx other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TPlanFragmentInstanceCtx typedOther = (TPlanFragmentInstanceCtx)other;

    lastComparison = Boolean.valueOf(isSetQuery_ctx()).compareTo(typedOther.isSetQuery_ctx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_ctx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_ctx, typedOther.query_ctx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFragment_instance_id()).compareTo(typedOther.isSetFragment_instance_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFragment_instance_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fragment_instance_id, typedOther.fragment_instance_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFragment_instance_idx()).compareTo(typedOther.isSetFragment_instance_idx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFragment_instance_idx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fragment_instance_idx, typedOther.fragment_instance_idx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_fragment_instances()).compareTo(typedOther.isSetNum_fragment_instances());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_fragment_instances()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_fragment_instances, typedOther.num_fragment_instances);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBackend_num()).compareTo(typedOther.isSetBackend_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackend_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backend_num, typedOther.backend_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPlanFragmentInstanceCtx(");
    boolean first = true;

    sb.append("query_ctx:");
    if (this.query_ctx == null) {
      sb.append("null");
    } else {
      sb.append(this.query_ctx);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fragment_instance_id:");
    if (this.fragment_instance_id == null) {
      sb.append("null");
    } else {
      sb.append(this.fragment_instance_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fragment_instance_idx:");
    sb.append(this.fragment_instance_idx);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_fragment_instances:");
    sb.append(this.num_fragment_instances);
    first = false;
    if (!first) sb.append(", ");
    sb.append("backend_num:");
    sb.append(this.backend_num);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (query_ctx == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'query_ctx' was not present! Struct: " + toString());
    }
    if (fragment_instance_id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fragment_instance_id' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'fragment_instance_idx' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'num_fragment_instances' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'backend_num' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (query_ctx != null) {
      query_ctx.validate();
    }
    if (fragment_instance_id != null) {
      fragment_instance_id.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPlanFragmentInstanceCtxStandardSchemeFactory implements SchemeFactory {
    public TPlanFragmentInstanceCtxStandardScheme getScheme() {
      return new TPlanFragmentInstanceCtxStandardScheme();
    }
  }

  private static class TPlanFragmentInstanceCtxStandardScheme extends StandardScheme<TPlanFragmentInstanceCtx> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPlanFragmentInstanceCtx struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // QUERY_CTX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query_ctx = new TQueryCtx();
              struct.query_ctx.read(iprot);
              struct.setQuery_ctxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FRAGMENT_INSTANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fragment_instance_id = new com.cloudera.impala.thrift.TUniqueId();
              struct.fragment_instance_id.read(iprot);
              struct.setFragment_instance_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FRAGMENT_INSTANCE_IDX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fragment_instance_idx = iprot.readI32();
              struct.setFragment_instance_idxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NUM_FRAGMENT_INSTANCES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_fragment_instances = iprot.readI32();
              struct.setNum_fragment_instancesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BACKEND_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.backend_num = iprot.readI32();
              struct.setBackend_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetFragment_instance_idx()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'fragment_instance_idx' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNum_fragment_instances()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'num_fragment_instances' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetBackend_num()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'backend_num' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPlanFragmentInstanceCtx struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.query_ctx != null) {
        oprot.writeFieldBegin(QUERY_CTX_FIELD_DESC);
        struct.query_ctx.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.fragment_instance_id != null) {
        oprot.writeFieldBegin(FRAGMENT_INSTANCE_ID_FIELD_DESC);
        struct.fragment_instance_id.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FRAGMENT_INSTANCE_IDX_FIELD_DESC);
      oprot.writeI32(struct.fragment_instance_idx);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_FRAGMENT_INSTANCES_FIELD_DESC);
      oprot.writeI32(struct.num_fragment_instances);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BACKEND_NUM_FIELD_DESC);
      oprot.writeI32(struct.backend_num);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPlanFragmentInstanceCtxTupleSchemeFactory implements SchemeFactory {
    public TPlanFragmentInstanceCtxTupleScheme getScheme() {
      return new TPlanFragmentInstanceCtxTupleScheme();
    }
  }

  private static class TPlanFragmentInstanceCtxTupleScheme extends TupleScheme<TPlanFragmentInstanceCtx> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPlanFragmentInstanceCtx struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.query_ctx.write(oprot);
      struct.fragment_instance_id.write(oprot);
      oprot.writeI32(struct.fragment_instance_idx);
      oprot.writeI32(struct.num_fragment_instances);
      oprot.writeI32(struct.backend_num);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPlanFragmentInstanceCtx struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.query_ctx = new TQueryCtx();
      struct.query_ctx.read(iprot);
      struct.setQuery_ctxIsSet(true);
      struct.fragment_instance_id = new com.cloudera.impala.thrift.TUniqueId();
      struct.fragment_instance_id.read(iprot);
      struct.setFragment_instance_idIsSet(true);
      struct.fragment_instance_idx = iprot.readI32();
      struct.setFragment_instance_idxIsSet(true);
      struct.num_fragment_instances = iprot.readI32();
      struct.setNum_fragment_instancesIsSet(true);
      struct.backend_num = iprot.readI32();
      struct.setBackend_numIsSet(true);
    }
  }

}

