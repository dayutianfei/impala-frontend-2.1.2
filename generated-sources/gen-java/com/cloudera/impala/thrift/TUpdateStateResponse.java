/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TUpdateStateResponse implements org.apache.thrift.TBase<TUpdateStateResponse, TUpdateStateResponse._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TUpdateStateResponse");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TOPIC_UPDATES_FIELD_DESC = new org.apache.thrift.protocol.TField("topic_updates", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField SKIPPED_FIELD_DESC = new org.apache.thrift.protocol.TField("skipped", org.apache.thrift.protocol.TType.BOOL, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TUpdateStateResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TUpdateStateResponseTupleSchemeFactory());
  }

  public com.cloudera.impala.thrift.TStatus status; // required
  public List<TTopicDelta> topic_updates; // required
  public boolean skipped; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATUS((short)1, "status"),
    TOPIC_UPDATES((short)2, "topic_updates"),
    SKIPPED((short)3, "skipped");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // TOPIC_UPDATES
          return TOPIC_UPDATES;
        case 3: // SKIPPED
          return SKIPPED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SKIPPED_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SKIPPED};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TStatus.class)));
    tmpMap.put(_Fields.TOPIC_UPDATES, new org.apache.thrift.meta_data.FieldMetaData("topic_updates", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTopicDelta.class))));
    tmpMap.put(_Fields.SKIPPED, new org.apache.thrift.meta_data.FieldMetaData("skipped", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TUpdateStateResponse.class, metaDataMap);
  }

  public TUpdateStateResponse() {
  }

  public TUpdateStateResponse(
    com.cloudera.impala.thrift.TStatus status,
    List<TTopicDelta> topic_updates)
  {
    this();
    this.status = status;
    this.topic_updates = topic_updates;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TUpdateStateResponse(TUpdateStateResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStatus()) {
      this.status = new com.cloudera.impala.thrift.TStatus(other.status);
    }
    if (other.isSetTopic_updates()) {
      List<TTopicDelta> __this__topic_updates = new ArrayList<TTopicDelta>();
      for (TTopicDelta other_element : other.topic_updates) {
        __this__topic_updates.add(new TTopicDelta(other_element));
      }
      this.topic_updates = __this__topic_updates;
    }
    this.skipped = other.skipped;
  }

  public TUpdateStateResponse deepCopy() {
    return new TUpdateStateResponse(this);
  }

  @Override
  public void clear() {
    this.status = null;
    this.topic_updates = null;
    setSkippedIsSet(false);
    this.skipped = false;
  }

  public com.cloudera.impala.thrift.TStatus getStatus() {
    return this.status;
  }

  public TUpdateStateResponse setStatus(com.cloudera.impala.thrift.TStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int getTopic_updatesSize() {
    return (this.topic_updates == null) ? 0 : this.topic_updates.size();
  }

  public java.util.Iterator<TTopicDelta> getTopic_updatesIterator() {
    return (this.topic_updates == null) ? null : this.topic_updates.iterator();
  }

  public void addToTopic_updates(TTopicDelta elem) {
    if (this.topic_updates == null) {
      this.topic_updates = new ArrayList<TTopicDelta>();
    }
    this.topic_updates.add(elem);
  }

  public List<TTopicDelta> getTopic_updates() {
    return this.topic_updates;
  }

  public TUpdateStateResponse setTopic_updates(List<TTopicDelta> topic_updates) {
    this.topic_updates = topic_updates;
    return this;
  }

  public void unsetTopic_updates() {
    this.topic_updates = null;
  }

  /** Returns true if field topic_updates is set (has been assigned a value) and false otherwise */
  public boolean isSetTopic_updates() {
    return this.topic_updates != null;
  }

  public void setTopic_updatesIsSet(boolean value) {
    if (!value) {
      this.topic_updates = null;
    }
  }

  public boolean isSkipped() {
    return this.skipped;
  }

  public TUpdateStateResponse setSkipped(boolean skipped) {
    this.skipped = skipped;
    setSkippedIsSet(true);
    return this;
  }

  public void unsetSkipped() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SKIPPED_ISSET_ID);
  }

  /** Returns true if field skipped is set (has been assigned a value) and false otherwise */
  public boolean isSetSkipped() {
    return EncodingUtils.testBit(__isset_bitfield, __SKIPPED_ISSET_ID);
  }

  public void setSkippedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SKIPPED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((com.cloudera.impala.thrift.TStatus)value);
      }
      break;

    case TOPIC_UPDATES:
      if (value == null) {
        unsetTopic_updates();
      } else {
        setTopic_updates((List<TTopicDelta>)value);
      }
      break;

    case SKIPPED:
      if (value == null) {
        unsetSkipped();
      } else {
        setSkipped((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return getStatus();

    case TOPIC_UPDATES:
      return getTopic_updates();

    case SKIPPED:
      return Boolean.valueOf(isSkipped());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case TOPIC_UPDATES:
      return isSetTopic_updates();
    case SKIPPED:
      return isSetSkipped();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TUpdateStateResponse)
      return this.equals((TUpdateStateResponse)that);
    return false;
  }

  public boolean equals(TUpdateStateResponse that) {
    if (that == null)
      return false;

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_topic_updates = true && this.isSetTopic_updates();
    boolean that_present_topic_updates = true && that.isSetTopic_updates();
    if (this_present_topic_updates || that_present_topic_updates) {
      if (!(this_present_topic_updates && that_present_topic_updates))
        return false;
      if (!this.topic_updates.equals(that.topic_updates))
        return false;
    }

    boolean this_present_skipped = true && this.isSetSkipped();
    boolean that_present_skipped = true && that.isSetSkipped();
    if (this_present_skipped || that_present_skipped) {
      if (!(this_present_skipped && that_present_skipped))
        return false;
      if (this.skipped != that.skipped)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_status = true && (isSetStatus());
    builder.append(present_status);
    if (present_status)
      builder.append(status);

    boolean present_topic_updates = true && (isSetTopic_updates());
    builder.append(present_topic_updates);
    if (present_topic_updates)
      builder.append(topic_updates);

    boolean present_skipped = true && (isSetSkipped());
    builder.append(present_skipped);
    if (present_skipped)
      builder.append(skipped);

    return builder.toHashCode();
  }

  public int compareTo(TUpdateStateResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TUpdateStateResponse typedOther = (TUpdateStateResponse)other;

    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopic_updates()).compareTo(typedOther.isSetTopic_updates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopic_updates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic_updates, typedOther.topic_updates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSkipped()).compareTo(typedOther.isSetSkipped());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkipped()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skipped, typedOther.skipped);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TUpdateStateResponse(");
    boolean first = true;

    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("topic_updates:");
    if (this.topic_updates == null) {
      sb.append("null");
    } else {
      sb.append(this.topic_updates);
    }
    first = false;
    if (isSetSkipped()) {
      if (!first) sb.append(", ");
      sb.append("skipped:");
      sb.append(this.skipped);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (status == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not present! Struct: " + toString());
    }
    if (topic_updates == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'topic_updates' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (status != null) {
      status.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TUpdateStateResponseStandardSchemeFactory implements SchemeFactory {
    public TUpdateStateResponseStandardScheme getScheme() {
      return new TUpdateStateResponseStandardScheme();
    }
  }

  private static class TUpdateStateResponseStandardScheme extends StandardScheme<TUpdateStateResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TUpdateStateResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.status = new com.cloudera.impala.thrift.TStatus();
              struct.status.read(iprot);
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOPIC_UPDATES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list34 = iprot.readListBegin();
                struct.topic_updates = new ArrayList<TTopicDelta>(_list34.size);
                for (int _i35 = 0; _i35 < _list34.size; ++_i35)
                {
                  TTopicDelta _elem36; // required
                  _elem36 = new TTopicDelta();
                  _elem36.read(iprot);
                  struct.topic_updates.add(_elem36);
                }
                iprot.readListEnd();
              }
              struct.setTopic_updatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SKIPPED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.skipped = iprot.readBool();
              struct.setSkippedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TUpdateStateResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        struct.status.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.topic_updates != null) {
        oprot.writeFieldBegin(TOPIC_UPDATES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.topic_updates.size()));
          for (TTopicDelta _iter37 : struct.topic_updates)
          {
            _iter37.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetSkipped()) {
        oprot.writeFieldBegin(SKIPPED_FIELD_DESC);
        oprot.writeBool(struct.skipped);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TUpdateStateResponseTupleSchemeFactory implements SchemeFactory {
    public TUpdateStateResponseTupleScheme getScheme() {
      return new TUpdateStateResponseTupleScheme();
    }
  }

  private static class TUpdateStateResponseTupleScheme extends TupleScheme<TUpdateStateResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TUpdateStateResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.status.write(oprot);
      {
        oprot.writeI32(struct.topic_updates.size());
        for (TTopicDelta _iter38 : struct.topic_updates)
        {
          _iter38.write(oprot);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetSkipped()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetSkipped()) {
        oprot.writeBool(struct.skipped);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TUpdateStateResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.status = new com.cloudera.impala.thrift.TStatus();
      struct.status.read(iprot);
      struct.setStatusIsSet(true);
      {
        org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.topic_updates = new ArrayList<TTopicDelta>(_list39.size);
        for (int _i40 = 0; _i40 < _list39.size; ++_i40)
        {
          TTopicDelta _elem41; // required
          _elem41 = new TTopicDelta();
          _elem41.read(iprot);
          struct.topic_updates.add(_elem41);
        }
      }
      struct.setTopic_updatesIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.skipped = iprot.readBool();
        struct.setSkippedIsSet(true);
      }
    }
  }

}

