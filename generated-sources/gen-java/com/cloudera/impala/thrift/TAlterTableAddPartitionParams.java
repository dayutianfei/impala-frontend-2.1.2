/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TAlterTableAddPartitionParams implements org.apache.thrift.TBase<TAlterTableAddPartitionParams, TAlterTableAddPartitionParams._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAlterTableAddPartitionParams");

  private static final org.apache.thrift.protocol.TField PARTITION_SPEC_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_spec", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField IF_NOT_EXISTS_FIELD_DESC = new org.apache.thrift.protocol.TField("if_not_exists", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CACHE_OP_FIELD_DESC = new org.apache.thrift.protocol.TField("cache_op", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TAlterTableAddPartitionParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TAlterTableAddPartitionParamsTupleSchemeFactory());
  }

  public List<com.cloudera.impala.thrift.TPartitionKeyValue> partition_spec; // required
  public boolean if_not_exists; // required
  public String location; // optional
  public THdfsCachingOp cache_op; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PARTITION_SPEC((short)1, "partition_spec"),
    IF_NOT_EXISTS((short)3, "if_not_exists"),
    LOCATION((short)2, "location"),
    CACHE_OP((short)4, "cache_op");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARTITION_SPEC
          return PARTITION_SPEC;
        case 3: // IF_NOT_EXISTS
          return IF_NOT_EXISTS;
        case 2: // LOCATION
          return LOCATION;
        case 4: // CACHE_OP
          return CACHE_OP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IF_NOT_EXISTS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.LOCATION,_Fields.CACHE_OP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARTITION_SPEC, new org.apache.thrift.meta_data.FieldMetaData("partition_spec", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TPartitionKeyValue.class))));
    tmpMap.put(_Fields.IF_NOT_EXISTS, new org.apache.thrift.meta_data.FieldMetaData("if_not_exists", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CACHE_OP, new org.apache.thrift.meta_data.FieldMetaData("cache_op", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THdfsCachingOp.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAlterTableAddPartitionParams.class, metaDataMap);
  }

  public TAlterTableAddPartitionParams() {
  }

  public TAlterTableAddPartitionParams(
    List<com.cloudera.impala.thrift.TPartitionKeyValue> partition_spec,
    boolean if_not_exists)
  {
    this();
    this.partition_spec = partition_spec;
    this.if_not_exists = if_not_exists;
    setIf_not_existsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAlterTableAddPartitionParams(TAlterTableAddPartitionParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPartition_spec()) {
      List<com.cloudera.impala.thrift.TPartitionKeyValue> __this__partition_spec = new ArrayList<com.cloudera.impala.thrift.TPartitionKeyValue>();
      for (com.cloudera.impala.thrift.TPartitionKeyValue other_element : other.partition_spec) {
        __this__partition_spec.add(new com.cloudera.impala.thrift.TPartitionKeyValue(other_element));
      }
      this.partition_spec = __this__partition_spec;
    }
    this.if_not_exists = other.if_not_exists;
    if (other.isSetLocation()) {
      this.location = other.location;
    }
    if (other.isSetCache_op()) {
      this.cache_op = new THdfsCachingOp(other.cache_op);
    }
  }

  public TAlterTableAddPartitionParams deepCopy() {
    return new TAlterTableAddPartitionParams(this);
  }

  @Override
  public void clear() {
    this.partition_spec = null;
    setIf_not_existsIsSet(false);
    this.if_not_exists = false;
    this.location = null;
    this.cache_op = null;
  }

  public int getPartition_specSize() {
    return (this.partition_spec == null) ? 0 : this.partition_spec.size();
  }

  public java.util.Iterator<com.cloudera.impala.thrift.TPartitionKeyValue> getPartition_specIterator() {
    return (this.partition_spec == null) ? null : this.partition_spec.iterator();
  }

  public void addToPartition_spec(com.cloudera.impala.thrift.TPartitionKeyValue elem) {
    if (this.partition_spec == null) {
      this.partition_spec = new ArrayList<com.cloudera.impala.thrift.TPartitionKeyValue>();
    }
    this.partition_spec.add(elem);
  }

  public List<com.cloudera.impala.thrift.TPartitionKeyValue> getPartition_spec() {
    return this.partition_spec;
  }

  public TAlterTableAddPartitionParams setPartition_spec(List<com.cloudera.impala.thrift.TPartitionKeyValue> partition_spec) {
    this.partition_spec = partition_spec;
    return this;
  }

  public void unsetPartition_spec() {
    this.partition_spec = null;
  }

  /** Returns true if field partition_spec is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_spec() {
    return this.partition_spec != null;
  }

  public void setPartition_specIsSet(boolean value) {
    if (!value) {
      this.partition_spec = null;
    }
  }

  public boolean isIf_not_exists() {
    return this.if_not_exists;
  }

  public TAlterTableAddPartitionParams setIf_not_exists(boolean if_not_exists) {
    this.if_not_exists = if_not_exists;
    setIf_not_existsIsSet(true);
    return this;
  }

  public void unsetIf_not_exists() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IF_NOT_EXISTS_ISSET_ID);
  }

  /** Returns true if field if_not_exists is set (has been assigned a value) and false otherwise */
  public boolean isSetIf_not_exists() {
    return EncodingUtils.testBit(__isset_bitfield, __IF_NOT_EXISTS_ISSET_ID);
  }

  public void setIf_not_existsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IF_NOT_EXISTS_ISSET_ID, value);
  }

  public String getLocation() {
    return this.location;
  }

  public TAlterTableAddPartitionParams setLocation(String location) {
    this.location = location;
    return this;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  public THdfsCachingOp getCache_op() {
    return this.cache_op;
  }

  public TAlterTableAddPartitionParams setCache_op(THdfsCachingOp cache_op) {
    this.cache_op = cache_op;
    return this;
  }

  public void unsetCache_op() {
    this.cache_op = null;
  }

  /** Returns true if field cache_op is set (has been assigned a value) and false otherwise */
  public boolean isSetCache_op() {
    return this.cache_op != null;
  }

  public void setCache_opIsSet(boolean value) {
    if (!value) {
      this.cache_op = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PARTITION_SPEC:
      if (value == null) {
        unsetPartition_spec();
      } else {
        setPartition_spec((List<com.cloudera.impala.thrift.TPartitionKeyValue>)value);
      }
      break;

    case IF_NOT_EXISTS:
      if (value == null) {
        unsetIf_not_exists();
      } else {
        setIf_not_exists((Boolean)value);
      }
      break;

    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((String)value);
      }
      break;

    case CACHE_OP:
      if (value == null) {
        unsetCache_op();
      } else {
        setCache_op((THdfsCachingOp)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PARTITION_SPEC:
      return getPartition_spec();

    case IF_NOT_EXISTS:
      return Boolean.valueOf(isIf_not_exists());

    case LOCATION:
      return getLocation();

    case CACHE_OP:
      return getCache_op();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PARTITION_SPEC:
      return isSetPartition_spec();
    case IF_NOT_EXISTS:
      return isSetIf_not_exists();
    case LOCATION:
      return isSetLocation();
    case CACHE_OP:
      return isSetCache_op();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TAlterTableAddPartitionParams)
      return this.equals((TAlterTableAddPartitionParams)that);
    return false;
  }

  public boolean equals(TAlterTableAddPartitionParams that) {
    if (that == null)
      return false;

    boolean this_present_partition_spec = true && this.isSetPartition_spec();
    boolean that_present_partition_spec = true && that.isSetPartition_spec();
    if (this_present_partition_spec || that_present_partition_spec) {
      if (!(this_present_partition_spec && that_present_partition_spec))
        return false;
      if (!this.partition_spec.equals(that.partition_spec))
        return false;
    }

    boolean this_present_if_not_exists = true;
    boolean that_present_if_not_exists = true;
    if (this_present_if_not_exists || that_present_if_not_exists) {
      if (!(this_present_if_not_exists && that_present_if_not_exists))
        return false;
      if (this.if_not_exists != that.if_not_exists)
        return false;
    }

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    boolean this_present_cache_op = true && this.isSetCache_op();
    boolean that_present_cache_op = true && that.isSetCache_op();
    if (this_present_cache_op || that_present_cache_op) {
      if (!(this_present_cache_op && that_present_cache_op))
        return false;
      if (!this.cache_op.equals(that.cache_op))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_partition_spec = true && (isSetPartition_spec());
    builder.append(present_partition_spec);
    if (present_partition_spec)
      builder.append(partition_spec);

    boolean present_if_not_exists = true;
    builder.append(present_if_not_exists);
    if (present_if_not_exists)
      builder.append(if_not_exists);

    boolean present_location = true && (isSetLocation());
    builder.append(present_location);
    if (present_location)
      builder.append(location);

    boolean present_cache_op = true && (isSetCache_op());
    builder.append(present_cache_op);
    if (present_cache_op)
      builder.append(cache_op);

    return builder.toHashCode();
  }

  public int compareTo(TAlterTableAddPartitionParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TAlterTableAddPartitionParams typedOther = (TAlterTableAddPartitionParams)other;

    lastComparison = Boolean.valueOf(isSetPartition_spec()).compareTo(typedOther.isSetPartition_spec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_spec()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_spec, typedOther.partition_spec);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIf_not_exists()).compareTo(typedOther.isSetIf_not_exists());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIf_not_exists()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.if_not_exists, typedOther.if_not_exists);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocation()).compareTo(typedOther.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, typedOther.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCache_op()).compareTo(typedOther.isSetCache_op());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCache_op()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cache_op, typedOther.cache_op);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TAlterTableAddPartitionParams(");
    boolean first = true;

    sb.append("partition_spec:");
    if (this.partition_spec == null) {
      sb.append("null");
    } else {
      sb.append(this.partition_spec);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("if_not_exists:");
    sb.append(this.if_not_exists);
    first = false;
    if (isSetLocation()) {
      if (!first) sb.append(", ");
      sb.append("location:");
      if (this.location == null) {
        sb.append("null");
      } else {
        sb.append(this.location);
      }
      first = false;
    }
    if (isSetCache_op()) {
      if (!first) sb.append(", ");
      sb.append("cache_op:");
      if (this.cache_op == null) {
        sb.append("null");
      } else {
        sb.append(this.cache_op);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (partition_spec == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'partition_spec' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'if_not_exists' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (cache_op != null) {
      cache_op.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAlterTableAddPartitionParamsStandardSchemeFactory implements SchemeFactory {
    public TAlterTableAddPartitionParamsStandardScheme getScheme() {
      return new TAlterTableAddPartitionParamsStandardScheme();
    }
  }

  private static class TAlterTableAddPartitionParamsStandardScheme extends StandardScheme<TAlterTableAddPartitionParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TAlterTableAddPartitionParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARTITION_SPEC
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.partition_spec = new ArrayList<com.cloudera.impala.thrift.TPartitionKeyValue>(_list16.size);
                for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                {
                  com.cloudera.impala.thrift.TPartitionKeyValue _elem18; // required
                  _elem18 = new com.cloudera.impala.thrift.TPartitionKeyValue();
                  _elem18.read(iprot);
                  struct.partition_spec.add(_elem18);
                }
                iprot.readListEnd();
              }
              struct.setPartition_specIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IF_NOT_EXISTS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.if_not_exists = iprot.readBool();
              struct.setIf_not_existsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.location = iprot.readString();
              struct.setLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CACHE_OP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cache_op = new THdfsCachingOp();
              struct.cache_op.read(iprot);
              struct.setCache_opIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetIf_not_exists()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'if_not_exists' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TAlterTableAddPartitionParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.partition_spec != null) {
        oprot.writeFieldBegin(PARTITION_SPEC_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.partition_spec.size()));
          for (com.cloudera.impala.thrift.TPartitionKeyValue _iter19 : struct.partition_spec)
          {
            _iter19.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.location != null) {
        if (struct.isSetLocation()) {
          oprot.writeFieldBegin(LOCATION_FIELD_DESC);
          oprot.writeString(struct.location);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(IF_NOT_EXISTS_FIELD_DESC);
      oprot.writeBool(struct.if_not_exists);
      oprot.writeFieldEnd();
      if (struct.cache_op != null) {
        if (struct.isSetCache_op()) {
          oprot.writeFieldBegin(CACHE_OP_FIELD_DESC);
          struct.cache_op.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAlterTableAddPartitionParamsTupleSchemeFactory implements SchemeFactory {
    public TAlterTableAddPartitionParamsTupleScheme getScheme() {
      return new TAlterTableAddPartitionParamsTupleScheme();
    }
  }

  private static class TAlterTableAddPartitionParamsTupleScheme extends TupleScheme<TAlterTableAddPartitionParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TAlterTableAddPartitionParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.partition_spec.size());
        for (com.cloudera.impala.thrift.TPartitionKeyValue _iter20 : struct.partition_spec)
        {
          _iter20.write(oprot);
        }
      }
      oprot.writeBool(struct.if_not_exists);
      BitSet optionals = new BitSet();
      if (struct.isSetLocation()) {
        optionals.set(0);
      }
      if (struct.isSetCache_op()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetLocation()) {
        oprot.writeString(struct.location);
      }
      if (struct.isSetCache_op()) {
        struct.cache_op.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TAlterTableAddPartitionParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.partition_spec = new ArrayList<com.cloudera.impala.thrift.TPartitionKeyValue>(_list21.size);
        for (int _i22 = 0; _i22 < _list21.size; ++_i22)
        {
          com.cloudera.impala.thrift.TPartitionKeyValue _elem23; // required
          _elem23 = new com.cloudera.impala.thrift.TPartitionKeyValue();
          _elem23.read(iprot);
          struct.partition_spec.add(_elem23);
        }
      }
      struct.setPartition_specIsSet(true);
      struct.if_not_exists = iprot.readBool();
      struct.setIf_not_existsIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.location = iprot.readString();
        struct.setLocationIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cache_op = new THdfsCachingOp();
        struct.cache_op.read(iprot);
        struct.setCache_opIsSet(true);
      }
    }
  }

}

