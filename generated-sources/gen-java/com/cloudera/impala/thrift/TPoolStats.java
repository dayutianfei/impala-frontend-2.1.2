/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TPoolStats implements org.apache.thrift.TBase<TPoolStats, TPoolStats._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPoolStats");

  private static final org.apache.thrift.protocol.TField NUM_RUNNING_FIELD_DESC = new org.apache.thrift.protocol.TField("num_running", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NUM_QUEUED_FIELD_DESC = new org.apache.thrift.protocol.TField("num_queued", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField MEM_USAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("mem_usage", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField MEM_ESTIMATE_FIELD_DESC = new org.apache.thrift.protocol.TField("mem_estimate", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPoolStatsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPoolStatsTupleSchemeFactory());
  }

  public long num_running; // required
  public long num_queued; // required
  public long mem_usage; // required
  public long mem_estimate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NUM_RUNNING((short)1, "num_running"),
    NUM_QUEUED((short)2, "num_queued"),
    MEM_USAGE((short)3, "mem_usage"),
    MEM_ESTIMATE((short)4, "mem_estimate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NUM_RUNNING
          return NUM_RUNNING;
        case 2: // NUM_QUEUED
          return NUM_QUEUED;
        case 3: // MEM_USAGE
          return MEM_USAGE;
        case 4: // MEM_ESTIMATE
          return MEM_ESTIMATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUM_RUNNING_ISSET_ID = 0;
  private static final int __NUM_QUEUED_ISSET_ID = 1;
  private static final int __MEM_USAGE_ISSET_ID = 2;
  private static final int __MEM_ESTIMATE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NUM_RUNNING, new org.apache.thrift.meta_data.FieldMetaData("num_running", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_QUEUED, new org.apache.thrift.meta_data.FieldMetaData("num_queued", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MEM_USAGE, new org.apache.thrift.meta_data.FieldMetaData("mem_usage", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MEM_ESTIMATE, new org.apache.thrift.meta_data.FieldMetaData("mem_estimate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPoolStats.class, metaDataMap);
  }

  public TPoolStats() {
  }

  public TPoolStats(
    long num_running,
    long num_queued,
    long mem_usage,
    long mem_estimate)
  {
    this();
    this.num_running = num_running;
    setNum_runningIsSet(true);
    this.num_queued = num_queued;
    setNum_queuedIsSet(true);
    this.mem_usage = mem_usage;
    setMem_usageIsSet(true);
    this.mem_estimate = mem_estimate;
    setMem_estimateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPoolStats(TPoolStats other) {
    __isset_bitfield = other.__isset_bitfield;
    this.num_running = other.num_running;
    this.num_queued = other.num_queued;
    this.mem_usage = other.mem_usage;
    this.mem_estimate = other.mem_estimate;
  }

  public TPoolStats deepCopy() {
    return new TPoolStats(this);
  }

  @Override
  public void clear() {
    setNum_runningIsSet(false);
    this.num_running = 0;
    setNum_queuedIsSet(false);
    this.num_queued = 0;
    setMem_usageIsSet(false);
    this.mem_usage = 0;
    setMem_estimateIsSet(false);
    this.mem_estimate = 0;
  }

  public long getNum_running() {
    return this.num_running;
  }

  public TPoolStats setNum_running(long num_running) {
    this.num_running = num_running;
    setNum_runningIsSet(true);
    return this;
  }

  public void unsetNum_running() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_RUNNING_ISSET_ID);
  }

  /** Returns true if field num_running is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_running() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_RUNNING_ISSET_ID);
  }

  public void setNum_runningIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_RUNNING_ISSET_ID, value);
  }

  public long getNum_queued() {
    return this.num_queued;
  }

  public TPoolStats setNum_queued(long num_queued) {
    this.num_queued = num_queued;
    setNum_queuedIsSet(true);
    return this;
  }

  public void unsetNum_queued() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_QUEUED_ISSET_ID);
  }

  /** Returns true if field num_queued is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_queued() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_QUEUED_ISSET_ID);
  }

  public void setNum_queuedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_QUEUED_ISSET_ID, value);
  }

  public long getMem_usage() {
    return this.mem_usage;
  }

  public TPoolStats setMem_usage(long mem_usage) {
    this.mem_usage = mem_usage;
    setMem_usageIsSet(true);
    return this;
  }

  public void unsetMem_usage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEM_USAGE_ISSET_ID);
  }

  /** Returns true if field mem_usage is set (has been assigned a value) and false otherwise */
  public boolean isSetMem_usage() {
    return EncodingUtils.testBit(__isset_bitfield, __MEM_USAGE_ISSET_ID);
  }

  public void setMem_usageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEM_USAGE_ISSET_ID, value);
  }

  public long getMem_estimate() {
    return this.mem_estimate;
  }

  public TPoolStats setMem_estimate(long mem_estimate) {
    this.mem_estimate = mem_estimate;
    setMem_estimateIsSet(true);
    return this;
  }

  public void unsetMem_estimate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEM_ESTIMATE_ISSET_ID);
  }

  /** Returns true if field mem_estimate is set (has been assigned a value) and false otherwise */
  public boolean isSetMem_estimate() {
    return EncodingUtils.testBit(__isset_bitfield, __MEM_ESTIMATE_ISSET_ID);
  }

  public void setMem_estimateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEM_ESTIMATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NUM_RUNNING:
      if (value == null) {
        unsetNum_running();
      } else {
        setNum_running((Long)value);
      }
      break;

    case NUM_QUEUED:
      if (value == null) {
        unsetNum_queued();
      } else {
        setNum_queued((Long)value);
      }
      break;

    case MEM_USAGE:
      if (value == null) {
        unsetMem_usage();
      } else {
        setMem_usage((Long)value);
      }
      break;

    case MEM_ESTIMATE:
      if (value == null) {
        unsetMem_estimate();
      } else {
        setMem_estimate((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NUM_RUNNING:
      return Long.valueOf(getNum_running());

    case NUM_QUEUED:
      return Long.valueOf(getNum_queued());

    case MEM_USAGE:
      return Long.valueOf(getMem_usage());

    case MEM_ESTIMATE:
      return Long.valueOf(getMem_estimate());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NUM_RUNNING:
      return isSetNum_running();
    case NUM_QUEUED:
      return isSetNum_queued();
    case MEM_USAGE:
      return isSetMem_usage();
    case MEM_ESTIMATE:
      return isSetMem_estimate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPoolStats)
      return this.equals((TPoolStats)that);
    return false;
  }

  public boolean equals(TPoolStats that) {
    if (that == null)
      return false;

    boolean this_present_num_running = true;
    boolean that_present_num_running = true;
    if (this_present_num_running || that_present_num_running) {
      if (!(this_present_num_running && that_present_num_running))
        return false;
      if (this.num_running != that.num_running)
        return false;
    }

    boolean this_present_num_queued = true;
    boolean that_present_num_queued = true;
    if (this_present_num_queued || that_present_num_queued) {
      if (!(this_present_num_queued && that_present_num_queued))
        return false;
      if (this.num_queued != that.num_queued)
        return false;
    }

    boolean this_present_mem_usage = true;
    boolean that_present_mem_usage = true;
    if (this_present_mem_usage || that_present_mem_usage) {
      if (!(this_present_mem_usage && that_present_mem_usage))
        return false;
      if (this.mem_usage != that.mem_usage)
        return false;
    }

    boolean this_present_mem_estimate = true;
    boolean that_present_mem_estimate = true;
    if (this_present_mem_estimate || that_present_mem_estimate) {
      if (!(this_present_mem_estimate && that_present_mem_estimate))
        return false;
      if (this.mem_estimate != that.mem_estimate)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_num_running = true;
    builder.append(present_num_running);
    if (present_num_running)
      builder.append(num_running);

    boolean present_num_queued = true;
    builder.append(present_num_queued);
    if (present_num_queued)
      builder.append(num_queued);

    boolean present_mem_usage = true;
    builder.append(present_mem_usage);
    if (present_mem_usage)
      builder.append(mem_usage);

    boolean present_mem_estimate = true;
    builder.append(present_mem_estimate);
    if (present_mem_estimate)
      builder.append(mem_estimate);

    return builder.toHashCode();
  }

  public int compareTo(TPoolStats other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TPoolStats typedOther = (TPoolStats)other;

    lastComparison = Boolean.valueOf(isSetNum_running()).compareTo(typedOther.isSetNum_running());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_running()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_running, typedOther.num_running);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_queued()).compareTo(typedOther.isSetNum_queued());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_queued()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_queued, typedOther.num_queued);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMem_usage()).compareTo(typedOther.isSetMem_usage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMem_usage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mem_usage, typedOther.mem_usage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMem_estimate()).compareTo(typedOther.isSetMem_estimate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMem_estimate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mem_estimate, typedOther.mem_estimate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPoolStats(");
    boolean first = true;

    sb.append("num_running:");
    sb.append(this.num_running);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_queued:");
    sb.append(this.num_queued);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mem_usage:");
    sb.append(this.mem_usage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mem_estimate:");
    sb.append(this.mem_estimate);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'num_running' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'num_queued' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'mem_usage' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'mem_estimate' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPoolStatsStandardSchemeFactory implements SchemeFactory {
    public TPoolStatsStandardScheme getScheme() {
      return new TPoolStatsStandardScheme();
    }
  }

  private static class TPoolStatsStandardScheme extends StandardScheme<TPoolStats> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPoolStats struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NUM_RUNNING
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num_running = iprot.readI64();
              struct.setNum_runningIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NUM_QUEUED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num_queued = iprot.readI64();
              struct.setNum_queuedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEM_USAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mem_usage = iprot.readI64();
              struct.setMem_usageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MEM_ESTIMATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mem_estimate = iprot.readI64();
              struct.setMem_estimateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetNum_running()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'num_running' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNum_queued()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'num_queued' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMem_usage()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'mem_usage' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMem_estimate()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'mem_estimate' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPoolStats struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NUM_RUNNING_FIELD_DESC);
      oprot.writeI64(struct.num_running);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_QUEUED_FIELD_DESC);
      oprot.writeI64(struct.num_queued);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEM_USAGE_FIELD_DESC);
      oprot.writeI64(struct.mem_usage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEM_ESTIMATE_FIELD_DESC);
      oprot.writeI64(struct.mem_estimate);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPoolStatsTupleSchemeFactory implements SchemeFactory {
    public TPoolStatsTupleScheme getScheme() {
      return new TPoolStatsTupleScheme();
    }
  }

  private static class TPoolStatsTupleScheme extends TupleScheme<TPoolStats> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPoolStats struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.num_running);
      oprot.writeI64(struct.num_queued);
      oprot.writeI64(struct.mem_usage);
      oprot.writeI64(struct.mem_estimate);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPoolStats struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.num_running = iprot.readI64();
      struct.setNum_runningIsSet(true);
      struct.num_queued = iprot.readI64();
      struct.setNum_queuedIsSet(true);
      struct.mem_usage = iprot.readI64();
      struct.setMem_usageIsSet(true);
      struct.mem_estimate = iprot.readI64();
      struct.setMem_estimateIsSet(true);
    }
  }

}

