/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TDropFunctionParams implements org.apache.thrift.TBase<TDropFunctionParams, TDropFunctionParams._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDropFunctionParams");

  private static final org.apache.thrift.protocol.TField FN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fn_name", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ARG_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("arg_types", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField IF_EXISTS_FIELD_DESC = new org.apache.thrift.protocol.TField("if_exists", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField SIGNATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("signature", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TDropFunctionParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TDropFunctionParamsTupleSchemeFactory());
  }

  public com.cloudera.impala.thrift.TFunctionName fn_name; // required
  public List<com.cloudera.impala.thrift.TColumnType> arg_types; // required
  public boolean if_exists; // required
  public String signature; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FN_NAME((short)1, "fn_name"),
    ARG_TYPES((short)2, "arg_types"),
    IF_EXISTS((short)3, "if_exists"),
    SIGNATURE((short)4, "signature");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FN_NAME
          return FN_NAME;
        case 2: // ARG_TYPES
          return ARG_TYPES;
        case 3: // IF_EXISTS
          return IF_EXISTS;
        case 4: // SIGNATURE
          return SIGNATURE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IF_EXISTS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SIGNATURE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FN_NAME, new org.apache.thrift.meta_data.FieldMetaData("fn_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TFunctionName.class)));
    tmpMap.put(_Fields.ARG_TYPES, new org.apache.thrift.meta_data.FieldMetaData("arg_types", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TColumnType.class))));
    tmpMap.put(_Fields.IF_EXISTS, new org.apache.thrift.meta_data.FieldMetaData("if_exists", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SIGNATURE, new org.apache.thrift.meta_data.FieldMetaData("signature", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDropFunctionParams.class, metaDataMap);
  }

  public TDropFunctionParams() {
  }

  public TDropFunctionParams(
    com.cloudera.impala.thrift.TFunctionName fn_name,
    List<com.cloudera.impala.thrift.TColumnType> arg_types,
    boolean if_exists)
  {
    this();
    this.fn_name = fn_name;
    this.arg_types = arg_types;
    this.if_exists = if_exists;
    setIf_existsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDropFunctionParams(TDropFunctionParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFn_name()) {
      this.fn_name = new com.cloudera.impala.thrift.TFunctionName(other.fn_name);
    }
    if (other.isSetArg_types()) {
      List<com.cloudera.impala.thrift.TColumnType> __this__arg_types = new ArrayList<com.cloudera.impala.thrift.TColumnType>();
      for (com.cloudera.impala.thrift.TColumnType other_element : other.arg_types) {
        __this__arg_types.add(new com.cloudera.impala.thrift.TColumnType(other_element));
      }
      this.arg_types = __this__arg_types;
    }
    this.if_exists = other.if_exists;
    if (other.isSetSignature()) {
      this.signature = other.signature;
    }
  }

  public TDropFunctionParams deepCopy() {
    return new TDropFunctionParams(this);
  }

  @Override
  public void clear() {
    this.fn_name = null;
    this.arg_types = null;
    setIf_existsIsSet(false);
    this.if_exists = false;
    this.signature = null;
  }

  public com.cloudera.impala.thrift.TFunctionName getFn_name() {
    return this.fn_name;
  }

  public TDropFunctionParams setFn_name(com.cloudera.impala.thrift.TFunctionName fn_name) {
    this.fn_name = fn_name;
    return this;
  }

  public void unsetFn_name() {
    this.fn_name = null;
  }

  /** Returns true if field fn_name is set (has been assigned a value) and false otherwise */
  public boolean isSetFn_name() {
    return this.fn_name != null;
  }

  public void setFn_nameIsSet(boolean value) {
    if (!value) {
      this.fn_name = null;
    }
  }

  public int getArg_typesSize() {
    return (this.arg_types == null) ? 0 : this.arg_types.size();
  }

  public java.util.Iterator<com.cloudera.impala.thrift.TColumnType> getArg_typesIterator() {
    return (this.arg_types == null) ? null : this.arg_types.iterator();
  }

  public void addToArg_types(com.cloudera.impala.thrift.TColumnType elem) {
    if (this.arg_types == null) {
      this.arg_types = new ArrayList<com.cloudera.impala.thrift.TColumnType>();
    }
    this.arg_types.add(elem);
  }

  public List<com.cloudera.impala.thrift.TColumnType> getArg_types() {
    return this.arg_types;
  }

  public TDropFunctionParams setArg_types(List<com.cloudera.impala.thrift.TColumnType> arg_types) {
    this.arg_types = arg_types;
    return this;
  }

  public void unsetArg_types() {
    this.arg_types = null;
  }

  /** Returns true if field arg_types is set (has been assigned a value) and false otherwise */
  public boolean isSetArg_types() {
    return this.arg_types != null;
  }

  public void setArg_typesIsSet(boolean value) {
    if (!value) {
      this.arg_types = null;
    }
  }

  public boolean isIf_exists() {
    return this.if_exists;
  }

  public TDropFunctionParams setIf_exists(boolean if_exists) {
    this.if_exists = if_exists;
    setIf_existsIsSet(true);
    return this;
  }

  public void unsetIf_exists() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IF_EXISTS_ISSET_ID);
  }

  /** Returns true if field if_exists is set (has been assigned a value) and false otherwise */
  public boolean isSetIf_exists() {
    return EncodingUtils.testBit(__isset_bitfield, __IF_EXISTS_ISSET_ID);
  }

  public void setIf_existsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IF_EXISTS_ISSET_ID, value);
  }

  public String getSignature() {
    return this.signature;
  }

  public TDropFunctionParams setSignature(String signature) {
    this.signature = signature;
    return this;
  }

  public void unsetSignature() {
    this.signature = null;
  }

  /** Returns true if field signature is set (has been assigned a value) and false otherwise */
  public boolean isSetSignature() {
    return this.signature != null;
  }

  public void setSignatureIsSet(boolean value) {
    if (!value) {
      this.signature = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FN_NAME:
      if (value == null) {
        unsetFn_name();
      } else {
        setFn_name((com.cloudera.impala.thrift.TFunctionName)value);
      }
      break;

    case ARG_TYPES:
      if (value == null) {
        unsetArg_types();
      } else {
        setArg_types((List<com.cloudera.impala.thrift.TColumnType>)value);
      }
      break;

    case IF_EXISTS:
      if (value == null) {
        unsetIf_exists();
      } else {
        setIf_exists((Boolean)value);
      }
      break;

    case SIGNATURE:
      if (value == null) {
        unsetSignature();
      } else {
        setSignature((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FN_NAME:
      return getFn_name();

    case ARG_TYPES:
      return getArg_types();

    case IF_EXISTS:
      return Boolean.valueOf(isIf_exists());

    case SIGNATURE:
      return getSignature();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FN_NAME:
      return isSetFn_name();
    case ARG_TYPES:
      return isSetArg_types();
    case IF_EXISTS:
      return isSetIf_exists();
    case SIGNATURE:
      return isSetSignature();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TDropFunctionParams)
      return this.equals((TDropFunctionParams)that);
    return false;
  }

  public boolean equals(TDropFunctionParams that) {
    if (that == null)
      return false;

    boolean this_present_fn_name = true && this.isSetFn_name();
    boolean that_present_fn_name = true && that.isSetFn_name();
    if (this_present_fn_name || that_present_fn_name) {
      if (!(this_present_fn_name && that_present_fn_name))
        return false;
      if (!this.fn_name.equals(that.fn_name))
        return false;
    }

    boolean this_present_arg_types = true && this.isSetArg_types();
    boolean that_present_arg_types = true && that.isSetArg_types();
    if (this_present_arg_types || that_present_arg_types) {
      if (!(this_present_arg_types && that_present_arg_types))
        return false;
      if (!this.arg_types.equals(that.arg_types))
        return false;
    }

    boolean this_present_if_exists = true;
    boolean that_present_if_exists = true;
    if (this_present_if_exists || that_present_if_exists) {
      if (!(this_present_if_exists && that_present_if_exists))
        return false;
      if (this.if_exists != that.if_exists)
        return false;
    }

    boolean this_present_signature = true && this.isSetSignature();
    boolean that_present_signature = true && that.isSetSignature();
    if (this_present_signature || that_present_signature) {
      if (!(this_present_signature && that_present_signature))
        return false;
      if (!this.signature.equals(that.signature))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_fn_name = true && (isSetFn_name());
    builder.append(present_fn_name);
    if (present_fn_name)
      builder.append(fn_name);

    boolean present_arg_types = true && (isSetArg_types());
    builder.append(present_arg_types);
    if (present_arg_types)
      builder.append(arg_types);

    boolean present_if_exists = true;
    builder.append(present_if_exists);
    if (present_if_exists)
      builder.append(if_exists);

    boolean present_signature = true && (isSetSignature());
    builder.append(present_signature);
    if (present_signature)
      builder.append(signature);

    return builder.toHashCode();
  }

  public int compareTo(TDropFunctionParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TDropFunctionParams typedOther = (TDropFunctionParams)other;

    lastComparison = Boolean.valueOf(isSetFn_name()).compareTo(typedOther.isSetFn_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFn_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fn_name, typedOther.fn_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArg_types()).compareTo(typedOther.isSetArg_types());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArg_types()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg_types, typedOther.arg_types);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIf_exists()).compareTo(typedOther.isSetIf_exists());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIf_exists()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.if_exists, typedOther.if_exists);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSignature()).compareTo(typedOther.isSetSignature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signature, typedOther.signature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TDropFunctionParams(");
    boolean first = true;

    sb.append("fn_name:");
    if (this.fn_name == null) {
      sb.append("null");
    } else {
      sb.append(this.fn_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("arg_types:");
    if (this.arg_types == null) {
      sb.append("null");
    } else {
      sb.append(this.arg_types);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("if_exists:");
    sb.append(this.if_exists);
    first = false;
    if (isSetSignature()) {
      if (!first) sb.append(", ");
      sb.append("signature:");
      if (this.signature == null) {
        sb.append("null");
      } else {
        sb.append(this.signature);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (fn_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fn_name' was not present! Struct: " + toString());
    }
    if (arg_types == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'arg_types' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'if_exists' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (fn_name != null) {
      fn_name.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDropFunctionParamsStandardSchemeFactory implements SchemeFactory {
    public TDropFunctionParamsStandardScheme getScheme() {
      return new TDropFunctionParamsStandardScheme();
    }
  }

  private static class TDropFunctionParamsStandardScheme extends StandardScheme<TDropFunctionParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDropFunctionParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fn_name = new com.cloudera.impala.thrift.TFunctionName();
              struct.fn_name.read(iprot);
              struct.setFn_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ARG_TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list194 = iprot.readListBegin();
                struct.arg_types = new ArrayList<com.cloudera.impala.thrift.TColumnType>(_list194.size);
                for (int _i195 = 0; _i195 < _list194.size; ++_i195)
                {
                  com.cloudera.impala.thrift.TColumnType _elem196; // required
                  _elem196 = new com.cloudera.impala.thrift.TColumnType();
                  _elem196.read(iprot);
                  struct.arg_types.add(_elem196);
                }
                iprot.readListEnd();
              }
              struct.setArg_typesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IF_EXISTS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.if_exists = iprot.readBool();
              struct.setIf_existsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SIGNATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.signature = iprot.readString();
              struct.setSignatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetIf_exists()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'if_exists' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDropFunctionParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fn_name != null) {
        oprot.writeFieldBegin(FN_NAME_FIELD_DESC);
        struct.fn_name.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.arg_types != null) {
        oprot.writeFieldBegin(ARG_TYPES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.arg_types.size()));
          for (com.cloudera.impala.thrift.TColumnType _iter197 : struct.arg_types)
          {
            _iter197.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IF_EXISTS_FIELD_DESC);
      oprot.writeBool(struct.if_exists);
      oprot.writeFieldEnd();
      if (struct.signature != null) {
        if (struct.isSetSignature()) {
          oprot.writeFieldBegin(SIGNATURE_FIELD_DESC);
          oprot.writeString(struct.signature);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDropFunctionParamsTupleSchemeFactory implements SchemeFactory {
    public TDropFunctionParamsTupleScheme getScheme() {
      return new TDropFunctionParamsTupleScheme();
    }
  }

  private static class TDropFunctionParamsTupleScheme extends TupleScheme<TDropFunctionParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDropFunctionParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.fn_name.write(oprot);
      {
        oprot.writeI32(struct.arg_types.size());
        for (com.cloudera.impala.thrift.TColumnType _iter198 : struct.arg_types)
        {
          _iter198.write(oprot);
        }
      }
      oprot.writeBool(struct.if_exists);
      BitSet optionals = new BitSet();
      if (struct.isSetSignature()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetSignature()) {
        oprot.writeString(struct.signature);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDropFunctionParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.fn_name = new com.cloudera.impala.thrift.TFunctionName();
      struct.fn_name.read(iprot);
      struct.setFn_nameIsSet(true);
      {
        org.apache.thrift.protocol.TList _list199 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.arg_types = new ArrayList<com.cloudera.impala.thrift.TColumnType>(_list199.size);
        for (int _i200 = 0; _i200 < _list199.size; ++_i200)
        {
          com.cloudera.impala.thrift.TColumnType _elem201; // required
          _elem201 = new com.cloudera.impala.thrift.TColumnType();
          _elem201.read(iprot);
          struct.arg_types.add(_elem201);
        }
      }
      struct.setArg_typesIsSet(true);
      struct.if_exists = iprot.readBool();
      struct.setIf_existsIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.signature = iprot.readString();
        struct.setSignatureIsSet(true);
      }
    }
  }

}

