/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TResourceBrokerReservationRequest implements org.apache.thrift.TBase<TResourceBrokerReservationRequest, TResourceBrokerReservationRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TResourceBrokerReservationRequest");

  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField IRB_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("irb_handle", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField QUEUE_FIELD_DESC = new org.apache.thrift.protocol.TField("queue", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField RESOURCES_FIELD_DESC = new org.apache.thrift.protocol.TField("resources", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField GANG_FIELD_DESC = new org.apache.thrift.protocol.TField("gang", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField REQUEST_TIMEOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("request_timeout", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TResourceBrokerReservationRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TResourceBrokerReservationRequestTupleSchemeFactory());
  }

  /**
   * 
   * @see TResourceBrokerServiceVersion
   */
  public TResourceBrokerServiceVersion version; // required
  public com.cloudera.impala.thrift.TUniqueId irb_handle; // optional
  public String queue; // optional
  public List<com.cloudera.llama.thrift.TResource> resources; // optional
  public boolean gang; // optional
  public long request_timeout; // optional
  public String user; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TResourceBrokerServiceVersion
     */
    VERSION((short)1, "version"),
    IRB_HANDLE((short)2, "irb_handle"),
    QUEUE((short)3, "queue"),
    RESOURCES((short)4, "resources"),
    GANG((short)5, "gang"),
    REQUEST_TIMEOUT((short)6, "request_timeout"),
    USER((short)7, "user");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERSION
          return VERSION;
        case 2: // IRB_HANDLE
          return IRB_HANDLE;
        case 3: // QUEUE
          return QUEUE;
        case 4: // RESOURCES
          return RESOURCES;
        case 5: // GANG
          return GANG;
        case 6: // REQUEST_TIMEOUT
          return REQUEST_TIMEOUT;
        case 7: // USER
          return USER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GANG_ISSET_ID = 0;
  private static final int __REQUEST_TIMEOUT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.IRB_HANDLE,_Fields.QUEUE,_Fields.RESOURCES,_Fields.GANG,_Fields.REQUEST_TIMEOUT,_Fields.USER};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TResourceBrokerServiceVersion.class)));
    tmpMap.put(_Fields.IRB_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("irb_handle", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TUniqueId.class)));
    tmpMap.put(_Fields.QUEUE, new org.apache.thrift.meta_data.FieldMetaData("queue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESOURCES, new org.apache.thrift.meta_data.FieldMetaData("resources", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.llama.thrift.TResource.class))));
    tmpMap.put(_Fields.GANG, new org.apache.thrift.meta_data.FieldMetaData("gang", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.REQUEST_TIMEOUT, new org.apache.thrift.meta_data.FieldMetaData("request_timeout", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TResourceBrokerReservationRequest.class, metaDataMap);
  }

  public TResourceBrokerReservationRequest() {
  }

  public TResourceBrokerReservationRequest(
    TResourceBrokerServiceVersion version)
  {
    this();
    this.version = version;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TResourceBrokerReservationRequest(TResourceBrokerReservationRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetVersion()) {
      this.version = other.version;
    }
    if (other.isSetIrb_handle()) {
      this.irb_handle = new com.cloudera.impala.thrift.TUniqueId(other.irb_handle);
    }
    if (other.isSetQueue()) {
      this.queue = other.queue;
    }
    if (other.isSetResources()) {
      List<com.cloudera.llama.thrift.TResource> __this__resources = new ArrayList<com.cloudera.llama.thrift.TResource>();
      for (com.cloudera.llama.thrift.TResource other_element : other.resources) {
        __this__resources.add(new com.cloudera.llama.thrift.TResource(other_element));
      }
      this.resources = __this__resources;
    }
    this.gang = other.gang;
    this.request_timeout = other.request_timeout;
    if (other.isSetUser()) {
      this.user = other.user;
    }
  }

  public TResourceBrokerReservationRequest deepCopy() {
    return new TResourceBrokerReservationRequest(this);
  }

  @Override
  public void clear() {
    this.version = null;
    this.irb_handle = null;
    this.queue = null;
    this.resources = null;
    setGangIsSet(false);
    this.gang = false;
    setRequest_timeoutIsSet(false);
    this.request_timeout = 0;
    this.user = null;
  }

  /**
   * 
   * @see TResourceBrokerServiceVersion
   */
  public TResourceBrokerServiceVersion getVersion() {
    return this.version;
  }

  /**
   * 
   * @see TResourceBrokerServiceVersion
   */
  public TResourceBrokerReservationRequest setVersion(TResourceBrokerServiceVersion version) {
    this.version = version;
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  public com.cloudera.impala.thrift.TUniqueId getIrb_handle() {
    return this.irb_handle;
  }

  public TResourceBrokerReservationRequest setIrb_handle(com.cloudera.impala.thrift.TUniqueId irb_handle) {
    this.irb_handle = irb_handle;
    return this;
  }

  public void unsetIrb_handle() {
    this.irb_handle = null;
  }

  /** Returns true if field irb_handle is set (has been assigned a value) and false otherwise */
  public boolean isSetIrb_handle() {
    return this.irb_handle != null;
  }

  public void setIrb_handleIsSet(boolean value) {
    if (!value) {
      this.irb_handle = null;
    }
  }

  public String getQueue() {
    return this.queue;
  }

  public TResourceBrokerReservationRequest setQueue(String queue) {
    this.queue = queue;
    return this;
  }

  public void unsetQueue() {
    this.queue = null;
  }

  /** Returns true if field queue is set (has been assigned a value) and false otherwise */
  public boolean isSetQueue() {
    return this.queue != null;
  }

  public void setQueueIsSet(boolean value) {
    if (!value) {
      this.queue = null;
    }
  }

  public int getResourcesSize() {
    return (this.resources == null) ? 0 : this.resources.size();
  }

  public java.util.Iterator<com.cloudera.llama.thrift.TResource> getResourcesIterator() {
    return (this.resources == null) ? null : this.resources.iterator();
  }

  public void addToResources(com.cloudera.llama.thrift.TResource elem) {
    if (this.resources == null) {
      this.resources = new ArrayList<com.cloudera.llama.thrift.TResource>();
    }
    this.resources.add(elem);
  }

  public List<com.cloudera.llama.thrift.TResource> getResources() {
    return this.resources;
  }

  public TResourceBrokerReservationRequest setResources(List<com.cloudera.llama.thrift.TResource> resources) {
    this.resources = resources;
    return this;
  }

  public void unsetResources() {
    this.resources = null;
  }

  /** Returns true if field resources is set (has been assigned a value) and false otherwise */
  public boolean isSetResources() {
    return this.resources != null;
  }

  public void setResourcesIsSet(boolean value) {
    if (!value) {
      this.resources = null;
    }
  }

  public boolean isGang() {
    return this.gang;
  }

  public TResourceBrokerReservationRequest setGang(boolean gang) {
    this.gang = gang;
    setGangIsSet(true);
    return this;
  }

  public void unsetGang() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GANG_ISSET_ID);
  }

  /** Returns true if field gang is set (has been assigned a value) and false otherwise */
  public boolean isSetGang() {
    return EncodingUtils.testBit(__isset_bitfield, __GANG_ISSET_ID);
  }

  public void setGangIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GANG_ISSET_ID, value);
  }

  public long getRequest_timeout() {
    return this.request_timeout;
  }

  public TResourceBrokerReservationRequest setRequest_timeout(long request_timeout) {
    this.request_timeout = request_timeout;
    setRequest_timeoutIsSet(true);
    return this;
  }

  public void unsetRequest_timeout() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUEST_TIMEOUT_ISSET_ID);
  }

  /** Returns true if field request_timeout is set (has been assigned a value) and false otherwise */
  public boolean isSetRequest_timeout() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUEST_TIMEOUT_ISSET_ID);
  }

  public void setRequest_timeoutIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUEST_TIMEOUT_ISSET_ID, value);
  }

  public String getUser() {
    return this.user;
  }

  public TResourceBrokerReservationRequest setUser(String user) {
    this.user = user;
    return this;
  }

  public void unsetUser() {
    this.user = null;
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return this.user != null;
  }

  public void setUserIsSet(boolean value) {
    if (!value) {
      this.user = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((TResourceBrokerServiceVersion)value);
      }
      break;

    case IRB_HANDLE:
      if (value == null) {
        unsetIrb_handle();
      } else {
        setIrb_handle((com.cloudera.impala.thrift.TUniqueId)value);
      }
      break;

    case QUEUE:
      if (value == null) {
        unsetQueue();
      } else {
        setQueue((String)value);
      }
      break;

    case RESOURCES:
      if (value == null) {
        unsetResources();
      } else {
        setResources((List<com.cloudera.llama.thrift.TResource>)value);
      }
      break;

    case GANG:
      if (value == null) {
        unsetGang();
      } else {
        setGang((Boolean)value);
      }
      break;

    case REQUEST_TIMEOUT:
      if (value == null) {
        unsetRequest_timeout();
      } else {
        setRequest_timeout((Long)value);
      }
      break;

    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VERSION:
      return getVersion();

    case IRB_HANDLE:
      return getIrb_handle();

    case QUEUE:
      return getQueue();

    case RESOURCES:
      return getResources();

    case GANG:
      return Boolean.valueOf(isGang());

    case REQUEST_TIMEOUT:
      return Long.valueOf(getRequest_timeout());

    case USER:
      return getUser();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VERSION:
      return isSetVersion();
    case IRB_HANDLE:
      return isSetIrb_handle();
    case QUEUE:
      return isSetQueue();
    case RESOURCES:
      return isSetResources();
    case GANG:
      return isSetGang();
    case REQUEST_TIMEOUT:
      return isSetRequest_timeout();
    case USER:
      return isSetUser();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TResourceBrokerReservationRequest)
      return this.equals((TResourceBrokerReservationRequest)that);
    return false;
  }

  public boolean equals(TResourceBrokerReservationRequest that) {
    if (that == null)
      return false;

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }

    boolean this_present_irb_handle = true && this.isSetIrb_handle();
    boolean that_present_irb_handle = true && that.isSetIrb_handle();
    if (this_present_irb_handle || that_present_irb_handle) {
      if (!(this_present_irb_handle && that_present_irb_handle))
        return false;
      if (!this.irb_handle.equals(that.irb_handle))
        return false;
    }

    boolean this_present_queue = true && this.isSetQueue();
    boolean that_present_queue = true && that.isSetQueue();
    if (this_present_queue || that_present_queue) {
      if (!(this_present_queue && that_present_queue))
        return false;
      if (!this.queue.equals(that.queue))
        return false;
    }

    boolean this_present_resources = true && this.isSetResources();
    boolean that_present_resources = true && that.isSetResources();
    if (this_present_resources || that_present_resources) {
      if (!(this_present_resources && that_present_resources))
        return false;
      if (!this.resources.equals(that.resources))
        return false;
    }

    boolean this_present_gang = true && this.isSetGang();
    boolean that_present_gang = true && that.isSetGang();
    if (this_present_gang || that_present_gang) {
      if (!(this_present_gang && that_present_gang))
        return false;
      if (this.gang != that.gang)
        return false;
    }

    boolean this_present_request_timeout = true && this.isSetRequest_timeout();
    boolean that_present_request_timeout = true && that.isSetRequest_timeout();
    if (this_present_request_timeout || that_present_request_timeout) {
      if (!(this_present_request_timeout && that_present_request_timeout))
        return false;
      if (this.request_timeout != that.request_timeout)
        return false;
    }

    boolean this_present_user = true && this.isSetUser();
    boolean that_present_user = true && that.isSetUser();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (!this.user.equals(that.user))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_version = true && (isSetVersion());
    builder.append(present_version);
    if (present_version)
      builder.append(version.getValue());

    boolean present_irb_handle = true && (isSetIrb_handle());
    builder.append(present_irb_handle);
    if (present_irb_handle)
      builder.append(irb_handle);

    boolean present_queue = true && (isSetQueue());
    builder.append(present_queue);
    if (present_queue)
      builder.append(queue);

    boolean present_resources = true && (isSetResources());
    builder.append(present_resources);
    if (present_resources)
      builder.append(resources);

    boolean present_gang = true && (isSetGang());
    builder.append(present_gang);
    if (present_gang)
      builder.append(gang);

    boolean present_request_timeout = true && (isSetRequest_timeout());
    builder.append(present_request_timeout);
    if (present_request_timeout)
      builder.append(request_timeout);

    boolean present_user = true && (isSetUser());
    builder.append(present_user);
    if (present_user)
      builder.append(user);

    return builder.toHashCode();
  }

  public int compareTo(TResourceBrokerReservationRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TResourceBrokerReservationRequest typedOther = (TResourceBrokerReservationRequest)other;

    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(typedOther.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, typedOther.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIrb_handle()).compareTo(typedOther.isSetIrb_handle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIrb_handle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.irb_handle, typedOther.irb_handle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueue()).compareTo(typedOther.isSetQueue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queue, typedOther.queue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResources()).compareTo(typedOther.isSetResources());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResources()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resources, typedOther.resources);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGang()).compareTo(typedOther.isSetGang());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGang()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gang, typedOther.gang);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequest_timeout()).compareTo(typedOther.isSetRequest_timeout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequest_timeout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request_timeout, typedOther.request_timeout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser()).compareTo(typedOther.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, typedOther.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TResourceBrokerReservationRequest(");
    boolean first = true;

    sb.append("version:");
    if (this.version == null) {
      sb.append("null");
    } else {
      sb.append(this.version);
    }
    first = false;
    if (isSetIrb_handle()) {
      if (!first) sb.append(", ");
      sb.append("irb_handle:");
      if (this.irb_handle == null) {
        sb.append("null");
      } else {
        sb.append(this.irb_handle);
      }
      first = false;
    }
    if (isSetQueue()) {
      if (!first) sb.append(", ");
      sb.append("queue:");
      if (this.queue == null) {
        sb.append("null");
      } else {
        sb.append(this.queue);
      }
      first = false;
    }
    if (isSetResources()) {
      if (!first) sb.append(", ");
      sb.append("resources:");
      if (this.resources == null) {
        sb.append("null");
      } else {
        sb.append(this.resources);
      }
      first = false;
    }
    if (isSetGang()) {
      if (!first) sb.append(", ");
      sb.append("gang:");
      sb.append(this.gang);
      first = false;
    }
    if (isSetRequest_timeout()) {
      if (!first) sb.append(", ");
      sb.append("request_timeout:");
      sb.append(this.request_timeout);
      first = false;
    }
    if (isSetUser()) {
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (version == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'version' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (irb_handle != null) {
      irb_handle.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TResourceBrokerReservationRequestStandardSchemeFactory implements SchemeFactory {
    public TResourceBrokerReservationRequestStandardScheme getScheme() {
      return new TResourceBrokerReservationRequestStandardScheme();
    }
  }

  private static class TResourceBrokerReservationRequestStandardScheme extends StandardScheme<TResourceBrokerReservationRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TResourceBrokerReservationRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version = TResourceBrokerServiceVersion.findByValue(iprot.readI32());
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IRB_HANDLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.irb_handle = new com.cloudera.impala.thrift.TUniqueId();
              struct.irb_handle.read(iprot);
              struct.setIrb_handleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // QUEUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.queue = iprot.readString();
              struct.setQueueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RESOURCES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                struct.resources = new ArrayList<com.cloudera.llama.thrift.TResource>(_list10.size);
                for (int _i11 = 0; _i11 < _list10.size; ++_i11)
                {
                  com.cloudera.llama.thrift.TResource _elem12; // required
                  _elem12 = new com.cloudera.llama.thrift.TResource();
                  _elem12.read(iprot);
                  struct.resources.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setResourcesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GANG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.gang = iprot.readBool();
              struct.setGangIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REQUEST_TIMEOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.request_timeout = iprot.readI64();
              struct.setRequest_timeoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user = iprot.readString();
              struct.setUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TResourceBrokerReservationRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.version != null) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeI32(struct.version.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.irb_handle != null) {
        if (struct.isSetIrb_handle()) {
          oprot.writeFieldBegin(IRB_HANDLE_FIELD_DESC);
          struct.irb_handle.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.queue != null) {
        if (struct.isSetQueue()) {
          oprot.writeFieldBegin(QUEUE_FIELD_DESC);
          oprot.writeString(struct.queue);
          oprot.writeFieldEnd();
        }
      }
      if (struct.resources != null) {
        if (struct.isSetResources()) {
          oprot.writeFieldBegin(RESOURCES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.resources.size()));
            for (com.cloudera.llama.thrift.TResource _iter13 : struct.resources)
            {
              _iter13.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetGang()) {
        oprot.writeFieldBegin(GANG_FIELD_DESC);
        oprot.writeBool(struct.gang);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRequest_timeout()) {
        oprot.writeFieldBegin(REQUEST_TIMEOUT_FIELD_DESC);
        oprot.writeI64(struct.request_timeout);
        oprot.writeFieldEnd();
      }
      if (struct.user != null) {
        if (struct.isSetUser()) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TResourceBrokerReservationRequestTupleSchemeFactory implements SchemeFactory {
    public TResourceBrokerReservationRequestTupleScheme getScheme() {
      return new TResourceBrokerReservationRequestTupleScheme();
    }
  }

  private static class TResourceBrokerReservationRequestTupleScheme extends TupleScheme<TResourceBrokerReservationRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TResourceBrokerReservationRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.version.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetIrb_handle()) {
        optionals.set(0);
      }
      if (struct.isSetQueue()) {
        optionals.set(1);
      }
      if (struct.isSetResources()) {
        optionals.set(2);
      }
      if (struct.isSetGang()) {
        optionals.set(3);
      }
      if (struct.isSetRequest_timeout()) {
        optionals.set(4);
      }
      if (struct.isSetUser()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetIrb_handle()) {
        struct.irb_handle.write(oprot);
      }
      if (struct.isSetQueue()) {
        oprot.writeString(struct.queue);
      }
      if (struct.isSetResources()) {
        {
          oprot.writeI32(struct.resources.size());
          for (com.cloudera.llama.thrift.TResource _iter14 : struct.resources)
          {
            _iter14.write(oprot);
          }
        }
      }
      if (struct.isSetGang()) {
        oprot.writeBool(struct.gang);
      }
      if (struct.isSetRequest_timeout()) {
        oprot.writeI64(struct.request_timeout);
      }
      if (struct.isSetUser()) {
        oprot.writeString(struct.user);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TResourceBrokerReservationRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.version = TResourceBrokerServiceVersion.findByValue(iprot.readI32());
      struct.setVersionIsSet(true);
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.irb_handle = new com.cloudera.impala.thrift.TUniqueId();
        struct.irb_handle.read(iprot);
        struct.setIrb_handleIsSet(true);
      }
      if (incoming.get(1)) {
        struct.queue = iprot.readString();
        struct.setQueueIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.resources = new ArrayList<com.cloudera.llama.thrift.TResource>(_list15.size);
          for (int _i16 = 0; _i16 < _list15.size; ++_i16)
          {
            com.cloudera.llama.thrift.TResource _elem17; // required
            _elem17 = new com.cloudera.llama.thrift.TResource();
            _elem17.read(iprot);
            struct.resources.add(_elem17);
          }
        }
        struct.setResourcesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.gang = iprot.readBool();
        struct.setGangIsSet(true);
      }
      if (incoming.get(4)) {
        struct.request_timeout = iprot.readI64();
        struct.setRequest_timeoutIsSet(true);
      }
      if (incoming.get(5)) {
        struct.user = iprot.readString();
        struct.setUserIsSet(true);
      }
    }
  }

}

