/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TCreateIndexParms implements org.apache.thrift.TBase<TCreateIndexParms, TCreateIndexParms._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCreateIndexParms");

  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField INDEX_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("index_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("columns", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField INDEX_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("index_type", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField IF_WITH_DEFERED_REBUILD_FIELD_DESC = new org.apache.thrift.protocol.TField("if_with_defered_rebuild", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField INDEX_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("index_properties", org.apache.thrift.protocol.TType.MAP, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TCreateIndexParmsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TCreateIndexParmsTupleSchemeFactory());
  }

  public com.cloudera.impala.thrift.TTableName table_name; // required
  public String index_name; // required
  public List<String> columns; // required
  public String index_type; // required
  public boolean if_with_defered_rebuild; // optional
  public Map<String,String> index_properties; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLE_NAME((short)1, "table_name"),
    INDEX_NAME((short)2, "index_name"),
    COLUMNS((short)3, "columns"),
    INDEX_TYPE((short)4, "index_type"),
    IF_WITH_DEFERED_REBUILD((short)5, "if_with_defered_rebuild"),
    INDEX_PROPERTIES((short)6, "index_properties");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLE_NAME
          return TABLE_NAME;
        case 2: // INDEX_NAME
          return INDEX_NAME;
        case 3: // COLUMNS
          return COLUMNS;
        case 4: // INDEX_TYPE
          return INDEX_TYPE;
        case 5: // IF_WITH_DEFERED_REBUILD
          return IF_WITH_DEFERED_REBUILD;
        case 6: // INDEX_PROPERTIES
          return INDEX_PROPERTIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IF_WITH_DEFERED_REBUILD_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.IF_WITH_DEFERED_REBUILD,_Fields.INDEX_PROPERTIES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TTableName.class)));
    tmpMap.put(_Fields.INDEX_NAME, new org.apache.thrift.meta_data.FieldMetaData("index_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("columns", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.INDEX_TYPE, new org.apache.thrift.meta_data.FieldMetaData("index_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IF_WITH_DEFERED_REBUILD, new org.apache.thrift.meta_data.FieldMetaData("if_with_defered_rebuild", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INDEX_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("index_properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCreateIndexParms.class, metaDataMap);
  }

  public TCreateIndexParms() {
  }

  public TCreateIndexParms(
    com.cloudera.impala.thrift.TTableName table_name,
    String index_name,
    List<String> columns,
    String index_type)
  {
    this();
    this.table_name = table_name;
    this.index_name = index_name;
    this.columns = columns;
    this.index_type = index_type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCreateIndexParms(TCreateIndexParms other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTable_name()) {
      this.table_name = new com.cloudera.impala.thrift.TTableName(other.table_name);
    }
    if (other.isSetIndex_name()) {
      this.index_name = other.index_name;
    }
    if (other.isSetColumns()) {
      List<String> __this__columns = new ArrayList<String>();
      for (String other_element : other.columns) {
        __this__columns.add(other_element);
      }
      this.columns = __this__columns;
    }
    if (other.isSetIndex_type()) {
      this.index_type = other.index_type;
    }
    this.if_with_defered_rebuild = other.if_with_defered_rebuild;
    if (other.isSetIndex_properties()) {
      Map<String,String> __this__index_properties = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.index_properties.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__index_properties_copy_key = other_element_key;

        String __this__index_properties_copy_value = other_element_value;

        __this__index_properties.put(__this__index_properties_copy_key, __this__index_properties_copy_value);
      }
      this.index_properties = __this__index_properties;
    }
  }

  public TCreateIndexParms deepCopy() {
    return new TCreateIndexParms(this);
  }

  @Override
  public void clear() {
    this.table_name = null;
    this.index_name = null;
    this.columns = null;
    this.index_type = null;
    setIf_with_defered_rebuildIsSet(false);
    this.if_with_defered_rebuild = false;
    this.index_properties = null;
  }

  public com.cloudera.impala.thrift.TTableName getTable_name() {
    return this.table_name;
  }

  public TCreateIndexParms setTable_name(com.cloudera.impala.thrift.TTableName table_name) {
    this.table_name = table_name;
    return this;
  }

  public void unsetTable_name() {
    this.table_name = null;
  }

  /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_name() {
    return this.table_name != null;
  }

  public void setTable_nameIsSet(boolean value) {
    if (!value) {
      this.table_name = null;
    }
  }

  public String getIndex_name() {
    return this.index_name;
  }

  public TCreateIndexParms setIndex_name(String index_name) {
    this.index_name = index_name;
    return this;
  }

  public void unsetIndex_name() {
    this.index_name = null;
  }

  /** Returns true if field index_name is set (has been assigned a value) and false otherwise */
  public boolean isSetIndex_name() {
    return this.index_name != null;
  }

  public void setIndex_nameIsSet(boolean value) {
    if (!value) {
      this.index_name = null;
    }
  }

  public int getColumnsSize() {
    return (this.columns == null) ? 0 : this.columns.size();
  }

  public java.util.Iterator<String> getColumnsIterator() {
    return (this.columns == null) ? null : this.columns.iterator();
  }

  public void addToColumns(String elem) {
    if (this.columns == null) {
      this.columns = new ArrayList<String>();
    }
    this.columns.add(elem);
  }

  public List<String> getColumns() {
    return this.columns;
  }

  public TCreateIndexParms setColumns(List<String> columns) {
    this.columns = columns;
    return this;
  }

  public void unsetColumns() {
    this.columns = null;
  }

  /** Returns true if field columns is set (has been assigned a value) and false otherwise */
  public boolean isSetColumns() {
    return this.columns != null;
  }

  public void setColumnsIsSet(boolean value) {
    if (!value) {
      this.columns = null;
    }
  }

  public String getIndex_type() {
    return this.index_type;
  }

  public TCreateIndexParms setIndex_type(String index_type) {
    this.index_type = index_type;
    return this;
  }

  public void unsetIndex_type() {
    this.index_type = null;
  }

  /** Returns true if field index_type is set (has been assigned a value) and false otherwise */
  public boolean isSetIndex_type() {
    return this.index_type != null;
  }

  public void setIndex_typeIsSet(boolean value) {
    if (!value) {
      this.index_type = null;
    }
  }

  public boolean isIf_with_defered_rebuild() {
    return this.if_with_defered_rebuild;
  }

  public TCreateIndexParms setIf_with_defered_rebuild(boolean if_with_defered_rebuild) {
    this.if_with_defered_rebuild = if_with_defered_rebuild;
    setIf_with_defered_rebuildIsSet(true);
    return this;
  }

  public void unsetIf_with_defered_rebuild() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IF_WITH_DEFERED_REBUILD_ISSET_ID);
  }

  /** Returns true if field if_with_defered_rebuild is set (has been assigned a value) and false otherwise */
  public boolean isSetIf_with_defered_rebuild() {
    return EncodingUtils.testBit(__isset_bitfield, __IF_WITH_DEFERED_REBUILD_ISSET_ID);
  }

  public void setIf_with_defered_rebuildIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IF_WITH_DEFERED_REBUILD_ISSET_ID, value);
  }

  public int getIndex_propertiesSize() {
    return (this.index_properties == null) ? 0 : this.index_properties.size();
  }

  public void putToIndex_properties(String key, String val) {
    if (this.index_properties == null) {
      this.index_properties = new HashMap<String,String>();
    }
    this.index_properties.put(key, val);
  }

  public Map<String,String> getIndex_properties() {
    return this.index_properties;
  }

  public TCreateIndexParms setIndex_properties(Map<String,String> index_properties) {
    this.index_properties = index_properties;
    return this;
  }

  public void unsetIndex_properties() {
    this.index_properties = null;
  }

  /** Returns true if field index_properties is set (has been assigned a value) and false otherwise */
  public boolean isSetIndex_properties() {
    return this.index_properties != null;
  }

  public void setIndex_propertiesIsSet(boolean value) {
    if (!value) {
      this.index_properties = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TABLE_NAME:
      if (value == null) {
        unsetTable_name();
      } else {
        setTable_name((com.cloudera.impala.thrift.TTableName)value);
      }
      break;

    case INDEX_NAME:
      if (value == null) {
        unsetIndex_name();
      } else {
        setIndex_name((String)value);
      }
      break;

    case COLUMNS:
      if (value == null) {
        unsetColumns();
      } else {
        setColumns((List<String>)value);
      }
      break;

    case INDEX_TYPE:
      if (value == null) {
        unsetIndex_type();
      } else {
        setIndex_type((String)value);
      }
      break;

    case IF_WITH_DEFERED_REBUILD:
      if (value == null) {
        unsetIf_with_defered_rebuild();
      } else {
        setIf_with_defered_rebuild((Boolean)value);
      }
      break;

    case INDEX_PROPERTIES:
      if (value == null) {
        unsetIndex_properties();
      } else {
        setIndex_properties((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLE_NAME:
      return getTable_name();

    case INDEX_NAME:
      return getIndex_name();

    case COLUMNS:
      return getColumns();

    case INDEX_TYPE:
      return getIndex_type();

    case IF_WITH_DEFERED_REBUILD:
      return Boolean.valueOf(isIf_with_defered_rebuild());

    case INDEX_PROPERTIES:
      return getIndex_properties();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TABLE_NAME:
      return isSetTable_name();
    case INDEX_NAME:
      return isSetIndex_name();
    case COLUMNS:
      return isSetColumns();
    case INDEX_TYPE:
      return isSetIndex_type();
    case IF_WITH_DEFERED_REBUILD:
      return isSetIf_with_defered_rebuild();
    case INDEX_PROPERTIES:
      return isSetIndex_properties();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TCreateIndexParms)
      return this.equals((TCreateIndexParms)that);
    return false;
  }

  public boolean equals(TCreateIndexParms that) {
    if (that == null)
      return false;

    boolean this_present_table_name = true && this.isSetTable_name();
    boolean that_present_table_name = true && that.isSetTable_name();
    if (this_present_table_name || that_present_table_name) {
      if (!(this_present_table_name && that_present_table_name))
        return false;
      if (!this.table_name.equals(that.table_name))
        return false;
    }

    boolean this_present_index_name = true && this.isSetIndex_name();
    boolean that_present_index_name = true && that.isSetIndex_name();
    if (this_present_index_name || that_present_index_name) {
      if (!(this_present_index_name && that_present_index_name))
        return false;
      if (!this.index_name.equals(that.index_name))
        return false;
    }

    boolean this_present_columns = true && this.isSetColumns();
    boolean that_present_columns = true && that.isSetColumns();
    if (this_present_columns || that_present_columns) {
      if (!(this_present_columns && that_present_columns))
        return false;
      if (!this.columns.equals(that.columns))
        return false;
    }

    boolean this_present_index_type = true && this.isSetIndex_type();
    boolean that_present_index_type = true && that.isSetIndex_type();
    if (this_present_index_type || that_present_index_type) {
      if (!(this_present_index_type && that_present_index_type))
        return false;
      if (!this.index_type.equals(that.index_type))
        return false;
    }

    boolean this_present_if_with_defered_rebuild = true && this.isSetIf_with_defered_rebuild();
    boolean that_present_if_with_defered_rebuild = true && that.isSetIf_with_defered_rebuild();
    if (this_present_if_with_defered_rebuild || that_present_if_with_defered_rebuild) {
      if (!(this_present_if_with_defered_rebuild && that_present_if_with_defered_rebuild))
        return false;
      if (this.if_with_defered_rebuild != that.if_with_defered_rebuild)
        return false;
    }

    boolean this_present_index_properties = true && this.isSetIndex_properties();
    boolean that_present_index_properties = true && that.isSetIndex_properties();
    if (this_present_index_properties || that_present_index_properties) {
      if (!(this_present_index_properties && that_present_index_properties))
        return false;
      if (!this.index_properties.equals(that.index_properties))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_table_name = true && (isSetTable_name());
    builder.append(present_table_name);
    if (present_table_name)
      builder.append(table_name);

    boolean present_index_name = true && (isSetIndex_name());
    builder.append(present_index_name);
    if (present_index_name)
      builder.append(index_name);

    boolean present_columns = true && (isSetColumns());
    builder.append(present_columns);
    if (present_columns)
      builder.append(columns);

    boolean present_index_type = true && (isSetIndex_type());
    builder.append(present_index_type);
    if (present_index_type)
      builder.append(index_type);

    boolean present_if_with_defered_rebuild = true && (isSetIf_with_defered_rebuild());
    builder.append(present_if_with_defered_rebuild);
    if (present_if_with_defered_rebuild)
      builder.append(if_with_defered_rebuild);

    boolean present_index_properties = true && (isSetIndex_properties());
    builder.append(present_index_properties);
    if (present_index_properties)
      builder.append(index_properties);

    return builder.toHashCode();
  }

  public int compareTo(TCreateIndexParms other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TCreateIndexParms typedOther = (TCreateIndexParms)other;

    lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndex_name()).compareTo(typedOther.isSetIndex_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndex_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index_name, typedOther.index_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumns()).compareTo(typedOther.isSetColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, typedOther.columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndex_type()).compareTo(typedOther.isSetIndex_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndex_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index_type, typedOther.index_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIf_with_defered_rebuild()).compareTo(typedOther.isSetIf_with_defered_rebuild());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIf_with_defered_rebuild()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.if_with_defered_rebuild, typedOther.if_with_defered_rebuild);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndex_properties()).compareTo(typedOther.isSetIndex_properties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndex_properties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index_properties, typedOther.index_properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TCreateIndexParms(");
    boolean first = true;

    sb.append("table_name:");
    if (this.table_name == null) {
      sb.append("null");
    } else {
      sb.append(this.table_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("index_name:");
    if (this.index_name == null) {
      sb.append("null");
    } else {
      sb.append(this.index_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("columns:");
    if (this.columns == null) {
      sb.append("null");
    } else {
      sb.append(this.columns);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("index_type:");
    if (this.index_type == null) {
      sb.append("null");
    } else {
      sb.append(this.index_type);
    }
    first = false;
    if (isSetIf_with_defered_rebuild()) {
      if (!first) sb.append(", ");
      sb.append("if_with_defered_rebuild:");
      sb.append(this.if_with_defered_rebuild);
      first = false;
    }
    if (isSetIndex_properties()) {
      if (!first) sb.append(", ");
      sb.append("index_properties:");
      if (this.index_properties == null) {
        sb.append("null");
      } else {
        sb.append(this.index_properties);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (table_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'table_name' was not present! Struct: " + toString());
    }
    if (index_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'index_name' was not present! Struct: " + toString());
    }
    if (columns == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'columns' was not present! Struct: " + toString());
    }
    if (index_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'index_type' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (table_name != null) {
      table_name.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCreateIndexParmsStandardSchemeFactory implements SchemeFactory {
    public TCreateIndexParmsStandardScheme getScheme() {
      return new TCreateIndexParmsStandardScheme();
    }
  }

  private static class TCreateIndexParmsStandardScheme extends StandardScheme<TCreateIndexParms> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCreateIndexParms struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.table_name = new com.cloudera.impala.thrift.TTableName();
              struct.table_name.read(iprot);
              struct.setTable_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INDEX_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.index_name = iprot.readString();
              struct.setIndex_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list210 = iprot.readListBegin();
                struct.columns = new ArrayList<String>(_list210.size);
                for (int _i211 = 0; _i211 < _list210.size; ++_i211)
                {
                  String _elem212; // required
                  _elem212 = iprot.readString();
                  struct.columns.add(_elem212);
                }
                iprot.readListEnd();
              }
              struct.setColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INDEX_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.index_type = iprot.readString();
              struct.setIndex_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IF_WITH_DEFERED_REBUILD
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.if_with_defered_rebuild = iprot.readBool();
              struct.setIf_with_defered_rebuildIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // INDEX_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map213 = iprot.readMapBegin();
                struct.index_properties = new HashMap<String,String>(2*_map213.size);
                for (int _i214 = 0; _i214 < _map213.size; ++_i214)
                {
                  String _key215; // required
                  String _val216; // required
                  _key215 = iprot.readString();
                  _val216 = iprot.readString();
                  struct.index_properties.put(_key215, _val216);
                }
                iprot.readMapEnd();
              }
              struct.setIndex_propertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCreateIndexParms struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        struct.table_name.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.index_name != null) {
        oprot.writeFieldBegin(INDEX_NAME_FIELD_DESC);
        oprot.writeString(struct.index_name);
        oprot.writeFieldEnd();
      }
      if (struct.columns != null) {
        oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.columns.size()));
          for (String _iter217 : struct.columns)
          {
            oprot.writeString(_iter217);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.index_type != null) {
        oprot.writeFieldBegin(INDEX_TYPE_FIELD_DESC);
        oprot.writeString(struct.index_type);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIf_with_defered_rebuild()) {
        oprot.writeFieldBegin(IF_WITH_DEFERED_REBUILD_FIELD_DESC);
        oprot.writeBool(struct.if_with_defered_rebuild);
        oprot.writeFieldEnd();
      }
      if (struct.index_properties != null) {
        if (struct.isSetIndex_properties()) {
          oprot.writeFieldBegin(INDEX_PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.index_properties.size()));
            for (Map.Entry<String, String> _iter218 : struct.index_properties.entrySet())
            {
              oprot.writeString(_iter218.getKey());
              oprot.writeString(_iter218.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCreateIndexParmsTupleSchemeFactory implements SchemeFactory {
    public TCreateIndexParmsTupleScheme getScheme() {
      return new TCreateIndexParmsTupleScheme();
    }
  }

  private static class TCreateIndexParmsTupleScheme extends TupleScheme<TCreateIndexParms> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCreateIndexParms struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.table_name.write(oprot);
      oprot.writeString(struct.index_name);
      {
        oprot.writeI32(struct.columns.size());
        for (String _iter219 : struct.columns)
        {
          oprot.writeString(_iter219);
        }
      }
      oprot.writeString(struct.index_type);
      BitSet optionals = new BitSet();
      if (struct.isSetIf_with_defered_rebuild()) {
        optionals.set(0);
      }
      if (struct.isSetIndex_properties()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetIf_with_defered_rebuild()) {
        oprot.writeBool(struct.if_with_defered_rebuild);
      }
      if (struct.isSetIndex_properties()) {
        {
          oprot.writeI32(struct.index_properties.size());
          for (Map.Entry<String, String> _iter220 : struct.index_properties.entrySet())
          {
            oprot.writeString(_iter220.getKey());
            oprot.writeString(_iter220.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCreateIndexParms struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.table_name = new com.cloudera.impala.thrift.TTableName();
      struct.table_name.read(iprot);
      struct.setTable_nameIsSet(true);
      struct.index_name = iprot.readString();
      struct.setIndex_nameIsSet(true);
      {
        org.apache.thrift.protocol.TList _list221 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.columns = new ArrayList<String>(_list221.size);
        for (int _i222 = 0; _i222 < _list221.size; ++_i222)
        {
          String _elem223; // required
          _elem223 = iprot.readString();
          struct.columns.add(_elem223);
        }
      }
      struct.setColumnsIsSet(true);
      struct.index_type = iprot.readString();
      struct.setIndex_typeIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.if_with_defered_rebuild = iprot.readBool();
        struct.setIf_with_defered_rebuildIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map224 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.index_properties = new HashMap<String,String>(2*_map224.size);
          for (int _i225 = 0; _i225 < _map224.size; ++_i225)
          {
            String _key226; // required
            String _val227; // required
            _key226 = iprot.readString();
            _val227 = iprot.readString();
            struct.index_properties.put(_key226, _val227);
          }
        }
        struct.setIndex_propertiesIsSet(true);
      }
    }
  }

}

