/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TResolveRequestPoolResult implements org.apache.thrift.TBase<TResolveRequestPoolResult, TResolveRequestPoolResult._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TResolveRequestPoolResult");

  private static final org.apache.thrift.protocol.TField RESOLVED_POOL_FIELD_DESC = new org.apache.thrift.protocol.TField("resolved_pool", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField HAS_ACCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("has_access", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TResolveRequestPoolResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TResolveRequestPoolResultTupleSchemeFactory());
  }

  public String resolved_pool; // optional
  public boolean has_access; // optional
  public com.cloudera.impala.thrift.TStatus status; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RESOLVED_POOL((short)1, "resolved_pool"),
    HAS_ACCESS((short)2, "has_access"),
    STATUS((short)3, "status");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESOLVED_POOL
          return RESOLVED_POOL;
        case 2: // HAS_ACCESS
          return HAS_ACCESS;
        case 3: // STATUS
          return STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HAS_ACCESS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.RESOLVED_POOL,_Fields.HAS_ACCESS,_Fields.STATUS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESOLVED_POOL, new org.apache.thrift.meta_data.FieldMetaData("resolved_pool", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HAS_ACCESS, new org.apache.thrift.meta_data.FieldMetaData("has_access", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TStatus.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TResolveRequestPoolResult.class, metaDataMap);
  }

  public TResolveRequestPoolResult() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TResolveRequestPoolResult(TResolveRequestPoolResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetResolved_pool()) {
      this.resolved_pool = other.resolved_pool;
    }
    this.has_access = other.has_access;
    if (other.isSetStatus()) {
      this.status = new com.cloudera.impala.thrift.TStatus(other.status);
    }
  }

  public TResolveRequestPoolResult deepCopy() {
    return new TResolveRequestPoolResult(this);
  }

  @Override
  public void clear() {
    this.resolved_pool = null;
    setHas_accessIsSet(false);
    this.has_access = false;
    this.status = null;
  }

  public String getResolved_pool() {
    return this.resolved_pool;
  }

  public TResolveRequestPoolResult setResolved_pool(String resolved_pool) {
    this.resolved_pool = resolved_pool;
    return this;
  }

  public void unsetResolved_pool() {
    this.resolved_pool = null;
  }

  /** Returns true if field resolved_pool is set (has been assigned a value) and false otherwise */
  public boolean isSetResolved_pool() {
    return this.resolved_pool != null;
  }

  public void setResolved_poolIsSet(boolean value) {
    if (!value) {
      this.resolved_pool = null;
    }
  }

  public boolean isHas_access() {
    return this.has_access;
  }

  public TResolveRequestPoolResult setHas_access(boolean has_access) {
    this.has_access = has_access;
    setHas_accessIsSet(true);
    return this;
  }

  public void unsetHas_access() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HAS_ACCESS_ISSET_ID);
  }

  /** Returns true if field has_access is set (has been assigned a value) and false otherwise */
  public boolean isSetHas_access() {
    return EncodingUtils.testBit(__isset_bitfield, __HAS_ACCESS_ISSET_ID);
  }

  public void setHas_accessIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HAS_ACCESS_ISSET_ID, value);
  }

  public com.cloudera.impala.thrift.TStatus getStatus() {
    return this.status;
  }

  public TResolveRequestPoolResult setStatus(com.cloudera.impala.thrift.TStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESOLVED_POOL:
      if (value == null) {
        unsetResolved_pool();
      } else {
        setResolved_pool((String)value);
      }
      break;

    case HAS_ACCESS:
      if (value == null) {
        unsetHas_access();
      } else {
        setHas_access((Boolean)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((com.cloudera.impala.thrift.TStatus)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESOLVED_POOL:
      return getResolved_pool();

    case HAS_ACCESS:
      return Boolean.valueOf(isHas_access());

    case STATUS:
      return getStatus();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESOLVED_POOL:
      return isSetResolved_pool();
    case HAS_ACCESS:
      return isSetHas_access();
    case STATUS:
      return isSetStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TResolveRequestPoolResult)
      return this.equals((TResolveRequestPoolResult)that);
    return false;
  }

  public boolean equals(TResolveRequestPoolResult that) {
    if (that == null)
      return false;

    boolean this_present_resolved_pool = true && this.isSetResolved_pool();
    boolean that_present_resolved_pool = true && that.isSetResolved_pool();
    if (this_present_resolved_pool || that_present_resolved_pool) {
      if (!(this_present_resolved_pool && that_present_resolved_pool))
        return false;
      if (!this.resolved_pool.equals(that.resolved_pool))
        return false;
    }

    boolean this_present_has_access = true && this.isSetHas_access();
    boolean that_present_has_access = true && that.isSetHas_access();
    if (this_present_has_access || that_present_has_access) {
      if (!(this_present_has_access && that_present_has_access))
        return false;
      if (this.has_access != that.has_access)
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_resolved_pool = true && (isSetResolved_pool());
    builder.append(present_resolved_pool);
    if (present_resolved_pool)
      builder.append(resolved_pool);

    boolean present_has_access = true && (isSetHas_access());
    builder.append(present_has_access);
    if (present_has_access)
      builder.append(has_access);

    boolean present_status = true && (isSetStatus());
    builder.append(present_status);
    if (present_status)
      builder.append(status);

    return builder.toHashCode();
  }

  public int compareTo(TResolveRequestPoolResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TResolveRequestPoolResult typedOther = (TResolveRequestPoolResult)other;

    lastComparison = Boolean.valueOf(isSetResolved_pool()).compareTo(typedOther.isSetResolved_pool());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResolved_pool()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resolved_pool, typedOther.resolved_pool);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHas_access()).compareTo(typedOther.isSetHas_access());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHas_access()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.has_access, typedOther.has_access);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TResolveRequestPoolResult(");
    boolean first = true;

    if (isSetResolved_pool()) {
      sb.append("resolved_pool:");
      if (this.resolved_pool == null) {
        sb.append("null");
      } else {
        sb.append(this.resolved_pool);
      }
      first = false;
    }
    if (isSetHas_access()) {
      if (!first) sb.append(", ");
      sb.append("has_access:");
      sb.append(this.has_access);
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (status != null) {
      status.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TResolveRequestPoolResultStandardSchemeFactory implements SchemeFactory {
    public TResolveRequestPoolResultStandardScheme getScheme() {
      return new TResolveRequestPoolResultStandardScheme();
    }
  }

  private static class TResolveRequestPoolResultStandardScheme extends StandardScheme<TResolveRequestPoolResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TResolveRequestPoolResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESOLVED_POOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resolved_pool = iprot.readString();
              struct.setResolved_poolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HAS_ACCESS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.has_access = iprot.readBool();
              struct.setHas_accessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.status = new com.cloudera.impala.thrift.TStatus();
              struct.status.read(iprot);
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TResolveRequestPoolResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.resolved_pool != null) {
        if (struct.isSetResolved_pool()) {
          oprot.writeFieldBegin(RESOLVED_POOL_FIELD_DESC);
          oprot.writeString(struct.resolved_pool);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetHas_access()) {
        oprot.writeFieldBegin(HAS_ACCESS_FIELD_DESC);
        oprot.writeBool(struct.has_access);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          struct.status.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TResolveRequestPoolResultTupleSchemeFactory implements SchemeFactory {
    public TResolveRequestPoolResultTupleScheme getScheme() {
      return new TResolveRequestPoolResultTupleScheme();
    }
  }

  private static class TResolveRequestPoolResultTupleScheme extends TupleScheme<TResolveRequestPoolResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TResolveRequestPoolResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetResolved_pool()) {
        optionals.set(0);
      }
      if (struct.isSetHas_access()) {
        optionals.set(1);
      }
      if (struct.isSetStatus()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetResolved_pool()) {
        oprot.writeString(struct.resolved_pool);
      }
      if (struct.isSetHas_access()) {
        oprot.writeBool(struct.has_access);
      }
      if (struct.isSetStatus()) {
        struct.status.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TResolveRequestPoolResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.resolved_pool = iprot.readString();
        struct.setResolved_poolIsSet(true);
      }
      if (incoming.get(1)) {
        struct.has_access = iprot.readBool();
        struct.setHas_accessIsSet(true);
      }
      if (incoming.get(2)) {
        struct.status = new com.cloudera.impala.thrift.TStatus();
        struct.status.read(iprot);
        struct.setStatusIsSet(true);
      }
    }
  }

}

