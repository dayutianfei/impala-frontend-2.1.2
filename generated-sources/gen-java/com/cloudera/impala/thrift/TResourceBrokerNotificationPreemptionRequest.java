/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TResourceBrokerNotificationPreemptionRequest implements org.apache.thrift.TBase<TResourceBrokerNotificationPreemptionRequest, TResourceBrokerNotificationPreemptionRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TResourceBrokerNotificationPreemptionRequest");

  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PREEMPTED_RM_RESOURCE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("preempted_rm_resource_ids", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TResourceBrokerNotificationPreemptionRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TResourceBrokerNotificationPreemptionRequestTupleSchemeFactory());
  }

  /**
   * 
   * @see TResourceBrokerServiceVersion
   */
  public TResourceBrokerServiceVersion version; // required
  public List<String> preempted_rm_resource_ids; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TResourceBrokerServiceVersion
     */
    VERSION((short)1, "version"),
    PREEMPTED_RM_RESOURCE_IDS((short)2, "preempted_rm_resource_ids");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERSION
          return VERSION;
        case 2: // PREEMPTED_RM_RESOURCE_IDS
          return PREEMPTED_RM_RESOURCE_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.PREEMPTED_RM_RESOURCE_IDS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TResourceBrokerServiceVersion.class)));
    tmpMap.put(_Fields.PREEMPTED_RM_RESOURCE_IDS, new org.apache.thrift.meta_data.FieldMetaData("preempted_rm_resource_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TResourceBrokerNotificationPreemptionRequest.class, metaDataMap);
  }

  public TResourceBrokerNotificationPreemptionRequest() {
  }

  public TResourceBrokerNotificationPreemptionRequest(
    TResourceBrokerServiceVersion version)
  {
    this();
    this.version = version;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TResourceBrokerNotificationPreemptionRequest(TResourceBrokerNotificationPreemptionRequest other) {
    if (other.isSetVersion()) {
      this.version = other.version;
    }
    if (other.isSetPreempted_rm_resource_ids()) {
      List<String> __this__preempted_rm_resource_ids = new ArrayList<String>();
      for (String other_element : other.preempted_rm_resource_ids) {
        __this__preempted_rm_resource_ids.add(other_element);
      }
      this.preempted_rm_resource_ids = __this__preempted_rm_resource_ids;
    }
  }

  public TResourceBrokerNotificationPreemptionRequest deepCopy() {
    return new TResourceBrokerNotificationPreemptionRequest(this);
  }

  @Override
  public void clear() {
    this.version = null;
    this.preempted_rm_resource_ids = null;
  }

  /**
   * 
   * @see TResourceBrokerServiceVersion
   */
  public TResourceBrokerServiceVersion getVersion() {
    return this.version;
  }

  /**
   * 
   * @see TResourceBrokerServiceVersion
   */
  public TResourceBrokerNotificationPreemptionRequest setVersion(TResourceBrokerServiceVersion version) {
    this.version = version;
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  public int getPreempted_rm_resource_idsSize() {
    return (this.preempted_rm_resource_ids == null) ? 0 : this.preempted_rm_resource_ids.size();
  }

  public java.util.Iterator<String> getPreempted_rm_resource_idsIterator() {
    return (this.preempted_rm_resource_ids == null) ? null : this.preempted_rm_resource_ids.iterator();
  }

  public void addToPreempted_rm_resource_ids(String elem) {
    if (this.preempted_rm_resource_ids == null) {
      this.preempted_rm_resource_ids = new ArrayList<String>();
    }
    this.preempted_rm_resource_ids.add(elem);
  }

  public List<String> getPreempted_rm_resource_ids() {
    return this.preempted_rm_resource_ids;
  }

  public TResourceBrokerNotificationPreemptionRequest setPreempted_rm_resource_ids(List<String> preempted_rm_resource_ids) {
    this.preempted_rm_resource_ids = preempted_rm_resource_ids;
    return this;
  }

  public void unsetPreempted_rm_resource_ids() {
    this.preempted_rm_resource_ids = null;
  }

  /** Returns true if field preempted_rm_resource_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetPreempted_rm_resource_ids() {
    return this.preempted_rm_resource_ids != null;
  }

  public void setPreempted_rm_resource_idsIsSet(boolean value) {
    if (!value) {
      this.preempted_rm_resource_ids = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((TResourceBrokerServiceVersion)value);
      }
      break;

    case PREEMPTED_RM_RESOURCE_IDS:
      if (value == null) {
        unsetPreempted_rm_resource_ids();
      } else {
        setPreempted_rm_resource_ids((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VERSION:
      return getVersion();

    case PREEMPTED_RM_RESOURCE_IDS:
      return getPreempted_rm_resource_ids();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VERSION:
      return isSetVersion();
    case PREEMPTED_RM_RESOURCE_IDS:
      return isSetPreempted_rm_resource_ids();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TResourceBrokerNotificationPreemptionRequest)
      return this.equals((TResourceBrokerNotificationPreemptionRequest)that);
    return false;
  }

  public boolean equals(TResourceBrokerNotificationPreemptionRequest that) {
    if (that == null)
      return false;

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }

    boolean this_present_preempted_rm_resource_ids = true && this.isSetPreempted_rm_resource_ids();
    boolean that_present_preempted_rm_resource_ids = true && that.isSetPreempted_rm_resource_ids();
    if (this_present_preempted_rm_resource_ids || that_present_preempted_rm_resource_ids) {
      if (!(this_present_preempted_rm_resource_ids && that_present_preempted_rm_resource_ids))
        return false;
      if (!this.preempted_rm_resource_ids.equals(that.preempted_rm_resource_ids))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_version = true && (isSetVersion());
    builder.append(present_version);
    if (present_version)
      builder.append(version.getValue());

    boolean present_preempted_rm_resource_ids = true && (isSetPreempted_rm_resource_ids());
    builder.append(present_preempted_rm_resource_ids);
    if (present_preempted_rm_resource_ids)
      builder.append(preempted_rm_resource_ids);

    return builder.toHashCode();
  }

  public int compareTo(TResourceBrokerNotificationPreemptionRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TResourceBrokerNotificationPreemptionRequest typedOther = (TResourceBrokerNotificationPreemptionRequest)other;

    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(typedOther.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, typedOther.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreempted_rm_resource_ids()).compareTo(typedOther.isSetPreempted_rm_resource_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreempted_rm_resource_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preempted_rm_resource_ids, typedOther.preempted_rm_resource_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TResourceBrokerNotificationPreemptionRequest(");
    boolean first = true;

    sb.append("version:");
    if (this.version == null) {
      sb.append("null");
    } else {
      sb.append(this.version);
    }
    first = false;
    if (isSetPreempted_rm_resource_ids()) {
      if (!first) sb.append(", ");
      sb.append("preempted_rm_resource_ids:");
      if (this.preempted_rm_resource_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.preempted_rm_resource_ids);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (version == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'version' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TResourceBrokerNotificationPreemptionRequestStandardSchemeFactory implements SchemeFactory {
    public TResourceBrokerNotificationPreemptionRequestStandardScheme getScheme() {
      return new TResourceBrokerNotificationPreemptionRequestStandardScheme();
    }
  }

  private static class TResourceBrokerNotificationPreemptionRequestStandardScheme extends StandardScheme<TResourceBrokerNotificationPreemptionRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TResourceBrokerNotificationPreemptionRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version = TResourceBrokerServiceVersion.findByValue(iprot.readI32());
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PREEMPTED_RM_RESOURCE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
                struct.preempted_rm_resource_ids = new ArrayList<String>(_list28.size);
                for (int _i29 = 0; _i29 < _list28.size; ++_i29)
                {
                  String _elem30; // required
                  _elem30 = iprot.readString();
                  struct.preempted_rm_resource_ids.add(_elem30);
                }
                iprot.readListEnd();
              }
              struct.setPreempted_rm_resource_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TResourceBrokerNotificationPreemptionRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.version != null) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeI32(struct.version.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.preempted_rm_resource_ids != null) {
        if (struct.isSetPreempted_rm_resource_ids()) {
          oprot.writeFieldBegin(PREEMPTED_RM_RESOURCE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.preempted_rm_resource_ids.size()));
            for (String _iter31 : struct.preempted_rm_resource_ids)
            {
              oprot.writeString(_iter31);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TResourceBrokerNotificationPreemptionRequestTupleSchemeFactory implements SchemeFactory {
    public TResourceBrokerNotificationPreemptionRequestTupleScheme getScheme() {
      return new TResourceBrokerNotificationPreemptionRequestTupleScheme();
    }
  }

  private static class TResourceBrokerNotificationPreemptionRequestTupleScheme extends TupleScheme<TResourceBrokerNotificationPreemptionRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TResourceBrokerNotificationPreemptionRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.version.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetPreempted_rm_resource_ids()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetPreempted_rm_resource_ids()) {
        {
          oprot.writeI32(struct.preempted_rm_resource_ids.size());
          for (String _iter32 : struct.preempted_rm_resource_ids)
          {
            oprot.writeString(_iter32);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TResourceBrokerNotificationPreemptionRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.version = TResourceBrokerServiceVersion.findByValue(iprot.readI32());
      struct.setVersionIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list33 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.preempted_rm_resource_ids = new ArrayList<String>(_list33.size);
          for (int _i34 = 0; _i34 < _list33.size; ++_i34)
          {
            String _elem35; // required
            _elem35 = iprot.readString();
            struct.preempted_rm_resource_ids.add(_elem35);
          }
        }
        struct.setPreempted_rm_resource_idsIsSet(true);
      }
    }
  }

}

