/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TUpdateCatalogRequest implements org.apache.thrift.TBase<TUpdateCatalogRequest, TUpdateCatalogRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TUpdateCatalogRequest");

  private static final org.apache.thrift.protocol.TField PROTOCOL_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("protocol_version", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("header", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField TARGET_TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("target_table", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("db_name", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CREATED_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("created_partitions", org.apache.thrift.protocol.TType.SET, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TUpdateCatalogRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TUpdateCatalogRequestTupleSchemeFactory());
  }

  /**
   * 
   * @see CatalogServiceVersion
   */
  public CatalogServiceVersion protocol_version; // required
  public TCatalogServiceRequestHeader header; // optional
  public String target_table; // required
  public String db_name; // required
  public Set<String> created_partitions; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see CatalogServiceVersion
     */
    PROTOCOL_VERSION((short)1, "protocol_version"),
    HEADER((short)2, "header"),
    TARGET_TABLE((short)3, "target_table"),
    DB_NAME((short)4, "db_name"),
    CREATED_PARTITIONS((short)5, "created_partitions");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROTOCOL_VERSION
          return PROTOCOL_VERSION;
        case 2: // HEADER
          return HEADER;
        case 3: // TARGET_TABLE
          return TARGET_TABLE;
        case 4: // DB_NAME
          return DB_NAME;
        case 5: // CREATED_PARTITIONS
          return CREATED_PARTITIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.HEADER};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROTOCOL_VERSION, new org.apache.thrift.meta_data.FieldMetaData("protocol_version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CatalogServiceVersion.class)));
    tmpMap.put(_Fields.HEADER, new org.apache.thrift.meta_data.FieldMetaData("header", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCatalogServiceRequestHeader.class)));
    tmpMap.put(_Fields.TARGET_TABLE, new org.apache.thrift.meta_data.FieldMetaData("target_table", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("db_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATED_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("created_partitions", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TUpdateCatalogRequest.class, metaDataMap);
  }

  public TUpdateCatalogRequest() {
    this.protocol_version = com.cloudera.impala.thrift.CatalogServiceVersion.V1;

  }

  public TUpdateCatalogRequest(
    CatalogServiceVersion protocol_version,
    String target_table,
    String db_name,
    Set<String> created_partitions)
  {
    this();
    this.protocol_version = protocol_version;
    this.target_table = target_table;
    this.db_name = db_name;
    this.created_partitions = created_partitions;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TUpdateCatalogRequest(TUpdateCatalogRequest other) {
    if (other.isSetProtocol_version()) {
      this.protocol_version = other.protocol_version;
    }
    if (other.isSetHeader()) {
      this.header = new TCatalogServiceRequestHeader(other.header);
    }
    if (other.isSetTarget_table()) {
      this.target_table = other.target_table;
    }
    if (other.isSetDb_name()) {
      this.db_name = other.db_name;
    }
    if (other.isSetCreated_partitions()) {
      Set<String> __this__created_partitions = new HashSet<String>();
      for (String other_element : other.created_partitions) {
        __this__created_partitions.add(other_element);
      }
      this.created_partitions = __this__created_partitions;
    }
  }

  public TUpdateCatalogRequest deepCopy() {
    return new TUpdateCatalogRequest(this);
  }

  @Override
  public void clear() {
    this.protocol_version = com.cloudera.impala.thrift.CatalogServiceVersion.V1;

    this.header = null;
    this.target_table = null;
    this.db_name = null;
    this.created_partitions = null;
  }

  /**
   * 
   * @see CatalogServiceVersion
   */
  public CatalogServiceVersion getProtocol_version() {
    return this.protocol_version;
  }

  /**
   * 
   * @see CatalogServiceVersion
   */
  public TUpdateCatalogRequest setProtocol_version(CatalogServiceVersion protocol_version) {
    this.protocol_version = protocol_version;
    return this;
  }

  public void unsetProtocol_version() {
    this.protocol_version = null;
  }

  /** Returns true if field protocol_version is set (has been assigned a value) and false otherwise */
  public boolean isSetProtocol_version() {
    return this.protocol_version != null;
  }

  public void setProtocol_versionIsSet(boolean value) {
    if (!value) {
      this.protocol_version = null;
    }
  }

  public TCatalogServiceRequestHeader getHeader() {
    return this.header;
  }

  public TUpdateCatalogRequest setHeader(TCatalogServiceRequestHeader header) {
    this.header = header;
    return this;
  }

  public void unsetHeader() {
    this.header = null;
  }

  /** Returns true if field header is set (has been assigned a value) and false otherwise */
  public boolean isSetHeader() {
    return this.header != null;
  }

  public void setHeaderIsSet(boolean value) {
    if (!value) {
      this.header = null;
    }
  }

  public String getTarget_table() {
    return this.target_table;
  }

  public TUpdateCatalogRequest setTarget_table(String target_table) {
    this.target_table = target_table;
    return this;
  }

  public void unsetTarget_table() {
    this.target_table = null;
  }

  /** Returns true if field target_table is set (has been assigned a value) and false otherwise */
  public boolean isSetTarget_table() {
    return this.target_table != null;
  }

  public void setTarget_tableIsSet(boolean value) {
    if (!value) {
      this.target_table = null;
    }
  }

  public String getDb_name() {
    return this.db_name;
  }

  public TUpdateCatalogRequest setDb_name(String db_name) {
    this.db_name = db_name;
    return this;
  }

  public void unsetDb_name() {
    this.db_name = null;
  }

  /** Returns true if field db_name is set (has been assigned a value) and false otherwise */
  public boolean isSetDb_name() {
    return this.db_name != null;
  }

  public void setDb_nameIsSet(boolean value) {
    if (!value) {
      this.db_name = null;
    }
  }

  public int getCreated_partitionsSize() {
    return (this.created_partitions == null) ? 0 : this.created_partitions.size();
  }

  public java.util.Iterator<String> getCreated_partitionsIterator() {
    return (this.created_partitions == null) ? null : this.created_partitions.iterator();
  }

  public void addToCreated_partitions(String elem) {
    if (this.created_partitions == null) {
      this.created_partitions = new HashSet<String>();
    }
    this.created_partitions.add(elem);
  }

  public Set<String> getCreated_partitions() {
    return this.created_partitions;
  }

  public TUpdateCatalogRequest setCreated_partitions(Set<String> created_partitions) {
    this.created_partitions = created_partitions;
    return this;
  }

  public void unsetCreated_partitions() {
    this.created_partitions = null;
  }

  /** Returns true if field created_partitions is set (has been assigned a value) and false otherwise */
  public boolean isSetCreated_partitions() {
    return this.created_partitions != null;
  }

  public void setCreated_partitionsIsSet(boolean value) {
    if (!value) {
      this.created_partitions = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROTOCOL_VERSION:
      if (value == null) {
        unsetProtocol_version();
      } else {
        setProtocol_version((CatalogServiceVersion)value);
      }
      break;

    case HEADER:
      if (value == null) {
        unsetHeader();
      } else {
        setHeader((TCatalogServiceRequestHeader)value);
      }
      break;

    case TARGET_TABLE:
      if (value == null) {
        unsetTarget_table();
      } else {
        setTarget_table((String)value);
      }
      break;

    case DB_NAME:
      if (value == null) {
        unsetDb_name();
      } else {
        setDb_name((String)value);
      }
      break;

    case CREATED_PARTITIONS:
      if (value == null) {
        unsetCreated_partitions();
      } else {
        setCreated_partitions((Set<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROTOCOL_VERSION:
      return getProtocol_version();

    case HEADER:
      return getHeader();

    case TARGET_TABLE:
      return getTarget_table();

    case DB_NAME:
      return getDb_name();

    case CREATED_PARTITIONS:
      return getCreated_partitions();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROTOCOL_VERSION:
      return isSetProtocol_version();
    case HEADER:
      return isSetHeader();
    case TARGET_TABLE:
      return isSetTarget_table();
    case DB_NAME:
      return isSetDb_name();
    case CREATED_PARTITIONS:
      return isSetCreated_partitions();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TUpdateCatalogRequest)
      return this.equals((TUpdateCatalogRequest)that);
    return false;
  }

  public boolean equals(TUpdateCatalogRequest that) {
    if (that == null)
      return false;

    boolean this_present_protocol_version = true && this.isSetProtocol_version();
    boolean that_present_protocol_version = true && that.isSetProtocol_version();
    if (this_present_protocol_version || that_present_protocol_version) {
      if (!(this_present_protocol_version && that_present_protocol_version))
        return false;
      if (!this.protocol_version.equals(that.protocol_version))
        return false;
    }

    boolean this_present_header = true && this.isSetHeader();
    boolean that_present_header = true && that.isSetHeader();
    if (this_present_header || that_present_header) {
      if (!(this_present_header && that_present_header))
        return false;
      if (!this.header.equals(that.header))
        return false;
    }

    boolean this_present_target_table = true && this.isSetTarget_table();
    boolean that_present_target_table = true && that.isSetTarget_table();
    if (this_present_target_table || that_present_target_table) {
      if (!(this_present_target_table && that_present_target_table))
        return false;
      if (!this.target_table.equals(that.target_table))
        return false;
    }

    boolean this_present_db_name = true && this.isSetDb_name();
    boolean that_present_db_name = true && that.isSetDb_name();
    if (this_present_db_name || that_present_db_name) {
      if (!(this_present_db_name && that_present_db_name))
        return false;
      if (!this.db_name.equals(that.db_name))
        return false;
    }

    boolean this_present_created_partitions = true && this.isSetCreated_partitions();
    boolean that_present_created_partitions = true && that.isSetCreated_partitions();
    if (this_present_created_partitions || that_present_created_partitions) {
      if (!(this_present_created_partitions && that_present_created_partitions))
        return false;
      if (!this.created_partitions.equals(that.created_partitions))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_protocol_version = true && (isSetProtocol_version());
    builder.append(present_protocol_version);
    if (present_protocol_version)
      builder.append(protocol_version.getValue());

    boolean present_header = true && (isSetHeader());
    builder.append(present_header);
    if (present_header)
      builder.append(header);

    boolean present_target_table = true && (isSetTarget_table());
    builder.append(present_target_table);
    if (present_target_table)
      builder.append(target_table);

    boolean present_db_name = true && (isSetDb_name());
    builder.append(present_db_name);
    if (present_db_name)
      builder.append(db_name);

    boolean present_created_partitions = true && (isSetCreated_partitions());
    builder.append(present_created_partitions);
    if (present_created_partitions)
      builder.append(created_partitions);

    return builder.toHashCode();
  }

  public int compareTo(TUpdateCatalogRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TUpdateCatalogRequest typedOther = (TUpdateCatalogRequest)other;

    lastComparison = Boolean.valueOf(isSetProtocol_version()).compareTo(typedOther.isSetProtocol_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtocol_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocol_version, typedOther.protocol_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeader()).compareTo(typedOther.isSetHeader());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeader()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.header, typedOther.header);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTarget_table()).compareTo(typedOther.isSetTarget_table());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTarget_table()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.target_table, typedOther.target_table);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDb_name()).compareTo(typedOther.isSetDb_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db_name, typedOther.db_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreated_partitions()).compareTo(typedOther.isSetCreated_partitions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreated_partitions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.created_partitions, typedOther.created_partitions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TUpdateCatalogRequest(");
    boolean first = true;

    sb.append("protocol_version:");
    if (this.protocol_version == null) {
      sb.append("null");
    } else {
      sb.append(this.protocol_version);
    }
    first = false;
    if (isSetHeader()) {
      if (!first) sb.append(", ");
      sb.append("header:");
      if (this.header == null) {
        sb.append("null");
      } else {
        sb.append(this.header);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("target_table:");
    if (this.target_table == null) {
      sb.append("null");
    } else {
      sb.append(this.target_table);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("db_name:");
    if (this.db_name == null) {
      sb.append("null");
    } else {
      sb.append(this.db_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("created_partitions:");
    if (this.created_partitions == null) {
      sb.append("null");
    } else {
      sb.append(this.created_partitions);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (protocol_version == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'protocol_version' was not present! Struct: " + toString());
    }
    if (target_table == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'target_table' was not present! Struct: " + toString());
    }
    if (db_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'db_name' was not present! Struct: " + toString());
    }
    if (created_partitions == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'created_partitions' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (header != null) {
      header.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TUpdateCatalogRequestStandardSchemeFactory implements SchemeFactory {
    public TUpdateCatalogRequestStandardScheme getScheme() {
      return new TUpdateCatalogRequestStandardScheme();
    }
  }

  private static class TUpdateCatalogRequestStandardScheme extends StandardScheme<TUpdateCatalogRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TUpdateCatalogRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROTOCOL_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.protocol_version = CatalogServiceVersion.findByValue(iprot.readI32());
              struct.setProtocol_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HEADER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.header = new TCatalogServiceRequestHeader();
              struct.header.read(iprot);
              struct.setHeaderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TARGET_TABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.target_table = iprot.readString();
              struct.setTarget_tableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.db_name = iprot.readString();
              struct.setDb_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CREATED_PARTITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.created_partitions = new HashSet<String>(2*_set0.size);
                for (int _i1 = 0; _i1 < _set0.size; ++_i1)
                {
                  String _elem2; // required
                  _elem2 = iprot.readString();
                  struct.created_partitions.add(_elem2);
                }
                iprot.readSetEnd();
              }
              struct.setCreated_partitionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TUpdateCatalogRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.protocol_version != null) {
        oprot.writeFieldBegin(PROTOCOL_VERSION_FIELD_DESC);
        oprot.writeI32(struct.protocol_version.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.header != null) {
        if (struct.isSetHeader()) {
          oprot.writeFieldBegin(HEADER_FIELD_DESC);
          struct.header.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.target_table != null) {
        oprot.writeFieldBegin(TARGET_TABLE_FIELD_DESC);
        oprot.writeString(struct.target_table);
        oprot.writeFieldEnd();
      }
      if (struct.db_name != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(struct.db_name);
        oprot.writeFieldEnd();
      }
      if (struct.created_partitions != null) {
        oprot.writeFieldBegin(CREATED_PARTITIONS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.created_partitions.size()));
          for (String _iter3 : struct.created_partitions)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TUpdateCatalogRequestTupleSchemeFactory implements SchemeFactory {
    public TUpdateCatalogRequestTupleScheme getScheme() {
      return new TUpdateCatalogRequestTupleScheme();
    }
  }

  private static class TUpdateCatalogRequestTupleScheme extends TupleScheme<TUpdateCatalogRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TUpdateCatalogRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.protocol_version.getValue());
      oprot.writeString(struct.target_table);
      oprot.writeString(struct.db_name);
      {
        oprot.writeI32(struct.created_partitions.size());
        for (String _iter4 : struct.created_partitions)
        {
          oprot.writeString(_iter4);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetHeader()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetHeader()) {
        struct.header.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TUpdateCatalogRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.protocol_version = CatalogServiceVersion.findByValue(iprot.readI32());
      struct.setProtocol_versionIsSet(true);
      struct.target_table = iprot.readString();
      struct.setTarget_tableIsSet(true);
      struct.db_name = iprot.readString();
      struct.setDb_nameIsSet(true);
      {
        org.apache.thrift.protocol.TSet _set5 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.created_partitions = new HashSet<String>(2*_set5.size);
        for (int _i6 = 0; _i6 < _set5.size; ++_i6)
        {
          String _elem7; // required
          _elem7 = iprot.readString();
          struct.created_partitions.add(_elem7);
        }
      }
      struct.setCreated_partitionsIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.header = new TCatalogServiceRequestHeader();
        struct.header.read(iprot);
        struct.setHeaderIsSet(true);
      }
    }
  }

}

