/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TRuntimeProfileNode implements org.apache.thrift.TBase<TRuntimeProfileNode, TRuntimeProfileNode._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TRuntimeProfileNode");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NUM_CHILDREN_FIELD_DESC = new org.apache.thrift.protocol.TField("num_children", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField COUNTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("counters", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField INDENT_FIELD_DESC = new org.apache.thrift.protocol.TField("indent", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField INFO_STRINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("info_strings", org.apache.thrift.protocol.TType.MAP, (short)6);
  private static final org.apache.thrift.protocol.TField INFO_STRINGS_DISPLAY_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("info_strings_display_order", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField CHILD_COUNTERS_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("child_counters_map", org.apache.thrift.protocol.TType.MAP, (short)8);
  private static final org.apache.thrift.protocol.TField EVENT_SEQUENCES_FIELD_DESC = new org.apache.thrift.protocol.TField("event_sequences", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField TIME_SERIES_COUNTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("time_series_counters", org.apache.thrift.protocol.TType.LIST, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TRuntimeProfileNodeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TRuntimeProfileNodeTupleSchemeFactory());
  }

  public String name; // required
  public int num_children; // required
  public List<TCounter> counters; // required
  public long metadata; // required
  public boolean indent; // required
  public Map<String,String> info_strings; // required
  public List<String> info_strings_display_order; // required
  public Map<String,Set<String>> child_counters_map; // required
  public List<TEventSequence> event_sequences; // optional
  public List<TTimeSeriesCounter> time_series_counters; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    NUM_CHILDREN((short)2, "num_children"),
    COUNTERS((short)3, "counters"),
    METADATA((short)4, "metadata"),
    INDENT((short)5, "indent"),
    INFO_STRINGS((short)6, "info_strings"),
    INFO_STRINGS_DISPLAY_ORDER((short)7, "info_strings_display_order"),
    CHILD_COUNTERS_MAP((short)8, "child_counters_map"),
    EVENT_SEQUENCES((short)9, "event_sequences"),
    TIME_SERIES_COUNTERS((short)10, "time_series_counters");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // NUM_CHILDREN
          return NUM_CHILDREN;
        case 3: // COUNTERS
          return COUNTERS;
        case 4: // METADATA
          return METADATA;
        case 5: // INDENT
          return INDENT;
        case 6: // INFO_STRINGS
          return INFO_STRINGS;
        case 7: // INFO_STRINGS_DISPLAY_ORDER
          return INFO_STRINGS_DISPLAY_ORDER;
        case 8: // CHILD_COUNTERS_MAP
          return CHILD_COUNTERS_MAP;
        case 9: // EVENT_SEQUENCES
          return EVENT_SEQUENCES;
        case 10: // TIME_SERIES_COUNTERS
          return TIME_SERIES_COUNTERS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUM_CHILDREN_ISSET_ID = 0;
  private static final int __METADATA_ISSET_ID = 1;
  private static final int __INDENT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.EVENT_SEQUENCES,_Fields.TIME_SERIES_COUNTERS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUM_CHILDREN, new org.apache.thrift.meta_data.FieldMetaData("num_children", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COUNTERS, new org.apache.thrift.meta_data.FieldMetaData("counters", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCounter.class))));
    tmpMap.put(_Fields.METADATA, new org.apache.thrift.meta_data.FieldMetaData("metadata", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INDENT, new org.apache.thrift.meta_data.FieldMetaData("indent", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INFO_STRINGS, new org.apache.thrift.meta_data.FieldMetaData("info_strings", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.INFO_STRINGS_DISPLAY_ORDER, new org.apache.thrift.meta_data.FieldMetaData("info_strings_display_order", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CHILD_COUNTERS_MAP, new org.apache.thrift.meta_data.FieldMetaData("child_counters_map", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.EVENT_SEQUENCES, new org.apache.thrift.meta_data.FieldMetaData("event_sequences", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEventSequence.class))));
    tmpMap.put(_Fields.TIME_SERIES_COUNTERS, new org.apache.thrift.meta_data.FieldMetaData("time_series_counters", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTimeSeriesCounter.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TRuntimeProfileNode.class, metaDataMap);
  }

  public TRuntimeProfileNode() {
  }

  public TRuntimeProfileNode(
    String name,
    int num_children,
    List<TCounter> counters,
    long metadata,
    boolean indent,
    Map<String,String> info_strings,
    List<String> info_strings_display_order,
    Map<String,Set<String>> child_counters_map)
  {
    this();
    this.name = name;
    this.num_children = num_children;
    setNum_childrenIsSet(true);
    this.counters = counters;
    this.metadata = metadata;
    setMetadataIsSet(true);
    this.indent = indent;
    setIndentIsSet(true);
    this.info_strings = info_strings;
    this.info_strings_display_order = info_strings_display_order;
    this.child_counters_map = child_counters_map;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TRuntimeProfileNode(TRuntimeProfileNode other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.num_children = other.num_children;
    if (other.isSetCounters()) {
      List<TCounter> __this__counters = new ArrayList<TCounter>();
      for (TCounter other_element : other.counters) {
        __this__counters.add(new TCounter(other_element));
      }
      this.counters = __this__counters;
    }
    this.metadata = other.metadata;
    this.indent = other.indent;
    if (other.isSetInfo_strings()) {
      Map<String,String> __this__info_strings = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.info_strings.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__info_strings_copy_key = other_element_key;

        String __this__info_strings_copy_value = other_element_value;

        __this__info_strings.put(__this__info_strings_copy_key, __this__info_strings_copy_value);
      }
      this.info_strings = __this__info_strings;
    }
    if (other.isSetInfo_strings_display_order()) {
      List<String> __this__info_strings_display_order = new ArrayList<String>();
      for (String other_element : other.info_strings_display_order) {
        __this__info_strings_display_order.add(other_element);
      }
      this.info_strings_display_order = __this__info_strings_display_order;
    }
    if (other.isSetChild_counters_map()) {
      Map<String,Set<String>> __this__child_counters_map = new HashMap<String,Set<String>>();
      for (Map.Entry<String, Set<String>> other_element : other.child_counters_map.entrySet()) {

        String other_element_key = other_element.getKey();
        Set<String> other_element_value = other_element.getValue();

        String __this__child_counters_map_copy_key = other_element_key;

        Set<String> __this__child_counters_map_copy_value = new HashSet<String>();
        for (String other_element_value_element : other_element_value) {
          __this__child_counters_map_copy_value.add(other_element_value_element);
        }

        __this__child_counters_map.put(__this__child_counters_map_copy_key, __this__child_counters_map_copy_value);
      }
      this.child_counters_map = __this__child_counters_map;
    }
    if (other.isSetEvent_sequences()) {
      List<TEventSequence> __this__event_sequences = new ArrayList<TEventSequence>();
      for (TEventSequence other_element : other.event_sequences) {
        __this__event_sequences.add(new TEventSequence(other_element));
      }
      this.event_sequences = __this__event_sequences;
    }
    if (other.isSetTime_series_counters()) {
      List<TTimeSeriesCounter> __this__time_series_counters = new ArrayList<TTimeSeriesCounter>();
      for (TTimeSeriesCounter other_element : other.time_series_counters) {
        __this__time_series_counters.add(new TTimeSeriesCounter(other_element));
      }
      this.time_series_counters = __this__time_series_counters;
    }
  }

  public TRuntimeProfileNode deepCopy() {
    return new TRuntimeProfileNode(this);
  }

  @Override
  public void clear() {
    this.name = null;
    setNum_childrenIsSet(false);
    this.num_children = 0;
    this.counters = null;
    setMetadataIsSet(false);
    this.metadata = 0;
    setIndentIsSet(false);
    this.indent = false;
    this.info_strings = null;
    this.info_strings_display_order = null;
    this.child_counters_map = null;
    this.event_sequences = null;
    this.time_series_counters = null;
  }

  public String getName() {
    return this.name;
  }

  public TRuntimeProfileNode setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getNum_children() {
    return this.num_children;
  }

  public TRuntimeProfileNode setNum_children(int num_children) {
    this.num_children = num_children;
    setNum_childrenIsSet(true);
    return this;
  }

  public void unsetNum_children() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_CHILDREN_ISSET_ID);
  }

  /** Returns true if field num_children is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_children() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_CHILDREN_ISSET_ID);
  }

  public void setNum_childrenIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_CHILDREN_ISSET_ID, value);
  }

  public int getCountersSize() {
    return (this.counters == null) ? 0 : this.counters.size();
  }

  public java.util.Iterator<TCounter> getCountersIterator() {
    return (this.counters == null) ? null : this.counters.iterator();
  }

  public void addToCounters(TCounter elem) {
    if (this.counters == null) {
      this.counters = new ArrayList<TCounter>();
    }
    this.counters.add(elem);
  }

  public List<TCounter> getCounters() {
    return this.counters;
  }

  public TRuntimeProfileNode setCounters(List<TCounter> counters) {
    this.counters = counters;
    return this;
  }

  public void unsetCounters() {
    this.counters = null;
  }

  /** Returns true if field counters is set (has been assigned a value) and false otherwise */
  public boolean isSetCounters() {
    return this.counters != null;
  }

  public void setCountersIsSet(boolean value) {
    if (!value) {
      this.counters = null;
    }
  }

  public long getMetadata() {
    return this.metadata;
  }

  public TRuntimeProfileNode setMetadata(long metadata) {
    this.metadata = metadata;
    setMetadataIsSet(true);
    return this;
  }

  public void unsetMetadata() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __METADATA_ISSET_ID);
  }

  /** Returns true if field metadata is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadata() {
    return EncodingUtils.testBit(__isset_bitfield, __METADATA_ISSET_ID);
  }

  public void setMetadataIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __METADATA_ISSET_ID, value);
  }

  public boolean isIndent() {
    return this.indent;
  }

  public TRuntimeProfileNode setIndent(boolean indent) {
    this.indent = indent;
    setIndentIsSet(true);
    return this;
  }

  public void unsetIndent() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INDENT_ISSET_ID);
  }

  /** Returns true if field indent is set (has been assigned a value) and false otherwise */
  public boolean isSetIndent() {
    return EncodingUtils.testBit(__isset_bitfield, __INDENT_ISSET_ID);
  }

  public void setIndentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INDENT_ISSET_ID, value);
  }

  public int getInfo_stringsSize() {
    return (this.info_strings == null) ? 0 : this.info_strings.size();
  }

  public void putToInfo_strings(String key, String val) {
    if (this.info_strings == null) {
      this.info_strings = new HashMap<String,String>();
    }
    this.info_strings.put(key, val);
  }

  public Map<String,String> getInfo_strings() {
    return this.info_strings;
  }

  public TRuntimeProfileNode setInfo_strings(Map<String,String> info_strings) {
    this.info_strings = info_strings;
    return this;
  }

  public void unsetInfo_strings() {
    this.info_strings = null;
  }

  /** Returns true if field info_strings is set (has been assigned a value) and false otherwise */
  public boolean isSetInfo_strings() {
    return this.info_strings != null;
  }

  public void setInfo_stringsIsSet(boolean value) {
    if (!value) {
      this.info_strings = null;
    }
  }

  public int getInfo_strings_display_orderSize() {
    return (this.info_strings_display_order == null) ? 0 : this.info_strings_display_order.size();
  }

  public java.util.Iterator<String> getInfo_strings_display_orderIterator() {
    return (this.info_strings_display_order == null) ? null : this.info_strings_display_order.iterator();
  }

  public void addToInfo_strings_display_order(String elem) {
    if (this.info_strings_display_order == null) {
      this.info_strings_display_order = new ArrayList<String>();
    }
    this.info_strings_display_order.add(elem);
  }

  public List<String> getInfo_strings_display_order() {
    return this.info_strings_display_order;
  }

  public TRuntimeProfileNode setInfo_strings_display_order(List<String> info_strings_display_order) {
    this.info_strings_display_order = info_strings_display_order;
    return this;
  }

  public void unsetInfo_strings_display_order() {
    this.info_strings_display_order = null;
  }

  /** Returns true if field info_strings_display_order is set (has been assigned a value) and false otherwise */
  public boolean isSetInfo_strings_display_order() {
    return this.info_strings_display_order != null;
  }

  public void setInfo_strings_display_orderIsSet(boolean value) {
    if (!value) {
      this.info_strings_display_order = null;
    }
  }

  public int getChild_counters_mapSize() {
    return (this.child_counters_map == null) ? 0 : this.child_counters_map.size();
  }

  public void putToChild_counters_map(String key, Set<String> val) {
    if (this.child_counters_map == null) {
      this.child_counters_map = new HashMap<String,Set<String>>();
    }
    this.child_counters_map.put(key, val);
  }

  public Map<String,Set<String>> getChild_counters_map() {
    return this.child_counters_map;
  }

  public TRuntimeProfileNode setChild_counters_map(Map<String,Set<String>> child_counters_map) {
    this.child_counters_map = child_counters_map;
    return this;
  }

  public void unsetChild_counters_map() {
    this.child_counters_map = null;
  }

  /** Returns true if field child_counters_map is set (has been assigned a value) and false otherwise */
  public boolean isSetChild_counters_map() {
    return this.child_counters_map != null;
  }

  public void setChild_counters_mapIsSet(boolean value) {
    if (!value) {
      this.child_counters_map = null;
    }
  }

  public int getEvent_sequencesSize() {
    return (this.event_sequences == null) ? 0 : this.event_sequences.size();
  }

  public java.util.Iterator<TEventSequence> getEvent_sequencesIterator() {
    return (this.event_sequences == null) ? null : this.event_sequences.iterator();
  }

  public void addToEvent_sequences(TEventSequence elem) {
    if (this.event_sequences == null) {
      this.event_sequences = new ArrayList<TEventSequence>();
    }
    this.event_sequences.add(elem);
  }

  public List<TEventSequence> getEvent_sequences() {
    return this.event_sequences;
  }

  public TRuntimeProfileNode setEvent_sequences(List<TEventSequence> event_sequences) {
    this.event_sequences = event_sequences;
    return this;
  }

  public void unsetEvent_sequences() {
    this.event_sequences = null;
  }

  /** Returns true if field event_sequences is set (has been assigned a value) and false otherwise */
  public boolean isSetEvent_sequences() {
    return this.event_sequences != null;
  }

  public void setEvent_sequencesIsSet(boolean value) {
    if (!value) {
      this.event_sequences = null;
    }
  }

  public int getTime_series_countersSize() {
    return (this.time_series_counters == null) ? 0 : this.time_series_counters.size();
  }

  public java.util.Iterator<TTimeSeriesCounter> getTime_series_countersIterator() {
    return (this.time_series_counters == null) ? null : this.time_series_counters.iterator();
  }

  public void addToTime_series_counters(TTimeSeriesCounter elem) {
    if (this.time_series_counters == null) {
      this.time_series_counters = new ArrayList<TTimeSeriesCounter>();
    }
    this.time_series_counters.add(elem);
  }

  public List<TTimeSeriesCounter> getTime_series_counters() {
    return this.time_series_counters;
  }

  public TRuntimeProfileNode setTime_series_counters(List<TTimeSeriesCounter> time_series_counters) {
    this.time_series_counters = time_series_counters;
    return this;
  }

  public void unsetTime_series_counters() {
    this.time_series_counters = null;
  }

  /** Returns true if field time_series_counters is set (has been assigned a value) and false otherwise */
  public boolean isSetTime_series_counters() {
    return this.time_series_counters != null;
  }

  public void setTime_series_countersIsSet(boolean value) {
    if (!value) {
      this.time_series_counters = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case NUM_CHILDREN:
      if (value == null) {
        unsetNum_children();
      } else {
        setNum_children((Integer)value);
      }
      break;

    case COUNTERS:
      if (value == null) {
        unsetCounters();
      } else {
        setCounters((List<TCounter>)value);
      }
      break;

    case METADATA:
      if (value == null) {
        unsetMetadata();
      } else {
        setMetadata((Long)value);
      }
      break;

    case INDENT:
      if (value == null) {
        unsetIndent();
      } else {
        setIndent((Boolean)value);
      }
      break;

    case INFO_STRINGS:
      if (value == null) {
        unsetInfo_strings();
      } else {
        setInfo_strings((Map<String,String>)value);
      }
      break;

    case INFO_STRINGS_DISPLAY_ORDER:
      if (value == null) {
        unsetInfo_strings_display_order();
      } else {
        setInfo_strings_display_order((List<String>)value);
      }
      break;

    case CHILD_COUNTERS_MAP:
      if (value == null) {
        unsetChild_counters_map();
      } else {
        setChild_counters_map((Map<String,Set<String>>)value);
      }
      break;

    case EVENT_SEQUENCES:
      if (value == null) {
        unsetEvent_sequences();
      } else {
        setEvent_sequences((List<TEventSequence>)value);
      }
      break;

    case TIME_SERIES_COUNTERS:
      if (value == null) {
        unsetTime_series_counters();
      } else {
        setTime_series_counters((List<TTimeSeriesCounter>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case NUM_CHILDREN:
      return Integer.valueOf(getNum_children());

    case COUNTERS:
      return getCounters();

    case METADATA:
      return Long.valueOf(getMetadata());

    case INDENT:
      return Boolean.valueOf(isIndent());

    case INFO_STRINGS:
      return getInfo_strings();

    case INFO_STRINGS_DISPLAY_ORDER:
      return getInfo_strings_display_order();

    case CHILD_COUNTERS_MAP:
      return getChild_counters_map();

    case EVENT_SEQUENCES:
      return getEvent_sequences();

    case TIME_SERIES_COUNTERS:
      return getTime_series_counters();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case NUM_CHILDREN:
      return isSetNum_children();
    case COUNTERS:
      return isSetCounters();
    case METADATA:
      return isSetMetadata();
    case INDENT:
      return isSetIndent();
    case INFO_STRINGS:
      return isSetInfo_strings();
    case INFO_STRINGS_DISPLAY_ORDER:
      return isSetInfo_strings_display_order();
    case CHILD_COUNTERS_MAP:
      return isSetChild_counters_map();
    case EVENT_SEQUENCES:
      return isSetEvent_sequences();
    case TIME_SERIES_COUNTERS:
      return isSetTime_series_counters();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TRuntimeProfileNode)
      return this.equals((TRuntimeProfileNode)that);
    return false;
  }

  public boolean equals(TRuntimeProfileNode that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_num_children = true;
    boolean that_present_num_children = true;
    if (this_present_num_children || that_present_num_children) {
      if (!(this_present_num_children && that_present_num_children))
        return false;
      if (this.num_children != that.num_children)
        return false;
    }

    boolean this_present_counters = true && this.isSetCounters();
    boolean that_present_counters = true && that.isSetCounters();
    if (this_present_counters || that_present_counters) {
      if (!(this_present_counters && that_present_counters))
        return false;
      if (!this.counters.equals(that.counters))
        return false;
    }

    boolean this_present_metadata = true;
    boolean that_present_metadata = true;
    if (this_present_metadata || that_present_metadata) {
      if (!(this_present_metadata && that_present_metadata))
        return false;
      if (this.metadata != that.metadata)
        return false;
    }

    boolean this_present_indent = true;
    boolean that_present_indent = true;
    if (this_present_indent || that_present_indent) {
      if (!(this_present_indent && that_present_indent))
        return false;
      if (this.indent != that.indent)
        return false;
    }

    boolean this_present_info_strings = true && this.isSetInfo_strings();
    boolean that_present_info_strings = true && that.isSetInfo_strings();
    if (this_present_info_strings || that_present_info_strings) {
      if (!(this_present_info_strings && that_present_info_strings))
        return false;
      if (!this.info_strings.equals(that.info_strings))
        return false;
    }

    boolean this_present_info_strings_display_order = true && this.isSetInfo_strings_display_order();
    boolean that_present_info_strings_display_order = true && that.isSetInfo_strings_display_order();
    if (this_present_info_strings_display_order || that_present_info_strings_display_order) {
      if (!(this_present_info_strings_display_order && that_present_info_strings_display_order))
        return false;
      if (!this.info_strings_display_order.equals(that.info_strings_display_order))
        return false;
    }

    boolean this_present_child_counters_map = true && this.isSetChild_counters_map();
    boolean that_present_child_counters_map = true && that.isSetChild_counters_map();
    if (this_present_child_counters_map || that_present_child_counters_map) {
      if (!(this_present_child_counters_map && that_present_child_counters_map))
        return false;
      if (!this.child_counters_map.equals(that.child_counters_map))
        return false;
    }

    boolean this_present_event_sequences = true && this.isSetEvent_sequences();
    boolean that_present_event_sequences = true && that.isSetEvent_sequences();
    if (this_present_event_sequences || that_present_event_sequences) {
      if (!(this_present_event_sequences && that_present_event_sequences))
        return false;
      if (!this.event_sequences.equals(that.event_sequences))
        return false;
    }

    boolean this_present_time_series_counters = true && this.isSetTime_series_counters();
    boolean that_present_time_series_counters = true && that.isSetTime_series_counters();
    if (this_present_time_series_counters || that_present_time_series_counters) {
      if (!(this_present_time_series_counters && that_present_time_series_counters))
        return false;
      if (!this.time_series_counters.equals(that.time_series_counters))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_name = true && (isSetName());
    builder.append(present_name);
    if (present_name)
      builder.append(name);

    boolean present_num_children = true;
    builder.append(present_num_children);
    if (present_num_children)
      builder.append(num_children);

    boolean present_counters = true && (isSetCounters());
    builder.append(present_counters);
    if (present_counters)
      builder.append(counters);

    boolean present_metadata = true;
    builder.append(present_metadata);
    if (present_metadata)
      builder.append(metadata);

    boolean present_indent = true;
    builder.append(present_indent);
    if (present_indent)
      builder.append(indent);

    boolean present_info_strings = true && (isSetInfo_strings());
    builder.append(present_info_strings);
    if (present_info_strings)
      builder.append(info_strings);

    boolean present_info_strings_display_order = true && (isSetInfo_strings_display_order());
    builder.append(present_info_strings_display_order);
    if (present_info_strings_display_order)
      builder.append(info_strings_display_order);

    boolean present_child_counters_map = true && (isSetChild_counters_map());
    builder.append(present_child_counters_map);
    if (present_child_counters_map)
      builder.append(child_counters_map);

    boolean present_event_sequences = true && (isSetEvent_sequences());
    builder.append(present_event_sequences);
    if (present_event_sequences)
      builder.append(event_sequences);

    boolean present_time_series_counters = true && (isSetTime_series_counters());
    builder.append(present_time_series_counters);
    if (present_time_series_counters)
      builder.append(time_series_counters);

    return builder.toHashCode();
  }

  public int compareTo(TRuntimeProfileNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TRuntimeProfileNode typedOther = (TRuntimeProfileNode)other;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_children()).compareTo(typedOther.isSetNum_children());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_children()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_children, typedOther.num_children);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCounters()).compareTo(typedOther.isSetCounters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCounters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.counters, typedOther.counters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadata()).compareTo(typedOther.isSetMetadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata, typedOther.metadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndent()).compareTo(typedOther.isSetIndent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indent, typedOther.indent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInfo_strings()).compareTo(typedOther.isSetInfo_strings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInfo_strings()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.info_strings, typedOther.info_strings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInfo_strings_display_order()).compareTo(typedOther.isSetInfo_strings_display_order());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInfo_strings_display_order()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.info_strings_display_order, typedOther.info_strings_display_order);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChild_counters_map()).compareTo(typedOther.isSetChild_counters_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChild_counters_map()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.child_counters_map, typedOther.child_counters_map);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEvent_sequences()).compareTo(typedOther.isSetEvent_sequences());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvent_sequences()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.event_sequences, typedOther.event_sequences);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTime_series_counters()).compareTo(typedOther.isSetTime_series_counters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime_series_counters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time_series_counters, typedOther.time_series_counters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TRuntimeProfileNode(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_children:");
    sb.append(this.num_children);
    first = false;
    if (!first) sb.append(", ");
    sb.append("counters:");
    if (this.counters == null) {
      sb.append("null");
    } else {
      sb.append(this.counters);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metadata:");
    sb.append(this.metadata);
    first = false;
    if (!first) sb.append(", ");
    sb.append("indent:");
    sb.append(this.indent);
    first = false;
    if (!first) sb.append(", ");
    sb.append("info_strings:");
    if (this.info_strings == null) {
      sb.append("null");
    } else {
      sb.append(this.info_strings);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("info_strings_display_order:");
    if (this.info_strings_display_order == null) {
      sb.append("null");
    } else {
      sb.append(this.info_strings_display_order);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("child_counters_map:");
    if (this.child_counters_map == null) {
      sb.append("null");
    } else {
      sb.append(this.child_counters_map);
    }
    first = false;
    if (isSetEvent_sequences()) {
      if (!first) sb.append(", ");
      sb.append("event_sequences:");
      if (this.event_sequences == null) {
        sb.append("null");
      } else {
        sb.append(this.event_sequences);
      }
      first = false;
    }
    if (isSetTime_series_counters()) {
      if (!first) sb.append(", ");
      sb.append("time_series_counters:");
      if (this.time_series_counters == null) {
        sb.append("null");
      } else {
        sb.append(this.time_series_counters);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'num_children' because it's a primitive and you chose the non-beans generator.
    if (counters == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'counters' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'metadata' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'indent' because it's a primitive and you chose the non-beans generator.
    if (info_strings == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'info_strings' was not present! Struct: " + toString());
    }
    if (info_strings_display_order == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'info_strings_display_order' was not present! Struct: " + toString());
    }
    if (child_counters_map == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'child_counters_map' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TRuntimeProfileNodeStandardSchemeFactory implements SchemeFactory {
    public TRuntimeProfileNodeStandardScheme getScheme() {
      return new TRuntimeProfileNodeStandardScheme();
    }
  }

  private static class TRuntimeProfileNodeStandardScheme extends StandardScheme<TRuntimeProfileNode> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TRuntimeProfileNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NUM_CHILDREN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_children = iprot.readI32();
              struct.setNum_childrenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COUNTERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.counters = new ArrayList<TCounter>(_list24.size);
                for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                {
                  TCounter _elem26; // required
                  _elem26 = new TCounter();
                  _elem26.read(iprot);
                  struct.counters.add(_elem26);
                }
                iprot.readListEnd();
              }
              struct.setCountersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.metadata = iprot.readI64();
              struct.setMetadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INDENT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.indent = iprot.readBool();
              struct.setIndentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // INFO_STRINGS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map27 = iprot.readMapBegin();
                struct.info_strings = new HashMap<String,String>(2*_map27.size);
                for (int _i28 = 0; _i28 < _map27.size; ++_i28)
                {
                  String _key29; // required
                  String _val30; // required
                  _key29 = iprot.readString();
                  _val30 = iprot.readString();
                  struct.info_strings.put(_key29, _val30);
                }
                iprot.readMapEnd();
              }
              struct.setInfo_stringsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // INFO_STRINGS_DISPLAY_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list31 = iprot.readListBegin();
                struct.info_strings_display_order = new ArrayList<String>(_list31.size);
                for (int _i32 = 0; _i32 < _list31.size; ++_i32)
                {
                  String _elem33; // required
                  _elem33 = iprot.readString();
                  struct.info_strings_display_order.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setInfo_strings_display_orderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CHILD_COUNTERS_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map34 = iprot.readMapBegin();
                struct.child_counters_map = new HashMap<String,Set<String>>(2*_map34.size);
                for (int _i35 = 0; _i35 < _map34.size; ++_i35)
                {
                  String _key36; // required
                  Set<String> _val37; // required
                  _key36 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TSet _set38 = iprot.readSetBegin();
                    _val37 = new HashSet<String>(2*_set38.size);
                    for (int _i39 = 0; _i39 < _set38.size; ++_i39)
                    {
                      String _elem40; // required
                      _elem40 = iprot.readString();
                      _val37.add(_elem40);
                    }
                    iprot.readSetEnd();
                  }
                  struct.child_counters_map.put(_key36, _val37);
                }
                iprot.readMapEnd();
              }
              struct.setChild_counters_mapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EVENT_SEQUENCES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list41 = iprot.readListBegin();
                struct.event_sequences = new ArrayList<TEventSequence>(_list41.size);
                for (int _i42 = 0; _i42 < _list41.size; ++_i42)
                {
                  TEventSequence _elem43; // required
                  _elem43 = new TEventSequence();
                  _elem43.read(iprot);
                  struct.event_sequences.add(_elem43);
                }
                iprot.readListEnd();
              }
              struct.setEvent_sequencesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TIME_SERIES_COUNTERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list44 = iprot.readListBegin();
                struct.time_series_counters = new ArrayList<TTimeSeriesCounter>(_list44.size);
                for (int _i45 = 0; _i45 < _list44.size; ++_i45)
                {
                  TTimeSeriesCounter _elem46; // required
                  _elem46 = new TTimeSeriesCounter();
                  _elem46.read(iprot);
                  struct.time_series_counters.add(_elem46);
                }
                iprot.readListEnd();
              }
              struct.setTime_series_countersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetNum_children()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'num_children' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMetadata()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'metadata' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIndent()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'indent' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TRuntimeProfileNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUM_CHILDREN_FIELD_DESC);
      oprot.writeI32(struct.num_children);
      oprot.writeFieldEnd();
      if (struct.counters != null) {
        oprot.writeFieldBegin(COUNTERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.counters.size()));
          for (TCounter _iter47 : struct.counters)
          {
            _iter47.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(METADATA_FIELD_DESC);
      oprot.writeI64(struct.metadata);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INDENT_FIELD_DESC);
      oprot.writeBool(struct.indent);
      oprot.writeFieldEnd();
      if (struct.info_strings != null) {
        oprot.writeFieldBegin(INFO_STRINGS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.info_strings.size()));
          for (Map.Entry<String, String> _iter48 : struct.info_strings.entrySet())
          {
            oprot.writeString(_iter48.getKey());
            oprot.writeString(_iter48.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.info_strings_display_order != null) {
        oprot.writeFieldBegin(INFO_STRINGS_DISPLAY_ORDER_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.info_strings_display_order.size()));
          for (String _iter49 : struct.info_strings_display_order)
          {
            oprot.writeString(_iter49);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.child_counters_map != null) {
        oprot.writeFieldBegin(CHILD_COUNTERS_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.SET, struct.child_counters_map.size()));
          for (Map.Entry<String, Set<String>> _iter50 : struct.child_counters_map.entrySet())
          {
            oprot.writeString(_iter50.getKey());
            {
              oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, _iter50.getValue().size()));
              for (String _iter51 : _iter50.getValue())
              {
                oprot.writeString(_iter51);
              }
              oprot.writeSetEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.event_sequences != null) {
        if (struct.isSetEvent_sequences()) {
          oprot.writeFieldBegin(EVENT_SEQUENCES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.event_sequences.size()));
            for (TEventSequence _iter52 : struct.event_sequences)
            {
              _iter52.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.time_series_counters != null) {
        if (struct.isSetTime_series_counters()) {
          oprot.writeFieldBegin(TIME_SERIES_COUNTERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.time_series_counters.size()));
            for (TTimeSeriesCounter _iter53 : struct.time_series_counters)
            {
              _iter53.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TRuntimeProfileNodeTupleSchemeFactory implements SchemeFactory {
    public TRuntimeProfileNodeTupleScheme getScheme() {
      return new TRuntimeProfileNodeTupleScheme();
    }
  }

  private static class TRuntimeProfileNodeTupleScheme extends TupleScheme<TRuntimeProfileNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TRuntimeProfileNode struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.name);
      oprot.writeI32(struct.num_children);
      {
        oprot.writeI32(struct.counters.size());
        for (TCounter _iter54 : struct.counters)
        {
          _iter54.write(oprot);
        }
      }
      oprot.writeI64(struct.metadata);
      oprot.writeBool(struct.indent);
      {
        oprot.writeI32(struct.info_strings.size());
        for (Map.Entry<String, String> _iter55 : struct.info_strings.entrySet())
        {
          oprot.writeString(_iter55.getKey());
          oprot.writeString(_iter55.getValue());
        }
      }
      {
        oprot.writeI32(struct.info_strings_display_order.size());
        for (String _iter56 : struct.info_strings_display_order)
        {
          oprot.writeString(_iter56);
        }
      }
      {
        oprot.writeI32(struct.child_counters_map.size());
        for (Map.Entry<String, Set<String>> _iter57 : struct.child_counters_map.entrySet())
        {
          oprot.writeString(_iter57.getKey());
          {
            oprot.writeI32(_iter57.getValue().size());
            for (String _iter58 : _iter57.getValue())
            {
              oprot.writeString(_iter58);
            }
          }
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetEvent_sequences()) {
        optionals.set(0);
      }
      if (struct.isSetTime_series_counters()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetEvent_sequences()) {
        {
          oprot.writeI32(struct.event_sequences.size());
          for (TEventSequence _iter59 : struct.event_sequences)
          {
            _iter59.write(oprot);
          }
        }
      }
      if (struct.isSetTime_series_counters()) {
        {
          oprot.writeI32(struct.time_series_counters.size());
          for (TTimeSeriesCounter _iter60 : struct.time_series_counters)
          {
            _iter60.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TRuntimeProfileNode struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.num_children = iprot.readI32();
      struct.setNum_childrenIsSet(true);
      {
        org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.counters = new ArrayList<TCounter>(_list61.size);
        for (int _i62 = 0; _i62 < _list61.size; ++_i62)
        {
          TCounter _elem63; // required
          _elem63 = new TCounter();
          _elem63.read(iprot);
          struct.counters.add(_elem63);
        }
      }
      struct.setCountersIsSet(true);
      struct.metadata = iprot.readI64();
      struct.setMetadataIsSet(true);
      struct.indent = iprot.readBool();
      struct.setIndentIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map64 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.info_strings = new HashMap<String,String>(2*_map64.size);
        for (int _i65 = 0; _i65 < _map64.size; ++_i65)
        {
          String _key66; // required
          String _val67; // required
          _key66 = iprot.readString();
          _val67 = iprot.readString();
          struct.info_strings.put(_key66, _val67);
        }
      }
      struct.setInfo_stringsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list68 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.info_strings_display_order = new ArrayList<String>(_list68.size);
        for (int _i69 = 0; _i69 < _list68.size; ++_i69)
        {
          String _elem70; // required
          _elem70 = iprot.readString();
          struct.info_strings_display_order.add(_elem70);
        }
      }
      struct.setInfo_strings_display_orderIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map71 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.SET, iprot.readI32());
        struct.child_counters_map = new HashMap<String,Set<String>>(2*_map71.size);
        for (int _i72 = 0; _i72 < _map71.size; ++_i72)
        {
          String _key73; // required
          Set<String> _val74; // required
          _key73 = iprot.readString();
          {
            org.apache.thrift.protocol.TSet _set75 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            _val74 = new HashSet<String>(2*_set75.size);
            for (int _i76 = 0; _i76 < _set75.size; ++_i76)
            {
              String _elem77; // required
              _elem77 = iprot.readString();
              _val74.add(_elem77);
            }
          }
          struct.child_counters_map.put(_key73, _val74);
        }
      }
      struct.setChild_counters_mapIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list78 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.event_sequences = new ArrayList<TEventSequence>(_list78.size);
          for (int _i79 = 0; _i79 < _list78.size; ++_i79)
          {
            TEventSequence _elem80; // required
            _elem80 = new TEventSequence();
            _elem80.read(iprot);
            struct.event_sequences.add(_elem80);
          }
        }
        struct.setEvent_sequencesIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list81 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.time_series_counters = new ArrayList<TTimeSeriesCounter>(_list81.size);
          for (int _i82 = 0; _i82 < _list81.size; ++_i82)
          {
            TTimeSeriesCounter _elem83; // required
            _elem83 = new TTimeSeriesCounter();
            _elem83.read(iprot);
            struct.time_series_counters.add(_elem83);
          }
        }
        struct.setTime_series_countersIsSet(true);
      }
    }
  }

}

