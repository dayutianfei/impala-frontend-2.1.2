/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TCatalogObject implements org.apache.thrift.TBase<TCatalogObject, TCatalogObject._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCatalogObject");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CATALOG_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("catalog_version", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField CATALOG_FIELD_DESC = new org.apache.thrift.protocol.TField("catalog", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField DB_FIELD_DESC = new org.apache.thrift.protocol.TField("db", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField FN_FIELD_DESC = new org.apache.thrift.protocol.TField("fn", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField DATA_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("data_source", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField ROLE_FIELD_DESC = new org.apache.thrift.protocol.TField("role", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField PRIVILEGE_FIELD_DESC = new org.apache.thrift.protocol.TField("privilege", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField CACHE_POOL_FIELD_DESC = new org.apache.thrift.protocol.TField("cache_pool", org.apache.thrift.protocol.TType.STRUCT, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TCatalogObjectStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TCatalogObjectTupleSchemeFactory());
  }

  /**
   * 
   * @see TCatalogObjectType
   */
  public TCatalogObjectType type; // required
  public long catalog_version; // required
  public TCatalog catalog; // optional
  public TDatabase db; // optional
  public TTable table; // optional
  public com.cloudera.impala.thrift.TFunction fn; // optional
  public TDataSource data_source; // optional
  public TRole role; // optional
  public TPrivilege privilege; // optional
  public THdfsCachePool cache_pool; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TCatalogObjectType
     */
    TYPE((short)1, "type"),
    CATALOG_VERSION((short)2, "catalog_version"),
    CATALOG((short)3, "catalog"),
    DB((short)4, "db"),
    TABLE((short)5, "table"),
    FN((short)6, "fn"),
    DATA_SOURCE((short)7, "data_source"),
    ROLE((short)8, "role"),
    PRIVILEGE((short)9, "privilege"),
    CACHE_POOL((short)10, "cache_pool");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // CATALOG_VERSION
          return CATALOG_VERSION;
        case 3: // CATALOG
          return CATALOG;
        case 4: // DB
          return DB;
        case 5: // TABLE
          return TABLE;
        case 6: // FN
          return FN;
        case 7: // DATA_SOURCE
          return DATA_SOURCE;
        case 8: // ROLE
          return ROLE;
        case 9: // PRIVILEGE
          return PRIVILEGE;
        case 10: // CACHE_POOL
          return CACHE_POOL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CATALOG_VERSION_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.CATALOG,_Fields.DB,_Fields.TABLE,_Fields.FN,_Fields.DATA_SOURCE,_Fields.ROLE,_Fields.PRIVILEGE,_Fields.CACHE_POOL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TCatalogObjectType.class)));
    tmpMap.put(_Fields.CATALOG_VERSION, new org.apache.thrift.meta_data.FieldMetaData("catalog_version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CATALOG, new org.apache.thrift.meta_data.FieldMetaData("catalog", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCatalog.class)));
    tmpMap.put(_Fields.DB, new org.apache.thrift.meta_data.FieldMetaData("db", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDatabase.class)));
    tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTable.class)));
    tmpMap.put(_Fields.FN, new org.apache.thrift.meta_data.FieldMetaData("fn", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TFunction.class)));
    tmpMap.put(_Fields.DATA_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("data_source", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDataSource.class)));
    tmpMap.put(_Fields.ROLE, new org.apache.thrift.meta_data.FieldMetaData("role", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRole.class)));
    tmpMap.put(_Fields.PRIVILEGE, new org.apache.thrift.meta_data.FieldMetaData("privilege", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPrivilege.class)));
    tmpMap.put(_Fields.CACHE_POOL, new org.apache.thrift.meta_data.FieldMetaData("cache_pool", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THdfsCachePool.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCatalogObject.class, metaDataMap);
  }

  public TCatalogObject() {
  }

  public TCatalogObject(
    TCatalogObjectType type,
    long catalog_version)
  {
    this();
    this.type = type;
    this.catalog_version = catalog_version;
    setCatalog_versionIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCatalogObject(TCatalogObject other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.catalog_version = other.catalog_version;
    if (other.isSetCatalog()) {
      this.catalog = new TCatalog(other.catalog);
    }
    if (other.isSetDb()) {
      this.db = new TDatabase(other.db);
    }
    if (other.isSetTable()) {
      this.table = new TTable(other.table);
    }
    if (other.isSetFn()) {
      this.fn = new com.cloudera.impala.thrift.TFunction(other.fn);
    }
    if (other.isSetData_source()) {
      this.data_source = new TDataSource(other.data_source);
    }
    if (other.isSetRole()) {
      this.role = new TRole(other.role);
    }
    if (other.isSetPrivilege()) {
      this.privilege = new TPrivilege(other.privilege);
    }
    if (other.isSetCache_pool()) {
      this.cache_pool = new THdfsCachePool(other.cache_pool);
    }
  }

  public TCatalogObject deepCopy() {
    return new TCatalogObject(this);
  }

  @Override
  public void clear() {
    this.type = null;
    setCatalog_versionIsSet(false);
    this.catalog_version = 0;
    this.catalog = null;
    this.db = null;
    this.table = null;
    this.fn = null;
    this.data_source = null;
    this.role = null;
    this.privilege = null;
    this.cache_pool = null;
  }

  /**
   * 
   * @see TCatalogObjectType
   */
  public TCatalogObjectType getType() {
    return this.type;
  }

  /**
   * 
   * @see TCatalogObjectType
   */
  public TCatalogObject setType(TCatalogObjectType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public long getCatalog_version() {
    return this.catalog_version;
  }

  public TCatalogObject setCatalog_version(long catalog_version) {
    this.catalog_version = catalog_version;
    setCatalog_versionIsSet(true);
    return this;
  }

  public void unsetCatalog_version() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CATALOG_VERSION_ISSET_ID);
  }

  /** Returns true if field catalog_version is set (has been assigned a value) and false otherwise */
  public boolean isSetCatalog_version() {
    return EncodingUtils.testBit(__isset_bitfield, __CATALOG_VERSION_ISSET_ID);
  }

  public void setCatalog_versionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CATALOG_VERSION_ISSET_ID, value);
  }

  public TCatalog getCatalog() {
    return this.catalog;
  }

  public TCatalogObject setCatalog(TCatalog catalog) {
    this.catalog = catalog;
    return this;
  }

  public void unsetCatalog() {
    this.catalog = null;
  }

  /** Returns true if field catalog is set (has been assigned a value) and false otherwise */
  public boolean isSetCatalog() {
    return this.catalog != null;
  }

  public void setCatalogIsSet(boolean value) {
    if (!value) {
      this.catalog = null;
    }
  }

  public TDatabase getDb() {
    return this.db;
  }

  public TCatalogObject setDb(TDatabase db) {
    this.db = db;
    return this;
  }

  public void unsetDb() {
    this.db = null;
  }

  /** Returns true if field db is set (has been assigned a value) and false otherwise */
  public boolean isSetDb() {
    return this.db != null;
  }

  public void setDbIsSet(boolean value) {
    if (!value) {
      this.db = null;
    }
  }

  public TTable getTable() {
    return this.table;
  }

  public TCatalogObject setTable(TTable table) {
    this.table = table;
    return this;
  }

  public void unsetTable() {
    this.table = null;
  }

  /** Returns true if field table is set (has been assigned a value) and false otherwise */
  public boolean isSetTable() {
    return this.table != null;
  }

  public void setTableIsSet(boolean value) {
    if (!value) {
      this.table = null;
    }
  }

  public com.cloudera.impala.thrift.TFunction getFn() {
    return this.fn;
  }

  public TCatalogObject setFn(com.cloudera.impala.thrift.TFunction fn) {
    this.fn = fn;
    return this;
  }

  public void unsetFn() {
    this.fn = null;
  }

  /** Returns true if field fn is set (has been assigned a value) and false otherwise */
  public boolean isSetFn() {
    return this.fn != null;
  }

  public void setFnIsSet(boolean value) {
    if (!value) {
      this.fn = null;
    }
  }

  public TDataSource getData_source() {
    return this.data_source;
  }

  public TCatalogObject setData_source(TDataSource data_source) {
    this.data_source = data_source;
    return this;
  }

  public void unsetData_source() {
    this.data_source = null;
  }

  /** Returns true if field data_source is set (has been assigned a value) and false otherwise */
  public boolean isSetData_source() {
    return this.data_source != null;
  }

  public void setData_sourceIsSet(boolean value) {
    if (!value) {
      this.data_source = null;
    }
  }

  public TRole getRole() {
    return this.role;
  }

  public TCatalogObject setRole(TRole role) {
    this.role = role;
    return this;
  }

  public void unsetRole() {
    this.role = null;
  }

  /** Returns true if field role is set (has been assigned a value) and false otherwise */
  public boolean isSetRole() {
    return this.role != null;
  }

  public void setRoleIsSet(boolean value) {
    if (!value) {
      this.role = null;
    }
  }

  public TPrivilege getPrivilege() {
    return this.privilege;
  }

  public TCatalogObject setPrivilege(TPrivilege privilege) {
    this.privilege = privilege;
    return this;
  }

  public void unsetPrivilege() {
    this.privilege = null;
  }

  /** Returns true if field privilege is set (has been assigned a value) and false otherwise */
  public boolean isSetPrivilege() {
    return this.privilege != null;
  }

  public void setPrivilegeIsSet(boolean value) {
    if (!value) {
      this.privilege = null;
    }
  }

  public THdfsCachePool getCache_pool() {
    return this.cache_pool;
  }

  public TCatalogObject setCache_pool(THdfsCachePool cache_pool) {
    this.cache_pool = cache_pool;
    return this;
  }

  public void unsetCache_pool() {
    this.cache_pool = null;
  }

  /** Returns true if field cache_pool is set (has been assigned a value) and false otherwise */
  public boolean isSetCache_pool() {
    return this.cache_pool != null;
  }

  public void setCache_poolIsSet(boolean value) {
    if (!value) {
      this.cache_pool = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((TCatalogObjectType)value);
      }
      break;

    case CATALOG_VERSION:
      if (value == null) {
        unsetCatalog_version();
      } else {
        setCatalog_version((Long)value);
      }
      break;

    case CATALOG:
      if (value == null) {
        unsetCatalog();
      } else {
        setCatalog((TCatalog)value);
      }
      break;

    case DB:
      if (value == null) {
        unsetDb();
      } else {
        setDb((TDatabase)value);
      }
      break;

    case TABLE:
      if (value == null) {
        unsetTable();
      } else {
        setTable((TTable)value);
      }
      break;

    case FN:
      if (value == null) {
        unsetFn();
      } else {
        setFn((com.cloudera.impala.thrift.TFunction)value);
      }
      break;

    case DATA_SOURCE:
      if (value == null) {
        unsetData_source();
      } else {
        setData_source((TDataSource)value);
      }
      break;

    case ROLE:
      if (value == null) {
        unsetRole();
      } else {
        setRole((TRole)value);
      }
      break;

    case PRIVILEGE:
      if (value == null) {
        unsetPrivilege();
      } else {
        setPrivilege((TPrivilege)value);
      }
      break;

    case CACHE_POOL:
      if (value == null) {
        unsetCache_pool();
      } else {
        setCache_pool((THdfsCachePool)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case CATALOG_VERSION:
      return Long.valueOf(getCatalog_version());

    case CATALOG:
      return getCatalog();

    case DB:
      return getDb();

    case TABLE:
      return getTable();

    case FN:
      return getFn();

    case DATA_SOURCE:
      return getData_source();

    case ROLE:
      return getRole();

    case PRIVILEGE:
      return getPrivilege();

    case CACHE_POOL:
      return getCache_pool();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case CATALOG_VERSION:
      return isSetCatalog_version();
    case CATALOG:
      return isSetCatalog();
    case DB:
      return isSetDb();
    case TABLE:
      return isSetTable();
    case FN:
      return isSetFn();
    case DATA_SOURCE:
      return isSetData_source();
    case ROLE:
      return isSetRole();
    case PRIVILEGE:
      return isSetPrivilege();
    case CACHE_POOL:
      return isSetCache_pool();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TCatalogObject)
      return this.equals((TCatalogObject)that);
    return false;
  }

  public boolean equals(TCatalogObject that) {
    if (that == null)
      return false;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_catalog_version = true;
    boolean that_present_catalog_version = true;
    if (this_present_catalog_version || that_present_catalog_version) {
      if (!(this_present_catalog_version && that_present_catalog_version))
        return false;
      if (this.catalog_version != that.catalog_version)
        return false;
    }

    boolean this_present_catalog = true && this.isSetCatalog();
    boolean that_present_catalog = true && that.isSetCatalog();
    if (this_present_catalog || that_present_catalog) {
      if (!(this_present_catalog && that_present_catalog))
        return false;
      if (!this.catalog.equals(that.catalog))
        return false;
    }

    boolean this_present_db = true && this.isSetDb();
    boolean that_present_db = true && that.isSetDb();
    if (this_present_db || that_present_db) {
      if (!(this_present_db && that_present_db))
        return false;
      if (!this.db.equals(that.db))
        return false;
    }

    boolean this_present_table = true && this.isSetTable();
    boolean that_present_table = true && that.isSetTable();
    if (this_present_table || that_present_table) {
      if (!(this_present_table && that_present_table))
        return false;
      if (!this.table.equals(that.table))
        return false;
    }

    boolean this_present_fn = true && this.isSetFn();
    boolean that_present_fn = true && that.isSetFn();
    if (this_present_fn || that_present_fn) {
      if (!(this_present_fn && that_present_fn))
        return false;
      if (!this.fn.equals(that.fn))
        return false;
    }

    boolean this_present_data_source = true && this.isSetData_source();
    boolean that_present_data_source = true && that.isSetData_source();
    if (this_present_data_source || that_present_data_source) {
      if (!(this_present_data_source && that_present_data_source))
        return false;
      if (!this.data_source.equals(that.data_source))
        return false;
    }

    boolean this_present_role = true && this.isSetRole();
    boolean that_present_role = true && that.isSetRole();
    if (this_present_role || that_present_role) {
      if (!(this_present_role && that_present_role))
        return false;
      if (!this.role.equals(that.role))
        return false;
    }

    boolean this_present_privilege = true && this.isSetPrivilege();
    boolean that_present_privilege = true && that.isSetPrivilege();
    if (this_present_privilege || that_present_privilege) {
      if (!(this_present_privilege && that_present_privilege))
        return false;
      if (!this.privilege.equals(that.privilege))
        return false;
    }

    boolean this_present_cache_pool = true && this.isSetCache_pool();
    boolean that_present_cache_pool = true && that.isSetCache_pool();
    if (this_present_cache_pool || that_present_cache_pool) {
      if (!(this_present_cache_pool && that_present_cache_pool))
        return false;
      if (!this.cache_pool.equals(that.cache_pool))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_type = true && (isSetType());
    builder.append(present_type);
    if (present_type)
      builder.append(type.getValue());

    boolean present_catalog_version = true;
    builder.append(present_catalog_version);
    if (present_catalog_version)
      builder.append(catalog_version);

    boolean present_catalog = true && (isSetCatalog());
    builder.append(present_catalog);
    if (present_catalog)
      builder.append(catalog);

    boolean present_db = true && (isSetDb());
    builder.append(present_db);
    if (present_db)
      builder.append(db);

    boolean present_table = true && (isSetTable());
    builder.append(present_table);
    if (present_table)
      builder.append(table);

    boolean present_fn = true && (isSetFn());
    builder.append(present_fn);
    if (present_fn)
      builder.append(fn);

    boolean present_data_source = true && (isSetData_source());
    builder.append(present_data_source);
    if (present_data_source)
      builder.append(data_source);

    boolean present_role = true && (isSetRole());
    builder.append(present_role);
    if (present_role)
      builder.append(role);

    boolean present_privilege = true && (isSetPrivilege());
    builder.append(present_privilege);
    if (present_privilege)
      builder.append(privilege);

    boolean present_cache_pool = true && (isSetCache_pool());
    builder.append(present_cache_pool);
    if (present_cache_pool)
      builder.append(cache_pool);

    return builder.toHashCode();
  }

  public int compareTo(TCatalogObject other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TCatalogObject typedOther = (TCatalogObject)other;

    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCatalog_version()).compareTo(typedOther.isSetCatalog_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCatalog_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalog_version, typedOther.catalog_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCatalog()).compareTo(typedOther.isSetCatalog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCatalog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalog, typedOther.catalog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDb()).compareTo(typedOther.isSetDb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db, typedOther.db);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, typedOther.table);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFn()).compareTo(typedOther.isSetFn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fn, typedOther.fn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetData_source()).compareTo(typedOther.isSetData_source());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData_source()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data_source, typedOther.data_source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRole()).compareTo(typedOther.isSetRole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRole()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.role, typedOther.role);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrivilege()).compareTo(typedOther.isSetPrivilege());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrivilege()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privilege, typedOther.privilege);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCache_pool()).compareTo(typedOther.isSetCache_pool());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCache_pool()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cache_pool, typedOther.cache_pool);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TCatalogObject(");
    boolean first = true;

    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("catalog_version:");
    sb.append(this.catalog_version);
    first = false;
    if (isSetCatalog()) {
      if (!first) sb.append(", ");
      sb.append("catalog:");
      if (this.catalog == null) {
        sb.append("null");
      } else {
        sb.append(this.catalog);
      }
      first = false;
    }
    if (isSetDb()) {
      if (!first) sb.append(", ");
      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
    }
    if (isSetTable()) {
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
    }
    if (isSetFn()) {
      if (!first) sb.append(", ");
      sb.append("fn:");
      if (this.fn == null) {
        sb.append("null");
      } else {
        sb.append(this.fn);
      }
      first = false;
    }
    if (isSetData_source()) {
      if (!first) sb.append(", ");
      sb.append("data_source:");
      if (this.data_source == null) {
        sb.append("null");
      } else {
        sb.append(this.data_source);
      }
      first = false;
    }
    if (isSetRole()) {
      if (!first) sb.append(", ");
      sb.append("role:");
      if (this.role == null) {
        sb.append("null");
      } else {
        sb.append(this.role);
      }
      first = false;
    }
    if (isSetPrivilege()) {
      if (!first) sb.append(", ");
      sb.append("privilege:");
      if (this.privilege == null) {
        sb.append("null");
      } else {
        sb.append(this.privilege);
      }
      first = false;
    }
    if (isSetCache_pool()) {
      if (!first) sb.append(", ");
      sb.append("cache_pool:");
      if (this.cache_pool == null) {
        sb.append("null");
      } else {
        sb.append(this.cache_pool);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'catalog_version' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (catalog != null) {
      catalog.validate();
    }
    if (db != null) {
      db.validate();
    }
    if (table != null) {
      table.validate();
    }
    if (fn != null) {
      fn.validate();
    }
    if (data_source != null) {
      data_source.validate();
    }
    if (role != null) {
      role.validate();
    }
    if (privilege != null) {
      privilege.validate();
    }
    if (cache_pool != null) {
      cache_pool.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCatalogObjectStandardSchemeFactory implements SchemeFactory {
    public TCatalogObjectStandardScheme getScheme() {
      return new TCatalogObjectStandardScheme();
    }
  }

  private static class TCatalogObjectStandardScheme extends StandardScheme<TCatalogObject> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCatalogObject struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = TCatalogObjectType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CATALOG_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.catalog_version = iprot.readI64();
              struct.setCatalog_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CATALOG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.catalog = new TCatalog();
              struct.catalog.read(iprot);
              struct.setCatalogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.db = new TDatabase();
              struct.db.read(iprot);
              struct.setDbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.table = new TTable();
              struct.table.read(iprot);
              struct.setTableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fn = new com.cloudera.impala.thrift.TFunction();
              struct.fn.read(iprot);
              struct.setFnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DATA_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.data_source = new TDataSource();
              struct.data_source.read(iprot);
              struct.setData_sourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ROLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.role = new TRole();
              struct.role.read(iprot);
              struct.setRoleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PRIVILEGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.privilege = new TPrivilege();
              struct.privilege.read(iprot);
              struct.setPrivilegeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CACHE_POOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cache_pool = new THdfsCachePool();
              struct.cache_pool.read(iprot);
              struct.setCache_poolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetCatalog_version()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'catalog_version' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCatalogObject struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CATALOG_VERSION_FIELD_DESC);
      oprot.writeI64(struct.catalog_version);
      oprot.writeFieldEnd();
      if (struct.catalog != null) {
        if (struct.isSetCatalog()) {
          oprot.writeFieldBegin(CATALOG_FIELD_DESC);
          struct.catalog.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.db != null) {
        if (struct.isSetDb()) {
          oprot.writeFieldBegin(DB_FIELD_DESC);
          struct.db.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.table != null) {
        if (struct.isSetTable()) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          struct.table.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fn != null) {
        if (struct.isSetFn()) {
          oprot.writeFieldBegin(FN_FIELD_DESC);
          struct.fn.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.data_source != null) {
        if (struct.isSetData_source()) {
          oprot.writeFieldBegin(DATA_SOURCE_FIELD_DESC);
          struct.data_source.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.role != null) {
        if (struct.isSetRole()) {
          oprot.writeFieldBegin(ROLE_FIELD_DESC);
          struct.role.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.privilege != null) {
        if (struct.isSetPrivilege()) {
          oprot.writeFieldBegin(PRIVILEGE_FIELD_DESC);
          struct.privilege.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cache_pool != null) {
        if (struct.isSetCache_pool()) {
          oprot.writeFieldBegin(CACHE_POOL_FIELD_DESC);
          struct.cache_pool.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCatalogObjectTupleSchemeFactory implements SchemeFactory {
    public TCatalogObjectTupleScheme getScheme() {
      return new TCatalogObjectTupleScheme();
    }
  }

  private static class TCatalogObjectTupleScheme extends TupleScheme<TCatalogObject> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCatalogObject struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.type.getValue());
      oprot.writeI64(struct.catalog_version);
      BitSet optionals = new BitSet();
      if (struct.isSetCatalog()) {
        optionals.set(0);
      }
      if (struct.isSetDb()) {
        optionals.set(1);
      }
      if (struct.isSetTable()) {
        optionals.set(2);
      }
      if (struct.isSetFn()) {
        optionals.set(3);
      }
      if (struct.isSetData_source()) {
        optionals.set(4);
      }
      if (struct.isSetRole()) {
        optionals.set(5);
      }
      if (struct.isSetPrivilege()) {
        optionals.set(6);
      }
      if (struct.isSetCache_pool()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetCatalog()) {
        struct.catalog.write(oprot);
      }
      if (struct.isSetDb()) {
        struct.db.write(oprot);
      }
      if (struct.isSetTable()) {
        struct.table.write(oprot);
      }
      if (struct.isSetFn()) {
        struct.fn.write(oprot);
      }
      if (struct.isSetData_source()) {
        struct.data_source.write(oprot);
      }
      if (struct.isSetRole()) {
        struct.role.write(oprot);
      }
      if (struct.isSetPrivilege()) {
        struct.privilege.write(oprot);
      }
      if (struct.isSetCache_pool()) {
        struct.cache_pool.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCatalogObject struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.type = TCatalogObjectType.findByValue(iprot.readI32());
      struct.setTypeIsSet(true);
      struct.catalog_version = iprot.readI64();
      struct.setCatalog_versionIsSet(true);
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.catalog = new TCatalog();
        struct.catalog.read(iprot);
        struct.setCatalogIsSet(true);
      }
      if (incoming.get(1)) {
        struct.db = new TDatabase();
        struct.db.read(iprot);
        struct.setDbIsSet(true);
      }
      if (incoming.get(2)) {
        struct.table = new TTable();
        struct.table.read(iprot);
        struct.setTableIsSet(true);
      }
      if (incoming.get(3)) {
        struct.fn = new com.cloudera.impala.thrift.TFunction();
        struct.fn.read(iprot);
        struct.setFnIsSet(true);
      }
      if (incoming.get(4)) {
        struct.data_source = new TDataSource();
        struct.data_source.read(iprot);
        struct.setData_sourceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.role = new TRole();
        struct.role.read(iprot);
        struct.setRoleIsSet(true);
      }
      if (incoming.get(6)) {
        struct.privilege = new TPrivilege();
        struct.privilege.read(iprot);
        struct.setPrivilegeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.cache_pool = new THdfsCachePool();
        struct.cache_pool.read(iprot);
        struct.setCache_poolIsSet(true);
      }
    }
  }

}

