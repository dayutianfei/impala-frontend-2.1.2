/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TCatalogOpRequest implements org.apache.thrift.TBase<TCatalogOpRequest, TCatalogOpRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCatalogOpRequest");

  private static final org.apache.thrift.protocol.TField OP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("op_type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField USE_DB_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("use_db_params", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField DESCRIBE_TABLE_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("describe_table_params", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField SHOW_DBS_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("show_dbs_params", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField SHOW_TABLES_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("show_tables_params", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField SHOW_FNS_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("show_fns_params", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField SHOW_DATA_SRCS_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("show_data_srcs_params", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField SHOW_ROLES_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("show_roles_params", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField SHOW_GRANT_ROLE_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("show_grant_role_params", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField DDL_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("ddl_params", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField RESET_METADATA_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("reset_metadata_params", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField SHOW_STATS_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("show_stats_params", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField SHOW_CREATE_TABLE_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("show_create_table_params", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField SHOW_INDICES_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("show_indices_params", org.apache.thrift.protocol.TType.STRUCT, (short)14);
  private static final org.apache.thrift.protocol.TField DESCRIBE_INDEX_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("describe_index_params", org.apache.thrift.protocol.TType.STRUCT, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TCatalogOpRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TCatalogOpRequestTupleSchemeFactory());
  }

  /**
   * 
   * @see TCatalogOpType
   */
  public TCatalogOpType op_type; // required
  public TUseDbParams use_db_params; // optional
  public TDescribeTableParams describe_table_params; // optional
  public TShowDbsParams show_dbs_params; // optional
  public TShowTablesParams show_tables_params; // optional
  public TShowFunctionsParams show_fns_params; // optional
  public TShowDataSrcsParams show_data_srcs_params; // optional
  public TShowRolesParams show_roles_params; // optional
  public TShowGrantRoleParams show_grant_role_params; // optional
  public com.cloudera.impala.thrift.TDdlExecRequest ddl_params; // optional
  public com.cloudera.impala.thrift.TResetMetadataRequest reset_metadata_params; // optional
  public TShowStatsParams show_stats_params; // optional
  public com.cloudera.impala.thrift.TTableName show_create_table_params; // optional
  public TShowIndicesParams show_indices_params; // optional
  public TDescribeIndexParams describe_index_params; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TCatalogOpType
     */
    OP_TYPE((short)1, "op_type"),
    USE_DB_PARAMS((short)2, "use_db_params"),
    DESCRIBE_TABLE_PARAMS((short)3, "describe_table_params"),
    SHOW_DBS_PARAMS((short)4, "show_dbs_params"),
    SHOW_TABLES_PARAMS((short)5, "show_tables_params"),
    SHOW_FNS_PARAMS((short)6, "show_fns_params"),
    SHOW_DATA_SRCS_PARAMS((short)11, "show_data_srcs_params"),
    SHOW_ROLES_PARAMS((short)12, "show_roles_params"),
    SHOW_GRANT_ROLE_PARAMS((short)13, "show_grant_role_params"),
    DDL_PARAMS((short)7, "ddl_params"),
    RESET_METADATA_PARAMS((short)8, "reset_metadata_params"),
    SHOW_STATS_PARAMS((short)9, "show_stats_params"),
    SHOW_CREATE_TABLE_PARAMS((short)10, "show_create_table_params"),
    SHOW_INDICES_PARAMS((short)14, "show_indices_params"),
    DESCRIBE_INDEX_PARAMS((short)15, "describe_index_params");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OP_TYPE
          return OP_TYPE;
        case 2: // USE_DB_PARAMS
          return USE_DB_PARAMS;
        case 3: // DESCRIBE_TABLE_PARAMS
          return DESCRIBE_TABLE_PARAMS;
        case 4: // SHOW_DBS_PARAMS
          return SHOW_DBS_PARAMS;
        case 5: // SHOW_TABLES_PARAMS
          return SHOW_TABLES_PARAMS;
        case 6: // SHOW_FNS_PARAMS
          return SHOW_FNS_PARAMS;
        case 11: // SHOW_DATA_SRCS_PARAMS
          return SHOW_DATA_SRCS_PARAMS;
        case 12: // SHOW_ROLES_PARAMS
          return SHOW_ROLES_PARAMS;
        case 13: // SHOW_GRANT_ROLE_PARAMS
          return SHOW_GRANT_ROLE_PARAMS;
        case 7: // DDL_PARAMS
          return DDL_PARAMS;
        case 8: // RESET_METADATA_PARAMS
          return RESET_METADATA_PARAMS;
        case 9: // SHOW_STATS_PARAMS
          return SHOW_STATS_PARAMS;
        case 10: // SHOW_CREATE_TABLE_PARAMS
          return SHOW_CREATE_TABLE_PARAMS;
        case 14: // SHOW_INDICES_PARAMS
          return SHOW_INDICES_PARAMS;
        case 15: // DESCRIBE_INDEX_PARAMS
          return DESCRIBE_INDEX_PARAMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.USE_DB_PARAMS,_Fields.DESCRIBE_TABLE_PARAMS,_Fields.SHOW_DBS_PARAMS,_Fields.SHOW_TABLES_PARAMS,_Fields.SHOW_FNS_PARAMS,_Fields.SHOW_DATA_SRCS_PARAMS,_Fields.SHOW_ROLES_PARAMS,_Fields.SHOW_GRANT_ROLE_PARAMS,_Fields.DDL_PARAMS,_Fields.RESET_METADATA_PARAMS,_Fields.SHOW_STATS_PARAMS,_Fields.SHOW_CREATE_TABLE_PARAMS,_Fields.SHOW_INDICES_PARAMS,_Fields.DESCRIBE_INDEX_PARAMS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("op_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TCatalogOpType.class)));
    tmpMap.put(_Fields.USE_DB_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("use_db_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUseDbParams.class)));
    tmpMap.put(_Fields.DESCRIBE_TABLE_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("describe_table_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDescribeTableParams.class)));
    tmpMap.put(_Fields.SHOW_DBS_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("show_dbs_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TShowDbsParams.class)));
    tmpMap.put(_Fields.SHOW_TABLES_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("show_tables_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TShowTablesParams.class)));
    tmpMap.put(_Fields.SHOW_FNS_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("show_fns_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TShowFunctionsParams.class)));
    tmpMap.put(_Fields.SHOW_DATA_SRCS_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("show_data_srcs_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TShowDataSrcsParams.class)));
    tmpMap.put(_Fields.SHOW_ROLES_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("show_roles_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TShowRolesParams.class)));
    tmpMap.put(_Fields.SHOW_GRANT_ROLE_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("show_grant_role_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TShowGrantRoleParams.class)));
    tmpMap.put(_Fields.DDL_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("ddl_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TDdlExecRequest.class)));
    tmpMap.put(_Fields.RESET_METADATA_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("reset_metadata_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TResetMetadataRequest.class)));
    tmpMap.put(_Fields.SHOW_STATS_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("show_stats_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TShowStatsParams.class)));
    tmpMap.put(_Fields.SHOW_CREATE_TABLE_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("show_create_table_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TTableName.class)));
    tmpMap.put(_Fields.SHOW_INDICES_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("show_indices_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TShowIndicesParams.class)));
    tmpMap.put(_Fields.DESCRIBE_INDEX_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("describe_index_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDescribeIndexParams.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCatalogOpRequest.class, metaDataMap);
  }

  public TCatalogOpRequest() {
  }

  public TCatalogOpRequest(
    TCatalogOpType op_type)
  {
    this();
    this.op_type = op_type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCatalogOpRequest(TCatalogOpRequest other) {
    if (other.isSetOp_type()) {
      this.op_type = other.op_type;
    }
    if (other.isSetUse_db_params()) {
      this.use_db_params = new TUseDbParams(other.use_db_params);
    }
    if (other.isSetDescribe_table_params()) {
      this.describe_table_params = new TDescribeTableParams(other.describe_table_params);
    }
    if (other.isSetShow_dbs_params()) {
      this.show_dbs_params = new TShowDbsParams(other.show_dbs_params);
    }
    if (other.isSetShow_tables_params()) {
      this.show_tables_params = new TShowTablesParams(other.show_tables_params);
    }
    if (other.isSetShow_fns_params()) {
      this.show_fns_params = new TShowFunctionsParams(other.show_fns_params);
    }
    if (other.isSetShow_data_srcs_params()) {
      this.show_data_srcs_params = new TShowDataSrcsParams(other.show_data_srcs_params);
    }
    if (other.isSetShow_roles_params()) {
      this.show_roles_params = new TShowRolesParams(other.show_roles_params);
    }
    if (other.isSetShow_grant_role_params()) {
      this.show_grant_role_params = new TShowGrantRoleParams(other.show_grant_role_params);
    }
    if (other.isSetDdl_params()) {
      this.ddl_params = new com.cloudera.impala.thrift.TDdlExecRequest(other.ddl_params);
    }
    if (other.isSetReset_metadata_params()) {
      this.reset_metadata_params = new com.cloudera.impala.thrift.TResetMetadataRequest(other.reset_metadata_params);
    }
    if (other.isSetShow_stats_params()) {
      this.show_stats_params = new TShowStatsParams(other.show_stats_params);
    }
    if (other.isSetShow_create_table_params()) {
      this.show_create_table_params = new com.cloudera.impala.thrift.TTableName(other.show_create_table_params);
    }
    if (other.isSetShow_indices_params()) {
      this.show_indices_params = new TShowIndicesParams(other.show_indices_params);
    }
    if (other.isSetDescribe_index_params()) {
      this.describe_index_params = new TDescribeIndexParams(other.describe_index_params);
    }
  }

  public TCatalogOpRequest deepCopy() {
    return new TCatalogOpRequest(this);
  }

  @Override
  public void clear() {
    this.op_type = null;
    this.use_db_params = null;
    this.describe_table_params = null;
    this.show_dbs_params = null;
    this.show_tables_params = null;
    this.show_fns_params = null;
    this.show_data_srcs_params = null;
    this.show_roles_params = null;
    this.show_grant_role_params = null;
    this.ddl_params = null;
    this.reset_metadata_params = null;
    this.show_stats_params = null;
    this.show_create_table_params = null;
    this.show_indices_params = null;
    this.describe_index_params = null;
  }

  /**
   * 
   * @see TCatalogOpType
   */
  public TCatalogOpType getOp_type() {
    return this.op_type;
  }

  /**
   * 
   * @see TCatalogOpType
   */
  public TCatalogOpRequest setOp_type(TCatalogOpType op_type) {
    this.op_type = op_type;
    return this;
  }

  public void unsetOp_type() {
    this.op_type = null;
  }

  /** Returns true if field op_type is set (has been assigned a value) and false otherwise */
  public boolean isSetOp_type() {
    return this.op_type != null;
  }

  public void setOp_typeIsSet(boolean value) {
    if (!value) {
      this.op_type = null;
    }
  }

  public TUseDbParams getUse_db_params() {
    return this.use_db_params;
  }

  public TCatalogOpRequest setUse_db_params(TUseDbParams use_db_params) {
    this.use_db_params = use_db_params;
    return this;
  }

  public void unsetUse_db_params() {
    this.use_db_params = null;
  }

  /** Returns true if field use_db_params is set (has been assigned a value) and false otherwise */
  public boolean isSetUse_db_params() {
    return this.use_db_params != null;
  }

  public void setUse_db_paramsIsSet(boolean value) {
    if (!value) {
      this.use_db_params = null;
    }
  }

  public TDescribeTableParams getDescribe_table_params() {
    return this.describe_table_params;
  }

  public TCatalogOpRequest setDescribe_table_params(TDescribeTableParams describe_table_params) {
    this.describe_table_params = describe_table_params;
    return this;
  }

  public void unsetDescribe_table_params() {
    this.describe_table_params = null;
  }

  /** Returns true if field describe_table_params is set (has been assigned a value) and false otherwise */
  public boolean isSetDescribe_table_params() {
    return this.describe_table_params != null;
  }

  public void setDescribe_table_paramsIsSet(boolean value) {
    if (!value) {
      this.describe_table_params = null;
    }
  }

  public TShowDbsParams getShow_dbs_params() {
    return this.show_dbs_params;
  }

  public TCatalogOpRequest setShow_dbs_params(TShowDbsParams show_dbs_params) {
    this.show_dbs_params = show_dbs_params;
    return this;
  }

  public void unsetShow_dbs_params() {
    this.show_dbs_params = null;
  }

  /** Returns true if field show_dbs_params is set (has been assigned a value) and false otherwise */
  public boolean isSetShow_dbs_params() {
    return this.show_dbs_params != null;
  }

  public void setShow_dbs_paramsIsSet(boolean value) {
    if (!value) {
      this.show_dbs_params = null;
    }
  }

  public TShowTablesParams getShow_tables_params() {
    return this.show_tables_params;
  }

  public TCatalogOpRequest setShow_tables_params(TShowTablesParams show_tables_params) {
    this.show_tables_params = show_tables_params;
    return this;
  }

  public void unsetShow_tables_params() {
    this.show_tables_params = null;
  }

  /** Returns true if field show_tables_params is set (has been assigned a value) and false otherwise */
  public boolean isSetShow_tables_params() {
    return this.show_tables_params != null;
  }

  public void setShow_tables_paramsIsSet(boolean value) {
    if (!value) {
      this.show_tables_params = null;
    }
  }

  public TShowFunctionsParams getShow_fns_params() {
    return this.show_fns_params;
  }

  public TCatalogOpRequest setShow_fns_params(TShowFunctionsParams show_fns_params) {
    this.show_fns_params = show_fns_params;
    return this;
  }

  public void unsetShow_fns_params() {
    this.show_fns_params = null;
  }

  /** Returns true if field show_fns_params is set (has been assigned a value) and false otherwise */
  public boolean isSetShow_fns_params() {
    return this.show_fns_params != null;
  }

  public void setShow_fns_paramsIsSet(boolean value) {
    if (!value) {
      this.show_fns_params = null;
    }
  }

  public TShowDataSrcsParams getShow_data_srcs_params() {
    return this.show_data_srcs_params;
  }

  public TCatalogOpRequest setShow_data_srcs_params(TShowDataSrcsParams show_data_srcs_params) {
    this.show_data_srcs_params = show_data_srcs_params;
    return this;
  }

  public void unsetShow_data_srcs_params() {
    this.show_data_srcs_params = null;
  }

  /** Returns true if field show_data_srcs_params is set (has been assigned a value) and false otherwise */
  public boolean isSetShow_data_srcs_params() {
    return this.show_data_srcs_params != null;
  }

  public void setShow_data_srcs_paramsIsSet(boolean value) {
    if (!value) {
      this.show_data_srcs_params = null;
    }
  }

  public TShowRolesParams getShow_roles_params() {
    return this.show_roles_params;
  }

  public TCatalogOpRequest setShow_roles_params(TShowRolesParams show_roles_params) {
    this.show_roles_params = show_roles_params;
    return this;
  }

  public void unsetShow_roles_params() {
    this.show_roles_params = null;
  }

  /** Returns true if field show_roles_params is set (has been assigned a value) and false otherwise */
  public boolean isSetShow_roles_params() {
    return this.show_roles_params != null;
  }

  public void setShow_roles_paramsIsSet(boolean value) {
    if (!value) {
      this.show_roles_params = null;
    }
  }

  public TShowGrantRoleParams getShow_grant_role_params() {
    return this.show_grant_role_params;
  }

  public TCatalogOpRequest setShow_grant_role_params(TShowGrantRoleParams show_grant_role_params) {
    this.show_grant_role_params = show_grant_role_params;
    return this;
  }

  public void unsetShow_grant_role_params() {
    this.show_grant_role_params = null;
  }

  /** Returns true if field show_grant_role_params is set (has been assigned a value) and false otherwise */
  public boolean isSetShow_grant_role_params() {
    return this.show_grant_role_params != null;
  }

  public void setShow_grant_role_paramsIsSet(boolean value) {
    if (!value) {
      this.show_grant_role_params = null;
    }
  }

  public com.cloudera.impala.thrift.TDdlExecRequest getDdl_params() {
    return this.ddl_params;
  }

  public TCatalogOpRequest setDdl_params(com.cloudera.impala.thrift.TDdlExecRequest ddl_params) {
    this.ddl_params = ddl_params;
    return this;
  }

  public void unsetDdl_params() {
    this.ddl_params = null;
  }

  /** Returns true if field ddl_params is set (has been assigned a value) and false otherwise */
  public boolean isSetDdl_params() {
    return this.ddl_params != null;
  }

  public void setDdl_paramsIsSet(boolean value) {
    if (!value) {
      this.ddl_params = null;
    }
  }

  public com.cloudera.impala.thrift.TResetMetadataRequest getReset_metadata_params() {
    return this.reset_metadata_params;
  }

  public TCatalogOpRequest setReset_metadata_params(com.cloudera.impala.thrift.TResetMetadataRequest reset_metadata_params) {
    this.reset_metadata_params = reset_metadata_params;
    return this;
  }

  public void unsetReset_metadata_params() {
    this.reset_metadata_params = null;
  }

  /** Returns true if field reset_metadata_params is set (has been assigned a value) and false otherwise */
  public boolean isSetReset_metadata_params() {
    return this.reset_metadata_params != null;
  }

  public void setReset_metadata_paramsIsSet(boolean value) {
    if (!value) {
      this.reset_metadata_params = null;
    }
  }

  public TShowStatsParams getShow_stats_params() {
    return this.show_stats_params;
  }

  public TCatalogOpRequest setShow_stats_params(TShowStatsParams show_stats_params) {
    this.show_stats_params = show_stats_params;
    return this;
  }

  public void unsetShow_stats_params() {
    this.show_stats_params = null;
  }

  /** Returns true if field show_stats_params is set (has been assigned a value) and false otherwise */
  public boolean isSetShow_stats_params() {
    return this.show_stats_params != null;
  }

  public void setShow_stats_paramsIsSet(boolean value) {
    if (!value) {
      this.show_stats_params = null;
    }
  }

  public com.cloudera.impala.thrift.TTableName getShow_create_table_params() {
    return this.show_create_table_params;
  }

  public TCatalogOpRequest setShow_create_table_params(com.cloudera.impala.thrift.TTableName show_create_table_params) {
    this.show_create_table_params = show_create_table_params;
    return this;
  }

  public void unsetShow_create_table_params() {
    this.show_create_table_params = null;
  }

  /** Returns true if field show_create_table_params is set (has been assigned a value) and false otherwise */
  public boolean isSetShow_create_table_params() {
    return this.show_create_table_params != null;
  }

  public void setShow_create_table_paramsIsSet(boolean value) {
    if (!value) {
      this.show_create_table_params = null;
    }
  }

  public TShowIndicesParams getShow_indices_params() {
    return this.show_indices_params;
  }

  public TCatalogOpRequest setShow_indices_params(TShowIndicesParams show_indices_params) {
    this.show_indices_params = show_indices_params;
    return this;
  }

  public void unsetShow_indices_params() {
    this.show_indices_params = null;
  }

  /** Returns true if field show_indices_params is set (has been assigned a value) and false otherwise */
  public boolean isSetShow_indices_params() {
    return this.show_indices_params != null;
  }

  public void setShow_indices_paramsIsSet(boolean value) {
    if (!value) {
      this.show_indices_params = null;
    }
  }

  public TDescribeIndexParams getDescribe_index_params() {
    return this.describe_index_params;
  }

  public TCatalogOpRequest setDescribe_index_params(TDescribeIndexParams describe_index_params) {
    this.describe_index_params = describe_index_params;
    return this;
  }

  public void unsetDescribe_index_params() {
    this.describe_index_params = null;
  }

  /** Returns true if field describe_index_params is set (has been assigned a value) and false otherwise */
  public boolean isSetDescribe_index_params() {
    return this.describe_index_params != null;
  }

  public void setDescribe_index_paramsIsSet(boolean value) {
    if (!value) {
      this.describe_index_params = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OP_TYPE:
      if (value == null) {
        unsetOp_type();
      } else {
        setOp_type((TCatalogOpType)value);
      }
      break;

    case USE_DB_PARAMS:
      if (value == null) {
        unsetUse_db_params();
      } else {
        setUse_db_params((TUseDbParams)value);
      }
      break;

    case DESCRIBE_TABLE_PARAMS:
      if (value == null) {
        unsetDescribe_table_params();
      } else {
        setDescribe_table_params((TDescribeTableParams)value);
      }
      break;

    case SHOW_DBS_PARAMS:
      if (value == null) {
        unsetShow_dbs_params();
      } else {
        setShow_dbs_params((TShowDbsParams)value);
      }
      break;

    case SHOW_TABLES_PARAMS:
      if (value == null) {
        unsetShow_tables_params();
      } else {
        setShow_tables_params((TShowTablesParams)value);
      }
      break;

    case SHOW_FNS_PARAMS:
      if (value == null) {
        unsetShow_fns_params();
      } else {
        setShow_fns_params((TShowFunctionsParams)value);
      }
      break;

    case SHOW_DATA_SRCS_PARAMS:
      if (value == null) {
        unsetShow_data_srcs_params();
      } else {
        setShow_data_srcs_params((TShowDataSrcsParams)value);
      }
      break;

    case SHOW_ROLES_PARAMS:
      if (value == null) {
        unsetShow_roles_params();
      } else {
        setShow_roles_params((TShowRolesParams)value);
      }
      break;

    case SHOW_GRANT_ROLE_PARAMS:
      if (value == null) {
        unsetShow_grant_role_params();
      } else {
        setShow_grant_role_params((TShowGrantRoleParams)value);
      }
      break;

    case DDL_PARAMS:
      if (value == null) {
        unsetDdl_params();
      } else {
        setDdl_params((com.cloudera.impala.thrift.TDdlExecRequest)value);
      }
      break;

    case RESET_METADATA_PARAMS:
      if (value == null) {
        unsetReset_metadata_params();
      } else {
        setReset_metadata_params((com.cloudera.impala.thrift.TResetMetadataRequest)value);
      }
      break;

    case SHOW_STATS_PARAMS:
      if (value == null) {
        unsetShow_stats_params();
      } else {
        setShow_stats_params((TShowStatsParams)value);
      }
      break;

    case SHOW_CREATE_TABLE_PARAMS:
      if (value == null) {
        unsetShow_create_table_params();
      } else {
        setShow_create_table_params((com.cloudera.impala.thrift.TTableName)value);
      }
      break;

    case SHOW_INDICES_PARAMS:
      if (value == null) {
        unsetShow_indices_params();
      } else {
        setShow_indices_params((TShowIndicesParams)value);
      }
      break;

    case DESCRIBE_INDEX_PARAMS:
      if (value == null) {
        unsetDescribe_index_params();
      } else {
        setDescribe_index_params((TDescribeIndexParams)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OP_TYPE:
      return getOp_type();

    case USE_DB_PARAMS:
      return getUse_db_params();

    case DESCRIBE_TABLE_PARAMS:
      return getDescribe_table_params();

    case SHOW_DBS_PARAMS:
      return getShow_dbs_params();

    case SHOW_TABLES_PARAMS:
      return getShow_tables_params();

    case SHOW_FNS_PARAMS:
      return getShow_fns_params();

    case SHOW_DATA_SRCS_PARAMS:
      return getShow_data_srcs_params();

    case SHOW_ROLES_PARAMS:
      return getShow_roles_params();

    case SHOW_GRANT_ROLE_PARAMS:
      return getShow_grant_role_params();

    case DDL_PARAMS:
      return getDdl_params();

    case RESET_METADATA_PARAMS:
      return getReset_metadata_params();

    case SHOW_STATS_PARAMS:
      return getShow_stats_params();

    case SHOW_CREATE_TABLE_PARAMS:
      return getShow_create_table_params();

    case SHOW_INDICES_PARAMS:
      return getShow_indices_params();

    case DESCRIBE_INDEX_PARAMS:
      return getDescribe_index_params();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OP_TYPE:
      return isSetOp_type();
    case USE_DB_PARAMS:
      return isSetUse_db_params();
    case DESCRIBE_TABLE_PARAMS:
      return isSetDescribe_table_params();
    case SHOW_DBS_PARAMS:
      return isSetShow_dbs_params();
    case SHOW_TABLES_PARAMS:
      return isSetShow_tables_params();
    case SHOW_FNS_PARAMS:
      return isSetShow_fns_params();
    case SHOW_DATA_SRCS_PARAMS:
      return isSetShow_data_srcs_params();
    case SHOW_ROLES_PARAMS:
      return isSetShow_roles_params();
    case SHOW_GRANT_ROLE_PARAMS:
      return isSetShow_grant_role_params();
    case DDL_PARAMS:
      return isSetDdl_params();
    case RESET_METADATA_PARAMS:
      return isSetReset_metadata_params();
    case SHOW_STATS_PARAMS:
      return isSetShow_stats_params();
    case SHOW_CREATE_TABLE_PARAMS:
      return isSetShow_create_table_params();
    case SHOW_INDICES_PARAMS:
      return isSetShow_indices_params();
    case DESCRIBE_INDEX_PARAMS:
      return isSetDescribe_index_params();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TCatalogOpRequest)
      return this.equals((TCatalogOpRequest)that);
    return false;
  }

  public boolean equals(TCatalogOpRequest that) {
    if (that == null)
      return false;

    boolean this_present_op_type = true && this.isSetOp_type();
    boolean that_present_op_type = true && that.isSetOp_type();
    if (this_present_op_type || that_present_op_type) {
      if (!(this_present_op_type && that_present_op_type))
        return false;
      if (!this.op_type.equals(that.op_type))
        return false;
    }

    boolean this_present_use_db_params = true && this.isSetUse_db_params();
    boolean that_present_use_db_params = true && that.isSetUse_db_params();
    if (this_present_use_db_params || that_present_use_db_params) {
      if (!(this_present_use_db_params && that_present_use_db_params))
        return false;
      if (!this.use_db_params.equals(that.use_db_params))
        return false;
    }

    boolean this_present_describe_table_params = true && this.isSetDescribe_table_params();
    boolean that_present_describe_table_params = true && that.isSetDescribe_table_params();
    if (this_present_describe_table_params || that_present_describe_table_params) {
      if (!(this_present_describe_table_params && that_present_describe_table_params))
        return false;
      if (!this.describe_table_params.equals(that.describe_table_params))
        return false;
    }

    boolean this_present_show_dbs_params = true && this.isSetShow_dbs_params();
    boolean that_present_show_dbs_params = true && that.isSetShow_dbs_params();
    if (this_present_show_dbs_params || that_present_show_dbs_params) {
      if (!(this_present_show_dbs_params && that_present_show_dbs_params))
        return false;
      if (!this.show_dbs_params.equals(that.show_dbs_params))
        return false;
    }

    boolean this_present_show_tables_params = true && this.isSetShow_tables_params();
    boolean that_present_show_tables_params = true && that.isSetShow_tables_params();
    if (this_present_show_tables_params || that_present_show_tables_params) {
      if (!(this_present_show_tables_params && that_present_show_tables_params))
        return false;
      if (!this.show_tables_params.equals(that.show_tables_params))
        return false;
    }

    boolean this_present_show_fns_params = true && this.isSetShow_fns_params();
    boolean that_present_show_fns_params = true && that.isSetShow_fns_params();
    if (this_present_show_fns_params || that_present_show_fns_params) {
      if (!(this_present_show_fns_params && that_present_show_fns_params))
        return false;
      if (!this.show_fns_params.equals(that.show_fns_params))
        return false;
    }

    boolean this_present_show_data_srcs_params = true && this.isSetShow_data_srcs_params();
    boolean that_present_show_data_srcs_params = true && that.isSetShow_data_srcs_params();
    if (this_present_show_data_srcs_params || that_present_show_data_srcs_params) {
      if (!(this_present_show_data_srcs_params && that_present_show_data_srcs_params))
        return false;
      if (!this.show_data_srcs_params.equals(that.show_data_srcs_params))
        return false;
    }

    boolean this_present_show_roles_params = true && this.isSetShow_roles_params();
    boolean that_present_show_roles_params = true && that.isSetShow_roles_params();
    if (this_present_show_roles_params || that_present_show_roles_params) {
      if (!(this_present_show_roles_params && that_present_show_roles_params))
        return false;
      if (!this.show_roles_params.equals(that.show_roles_params))
        return false;
    }

    boolean this_present_show_grant_role_params = true && this.isSetShow_grant_role_params();
    boolean that_present_show_grant_role_params = true && that.isSetShow_grant_role_params();
    if (this_present_show_grant_role_params || that_present_show_grant_role_params) {
      if (!(this_present_show_grant_role_params && that_present_show_grant_role_params))
        return false;
      if (!this.show_grant_role_params.equals(that.show_grant_role_params))
        return false;
    }

    boolean this_present_ddl_params = true && this.isSetDdl_params();
    boolean that_present_ddl_params = true && that.isSetDdl_params();
    if (this_present_ddl_params || that_present_ddl_params) {
      if (!(this_present_ddl_params && that_present_ddl_params))
        return false;
      if (!this.ddl_params.equals(that.ddl_params))
        return false;
    }

    boolean this_present_reset_metadata_params = true && this.isSetReset_metadata_params();
    boolean that_present_reset_metadata_params = true && that.isSetReset_metadata_params();
    if (this_present_reset_metadata_params || that_present_reset_metadata_params) {
      if (!(this_present_reset_metadata_params && that_present_reset_metadata_params))
        return false;
      if (!this.reset_metadata_params.equals(that.reset_metadata_params))
        return false;
    }

    boolean this_present_show_stats_params = true && this.isSetShow_stats_params();
    boolean that_present_show_stats_params = true && that.isSetShow_stats_params();
    if (this_present_show_stats_params || that_present_show_stats_params) {
      if (!(this_present_show_stats_params && that_present_show_stats_params))
        return false;
      if (!this.show_stats_params.equals(that.show_stats_params))
        return false;
    }

    boolean this_present_show_create_table_params = true && this.isSetShow_create_table_params();
    boolean that_present_show_create_table_params = true && that.isSetShow_create_table_params();
    if (this_present_show_create_table_params || that_present_show_create_table_params) {
      if (!(this_present_show_create_table_params && that_present_show_create_table_params))
        return false;
      if (!this.show_create_table_params.equals(that.show_create_table_params))
        return false;
    }

    boolean this_present_show_indices_params = true && this.isSetShow_indices_params();
    boolean that_present_show_indices_params = true && that.isSetShow_indices_params();
    if (this_present_show_indices_params || that_present_show_indices_params) {
      if (!(this_present_show_indices_params && that_present_show_indices_params))
        return false;
      if (!this.show_indices_params.equals(that.show_indices_params))
        return false;
    }

    boolean this_present_describe_index_params = true && this.isSetDescribe_index_params();
    boolean that_present_describe_index_params = true && that.isSetDescribe_index_params();
    if (this_present_describe_index_params || that_present_describe_index_params) {
      if (!(this_present_describe_index_params && that_present_describe_index_params))
        return false;
      if (!this.describe_index_params.equals(that.describe_index_params))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_op_type = true && (isSetOp_type());
    builder.append(present_op_type);
    if (present_op_type)
      builder.append(op_type.getValue());

    boolean present_use_db_params = true && (isSetUse_db_params());
    builder.append(present_use_db_params);
    if (present_use_db_params)
      builder.append(use_db_params);

    boolean present_describe_table_params = true && (isSetDescribe_table_params());
    builder.append(present_describe_table_params);
    if (present_describe_table_params)
      builder.append(describe_table_params);

    boolean present_show_dbs_params = true && (isSetShow_dbs_params());
    builder.append(present_show_dbs_params);
    if (present_show_dbs_params)
      builder.append(show_dbs_params);

    boolean present_show_tables_params = true && (isSetShow_tables_params());
    builder.append(present_show_tables_params);
    if (present_show_tables_params)
      builder.append(show_tables_params);

    boolean present_show_fns_params = true && (isSetShow_fns_params());
    builder.append(present_show_fns_params);
    if (present_show_fns_params)
      builder.append(show_fns_params);

    boolean present_show_data_srcs_params = true && (isSetShow_data_srcs_params());
    builder.append(present_show_data_srcs_params);
    if (present_show_data_srcs_params)
      builder.append(show_data_srcs_params);

    boolean present_show_roles_params = true && (isSetShow_roles_params());
    builder.append(present_show_roles_params);
    if (present_show_roles_params)
      builder.append(show_roles_params);

    boolean present_show_grant_role_params = true && (isSetShow_grant_role_params());
    builder.append(present_show_grant_role_params);
    if (present_show_grant_role_params)
      builder.append(show_grant_role_params);

    boolean present_ddl_params = true && (isSetDdl_params());
    builder.append(present_ddl_params);
    if (present_ddl_params)
      builder.append(ddl_params);

    boolean present_reset_metadata_params = true && (isSetReset_metadata_params());
    builder.append(present_reset_metadata_params);
    if (present_reset_metadata_params)
      builder.append(reset_metadata_params);

    boolean present_show_stats_params = true && (isSetShow_stats_params());
    builder.append(present_show_stats_params);
    if (present_show_stats_params)
      builder.append(show_stats_params);

    boolean present_show_create_table_params = true && (isSetShow_create_table_params());
    builder.append(present_show_create_table_params);
    if (present_show_create_table_params)
      builder.append(show_create_table_params);

    boolean present_show_indices_params = true && (isSetShow_indices_params());
    builder.append(present_show_indices_params);
    if (present_show_indices_params)
      builder.append(show_indices_params);

    boolean present_describe_index_params = true && (isSetDescribe_index_params());
    builder.append(present_describe_index_params);
    if (present_describe_index_params)
      builder.append(describe_index_params);

    return builder.toHashCode();
  }

  public int compareTo(TCatalogOpRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TCatalogOpRequest typedOther = (TCatalogOpRequest)other;

    lastComparison = Boolean.valueOf(isSetOp_type()).compareTo(typedOther.isSetOp_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOp_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.op_type, typedOther.op_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUse_db_params()).compareTo(typedOther.isSetUse_db_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUse_db_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.use_db_params, typedOther.use_db_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescribe_table_params()).compareTo(typedOther.isSetDescribe_table_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescribe_table_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.describe_table_params, typedOther.describe_table_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShow_dbs_params()).compareTo(typedOther.isSetShow_dbs_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShow_dbs_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.show_dbs_params, typedOther.show_dbs_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShow_tables_params()).compareTo(typedOther.isSetShow_tables_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShow_tables_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.show_tables_params, typedOther.show_tables_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShow_fns_params()).compareTo(typedOther.isSetShow_fns_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShow_fns_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.show_fns_params, typedOther.show_fns_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShow_data_srcs_params()).compareTo(typedOther.isSetShow_data_srcs_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShow_data_srcs_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.show_data_srcs_params, typedOther.show_data_srcs_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShow_roles_params()).compareTo(typedOther.isSetShow_roles_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShow_roles_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.show_roles_params, typedOther.show_roles_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShow_grant_role_params()).compareTo(typedOther.isSetShow_grant_role_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShow_grant_role_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.show_grant_role_params, typedOther.show_grant_role_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDdl_params()).compareTo(typedOther.isSetDdl_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDdl_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ddl_params, typedOther.ddl_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReset_metadata_params()).compareTo(typedOther.isSetReset_metadata_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReset_metadata_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reset_metadata_params, typedOther.reset_metadata_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShow_stats_params()).compareTo(typedOther.isSetShow_stats_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShow_stats_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.show_stats_params, typedOther.show_stats_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShow_create_table_params()).compareTo(typedOther.isSetShow_create_table_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShow_create_table_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.show_create_table_params, typedOther.show_create_table_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShow_indices_params()).compareTo(typedOther.isSetShow_indices_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShow_indices_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.show_indices_params, typedOther.show_indices_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescribe_index_params()).compareTo(typedOther.isSetDescribe_index_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescribe_index_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.describe_index_params, typedOther.describe_index_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TCatalogOpRequest(");
    boolean first = true;

    sb.append("op_type:");
    if (this.op_type == null) {
      sb.append("null");
    } else {
      sb.append(this.op_type);
    }
    first = false;
    if (isSetUse_db_params()) {
      if (!first) sb.append(", ");
      sb.append("use_db_params:");
      if (this.use_db_params == null) {
        sb.append("null");
      } else {
        sb.append(this.use_db_params);
      }
      first = false;
    }
    if (isSetDescribe_table_params()) {
      if (!first) sb.append(", ");
      sb.append("describe_table_params:");
      if (this.describe_table_params == null) {
        sb.append("null");
      } else {
        sb.append(this.describe_table_params);
      }
      first = false;
    }
    if (isSetShow_dbs_params()) {
      if (!first) sb.append(", ");
      sb.append("show_dbs_params:");
      if (this.show_dbs_params == null) {
        sb.append("null");
      } else {
        sb.append(this.show_dbs_params);
      }
      first = false;
    }
    if (isSetShow_tables_params()) {
      if (!first) sb.append(", ");
      sb.append("show_tables_params:");
      if (this.show_tables_params == null) {
        sb.append("null");
      } else {
        sb.append(this.show_tables_params);
      }
      first = false;
    }
    if (isSetShow_fns_params()) {
      if (!first) sb.append(", ");
      sb.append("show_fns_params:");
      if (this.show_fns_params == null) {
        sb.append("null");
      } else {
        sb.append(this.show_fns_params);
      }
      first = false;
    }
    if (isSetShow_data_srcs_params()) {
      if (!first) sb.append(", ");
      sb.append("show_data_srcs_params:");
      if (this.show_data_srcs_params == null) {
        sb.append("null");
      } else {
        sb.append(this.show_data_srcs_params);
      }
      first = false;
    }
    if (isSetShow_roles_params()) {
      if (!first) sb.append(", ");
      sb.append("show_roles_params:");
      if (this.show_roles_params == null) {
        sb.append("null");
      } else {
        sb.append(this.show_roles_params);
      }
      first = false;
    }
    if (isSetShow_grant_role_params()) {
      if (!first) sb.append(", ");
      sb.append("show_grant_role_params:");
      if (this.show_grant_role_params == null) {
        sb.append("null");
      } else {
        sb.append(this.show_grant_role_params);
      }
      first = false;
    }
    if (isSetDdl_params()) {
      if (!first) sb.append(", ");
      sb.append("ddl_params:");
      if (this.ddl_params == null) {
        sb.append("null");
      } else {
        sb.append(this.ddl_params);
      }
      first = false;
    }
    if (isSetReset_metadata_params()) {
      if (!first) sb.append(", ");
      sb.append("reset_metadata_params:");
      if (this.reset_metadata_params == null) {
        sb.append("null");
      } else {
        sb.append(this.reset_metadata_params);
      }
      first = false;
    }
    if (isSetShow_stats_params()) {
      if (!first) sb.append(", ");
      sb.append("show_stats_params:");
      if (this.show_stats_params == null) {
        sb.append("null");
      } else {
        sb.append(this.show_stats_params);
      }
      first = false;
    }
    if (isSetShow_create_table_params()) {
      if (!first) sb.append(", ");
      sb.append("show_create_table_params:");
      if (this.show_create_table_params == null) {
        sb.append("null");
      } else {
        sb.append(this.show_create_table_params);
      }
      first = false;
    }
    if (isSetShow_indices_params()) {
      if (!first) sb.append(", ");
      sb.append("show_indices_params:");
      if (this.show_indices_params == null) {
        sb.append("null");
      } else {
        sb.append(this.show_indices_params);
      }
      first = false;
    }
    if (isSetDescribe_index_params()) {
      if (!first) sb.append(", ");
      sb.append("describe_index_params:");
      if (this.describe_index_params == null) {
        sb.append("null");
      } else {
        sb.append(this.describe_index_params);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (op_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'op_type' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (use_db_params != null) {
      use_db_params.validate();
    }
    if (describe_table_params != null) {
      describe_table_params.validate();
    }
    if (show_dbs_params != null) {
      show_dbs_params.validate();
    }
    if (show_tables_params != null) {
      show_tables_params.validate();
    }
    if (show_fns_params != null) {
      show_fns_params.validate();
    }
    if (show_data_srcs_params != null) {
      show_data_srcs_params.validate();
    }
    if (show_roles_params != null) {
      show_roles_params.validate();
    }
    if (show_grant_role_params != null) {
      show_grant_role_params.validate();
    }
    if (ddl_params != null) {
      ddl_params.validate();
    }
    if (reset_metadata_params != null) {
      reset_metadata_params.validate();
    }
    if (show_stats_params != null) {
      show_stats_params.validate();
    }
    if (show_create_table_params != null) {
      show_create_table_params.validate();
    }
    if (show_indices_params != null) {
      show_indices_params.validate();
    }
    if (describe_index_params != null) {
      describe_index_params.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCatalogOpRequestStandardSchemeFactory implements SchemeFactory {
    public TCatalogOpRequestStandardScheme getScheme() {
      return new TCatalogOpRequestStandardScheme();
    }
  }

  private static class TCatalogOpRequestStandardScheme extends StandardScheme<TCatalogOpRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCatalogOpRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OP_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.op_type = TCatalogOpType.findByValue(iprot.readI32());
              struct.setOp_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USE_DB_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.use_db_params = new TUseDbParams();
              struct.use_db_params.read(iprot);
              struct.setUse_db_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESCRIBE_TABLE_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.describe_table_params = new TDescribeTableParams();
              struct.describe_table_params.read(iprot);
              struct.setDescribe_table_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SHOW_DBS_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.show_dbs_params = new TShowDbsParams();
              struct.show_dbs_params.read(iprot);
              struct.setShow_dbs_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SHOW_TABLES_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.show_tables_params = new TShowTablesParams();
              struct.show_tables_params.read(iprot);
              struct.setShow_tables_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SHOW_FNS_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.show_fns_params = new TShowFunctionsParams();
              struct.show_fns_params.read(iprot);
              struct.setShow_fns_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SHOW_DATA_SRCS_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.show_data_srcs_params = new TShowDataSrcsParams();
              struct.show_data_srcs_params.read(iprot);
              struct.setShow_data_srcs_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SHOW_ROLES_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.show_roles_params = new TShowRolesParams();
              struct.show_roles_params.read(iprot);
              struct.setShow_roles_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SHOW_GRANT_ROLE_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.show_grant_role_params = new TShowGrantRoleParams();
              struct.show_grant_role_params.read(iprot);
              struct.setShow_grant_role_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DDL_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ddl_params = new com.cloudera.impala.thrift.TDdlExecRequest();
              struct.ddl_params.read(iprot);
              struct.setDdl_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RESET_METADATA_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.reset_metadata_params = new com.cloudera.impala.thrift.TResetMetadataRequest();
              struct.reset_metadata_params.read(iprot);
              struct.setReset_metadata_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SHOW_STATS_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.show_stats_params = new TShowStatsParams();
              struct.show_stats_params.read(iprot);
              struct.setShow_stats_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SHOW_CREATE_TABLE_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.show_create_table_params = new com.cloudera.impala.thrift.TTableName();
              struct.show_create_table_params.read(iprot);
              struct.setShow_create_table_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SHOW_INDICES_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.show_indices_params = new TShowIndicesParams();
              struct.show_indices_params.read(iprot);
              struct.setShow_indices_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DESCRIBE_INDEX_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.describe_index_params = new TDescribeIndexParams();
              struct.describe_index_params.read(iprot);
              struct.setDescribe_index_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCatalogOpRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.op_type != null) {
        oprot.writeFieldBegin(OP_TYPE_FIELD_DESC);
        oprot.writeI32(struct.op_type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.use_db_params != null) {
        if (struct.isSetUse_db_params()) {
          oprot.writeFieldBegin(USE_DB_PARAMS_FIELD_DESC);
          struct.use_db_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.describe_table_params != null) {
        if (struct.isSetDescribe_table_params()) {
          oprot.writeFieldBegin(DESCRIBE_TABLE_PARAMS_FIELD_DESC);
          struct.describe_table_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.show_dbs_params != null) {
        if (struct.isSetShow_dbs_params()) {
          oprot.writeFieldBegin(SHOW_DBS_PARAMS_FIELD_DESC);
          struct.show_dbs_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.show_tables_params != null) {
        if (struct.isSetShow_tables_params()) {
          oprot.writeFieldBegin(SHOW_TABLES_PARAMS_FIELD_DESC);
          struct.show_tables_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.show_fns_params != null) {
        if (struct.isSetShow_fns_params()) {
          oprot.writeFieldBegin(SHOW_FNS_PARAMS_FIELD_DESC);
          struct.show_fns_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ddl_params != null) {
        if (struct.isSetDdl_params()) {
          oprot.writeFieldBegin(DDL_PARAMS_FIELD_DESC);
          struct.ddl_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.reset_metadata_params != null) {
        if (struct.isSetReset_metadata_params()) {
          oprot.writeFieldBegin(RESET_METADATA_PARAMS_FIELD_DESC);
          struct.reset_metadata_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.show_stats_params != null) {
        if (struct.isSetShow_stats_params()) {
          oprot.writeFieldBegin(SHOW_STATS_PARAMS_FIELD_DESC);
          struct.show_stats_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.show_create_table_params != null) {
        if (struct.isSetShow_create_table_params()) {
          oprot.writeFieldBegin(SHOW_CREATE_TABLE_PARAMS_FIELD_DESC);
          struct.show_create_table_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.show_data_srcs_params != null) {
        if (struct.isSetShow_data_srcs_params()) {
          oprot.writeFieldBegin(SHOW_DATA_SRCS_PARAMS_FIELD_DESC);
          struct.show_data_srcs_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.show_roles_params != null) {
        if (struct.isSetShow_roles_params()) {
          oprot.writeFieldBegin(SHOW_ROLES_PARAMS_FIELD_DESC);
          struct.show_roles_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.show_grant_role_params != null) {
        if (struct.isSetShow_grant_role_params()) {
          oprot.writeFieldBegin(SHOW_GRANT_ROLE_PARAMS_FIELD_DESC);
          struct.show_grant_role_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.show_indices_params != null) {
        if (struct.isSetShow_indices_params()) {
          oprot.writeFieldBegin(SHOW_INDICES_PARAMS_FIELD_DESC);
          struct.show_indices_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.describe_index_params != null) {
        if (struct.isSetDescribe_index_params()) {
          oprot.writeFieldBegin(DESCRIBE_INDEX_PARAMS_FIELD_DESC);
          struct.describe_index_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCatalogOpRequestTupleSchemeFactory implements SchemeFactory {
    public TCatalogOpRequestTupleScheme getScheme() {
      return new TCatalogOpRequestTupleScheme();
    }
  }

  private static class TCatalogOpRequestTupleScheme extends TupleScheme<TCatalogOpRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCatalogOpRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.op_type.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetUse_db_params()) {
        optionals.set(0);
      }
      if (struct.isSetDescribe_table_params()) {
        optionals.set(1);
      }
      if (struct.isSetShow_dbs_params()) {
        optionals.set(2);
      }
      if (struct.isSetShow_tables_params()) {
        optionals.set(3);
      }
      if (struct.isSetShow_fns_params()) {
        optionals.set(4);
      }
      if (struct.isSetShow_data_srcs_params()) {
        optionals.set(5);
      }
      if (struct.isSetShow_roles_params()) {
        optionals.set(6);
      }
      if (struct.isSetShow_grant_role_params()) {
        optionals.set(7);
      }
      if (struct.isSetDdl_params()) {
        optionals.set(8);
      }
      if (struct.isSetReset_metadata_params()) {
        optionals.set(9);
      }
      if (struct.isSetShow_stats_params()) {
        optionals.set(10);
      }
      if (struct.isSetShow_create_table_params()) {
        optionals.set(11);
      }
      if (struct.isSetShow_indices_params()) {
        optionals.set(12);
      }
      if (struct.isSetDescribe_index_params()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetUse_db_params()) {
        struct.use_db_params.write(oprot);
      }
      if (struct.isSetDescribe_table_params()) {
        struct.describe_table_params.write(oprot);
      }
      if (struct.isSetShow_dbs_params()) {
        struct.show_dbs_params.write(oprot);
      }
      if (struct.isSetShow_tables_params()) {
        struct.show_tables_params.write(oprot);
      }
      if (struct.isSetShow_fns_params()) {
        struct.show_fns_params.write(oprot);
      }
      if (struct.isSetShow_data_srcs_params()) {
        struct.show_data_srcs_params.write(oprot);
      }
      if (struct.isSetShow_roles_params()) {
        struct.show_roles_params.write(oprot);
      }
      if (struct.isSetShow_grant_role_params()) {
        struct.show_grant_role_params.write(oprot);
      }
      if (struct.isSetDdl_params()) {
        struct.ddl_params.write(oprot);
      }
      if (struct.isSetReset_metadata_params()) {
        struct.reset_metadata_params.write(oprot);
      }
      if (struct.isSetShow_stats_params()) {
        struct.show_stats_params.write(oprot);
      }
      if (struct.isSetShow_create_table_params()) {
        struct.show_create_table_params.write(oprot);
      }
      if (struct.isSetShow_indices_params()) {
        struct.show_indices_params.write(oprot);
      }
      if (struct.isSetDescribe_index_params()) {
        struct.describe_index_params.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCatalogOpRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.op_type = TCatalogOpType.findByValue(iprot.readI32());
      struct.setOp_typeIsSet(true);
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.use_db_params = new TUseDbParams();
        struct.use_db_params.read(iprot);
        struct.setUse_db_paramsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.describe_table_params = new TDescribeTableParams();
        struct.describe_table_params.read(iprot);
        struct.setDescribe_table_paramsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.show_dbs_params = new TShowDbsParams();
        struct.show_dbs_params.read(iprot);
        struct.setShow_dbs_paramsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.show_tables_params = new TShowTablesParams();
        struct.show_tables_params.read(iprot);
        struct.setShow_tables_paramsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.show_fns_params = new TShowFunctionsParams();
        struct.show_fns_params.read(iprot);
        struct.setShow_fns_paramsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.show_data_srcs_params = new TShowDataSrcsParams();
        struct.show_data_srcs_params.read(iprot);
        struct.setShow_data_srcs_paramsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.show_roles_params = new TShowRolesParams();
        struct.show_roles_params.read(iprot);
        struct.setShow_roles_paramsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.show_grant_role_params = new TShowGrantRoleParams();
        struct.show_grant_role_params.read(iprot);
        struct.setShow_grant_role_paramsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.ddl_params = new com.cloudera.impala.thrift.TDdlExecRequest();
        struct.ddl_params.read(iprot);
        struct.setDdl_paramsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.reset_metadata_params = new com.cloudera.impala.thrift.TResetMetadataRequest();
        struct.reset_metadata_params.read(iprot);
        struct.setReset_metadata_paramsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.show_stats_params = new TShowStatsParams();
        struct.show_stats_params.read(iprot);
        struct.setShow_stats_paramsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.show_create_table_params = new com.cloudera.impala.thrift.TTableName();
        struct.show_create_table_params.read(iprot);
        struct.setShow_create_table_paramsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.show_indices_params = new TShowIndicesParams();
        struct.show_indices_params.read(iprot);
        struct.setShow_indices_paramsIsSet(true);
      }
      if (incoming.get(13)) {
        struct.describe_index_params = new TDescribeIndexParams();
        struct.describe_index_params.read(iprot);
        struct.setDescribe_index_paramsIsSet(true);
      }
    }
  }

}

