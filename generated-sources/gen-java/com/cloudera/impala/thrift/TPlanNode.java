/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TPlanNode implements org.apache.thrift.TBase<TPlanNode, TPlanNode._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPlanNode");

  private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("node_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NODE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("node_type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NUM_CHILDREN_FIELD_DESC = new org.apache.thrift.protocol.TField("num_children", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField ROW_TUPLES_FIELD_DESC = new org.apache.thrift.protocol.TField("row_tuples", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField NULLABLE_TUPLES_FIELD_DESC = new org.apache.thrift.protocol.TField("nullable_tuples", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField CONJUNCTS_FIELD_DESC = new org.apache.thrift.protocol.TField("conjuncts", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField COMPACT_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("compact_data", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField HDFS_SCAN_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("hdfs_scan_node", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField HBASE_SCAN_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("hbase_scan_node", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField DATA_SOURCE_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("data_source_node", org.apache.thrift.protocol.TType.STRUCT, (short)16);
  private static final org.apache.thrift.protocol.TField HASH_JOIN_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("hash_join_node", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField AGG_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("agg_node", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField SORT_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("sort_node", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField UNION_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("union_node", org.apache.thrift.protocol.TType.STRUCT, (short)14);
  private static final org.apache.thrift.protocol.TField EXCHANGE_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("exchange_node", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField ANALYTIC_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("analytic_node", org.apache.thrift.protocol.TType.STRUCT, (short)20);
  private static final org.apache.thrift.protocol.TField LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("label", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField LABEL_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("label_detail", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField ESTIMATED_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("estimated_stats", org.apache.thrift.protocol.TType.STRUCT, (short)19);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPlanNodeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPlanNodeTupleSchemeFactory());
  }

  public int node_id; // required
  /**
   * 
   * @see TPlanNodeType
   */
  public TPlanNodeType node_type; // required
  public int num_children; // required
  public long limit; // required
  public List<Integer> row_tuples; // required
  public List<Boolean> nullable_tuples; // required
  public List<com.cloudera.impala.thrift.TExpr> conjuncts; // optional
  public boolean compact_data; // required
  public THdfsScanNode hdfs_scan_node; // optional
  public THBaseScanNode hbase_scan_node; // optional
  public TDataSourceScanNode data_source_node; // optional
  public THashJoinNode hash_join_node; // optional
  public TAggregationNode agg_node; // optional
  public TSortNode sort_node; // optional
  public TUnionNode union_node; // optional
  public TExchangeNode exchange_node; // optional
  public TAnalyticNode analytic_node; // optional
  public String label; // optional
  public String label_detail; // optional
  public com.cloudera.impala.thrift.TExecStats estimated_stats; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NODE_ID((short)1, "node_id"),
    /**
     * 
     * @see TPlanNodeType
     */
    NODE_TYPE((short)2, "node_type"),
    NUM_CHILDREN((short)3, "num_children"),
    LIMIT((short)4, "limit"),
    ROW_TUPLES((short)5, "row_tuples"),
    NULLABLE_TUPLES((short)6, "nullable_tuples"),
    CONJUNCTS((short)7, "conjuncts"),
    COMPACT_DATA((short)8, "compact_data"),
    HDFS_SCAN_NODE((short)9, "hdfs_scan_node"),
    HBASE_SCAN_NODE((short)10, "hbase_scan_node"),
    DATA_SOURCE_NODE((short)16, "data_source_node"),
    HASH_JOIN_NODE((short)11, "hash_join_node"),
    AGG_NODE((short)12, "agg_node"),
    SORT_NODE((short)13, "sort_node"),
    UNION_NODE((short)14, "union_node"),
    EXCHANGE_NODE((short)15, "exchange_node"),
    ANALYTIC_NODE((short)20, "analytic_node"),
    LABEL((short)17, "label"),
    LABEL_DETAIL((short)18, "label_detail"),
    ESTIMATED_STATS((short)19, "estimated_stats");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NODE_ID
          return NODE_ID;
        case 2: // NODE_TYPE
          return NODE_TYPE;
        case 3: // NUM_CHILDREN
          return NUM_CHILDREN;
        case 4: // LIMIT
          return LIMIT;
        case 5: // ROW_TUPLES
          return ROW_TUPLES;
        case 6: // NULLABLE_TUPLES
          return NULLABLE_TUPLES;
        case 7: // CONJUNCTS
          return CONJUNCTS;
        case 8: // COMPACT_DATA
          return COMPACT_DATA;
        case 9: // HDFS_SCAN_NODE
          return HDFS_SCAN_NODE;
        case 10: // HBASE_SCAN_NODE
          return HBASE_SCAN_NODE;
        case 16: // DATA_SOURCE_NODE
          return DATA_SOURCE_NODE;
        case 11: // HASH_JOIN_NODE
          return HASH_JOIN_NODE;
        case 12: // AGG_NODE
          return AGG_NODE;
        case 13: // SORT_NODE
          return SORT_NODE;
        case 14: // UNION_NODE
          return UNION_NODE;
        case 15: // EXCHANGE_NODE
          return EXCHANGE_NODE;
        case 20: // ANALYTIC_NODE
          return ANALYTIC_NODE;
        case 17: // LABEL
          return LABEL;
        case 18: // LABEL_DETAIL
          return LABEL_DETAIL;
        case 19: // ESTIMATED_STATS
          return ESTIMATED_STATS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NODE_ID_ISSET_ID = 0;
  private static final int __NUM_CHILDREN_ISSET_ID = 1;
  private static final int __LIMIT_ISSET_ID = 2;
  private static final int __COMPACT_DATA_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.CONJUNCTS,_Fields.HDFS_SCAN_NODE,_Fields.HBASE_SCAN_NODE,_Fields.DATA_SOURCE_NODE,_Fields.HASH_JOIN_NODE,_Fields.AGG_NODE,_Fields.SORT_NODE,_Fields.UNION_NODE,_Fields.EXCHANGE_NODE,_Fields.ANALYTIC_NODE,_Fields.LABEL,_Fields.LABEL_DETAIL,_Fields.ESTIMATED_STATS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("node_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TPlanNodeId")));
    tmpMap.put(_Fields.NODE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("node_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TPlanNodeType.class)));
    tmpMap.put(_Fields.NUM_CHILDREN, new org.apache.thrift.meta_data.FieldMetaData("num_children", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ROW_TUPLES, new org.apache.thrift.meta_data.FieldMetaData("row_tuples", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TTupleId"))));
    tmpMap.put(_Fields.NULLABLE_TUPLES, new org.apache.thrift.meta_data.FieldMetaData("nullable_tuples", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.CONJUNCTS, new org.apache.thrift.meta_data.FieldMetaData("conjuncts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TExpr.class))));
    tmpMap.put(_Fields.COMPACT_DATA, new org.apache.thrift.meta_data.FieldMetaData("compact_data", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HDFS_SCAN_NODE, new org.apache.thrift.meta_data.FieldMetaData("hdfs_scan_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THdfsScanNode.class)));
    tmpMap.put(_Fields.HBASE_SCAN_NODE, new org.apache.thrift.meta_data.FieldMetaData("hbase_scan_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THBaseScanNode.class)));
    tmpMap.put(_Fields.DATA_SOURCE_NODE, new org.apache.thrift.meta_data.FieldMetaData("data_source_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDataSourceScanNode.class)));
    tmpMap.put(_Fields.HASH_JOIN_NODE, new org.apache.thrift.meta_data.FieldMetaData("hash_join_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THashJoinNode.class)));
    tmpMap.put(_Fields.AGG_NODE, new org.apache.thrift.meta_data.FieldMetaData("agg_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAggregationNode.class)));
    tmpMap.put(_Fields.SORT_NODE, new org.apache.thrift.meta_data.FieldMetaData("sort_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSortNode.class)));
    tmpMap.put(_Fields.UNION_NODE, new org.apache.thrift.meta_data.FieldMetaData("union_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUnionNode.class)));
    tmpMap.put(_Fields.EXCHANGE_NODE, new org.apache.thrift.meta_data.FieldMetaData("exchange_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TExchangeNode.class)));
    tmpMap.put(_Fields.ANALYTIC_NODE, new org.apache.thrift.meta_data.FieldMetaData("analytic_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAnalyticNode.class)));
    tmpMap.put(_Fields.LABEL, new org.apache.thrift.meta_data.FieldMetaData("label", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LABEL_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("label_detail", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ESTIMATED_STATS, new org.apache.thrift.meta_data.FieldMetaData("estimated_stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TExecStats.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPlanNode.class, metaDataMap);
  }

  public TPlanNode() {
  }

  public TPlanNode(
    int node_id,
    TPlanNodeType node_type,
    int num_children,
    long limit,
    List<Integer> row_tuples,
    List<Boolean> nullable_tuples,
    boolean compact_data)
  {
    this();
    this.node_id = node_id;
    setNode_idIsSet(true);
    this.node_type = node_type;
    this.num_children = num_children;
    setNum_childrenIsSet(true);
    this.limit = limit;
    setLimitIsSet(true);
    this.row_tuples = row_tuples;
    this.nullable_tuples = nullable_tuples;
    this.compact_data = compact_data;
    setCompact_dataIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPlanNode(TPlanNode other) {
    __isset_bitfield = other.__isset_bitfield;
    this.node_id = other.node_id;
    if (other.isSetNode_type()) {
      this.node_type = other.node_type;
    }
    this.num_children = other.num_children;
    this.limit = other.limit;
    if (other.isSetRow_tuples()) {
      List<Integer> __this__row_tuples = new ArrayList<Integer>();
      for (Integer other_element : other.row_tuples) {
        __this__row_tuples.add(other_element);
      }
      this.row_tuples = __this__row_tuples;
    }
    if (other.isSetNullable_tuples()) {
      List<Boolean> __this__nullable_tuples = new ArrayList<Boolean>();
      for (Boolean other_element : other.nullable_tuples) {
        __this__nullable_tuples.add(other_element);
      }
      this.nullable_tuples = __this__nullable_tuples;
    }
    if (other.isSetConjuncts()) {
      List<com.cloudera.impala.thrift.TExpr> __this__conjuncts = new ArrayList<com.cloudera.impala.thrift.TExpr>();
      for (com.cloudera.impala.thrift.TExpr other_element : other.conjuncts) {
        __this__conjuncts.add(new com.cloudera.impala.thrift.TExpr(other_element));
      }
      this.conjuncts = __this__conjuncts;
    }
    this.compact_data = other.compact_data;
    if (other.isSetHdfs_scan_node()) {
      this.hdfs_scan_node = new THdfsScanNode(other.hdfs_scan_node);
    }
    if (other.isSetHbase_scan_node()) {
      this.hbase_scan_node = new THBaseScanNode(other.hbase_scan_node);
    }
    if (other.isSetData_source_node()) {
      this.data_source_node = new TDataSourceScanNode(other.data_source_node);
    }
    if (other.isSetHash_join_node()) {
      this.hash_join_node = new THashJoinNode(other.hash_join_node);
    }
    if (other.isSetAgg_node()) {
      this.agg_node = new TAggregationNode(other.agg_node);
    }
    if (other.isSetSort_node()) {
      this.sort_node = new TSortNode(other.sort_node);
    }
    if (other.isSetUnion_node()) {
      this.union_node = new TUnionNode(other.union_node);
    }
    if (other.isSetExchange_node()) {
      this.exchange_node = new TExchangeNode(other.exchange_node);
    }
    if (other.isSetAnalytic_node()) {
      this.analytic_node = new TAnalyticNode(other.analytic_node);
    }
    if (other.isSetLabel()) {
      this.label = other.label;
    }
    if (other.isSetLabel_detail()) {
      this.label_detail = other.label_detail;
    }
    if (other.isSetEstimated_stats()) {
      this.estimated_stats = new com.cloudera.impala.thrift.TExecStats(other.estimated_stats);
    }
  }

  public TPlanNode deepCopy() {
    return new TPlanNode(this);
  }

  @Override
  public void clear() {
    setNode_idIsSet(false);
    this.node_id = 0;
    this.node_type = null;
    setNum_childrenIsSet(false);
    this.num_children = 0;
    setLimitIsSet(false);
    this.limit = 0;
    this.row_tuples = null;
    this.nullable_tuples = null;
    this.conjuncts = null;
    setCompact_dataIsSet(false);
    this.compact_data = false;
    this.hdfs_scan_node = null;
    this.hbase_scan_node = null;
    this.data_source_node = null;
    this.hash_join_node = null;
    this.agg_node = null;
    this.sort_node = null;
    this.union_node = null;
    this.exchange_node = null;
    this.analytic_node = null;
    this.label = null;
    this.label_detail = null;
    this.estimated_stats = null;
  }

  public int getNode_id() {
    return this.node_id;
  }

  public TPlanNode setNode_id(int node_id) {
    this.node_id = node_id;
    setNode_idIsSet(true);
    return this;
  }

  public void unsetNode_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NODE_ID_ISSET_ID);
  }

  /** Returns true if field node_id is set (has been assigned a value) and false otherwise */
  public boolean isSetNode_id() {
    return EncodingUtils.testBit(__isset_bitfield, __NODE_ID_ISSET_ID);
  }

  public void setNode_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NODE_ID_ISSET_ID, value);
  }

  /**
   * 
   * @see TPlanNodeType
   */
  public TPlanNodeType getNode_type() {
    return this.node_type;
  }

  /**
   * 
   * @see TPlanNodeType
   */
  public TPlanNode setNode_type(TPlanNodeType node_type) {
    this.node_type = node_type;
    return this;
  }

  public void unsetNode_type() {
    this.node_type = null;
  }

  /** Returns true if field node_type is set (has been assigned a value) and false otherwise */
  public boolean isSetNode_type() {
    return this.node_type != null;
  }

  public void setNode_typeIsSet(boolean value) {
    if (!value) {
      this.node_type = null;
    }
  }

  public int getNum_children() {
    return this.num_children;
  }

  public TPlanNode setNum_children(int num_children) {
    this.num_children = num_children;
    setNum_childrenIsSet(true);
    return this;
  }

  public void unsetNum_children() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_CHILDREN_ISSET_ID);
  }

  /** Returns true if field num_children is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_children() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_CHILDREN_ISSET_ID);
  }

  public void setNum_childrenIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_CHILDREN_ISSET_ID, value);
  }

  public long getLimit() {
    return this.limit;
  }

  public TPlanNode setLimit(long limit) {
    this.limit = limit;
    setLimitIsSet(true);
    return this;
  }

  public void unsetLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
  }

  /** Returns true if field limit is set (has been assigned a value) and false otherwise */
  public boolean isSetLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
  }

  public void setLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
  }

  public int getRow_tuplesSize() {
    return (this.row_tuples == null) ? 0 : this.row_tuples.size();
  }

  public java.util.Iterator<Integer> getRow_tuplesIterator() {
    return (this.row_tuples == null) ? null : this.row_tuples.iterator();
  }

  public void addToRow_tuples(int elem) {
    if (this.row_tuples == null) {
      this.row_tuples = new ArrayList<Integer>();
    }
    this.row_tuples.add(elem);
  }

  public List<Integer> getRow_tuples() {
    return this.row_tuples;
  }

  public TPlanNode setRow_tuples(List<Integer> row_tuples) {
    this.row_tuples = row_tuples;
    return this;
  }

  public void unsetRow_tuples() {
    this.row_tuples = null;
  }

  /** Returns true if field row_tuples is set (has been assigned a value) and false otherwise */
  public boolean isSetRow_tuples() {
    return this.row_tuples != null;
  }

  public void setRow_tuplesIsSet(boolean value) {
    if (!value) {
      this.row_tuples = null;
    }
  }

  public int getNullable_tuplesSize() {
    return (this.nullable_tuples == null) ? 0 : this.nullable_tuples.size();
  }

  public java.util.Iterator<Boolean> getNullable_tuplesIterator() {
    return (this.nullable_tuples == null) ? null : this.nullable_tuples.iterator();
  }

  public void addToNullable_tuples(boolean elem) {
    if (this.nullable_tuples == null) {
      this.nullable_tuples = new ArrayList<Boolean>();
    }
    this.nullable_tuples.add(elem);
  }

  public List<Boolean> getNullable_tuples() {
    return this.nullable_tuples;
  }

  public TPlanNode setNullable_tuples(List<Boolean> nullable_tuples) {
    this.nullable_tuples = nullable_tuples;
    return this;
  }

  public void unsetNullable_tuples() {
    this.nullable_tuples = null;
  }

  /** Returns true if field nullable_tuples is set (has been assigned a value) and false otherwise */
  public boolean isSetNullable_tuples() {
    return this.nullable_tuples != null;
  }

  public void setNullable_tuplesIsSet(boolean value) {
    if (!value) {
      this.nullable_tuples = null;
    }
  }

  public int getConjunctsSize() {
    return (this.conjuncts == null) ? 0 : this.conjuncts.size();
  }

  public java.util.Iterator<com.cloudera.impala.thrift.TExpr> getConjunctsIterator() {
    return (this.conjuncts == null) ? null : this.conjuncts.iterator();
  }

  public void addToConjuncts(com.cloudera.impala.thrift.TExpr elem) {
    if (this.conjuncts == null) {
      this.conjuncts = new ArrayList<com.cloudera.impala.thrift.TExpr>();
    }
    this.conjuncts.add(elem);
  }

  public List<com.cloudera.impala.thrift.TExpr> getConjuncts() {
    return this.conjuncts;
  }

  public TPlanNode setConjuncts(List<com.cloudera.impala.thrift.TExpr> conjuncts) {
    this.conjuncts = conjuncts;
    return this;
  }

  public void unsetConjuncts() {
    this.conjuncts = null;
  }

  /** Returns true if field conjuncts is set (has been assigned a value) and false otherwise */
  public boolean isSetConjuncts() {
    return this.conjuncts != null;
  }

  public void setConjunctsIsSet(boolean value) {
    if (!value) {
      this.conjuncts = null;
    }
  }

  public boolean isCompact_data() {
    return this.compact_data;
  }

  public TPlanNode setCompact_data(boolean compact_data) {
    this.compact_data = compact_data;
    setCompact_dataIsSet(true);
    return this;
  }

  public void unsetCompact_data() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPACT_DATA_ISSET_ID);
  }

  /** Returns true if field compact_data is set (has been assigned a value) and false otherwise */
  public boolean isSetCompact_data() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPACT_DATA_ISSET_ID);
  }

  public void setCompact_dataIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPACT_DATA_ISSET_ID, value);
  }

  public THdfsScanNode getHdfs_scan_node() {
    return this.hdfs_scan_node;
  }

  public TPlanNode setHdfs_scan_node(THdfsScanNode hdfs_scan_node) {
    this.hdfs_scan_node = hdfs_scan_node;
    return this;
  }

  public void unsetHdfs_scan_node() {
    this.hdfs_scan_node = null;
  }

  /** Returns true if field hdfs_scan_node is set (has been assigned a value) and false otherwise */
  public boolean isSetHdfs_scan_node() {
    return this.hdfs_scan_node != null;
  }

  public void setHdfs_scan_nodeIsSet(boolean value) {
    if (!value) {
      this.hdfs_scan_node = null;
    }
  }

  public THBaseScanNode getHbase_scan_node() {
    return this.hbase_scan_node;
  }

  public TPlanNode setHbase_scan_node(THBaseScanNode hbase_scan_node) {
    this.hbase_scan_node = hbase_scan_node;
    return this;
  }

  public void unsetHbase_scan_node() {
    this.hbase_scan_node = null;
  }

  /** Returns true if field hbase_scan_node is set (has been assigned a value) and false otherwise */
  public boolean isSetHbase_scan_node() {
    return this.hbase_scan_node != null;
  }

  public void setHbase_scan_nodeIsSet(boolean value) {
    if (!value) {
      this.hbase_scan_node = null;
    }
  }

  public TDataSourceScanNode getData_source_node() {
    return this.data_source_node;
  }

  public TPlanNode setData_source_node(TDataSourceScanNode data_source_node) {
    this.data_source_node = data_source_node;
    return this;
  }

  public void unsetData_source_node() {
    this.data_source_node = null;
  }

  /** Returns true if field data_source_node is set (has been assigned a value) and false otherwise */
  public boolean isSetData_source_node() {
    return this.data_source_node != null;
  }

  public void setData_source_nodeIsSet(boolean value) {
    if (!value) {
      this.data_source_node = null;
    }
  }

  public THashJoinNode getHash_join_node() {
    return this.hash_join_node;
  }

  public TPlanNode setHash_join_node(THashJoinNode hash_join_node) {
    this.hash_join_node = hash_join_node;
    return this;
  }

  public void unsetHash_join_node() {
    this.hash_join_node = null;
  }

  /** Returns true if field hash_join_node is set (has been assigned a value) and false otherwise */
  public boolean isSetHash_join_node() {
    return this.hash_join_node != null;
  }

  public void setHash_join_nodeIsSet(boolean value) {
    if (!value) {
      this.hash_join_node = null;
    }
  }

  public TAggregationNode getAgg_node() {
    return this.agg_node;
  }

  public TPlanNode setAgg_node(TAggregationNode agg_node) {
    this.agg_node = agg_node;
    return this;
  }

  public void unsetAgg_node() {
    this.agg_node = null;
  }

  /** Returns true if field agg_node is set (has been assigned a value) and false otherwise */
  public boolean isSetAgg_node() {
    return this.agg_node != null;
  }

  public void setAgg_nodeIsSet(boolean value) {
    if (!value) {
      this.agg_node = null;
    }
  }

  public TSortNode getSort_node() {
    return this.sort_node;
  }

  public TPlanNode setSort_node(TSortNode sort_node) {
    this.sort_node = sort_node;
    return this;
  }

  public void unsetSort_node() {
    this.sort_node = null;
  }

  /** Returns true if field sort_node is set (has been assigned a value) and false otherwise */
  public boolean isSetSort_node() {
    return this.sort_node != null;
  }

  public void setSort_nodeIsSet(boolean value) {
    if (!value) {
      this.sort_node = null;
    }
  }

  public TUnionNode getUnion_node() {
    return this.union_node;
  }

  public TPlanNode setUnion_node(TUnionNode union_node) {
    this.union_node = union_node;
    return this;
  }

  public void unsetUnion_node() {
    this.union_node = null;
  }

  /** Returns true if field union_node is set (has been assigned a value) and false otherwise */
  public boolean isSetUnion_node() {
    return this.union_node != null;
  }

  public void setUnion_nodeIsSet(boolean value) {
    if (!value) {
      this.union_node = null;
    }
  }

  public TExchangeNode getExchange_node() {
    return this.exchange_node;
  }

  public TPlanNode setExchange_node(TExchangeNode exchange_node) {
    this.exchange_node = exchange_node;
    return this;
  }

  public void unsetExchange_node() {
    this.exchange_node = null;
  }

  /** Returns true if field exchange_node is set (has been assigned a value) and false otherwise */
  public boolean isSetExchange_node() {
    return this.exchange_node != null;
  }

  public void setExchange_nodeIsSet(boolean value) {
    if (!value) {
      this.exchange_node = null;
    }
  }

  public TAnalyticNode getAnalytic_node() {
    return this.analytic_node;
  }

  public TPlanNode setAnalytic_node(TAnalyticNode analytic_node) {
    this.analytic_node = analytic_node;
    return this;
  }

  public void unsetAnalytic_node() {
    this.analytic_node = null;
  }

  /** Returns true if field analytic_node is set (has been assigned a value) and false otherwise */
  public boolean isSetAnalytic_node() {
    return this.analytic_node != null;
  }

  public void setAnalytic_nodeIsSet(boolean value) {
    if (!value) {
      this.analytic_node = null;
    }
  }

  public String getLabel() {
    return this.label;
  }

  public TPlanNode setLabel(String label) {
    this.label = label;
    return this;
  }

  public void unsetLabel() {
    this.label = null;
  }

  /** Returns true if field label is set (has been assigned a value) and false otherwise */
  public boolean isSetLabel() {
    return this.label != null;
  }

  public void setLabelIsSet(boolean value) {
    if (!value) {
      this.label = null;
    }
  }

  public String getLabel_detail() {
    return this.label_detail;
  }

  public TPlanNode setLabel_detail(String label_detail) {
    this.label_detail = label_detail;
    return this;
  }

  public void unsetLabel_detail() {
    this.label_detail = null;
  }

  /** Returns true if field label_detail is set (has been assigned a value) and false otherwise */
  public boolean isSetLabel_detail() {
    return this.label_detail != null;
  }

  public void setLabel_detailIsSet(boolean value) {
    if (!value) {
      this.label_detail = null;
    }
  }

  public com.cloudera.impala.thrift.TExecStats getEstimated_stats() {
    return this.estimated_stats;
  }

  public TPlanNode setEstimated_stats(com.cloudera.impala.thrift.TExecStats estimated_stats) {
    this.estimated_stats = estimated_stats;
    return this;
  }

  public void unsetEstimated_stats() {
    this.estimated_stats = null;
  }

  /** Returns true if field estimated_stats is set (has been assigned a value) and false otherwise */
  public boolean isSetEstimated_stats() {
    return this.estimated_stats != null;
  }

  public void setEstimated_statsIsSet(boolean value) {
    if (!value) {
      this.estimated_stats = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NODE_ID:
      if (value == null) {
        unsetNode_id();
      } else {
        setNode_id((Integer)value);
      }
      break;

    case NODE_TYPE:
      if (value == null) {
        unsetNode_type();
      } else {
        setNode_type((TPlanNodeType)value);
      }
      break;

    case NUM_CHILDREN:
      if (value == null) {
        unsetNum_children();
      } else {
        setNum_children((Integer)value);
      }
      break;

    case LIMIT:
      if (value == null) {
        unsetLimit();
      } else {
        setLimit((Long)value);
      }
      break;

    case ROW_TUPLES:
      if (value == null) {
        unsetRow_tuples();
      } else {
        setRow_tuples((List<Integer>)value);
      }
      break;

    case NULLABLE_TUPLES:
      if (value == null) {
        unsetNullable_tuples();
      } else {
        setNullable_tuples((List<Boolean>)value);
      }
      break;

    case CONJUNCTS:
      if (value == null) {
        unsetConjuncts();
      } else {
        setConjuncts((List<com.cloudera.impala.thrift.TExpr>)value);
      }
      break;

    case COMPACT_DATA:
      if (value == null) {
        unsetCompact_data();
      } else {
        setCompact_data((Boolean)value);
      }
      break;

    case HDFS_SCAN_NODE:
      if (value == null) {
        unsetHdfs_scan_node();
      } else {
        setHdfs_scan_node((THdfsScanNode)value);
      }
      break;

    case HBASE_SCAN_NODE:
      if (value == null) {
        unsetHbase_scan_node();
      } else {
        setHbase_scan_node((THBaseScanNode)value);
      }
      break;

    case DATA_SOURCE_NODE:
      if (value == null) {
        unsetData_source_node();
      } else {
        setData_source_node((TDataSourceScanNode)value);
      }
      break;

    case HASH_JOIN_NODE:
      if (value == null) {
        unsetHash_join_node();
      } else {
        setHash_join_node((THashJoinNode)value);
      }
      break;

    case AGG_NODE:
      if (value == null) {
        unsetAgg_node();
      } else {
        setAgg_node((TAggregationNode)value);
      }
      break;

    case SORT_NODE:
      if (value == null) {
        unsetSort_node();
      } else {
        setSort_node((TSortNode)value);
      }
      break;

    case UNION_NODE:
      if (value == null) {
        unsetUnion_node();
      } else {
        setUnion_node((TUnionNode)value);
      }
      break;

    case EXCHANGE_NODE:
      if (value == null) {
        unsetExchange_node();
      } else {
        setExchange_node((TExchangeNode)value);
      }
      break;

    case ANALYTIC_NODE:
      if (value == null) {
        unsetAnalytic_node();
      } else {
        setAnalytic_node((TAnalyticNode)value);
      }
      break;

    case LABEL:
      if (value == null) {
        unsetLabel();
      } else {
        setLabel((String)value);
      }
      break;

    case LABEL_DETAIL:
      if (value == null) {
        unsetLabel_detail();
      } else {
        setLabel_detail((String)value);
      }
      break;

    case ESTIMATED_STATS:
      if (value == null) {
        unsetEstimated_stats();
      } else {
        setEstimated_stats((com.cloudera.impala.thrift.TExecStats)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NODE_ID:
      return Integer.valueOf(getNode_id());

    case NODE_TYPE:
      return getNode_type();

    case NUM_CHILDREN:
      return Integer.valueOf(getNum_children());

    case LIMIT:
      return Long.valueOf(getLimit());

    case ROW_TUPLES:
      return getRow_tuples();

    case NULLABLE_TUPLES:
      return getNullable_tuples();

    case CONJUNCTS:
      return getConjuncts();

    case COMPACT_DATA:
      return Boolean.valueOf(isCompact_data());

    case HDFS_SCAN_NODE:
      return getHdfs_scan_node();

    case HBASE_SCAN_NODE:
      return getHbase_scan_node();

    case DATA_SOURCE_NODE:
      return getData_source_node();

    case HASH_JOIN_NODE:
      return getHash_join_node();

    case AGG_NODE:
      return getAgg_node();

    case SORT_NODE:
      return getSort_node();

    case UNION_NODE:
      return getUnion_node();

    case EXCHANGE_NODE:
      return getExchange_node();

    case ANALYTIC_NODE:
      return getAnalytic_node();

    case LABEL:
      return getLabel();

    case LABEL_DETAIL:
      return getLabel_detail();

    case ESTIMATED_STATS:
      return getEstimated_stats();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NODE_ID:
      return isSetNode_id();
    case NODE_TYPE:
      return isSetNode_type();
    case NUM_CHILDREN:
      return isSetNum_children();
    case LIMIT:
      return isSetLimit();
    case ROW_TUPLES:
      return isSetRow_tuples();
    case NULLABLE_TUPLES:
      return isSetNullable_tuples();
    case CONJUNCTS:
      return isSetConjuncts();
    case COMPACT_DATA:
      return isSetCompact_data();
    case HDFS_SCAN_NODE:
      return isSetHdfs_scan_node();
    case HBASE_SCAN_NODE:
      return isSetHbase_scan_node();
    case DATA_SOURCE_NODE:
      return isSetData_source_node();
    case HASH_JOIN_NODE:
      return isSetHash_join_node();
    case AGG_NODE:
      return isSetAgg_node();
    case SORT_NODE:
      return isSetSort_node();
    case UNION_NODE:
      return isSetUnion_node();
    case EXCHANGE_NODE:
      return isSetExchange_node();
    case ANALYTIC_NODE:
      return isSetAnalytic_node();
    case LABEL:
      return isSetLabel();
    case LABEL_DETAIL:
      return isSetLabel_detail();
    case ESTIMATED_STATS:
      return isSetEstimated_stats();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPlanNode)
      return this.equals((TPlanNode)that);
    return false;
  }

  public boolean equals(TPlanNode that) {
    if (that == null)
      return false;

    boolean this_present_node_id = true;
    boolean that_present_node_id = true;
    if (this_present_node_id || that_present_node_id) {
      if (!(this_present_node_id && that_present_node_id))
        return false;
      if (this.node_id != that.node_id)
        return false;
    }

    boolean this_present_node_type = true && this.isSetNode_type();
    boolean that_present_node_type = true && that.isSetNode_type();
    if (this_present_node_type || that_present_node_type) {
      if (!(this_present_node_type && that_present_node_type))
        return false;
      if (!this.node_type.equals(that.node_type))
        return false;
    }

    boolean this_present_num_children = true;
    boolean that_present_num_children = true;
    if (this_present_num_children || that_present_num_children) {
      if (!(this_present_num_children && that_present_num_children))
        return false;
      if (this.num_children != that.num_children)
        return false;
    }

    boolean this_present_limit = true;
    boolean that_present_limit = true;
    if (this_present_limit || that_present_limit) {
      if (!(this_present_limit && that_present_limit))
        return false;
      if (this.limit != that.limit)
        return false;
    }

    boolean this_present_row_tuples = true && this.isSetRow_tuples();
    boolean that_present_row_tuples = true && that.isSetRow_tuples();
    if (this_present_row_tuples || that_present_row_tuples) {
      if (!(this_present_row_tuples && that_present_row_tuples))
        return false;
      if (!this.row_tuples.equals(that.row_tuples))
        return false;
    }

    boolean this_present_nullable_tuples = true && this.isSetNullable_tuples();
    boolean that_present_nullable_tuples = true && that.isSetNullable_tuples();
    if (this_present_nullable_tuples || that_present_nullable_tuples) {
      if (!(this_present_nullable_tuples && that_present_nullable_tuples))
        return false;
      if (!this.nullable_tuples.equals(that.nullable_tuples))
        return false;
    }

    boolean this_present_conjuncts = true && this.isSetConjuncts();
    boolean that_present_conjuncts = true && that.isSetConjuncts();
    if (this_present_conjuncts || that_present_conjuncts) {
      if (!(this_present_conjuncts && that_present_conjuncts))
        return false;
      if (!this.conjuncts.equals(that.conjuncts))
        return false;
    }

    boolean this_present_compact_data = true;
    boolean that_present_compact_data = true;
    if (this_present_compact_data || that_present_compact_data) {
      if (!(this_present_compact_data && that_present_compact_data))
        return false;
      if (this.compact_data != that.compact_data)
        return false;
    }

    boolean this_present_hdfs_scan_node = true && this.isSetHdfs_scan_node();
    boolean that_present_hdfs_scan_node = true && that.isSetHdfs_scan_node();
    if (this_present_hdfs_scan_node || that_present_hdfs_scan_node) {
      if (!(this_present_hdfs_scan_node && that_present_hdfs_scan_node))
        return false;
      if (!this.hdfs_scan_node.equals(that.hdfs_scan_node))
        return false;
    }

    boolean this_present_hbase_scan_node = true && this.isSetHbase_scan_node();
    boolean that_present_hbase_scan_node = true && that.isSetHbase_scan_node();
    if (this_present_hbase_scan_node || that_present_hbase_scan_node) {
      if (!(this_present_hbase_scan_node && that_present_hbase_scan_node))
        return false;
      if (!this.hbase_scan_node.equals(that.hbase_scan_node))
        return false;
    }

    boolean this_present_data_source_node = true && this.isSetData_source_node();
    boolean that_present_data_source_node = true && that.isSetData_source_node();
    if (this_present_data_source_node || that_present_data_source_node) {
      if (!(this_present_data_source_node && that_present_data_source_node))
        return false;
      if (!this.data_source_node.equals(that.data_source_node))
        return false;
    }

    boolean this_present_hash_join_node = true && this.isSetHash_join_node();
    boolean that_present_hash_join_node = true && that.isSetHash_join_node();
    if (this_present_hash_join_node || that_present_hash_join_node) {
      if (!(this_present_hash_join_node && that_present_hash_join_node))
        return false;
      if (!this.hash_join_node.equals(that.hash_join_node))
        return false;
    }

    boolean this_present_agg_node = true && this.isSetAgg_node();
    boolean that_present_agg_node = true && that.isSetAgg_node();
    if (this_present_agg_node || that_present_agg_node) {
      if (!(this_present_agg_node && that_present_agg_node))
        return false;
      if (!this.agg_node.equals(that.agg_node))
        return false;
    }

    boolean this_present_sort_node = true && this.isSetSort_node();
    boolean that_present_sort_node = true && that.isSetSort_node();
    if (this_present_sort_node || that_present_sort_node) {
      if (!(this_present_sort_node && that_present_sort_node))
        return false;
      if (!this.sort_node.equals(that.sort_node))
        return false;
    }

    boolean this_present_union_node = true && this.isSetUnion_node();
    boolean that_present_union_node = true && that.isSetUnion_node();
    if (this_present_union_node || that_present_union_node) {
      if (!(this_present_union_node && that_present_union_node))
        return false;
      if (!this.union_node.equals(that.union_node))
        return false;
    }

    boolean this_present_exchange_node = true && this.isSetExchange_node();
    boolean that_present_exchange_node = true && that.isSetExchange_node();
    if (this_present_exchange_node || that_present_exchange_node) {
      if (!(this_present_exchange_node && that_present_exchange_node))
        return false;
      if (!this.exchange_node.equals(that.exchange_node))
        return false;
    }

    boolean this_present_analytic_node = true && this.isSetAnalytic_node();
    boolean that_present_analytic_node = true && that.isSetAnalytic_node();
    if (this_present_analytic_node || that_present_analytic_node) {
      if (!(this_present_analytic_node && that_present_analytic_node))
        return false;
      if (!this.analytic_node.equals(that.analytic_node))
        return false;
    }

    boolean this_present_label = true && this.isSetLabel();
    boolean that_present_label = true && that.isSetLabel();
    if (this_present_label || that_present_label) {
      if (!(this_present_label && that_present_label))
        return false;
      if (!this.label.equals(that.label))
        return false;
    }

    boolean this_present_label_detail = true && this.isSetLabel_detail();
    boolean that_present_label_detail = true && that.isSetLabel_detail();
    if (this_present_label_detail || that_present_label_detail) {
      if (!(this_present_label_detail && that_present_label_detail))
        return false;
      if (!this.label_detail.equals(that.label_detail))
        return false;
    }

    boolean this_present_estimated_stats = true && this.isSetEstimated_stats();
    boolean that_present_estimated_stats = true && that.isSetEstimated_stats();
    if (this_present_estimated_stats || that_present_estimated_stats) {
      if (!(this_present_estimated_stats && that_present_estimated_stats))
        return false;
      if (!this.estimated_stats.equals(that.estimated_stats))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_node_id = true;
    builder.append(present_node_id);
    if (present_node_id)
      builder.append(node_id);

    boolean present_node_type = true && (isSetNode_type());
    builder.append(present_node_type);
    if (present_node_type)
      builder.append(node_type.getValue());

    boolean present_num_children = true;
    builder.append(present_num_children);
    if (present_num_children)
      builder.append(num_children);

    boolean present_limit = true;
    builder.append(present_limit);
    if (present_limit)
      builder.append(limit);

    boolean present_row_tuples = true && (isSetRow_tuples());
    builder.append(present_row_tuples);
    if (present_row_tuples)
      builder.append(row_tuples);

    boolean present_nullable_tuples = true && (isSetNullable_tuples());
    builder.append(present_nullable_tuples);
    if (present_nullable_tuples)
      builder.append(nullable_tuples);

    boolean present_conjuncts = true && (isSetConjuncts());
    builder.append(present_conjuncts);
    if (present_conjuncts)
      builder.append(conjuncts);

    boolean present_compact_data = true;
    builder.append(present_compact_data);
    if (present_compact_data)
      builder.append(compact_data);

    boolean present_hdfs_scan_node = true && (isSetHdfs_scan_node());
    builder.append(present_hdfs_scan_node);
    if (present_hdfs_scan_node)
      builder.append(hdfs_scan_node);

    boolean present_hbase_scan_node = true && (isSetHbase_scan_node());
    builder.append(present_hbase_scan_node);
    if (present_hbase_scan_node)
      builder.append(hbase_scan_node);

    boolean present_data_source_node = true && (isSetData_source_node());
    builder.append(present_data_source_node);
    if (present_data_source_node)
      builder.append(data_source_node);

    boolean present_hash_join_node = true && (isSetHash_join_node());
    builder.append(present_hash_join_node);
    if (present_hash_join_node)
      builder.append(hash_join_node);

    boolean present_agg_node = true && (isSetAgg_node());
    builder.append(present_agg_node);
    if (present_agg_node)
      builder.append(agg_node);

    boolean present_sort_node = true && (isSetSort_node());
    builder.append(present_sort_node);
    if (present_sort_node)
      builder.append(sort_node);

    boolean present_union_node = true && (isSetUnion_node());
    builder.append(present_union_node);
    if (present_union_node)
      builder.append(union_node);

    boolean present_exchange_node = true && (isSetExchange_node());
    builder.append(present_exchange_node);
    if (present_exchange_node)
      builder.append(exchange_node);

    boolean present_analytic_node = true && (isSetAnalytic_node());
    builder.append(present_analytic_node);
    if (present_analytic_node)
      builder.append(analytic_node);

    boolean present_label = true && (isSetLabel());
    builder.append(present_label);
    if (present_label)
      builder.append(label);

    boolean present_label_detail = true && (isSetLabel_detail());
    builder.append(present_label_detail);
    if (present_label_detail)
      builder.append(label_detail);

    boolean present_estimated_stats = true && (isSetEstimated_stats());
    builder.append(present_estimated_stats);
    if (present_estimated_stats)
      builder.append(estimated_stats);

    return builder.toHashCode();
  }

  public int compareTo(TPlanNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TPlanNode typedOther = (TPlanNode)other;

    lastComparison = Boolean.valueOf(isSetNode_id()).compareTo(typedOther.isSetNode_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNode_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.node_id, typedOther.node_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNode_type()).compareTo(typedOther.isSetNode_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNode_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.node_type, typedOther.node_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_children()).compareTo(typedOther.isSetNum_children());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_children()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_children, typedOther.num_children);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimit()).compareTo(typedOther.isSetLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, typedOther.limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRow_tuples()).compareTo(typedOther.isSetRow_tuples());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRow_tuples()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row_tuples, typedOther.row_tuples);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNullable_tuples()).compareTo(typedOther.isSetNullable_tuples());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNullable_tuples()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nullable_tuples, typedOther.nullable_tuples);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConjuncts()).compareTo(typedOther.isSetConjuncts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConjuncts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conjuncts, typedOther.conjuncts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompact_data()).compareTo(typedOther.isSetCompact_data());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompact_data()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compact_data, typedOther.compact_data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHdfs_scan_node()).compareTo(typedOther.isSetHdfs_scan_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHdfs_scan_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hdfs_scan_node, typedOther.hdfs_scan_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHbase_scan_node()).compareTo(typedOther.isSetHbase_scan_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHbase_scan_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hbase_scan_node, typedOther.hbase_scan_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetData_source_node()).compareTo(typedOther.isSetData_source_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData_source_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data_source_node, typedOther.data_source_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHash_join_node()).compareTo(typedOther.isSetHash_join_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHash_join_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hash_join_node, typedOther.hash_join_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAgg_node()).compareTo(typedOther.isSetAgg_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgg_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agg_node, typedOther.agg_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSort_node()).compareTo(typedOther.isSetSort_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSort_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sort_node, typedOther.sort_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnion_node()).compareTo(typedOther.isSetUnion_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnion_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.union_node, typedOther.union_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchange_node()).compareTo(typedOther.isSetExchange_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchange_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchange_node, typedOther.exchange_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnalytic_node()).compareTo(typedOther.isSetAnalytic_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnalytic_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.analytic_node, typedOther.analytic_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLabel()).compareTo(typedOther.isSetLabel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLabel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.label, typedOther.label);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLabel_detail()).compareTo(typedOther.isSetLabel_detail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLabel_detail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.label_detail, typedOther.label_detail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEstimated_stats()).compareTo(typedOther.isSetEstimated_stats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEstimated_stats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.estimated_stats, typedOther.estimated_stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPlanNode(");
    boolean first = true;

    sb.append("node_id:");
    sb.append(this.node_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("node_type:");
    if (this.node_type == null) {
      sb.append("null");
    } else {
      sb.append(this.node_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_children:");
    sb.append(this.num_children);
    first = false;
    if (!first) sb.append(", ");
    sb.append("limit:");
    sb.append(this.limit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("row_tuples:");
    if (this.row_tuples == null) {
      sb.append("null");
    } else {
      sb.append(this.row_tuples);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nullable_tuples:");
    if (this.nullable_tuples == null) {
      sb.append("null");
    } else {
      sb.append(this.nullable_tuples);
    }
    first = false;
    if (isSetConjuncts()) {
      if (!first) sb.append(", ");
      sb.append("conjuncts:");
      if (this.conjuncts == null) {
        sb.append("null");
      } else {
        sb.append(this.conjuncts);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("compact_data:");
    sb.append(this.compact_data);
    first = false;
    if (isSetHdfs_scan_node()) {
      if (!first) sb.append(", ");
      sb.append("hdfs_scan_node:");
      if (this.hdfs_scan_node == null) {
        sb.append("null");
      } else {
        sb.append(this.hdfs_scan_node);
      }
      first = false;
    }
    if (isSetHbase_scan_node()) {
      if (!first) sb.append(", ");
      sb.append("hbase_scan_node:");
      if (this.hbase_scan_node == null) {
        sb.append("null");
      } else {
        sb.append(this.hbase_scan_node);
      }
      first = false;
    }
    if (isSetData_source_node()) {
      if (!first) sb.append(", ");
      sb.append("data_source_node:");
      if (this.data_source_node == null) {
        sb.append("null");
      } else {
        sb.append(this.data_source_node);
      }
      first = false;
    }
    if (isSetHash_join_node()) {
      if (!first) sb.append(", ");
      sb.append("hash_join_node:");
      if (this.hash_join_node == null) {
        sb.append("null");
      } else {
        sb.append(this.hash_join_node);
      }
      first = false;
    }
    if (isSetAgg_node()) {
      if (!first) sb.append(", ");
      sb.append("agg_node:");
      if (this.agg_node == null) {
        sb.append("null");
      } else {
        sb.append(this.agg_node);
      }
      first = false;
    }
    if (isSetSort_node()) {
      if (!first) sb.append(", ");
      sb.append("sort_node:");
      if (this.sort_node == null) {
        sb.append("null");
      } else {
        sb.append(this.sort_node);
      }
      first = false;
    }
    if (isSetUnion_node()) {
      if (!first) sb.append(", ");
      sb.append("union_node:");
      if (this.union_node == null) {
        sb.append("null");
      } else {
        sb.append(this.union_node);
      }
      first = false;
    }
    if (isSetExchange_node()) {
      if (!first) sb.append(", ");
      sb.append("exchange_node:");
      if (this.exchange_node == null) {
        sb.append("null");
      } else {
        sb.append(this.exchange_node);
      }
      first = false;
    }
    if (isSetAnalytic_node()) {
      if (!first) sb.append(", ");
      sb.append("analytic_node:");
      if (this.analytic_node == null) {
        sb.append("null");
      } else {
        sb.append(this.analytic_node);
      }
      first = false;
    }
    if (isSetLabel()) {
      if (!first) sb.append(", ");
      sb.append("label:");
      if (this.label == null) {
        sb.append("null");
      } else {
        sb.append(this.label);
      }
      first = false;
    }
    if (isSetLabel_detail()) {
      if (!first) sb.append(", ");
      sb.append("label_detail:");
      if (this.label_detail == null) {
        sb.append("null");
      } else {
        sb.append(this.label_detail);
      }
      first = false;
    }
    if (isSetEstimated_stats()) {
      if (!first) sb.append(", ");
      sb.append("estimated_stats:");
      if (this.estimated_stats == null) {
        sb.append("null");
      } else {
        sb.append(this.estimated_stats);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'node_id' because it's a primitive and you chose the non-beans generator.
    if (node_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'node_type' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'num_children' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'limit' because it's a primitive and you chose the non-beans generator.
    if (row_tuples == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'row_tuples' was not present! Struct: " + toString());
    }
    if (nullable_tuples == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nullable_tuples' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'compact_data' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (hdfs_scan_node != null) {
      hdfs_scan_node.validate();
    }
    if (hbase_scan_node != null) {
      hbase_scan_node.validate();
    }
    if (data_source_node != null) {
      data_source_node.validate();
    }
    if (hash_join_node != null) {
      hash_join_node.validate();
    }
    if (agg_node != null) {
      agg_node.validate();
    }
    if (sort_node != null) {
      sort_node.validate();
    }
    if (union_node != null) {
      union_node.validate();
    }
    if (exchange_node != null) {
      exchange_node.validate();
    }
    if (analytic_node != null) {
      analytic_node.validate();
    }
    if (estimated_stats != null) {
      estimated_stats.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPlanNodeStandardSchemeFactory implements SchemeFactory {
    public TPlanNodeStandardScheme getScheme() {
      return new TPlanNodeStandardScheme();
    }
  }

  private static class TPlanNodeStandardScheme extends StandardScheme<TPlanNode> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPlanNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NODE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.node_id = iprot.readI32();
              struct.setNode_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NODE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.node_type = TPlanNodeType.findByValue(iprot.readI32());
              struct.setNode_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NUM_CHILDREN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_children = iprot.readI32();
              struct.setNum_childrenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.limit = iprot.readI64();
              struct.setLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ROW_TUPLES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list152 = iprot.readListBegin();
                struct.row_tuples = new ArrayList<Integer>(_list152.size);
                for (int _i153 = 0; _i153 < _list152.size; ++_i153)
                {
                  int _elem154; // required
                  _elem154 = iprot.readI32();
                  struct.row_tuples.add(_elem154);
                }
                iprot.readListEnd();
              }
              struct.setRow_tuplesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NULLABLE_TUPLES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list155 = iprot.readListBegin();
                struct.nullable_tuples = new ArrayList<Boolean>(_list155.size);
                for (int _i156 = 0; _i156 < _list155.size; ++_i156)
                {
                  boolean _elem157; // required
                  _elem157 = iprot.readBool();
                  struct.nullable_tuples.add(_elem157);
                }
                iprot.readListEnd();
              }
              struct.setNullable_tuplesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CONJUNCTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list158 = iprot.readListBegin();
                struct.conjuncts = new ArrayList<com.cloudera.impala.thrift.TExpr>(_list158.size);
                for (int _i159 = 0; _i159 < _list158.size; ++_i159)
                {
                  com.cloudera.impala.thrift.TExpr _elem160; // required
                  _elem160 = new com.cloudera.impala.thrift.TExpr();
                  _elem160.read(iprot);
                  struct.conjuncts.add(_elem160);
                }
                iprot.readListEnd();
              }
              struct.setConjunctsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // COMPACT_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.compact_data = iprot.readBool();
              struct.setCompact_dataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // HDFS_SCAN_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.hdfs_scan_node = new THdfsScanNode();
              struct.hdfs_scan_node.read(iprot);
              struct.setHdfs_scan_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // HBASE_SCAN_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.hbase_scan_node = new THBaseScanNode();
              struct.hbase_scan_node.read(iprot);
              struct.setHbase_scan_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // DATA_SOURCE_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.data_source_node = new TDataSourceScanNode();
              struct.data_source_node.read(iprot);
              struct.setData_source_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // HASH_JOIN_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.hash_join_node = new THashJoinNode();
              struct.hash_join_node.read(iprot);
              struct.setHash_join_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // AGG_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.agg_node = new TAggregationNode();
              struct.agg_node.read(iprot);
              struct.setAgg_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SORT_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sort_node = new TSortNode();
              struct.sort_node.read(iprot);
              struct.setSort_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // UNION_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.union_node = new TUnionNode();
              struct.union_node.read(iprot);
              struct.setUnion_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // EXCHANGE_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.exchange_node = new TExchangeNode();
              struct.exchange_node.read(iprot);
              struct.setExchange_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // ANALYTIC_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.analytic_node = new TAnalyticNode();
              struct.analytic_node.read(iprot);
              struct.setAnalytic_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.label = iprot.readString();
              struct.setLabelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // LABEL_DETAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.label_detail = iprot.readString();
              struct.setLabel_detailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ESTIMATED_STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.estimated_stats = new com.cloudera.impala.thrift.TExecStats();
              struct.estimated_stats.read(iprot);
              struct.setEstimated_statsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetNode_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'node_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNum_children()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'num_children' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLimit()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'limit' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCompact_data()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'compact_data' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPlanNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
      oprot.writeI32(struct.node_id);
      oprot.writeFieldEnd();
      if (struct.node_type != null) {
        oprot.writeFieldBegin(NODE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.node_type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUM_CHILDREN_FIELD_DESC);
      oprot.writeI32(struct.num_children);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LIMIT_FIELD_DESC);
      oprot.writeI64(struct.limit);
      oprot.writeFieldEnd();
      if (struct.row_tuples != null) {
        oprot.writeFieldBegin(ROW_TUPLES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.row_tuples.size()));
          for (int _iter161 : struct.row_tuples)
          {
            oprot.writeI32(_iter161);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.nullable_tuples != null) {
        oprot.writeFieldBegin(NULLABLE_TUPLES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.nullable_tuples.size()));
          for (boolean _iter162 : struct.nullable_tuples)
          {
            oprot.writeBool(_iter162);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.conjuncts != null) {
        if (struct.isSetConjuncts()) {
          oprot.writeFieldBegin(CONJUNCTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.conjuncts.size()));
            for (com.cloudera.impala.thrift.TExpr _iter163 : struct.conjuncts)
            {
              _iter163.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(COMPACT_DATA_FIELD_DESC);
      oprot.writeBool(struct.compact_data);
      oprot.writeFieldEnd();
      if (struct.hdfs_scan_node != null) {
        if (struct.isSetHdfs_scan_node()) {
          oprot.writeFieldBegin(HDFS_SCAN_NODE_FIELD_DESC);
          struct.hdfs_scan_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.hbase_scan_node != null) {
        if (struct.isSetHbase_scan_node()) {
          oprot.writeFieldBegin(HBASE_SCAN_NODE_FIELD_DESC);
          struct.hbase_scan_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.hash_join_node != null) {
        if (struct.isSetHash_join_node()) {
          oprot.writeFieldBegin(HASH_JOIN_NODE_FIELD_DESC);
          struct.hash_join_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.agg_node != null) {
        if (struct.isSetAgg_node()) {
          oprot.writeFieldBegin(AGG_NODE_FIELD_DESC);
          struct.agg_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sort_node != null) {
        if (struct.isSetSort_node()) {
          oprot.writeFieldBegin(SORT_NODE_FIELD_DESC);
          struct.sort_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.union_node != null) {
        if (struct.isSetUnion_node()) {
          oprot.writeFieldBegin(UNION_NODE_FIELD_DESC);
          struct.union_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.exchange_node != null) {
        if (struct.isSetExchange_node()) {
          oprot.writeFieldBegin(EXCHANGE_NODE_FIELD_DESC);
          struct.exchange_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.data_source_node != null) {
        if (struct.isSetData_source_node()) {
          oprot.writeFieldBegin(DATA_SOURCE_NODE_FIELD_DESC);
          struct.data_source_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.label != null) {
        if (struct.isSetLabel()) {
          oprot.writeFieldBegin(LABEL_FIELD_DESC);
          oprot.writeString(struct.label);
          oprot.writeFieldEnd();
        }
      }
      if (struct.label_detail != null) {
        if (struct.isSetLabel_detail()) {
          oprot.writeFieldBegin(LABEL_DETAIL_FIELD_DESC);
          oprot.writeString(struct.label_detail);
          oprot.writeFieldEnd();
        }
      }
      if (struct.estimated_stats != null) {
        if (struct.isSetEstimated_stats()) {
          oprot.writeFieldBegin(ESTIMATED_STATS_FIELD_DESC);
          struct.estimated_stats.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.analytic_node != null) {
        if (struct.isSetAnalytic_node()) {
          oprot.writeFieldBegin(ANALYTIC_NODE_FIELD_DESC);
          struct.analytic_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPlanNodeTupleSchemeFactory implements SchemeFactory {
    public TPlanNodeTupleScheme getScheme() {
      return new TPlanNodeTupleScheme();
    }
  }

  private static class TPlanNodeTupleScheme extends TupleScheme<TPlanNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPlanNode struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.node_id);
      oprot.writeI32(struct.node_type.getValue());
      oprot.writeI32(struct.num_children);
      oprot.writeI64(struct.limit);
      {
        oprot.writeI32(struct.row_tuples.size());
        for (int _iter164 : struct.row_tuples)
        {
          oprot.writeI32(_iter164);
        }
      }
      {
        oprot.writeI32(struct.nullable_tuples.size());
        for (boolean _iter165 : struct.nullable_tuples)
        {
          oprot.writeBool(_iter165);
        }
      }
      oprot.writeBool(struct.compact_data);
      BitSet optionals = new BitSet();
      if (struct.isSetConjuncts()) {
        optionals.set(0);
      }
      if (struct.isSetHdfs_scan_node()) {
        optionals.set(1);
      }
      if (struct.isSetHbase_scan_node()) {
        optionals.set(2);
      }
      if (struct.isSetData_source_node()) {
        optionals.set(3);
      }
      if (struct.isSetHash_join_node()) {
        optionals.set(4);
      }
      if (struct.isSetAgg_node()) {
        optionals.set(5);
      }
      if (struct.isSetSort_node()) {
        optionals.set(6);
      }
      if (struct.isSetUnion_node()) {
        optionals.set(7);
      }
      if (struct.isSetExchange_node()) {
        optionals.set(8);
      }
      if (struct.isSetAnalytic_node()) {
        optionals.set(9);
      }
      if (struct.isSetLabel()) {
        optionals.set(10);
      }
      if (struct.isSetLabel_detail()) {
        optionals.set(11);
      }
      if (struct.isSetEstimated_stats()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetConjuncts()) {
        {
          oprot.writeI32(struct.conjuncts.size());
          for (com.cloudera.impala.thrift.TExpr _iter166 : struct.conjuncts)
          {
            _iter166.write(oprot);
          }
        }
      }
      if (struct.isSetHdfs_scan_node()) {
        struct.hdfs_scan_node.write(oprot);
      }
      if (struct.isSetHbase_scan_node()) {
        struct.hbase_scan_node.write(oprot);
      }
      if (struct.isSetData_source_node()) {
        struct.data_source_node.write(oprot);
      }
      if (struct.isSetHash_join_node()) {
        struct.hash_join_node.write(oprot);
      }
      if (struct.isSetAgg_node()) {
        struct.agg_node.write(oprot);
      }
      if (struct.isSetSort_node()) {
        struct.sort_node.write(oprot);
      }
      if (struct.isSetUnion_node()) {
        struct.union_node.write(oprot);
      }
      if (struct.isSetExchange_node()) {
        struct.exchange_node.write(oprot);
      }
      if (struct.isSetAnalytic_node()) {
        struct.analytic_node.write(oprot);
      }
      if (struct.isSetLabel()) {
        oprot.writeString(struct.label);
      }
      if (struct.isSetLabel_detail()) {
        oprot.writeString(struct.label_detail);
      }
      if (struct.isSetEstimated_stats()) {
        struct.estimated_stats.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPlanNode struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.node_id = iprot.readI32();
      struct.setNode_idIsSet(true);
      struct.node_type = TPlanNodeType.findByValue(iprot.readI32());
      struct.setNode_typeIsSet(true);
      struct.num_children = iprot.readI32();
      struct.setNum_childrenIsSet(true);
      struct.limit = iprot.readI64();
      struct.setLimitIsSet(true);
      {
        org.apache.thrift.protocol.TList _list167 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.row_tuples = new ArrayList<Integer>(_list167.size);
        for (int _i168 = 0; _i168 < _list167.size; ++_i168)
        {
          int _elem169; // required
          _elem169 = iprot.readI32();
          struct.row_tuples.add(_elem169);
        }
      }
      struct.setRow_tuplesIsSet(true);
      {
        org.apache.thrift.protocol.TList _list170 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
        struct.nullable_tuples = new ArrayList<Boolean>(_list170.size);
        for (int _i171 = 0; _i171 < _list170.size; ++_i171)
        {
          boolean _elem172; // required
          _elem172 = iprot.readBool();
          struct.nullable_tuples.add(_elem172);
        }
      }
      struct.setNullable_tuplesIsSet(true);
      struct.compact_data = iprot.readBool();
      struct.setCompact_dataIsSet(true);
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list173 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.conjuncts = new ArrayList<com.cloudera.impala.thrift.TExpr>(_list173.size);
          for (int _i174 = 0; _i174 < _list173.size; ++_i174)
          {
            com.cloudera.impala.thrift.TExpr _elem175; // required
            _elem175 = new com.cloudera.impala.thrift.TExpr();
            _elem175.read(iprot);
            struct.conjuncts.add(_elem175);
          }
        }
        struct.setConjunctsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.hdfs_scan_node = new THdfsScanNode();
        struct.hdfs_scan_node.read(iprot);
        struct.setHdfs_scan_nodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.hbase_scan_node = new THBaseScanNode();
        struct.hbase_scan_node.read(iprot);
        struct.setHbase_scan_nodeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.data_source_node = new TDataSourceScanNode();
        struct.data_source_node.read(iprot);
        struct.setData_source_nodeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.hash_join_node = new THashJoinNode();
        struct.hash_join_node.read(iprot);
        struct.setHash_join_nodeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.agg_node = new TAggregationNode();
        struct.agg_node.read(iprot);
        struct.setAgg_nodeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.sort_node = new TSortNode();
        struct.sort_node.read(iprot);
        struct.setSort_nodeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.union_node = new TUnionNode();
        struct.union_node.read(iprot);
        struct.setUnion_nodeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.exchange_node = new TExchangeNode();
        struct.exchange_node.read(iprot);
        struct.setExchange_nodeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.analytic_node = new TAnalyticNode();
        struct.analytic_node.read(iprot);
        struct.setAnalytic_nodeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.label = iprot.readString();
        struct.setLabelIsSet(true);
      }
      if (incoming.get(11)) {
        struct.label_detail = iprot.readString();
        struct.setLabel_detailIsSet(true);
      }
      if (incoming.get(12)) {
        struct.estimated_stats = new com.cloudera.impala.thrift.TExecStats();
        struct.estimated_stats.read(iprot);
        struct.setEstimated_statsIsSet(true);
      }
    }
  }

}

