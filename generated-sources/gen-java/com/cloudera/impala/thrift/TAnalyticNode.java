/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TAnalyticNode implements org.apache.thrift.TBase<TAnalyticNode, TAnalyticNode._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAnalyticNode");

  private static final org.apache.thrift.protocol.TField PARTITION_EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_exprs", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField ORDER_BY_EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("order_by_exprs", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField ANALYTIC_FUNCTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("analytic_functions", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField WINDOW_FIELD_DESC = new org.apache.thrift.protocol.TField("window", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField INTERMEDIATE_TUPLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("intermediate_tuple_id", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField OUTPUT_TUPLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("output_tuple_id", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField BUFFERED_TUPLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("buffered_tuple_id", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField PARTITION_BY_EQ_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_by_eq", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField ORDER_BY_EQ_FIELD_DESC = new org.apache.thrift.protocol.TField("order_by_eq", org.apache.thrift.protocol.TType.STRUCT, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TAnalyticNodeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TAnalyticNodeTupleSchemeFactory());
  }

  public List<com.cloudera.impala.thrift.TExpr> partition_exprs; // required
  public List<com.cloudera.impala.thrift.TExpr> order_by_exprs; // required
  public List<com.cloudera.impala.thrift.TExpr> analytic_functions; // required
  public TAnalyticWindow window; // optional
  public int intermediate_tuple_id; // required
  public int output_tuple_id; // required
  public int buffered_tuple_id; // optional
  public com.cloudera.impala.thrift.TExpr partition_by_eq; // optional
  public com.cloudera.impala.thrift.TExpr order_by_eq; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PARTITION_EXPRS((short)1, "partition_exprs"),
    ORDER_BY_EXPRS((short)2, "order_by_exprs"),
    ANALYTIC_FUNCTIONS((short)3, "analytic_functions"),
    WINDOW((short)4, "window"),
    INTERMEDIATE_TUPLE_ID((short)5, "intermediate_tuple_id"),
    OUTPUT_TUPLE_ID((short)6, "output_tuple_id"),
    BUFFERED_TUPLE_ID((short)7, "buffered_tuple_id"),
    PARTITION_BY_EQ((short)8, "partition_by_eq"),
    ORDER_BY_EQ((short)9, "order_by_eq");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARTITION_EXPRS
          return PARTITION_EXPRS;
        case 2: // ORDER_BY_EXPRS
          return ORDER_BY_EXPRS;
        case 3: // ANALYTIC_FUNCTIONS
          return ANALYTIC_FUNCTIONS;
        case 4: // WINDOW
          return WINDOW;
        case 5: // INTERMEDIATE_TUPLE_ID
          return INTERMEDIATE_TUPLE_ID;
        case 6: // OUTPUT_TUPLE_ID
          return OUTPUT_TUPLE_ID;
        case 7: // BUFFERED_TUPLE_ID
          return BUFFERED_TUPLE_ID;
        case 8: // PARTITION_BY_EQ
          return PARTITION_BY_EQ;
        case 9: // ORDER_BY_EQ
          return ORDER_BY_EQ;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INTERMEDIATE_TUPLE_ID_ISSET_ID = 0;
  private static final int __OUTPUT_TUPLE_ID_ISSET_ID = 1;
  private static final int __BUFFERED_TUPLE_ID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.WINDOW,_Fields.BUFFERED_TUPLE_ID,_Fields.PARTITION_BY_EQ,_Fields.ORDER_BY_EQ};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARTITION_EXPRS, new org.apache.thrift.meta_data.FieldMetaData("partition_exprs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TExpr.class))));
    tmpMap.put(_Fields.ORDER_BY_EXPRS, new org.apache.thrift.meta_data.FieldMetaData("order_by_exprs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TExpr.class))));
    tmpMap.put(_Fields.ANALYTIC_FUNCTIONS, new org.apache.thrift.meta_data.FieldMetaData("analytic_functions", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TExpr.class))));
    tmpMap.put(_Fields.WINDOW, new org.apache.thrift.meta_data.FieldMetaData("window", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAnalyticWindow.class)));
    tmpMap.put(_Fields.INTERMEDIATE_TUPLE_ID, new org.apache.thrift.meta_data.FieldMetaData("intermediate_tuple_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TTupleId")));
    tmpMap.put(_Fields.OUTPUT_TUPLE_ID, new org.apache.thrift.meta_data.FieldMetaData("output_tuple_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TTupleId")));
    tmpMap.put(_Fields.BUFFERED_TUPLE_ID, new org.apache.thrift.meta_data.FieldMetaData("buffered_tuple_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TTupleId")));
    tmpMap.put(_Fields.PARTITION_BY_EQ, new org.apache.thrift.meta_data.FieldMetaData("partition_by_eq", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TExpr.class)));
    tmpMap.put(_Fields.ORDER_BY_EQ, new org.apache.thrift.meta_data.FieldMetaData("order_by_eq", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TExpr.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAnalyticNode.class, metaDataMap);
  }

  public TAnalyticNode() {
  }

  public TAnalyticNode(
    List<com.cloudera.impala.thrift.TExpr> partition_exprs,
    List<com.cloudera.impala.thrift.TExpr> order_by_exprs,
    List<com.cloudera.impala.thrift.TExpr> analytic_functions,
    int intermediate_tuple_id,
    int output_tuple_id)
  {
    this();
    this.partition_exprs = partition_exprs;
    this.order_by_exprs = order_by_exprs;
    this.analytic_functions = analytic_functions;
    this.intermediate_tuple_id = intermediate_tuple_id;
    setIntermediate_tuple_idIsSet(true);
    this.output_tuple_id = output_tuple_id;
    setOutput_tuple_idIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAnalyticNode(TAnalyticNode other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPartition_exprs()) {
      List<com.cloudera.impala.thrift.TExpr> __this__partition_exprs = new ArrayList<com.cloudera.impala.thrift.TExpr>();
      for (com.cloudera.impala.thrift.TExpr other_element : other.partition_exprs) {
        __this__partition_exprs.add(new com.cloudera.impala.thrift.TExpr(other_element));
      }
      this.partition_exprs = __this__partition_exprs;
    }
    if (other.isSetOrder_by_exprs()) {
      List<com.cloudera.impala.thrift.TExpr> __this__order_by_exprs = new ArrayList<com.cloudera.impala.thrift.TExpr>();
      for (com.cloudera.impala.thrift.TExpr other_element : other.order_by_exprs) {
        __this__order_by_exprs.add(new com.cloudera.impala.thrift.TExpr(other_element));
      }
      this.order_by_exprs = __this__order_by_exprs;
    }
    if (other.isSetAnalytic_functions()) {
      List<com.cloudera.impala.thrift.TExpr> __this__analytic_functions = new ArrayList<com.cloudera.impala.thrift.TExpr>();
      for (com.cloudera.impala.thrift.TExpr other_element : other.analytic_functions) {
        __this__analytic_functions.add(new com.cloudera.impala.thrift.TExpr(other_element));
      }
      this.analytic_functions = __this__analytic_functions;
    }
    if (other.isSetWindow()) {
      this.window = new TAnalyticWindow(other.window);
    }
    this.intermediate_tuple_id = other.intermediate_tuple_id;
    this.output_tuple_id = other.output_tuple_id;
    this.buffered_tuple_id = other.buffered_tuple_id;
    if (other.isSetPartition_by_eq()) {
      this.partition_by_eq = new com.cloudera.impala.thrift.TExpr(other.partition_by_eq);
    }
    if (other.isSetOrder_by_eq()) {
      this.order_by_eq = new com.cloudera.impala.thrift.TExpr(other.order_by_eq);
    }
  }

  public TAnalyticNode deepCopy() {
    return new TAnalyticNode(this);
  }

  @Override
  public void clear() {
    this.partition_exprs = null;
    this.order_by_exprs = null;
    this.analytic_functions = null;
    this.window = null;
    setIntermediate_tuple_idIsSet(false);
    this.intermediate_tuple_id = 0;
    setOutput_tuple_idIsSet(false);
    this.output_tuple_id = 0;
    setBuffered_tuple_idIsSet(false);
    this.buffered_tuple_id = 0;
    this.partition_by_eq = null;
    this.order_by_eq = null;
  }

  public int getPartition_exprsSize() {
    return (this.partition_exprs == null) ? 0 : this.partition_exprs.size();
  }

  public java.util.Iterator<com.cloudera.impala.thrift.TExpr> getPartition_exprsIterator() {
    return (this.partition_exprs == null) ? null : this.partition_exprs.iterator();
  }

  public void addToPartition_exprs(com.cloudera.impala.thrift.TExpr elem) {
    if (this.partition_exprs == null) {
      this.partition_exprs = new ArrayList<com.cloudera.impala.thrift.TExpr>();
    }
    this.partition_exprs.add(elem);
  }

  public List<com.cloudera.impala.thrift.TExpr> getPartition_exprs() {
    return this.partition_exprs;
  }

  public TAnalyticNode setPartition_exprs(List<com.cloudera.impala.thrift.TExpr> partition_exprs) {
    this.partition_exprs = partition_exprs;
    return this;
  }

  public void unsetPartition_exprs() {
    this.partition_exprs = null;
  }

  /** Returns true if field partition_exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_exprs() {
    return this.partition_exprs != null;
  }

  public void setPartition_exprsIsSet(boolean value) {
    if (!value) {
      this.partition_exprs = null;
    }
  }

  public int getOrder_by_exprsSize() {
    return (this.order_by_exprs == null) ? 0 : this.order_by_exprs.size();
  }

  public java.util.Iterator<com.cloudera.impala.thrift.TExpr> getOrder_by_exprsIterator() {
    return (this.order_by_exprs == null) ? null : this.order_by_exprs.iterator();
  }

  public void addToOrder_by_exprs(com.cloudera.impala.thrift.TExpr elem) {
    if (this.order_by_exprs == null) {
      this.order_by_exprs = new ArrayList<com.cloudera.impala.thrift.TExpr>();
    }
    this.order_by_exprs.add(elem);
  }

  public List<com.cloudera.impala.thrift.TExpr> getOrder_by_exprs() {
    return this.order_by_exprs;
  }

  public TAnalyticNode setOrder_by_exprs(List<com.cloudera.impala.thrift.TExpr> order_by_exprs) {
    this.order_by_exprs = order_by_exprs;
    return this;
  }

  public void unsetOrder_by_exprs() {
    this.order_by_exprs = null;
  }

  /** Returns true if field order_by_exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetOrder_by_exprs() {
    return this.order_by_exprs != null;
  }

  public void setOrder_by_exprsIsSet(boolean value) {
    if (!value) {
      this.order_by_exprs = null;
    }
  }

  public int getAnalytic_functionsSize() {
    return (this.analytic_functions == null) ? 0 : this.analytic_functions.size();
  }

  public java.util.Iterator<com.cloudera.impala.thrift.TExpr> getAnalytic_functionsIterator() {
    return (this.analytic_functions == null) ? null : this.analytic_functions.iterator();
  }

  public void addToAnalytic_functions(com.cloudera.impala.thrift.TExpr elem) {
    if (this.analytic_functions == null) {
      this.analytic_functions = new ArrayList<com.cloudera.impala.thrift.TExpr>();
    }
    this.analytic_functions.add(elem);
  }

  public List<com.cloudera.impala.thrift.TExpr> getAnalytic_functions() {
    return this.analytic_functions;
  }

  public TAnalyticNode setAnalytic_functions(List<com.cloudera.impala.thrift.TExpr> analytic_functions) {
    this.analytic_functions = analytic_functions;
    return this;
  }

  public void unsetAnalytic_functions() {
    this.analytic_functions = null;
  }

  /** Returns true if field analytic_functions is set (has been assigned a value) and false otherwise */
  public boolean isSetAnalytic_functions() {
    return this.analytic_functions != null;
  }

  public void setAnalytic_functionsIsSet(boolean value) {
    if (!value) {
      this.analytic_functions = null;
    }
  }

  public TAnalyticWindow getWindow() {
    return this.window;
  }

  public TAnalyticNode setWindow(TAnalyticWindow window) {
    this.window = window;
    return this;
  }

  public void unsetWindow() {
    this.window = null;
  }

  /** Returns true if field window is set (has been assigned a value) and false otherwise */
  public boolean isSetWindow() {
    return this.window != null;
  }

  public void setWindowIsSet(boolean value) {
    if (!value) {
      this.window = null;
    }
  }

  public int getIntermediate_tuple_id() {
    return this.intermediate_tuple_id;
  }

  public TAnalyticNode setIntermediate_tuple_id(int intermediate_tuple_id) {
    this.intermediate_tuple_id = intermediate_tuple_id;
    setIntermediate_tuple_idIsSet(true);
    return this;
  }

  public void unsetIntermediate_tuple_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTERMEDIATE_TUPLE_ID_ISSET_ID);
  }

  /** Returns true if field intermediate_tuple_id is set (has been assigned a value) and false otherwise */
  public boolean isSetIntermediate_tuple_id() {
    return EncodingUtils.testBit(__isset_bitfield, __INTERMEDIATE_TUPLE_ID_ISSET_ID);
  }

  public void setIntermediate_tuple_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTERMEDIATE_TUPLE_ID_ISSET_ID, value);
  }

  public int getOutput_tuple_id() {
    return this.output_tuple_id;
  }

  public TAnalyticNode setOutput_tuple_id(int output_tuple_id) {
    this.output_tuple_id = output_tuple_id;
    setOutput_tuple_idIsSet(true);
    return this;
  }

  public void unsetOutput_tuple_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OUTPUT_TUPLE_ID_ISSET_ID);
  }

  /** Returns true if field output_tuple_id is set (has been assigned a value) and false otherwise */
  public boolean isSetOutput_tuple_id() {
    return EncodingUtils.testBit(__isset_bitfield, __OUTPUT_TUPLE_ID_ISSET_ID);
  }

  public void setOutput_tuple_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OUTPUT_TUPLE_ID_ISSET_ID, value);
  }

  public int getBuffered_tuple_id() {
    return this.buffered_tuple_id;
  }

  public TAnalyticNode setBuffered_tuple_id(int buffered_tuple_id) {
    this.buffered_tuple_id = buffered_tuple_id;
    setBuffered_tuple_idIsSet(true);
    return this;
  }

  public void unsetBuffered_tuple_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUFFERED_TUPLE_ID_ISSET_ID);
  }

  /** Returns true if field buffered_tuple_id is set (has been assigned a value) and false otherwise */
  public boolean isSetBuffered_tuple_id() {
    return EncodingUtils.testBit(__isset_bitfield, __BUFFERED_TUPLE_ID_ISSET_ID);
  }

  public void setBuffered_tuple_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUFFERED_TUPLE_ID_ISSET_ID, value);
  }

  public com.cloudera.impala.thrift.TExpr getPartition_by_eq() {
    return this.partition_by_eq;
  }

  public TAnalyticNode setPartition_by_eq(com.cloudera.impala.thrift.TExpr partition_by_eq) {
    this.partition_by_eq = partition_by_eq;
    return this;
  }

  public void unsetPartition_by_eq() {
    this.partition_by_eq = null;
  }

  /** Returns true if field partition_by_eq is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_by_eq() {
    return this.partition_by_eq != null;
  }

  public void setPartition_by_eqIsSet(boolean value) {
    if (!value) {
      this.partition_by_eq = null;
    }
  }

  public com.cloudera.impala.thrift.TExpr getOrder_by_eq() {
    return this.order_by_eq;
  }

  public TAnalyticNode setOrder_by_eq(com.cloudera.impala.thrift.TExpr order_by_eq) {
    this.order_by_eq = order_by_eq;
    return this;
  }

  public void unsetOrder_by_eq() {
    this.order_by_eq = null;
  }

  /** Returns true if field order_by_eq is set (has been assigned a value) and false otherwise */
  public boolean isSetOrder_by_eq() {
    return this.order_by_eq != null;
  }

  public void setOrder_by_eqIsSet(boolean value) {
    if (!value) {
      this.order_by_eq = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PARTITION_EXPRS:
      if (value == null) {
        unsetPartition_exprs();
      } else {
        setPartition_exprs((List<com.cloudera.impala.thrift.TExpr>)value);
      }
      break;

    case ORDER_BY_EXPRS:
      if (value == null) {
        unsetOrder_by_exprs();
      } else {
        setOrder_by_exprs((List<com.cloudera.impala.thrift.TExpr>)value);
      }
      break;

    case ANALYTIC_FUNCTIONS:
      if (value == null) {
        unsetAnalytic_functions();
      } else {
        setAnalytic_functions((List<com.cloudera.impala.thrift.TExpr>)value);
      }
      break;

    case WINDOW:
      if (value == null) {
        unsetWindow();
      } else {
        setWindow((TAnalyticWindow)value);
      }
      break;

    case INTERMEDIATE_TUPLE_ID:
      if (value == null) {
        unsetIntermediate_tuple_id();
      } else {
        setIntermediate_tuple_id((Integer)value);
      }
      break;

    case OUTPUT_TUPLE_ID:
      if (value == null) {
        unsetOutput_tuple_id();
      } else {
        setOutput_tuple_id((Integer)value);
      }
      break;

    case BUFFERED_TUPLE_ID:
      if (value == null) {
        unsetBuffered_tuple_id();
      } else {
        setBuffered_tuple_id((Integer)value);
      }
      break;

    case PARTITION_BY_EQ:
      if (value == null) {
        unsetPartition_by_eq();
      } else {
        setPartition_by_eq((com.cloudera.impala.thrift.TExpr)value);
      }
      break;

    case ORDER_BY_EQ:
      if (value == null) {
        unsetOrder_by_eq();
      } else {
        setOrder_by_eq((com.cloudera.impala.thrift.TExpr)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PARTITION_EXPRS:
      return getPartition_exprs();

    case ORDER_BY_EXPRS:
      return getOrder_by_exprs();

    case ANALYTIC_FUNCTIONS:
      return getAnalytic_functions();

    case WINDOW:
      return getWindow();

    case INTERMEDIATE_TUPLE_ID:
      return Integer.valueOf(getIntermediate_tuple_id());

    case OUTPUT_TUPLE_ID:
      return Integer.valueOf(getOutput_tuple_id());

    case BUFFERED_TUPLE_ID:
      return Integer.valueOf(getBuffered_tuple_id());

    case PARTITION_BY_EQ:
      return getPartition_by_eq();

    case ORDER_BY_EQ:
      return getOrder_by_eq();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PARTITION_EXPRS:
      return isSetPartition_exprs();
    case ORDER_BY_EXPRS:
      return isSetOrder_by_exprs();
    case ANALYTIC_FUNCTIONS:
      return isSetAnalytic_functions();
    case WINDOW:
      return isSetWindow();
    case INTERMEDIATE_TUPLE_ID:
      return isSetIntermediate_tuple_id();
    case OUTPUT_TUPLE_ID:
      return isSetOutput_tuple_id();
    case BUFFERED_TUPLE_ID:
      return isSetBuffered_tuple_id();
    case PARTITION_BY_EQ:
      return isSetPartition_by_eq();
    case ORDER_BY_EQ:
      return isSetOrder_by_eq();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TAnalyticNode)
      return this.equals((TAnalyticNode)that);
    return false;
  }

  public boolean equals(TAnalyticNode that) {
    if (that == null)
      return false;

    boolean this_present_partition_exprs = true && this.isSetPartition_exprs();
    boolean that_present_partition_exprs = true && that.isSetPartition_exprs();
    if (this_present_partition_exprs || that_present_partition_exprs) {
      if (!(this_present_partition_exprs && that_present_partition_exprs))
        return false;
      if (!this.partition_exprs.equals(that.partition_exprs))
        return false;
    }

    boolean this_present_order_by_exprs = true && this.isSetOrder_by_exprs();
    boolean that_present_order_by_exprs = true && that.isSetOrder_by_exprs();
    if (this_present_order_by_exprs || that_present_order_by_exprs) {
      if (!(this_present_order_by_exprs && that_present_order_by_exprs))
        return false;
      if (!this.order_by_exprs.equals(that.order_by_exprs))
        return false;
    }

    boolean this_present_analytic_functions = true && this.isSetAnalytic_functions();
    boolean that_present_analytic_functions = true && that.isSetAnalytic_functions();
    if (this_present_analytic_functions || that_present_analytic_functions) {
      if (!(this_present_analytic_functions && that_present_analytic_functions))
        return false;
      if (!this.analytic_functions.equals(that.analytic_functions))
        return false;
    }

    boolean this_present_window = true && this.isSetWindow();
    boolean that_present_window = true && that.isSetWindow();
    if (this_present_window || that_present_window) {
      if (!(this_present_window && that_present_window))
        return false;
      if (!this.window.equals(that.window))
        return false;
    }

    boolean this_present_intermediate_tuple_id = true;
    boolean that_present_intermediate_tuple_id = true;
    if (this_present_intermediate_tuple_id || that_present_intermediate_tuple_id) {
      if (!(this_present_intermediate_tuple_id && that_present_intermediate_tuple_id))
        return false;
      if (this.intermediate_tuple_id != that.intermediate_tuple_id)
        return false;
    }

    boolean this_present_output_tuple_id = true;
    boolean that_present_output_tuple_id = true;
    if (this_present_output_tuple_id || that_present_output_tuple_id) {
      if (!(this_present_output_tuple_id && that_present_output_tuple_id))
        return false;
      if (this.output_tuple_id != that.output_tuple_id)
        return false;
    }

    boolean this_present_buffered_tuple_id = true && this.isSetBuffered_tuple_id();
    boolean that_present_buffered_tuple_id = true && that.isSetBuffered_tuple_id();
    if (this_present_buffered_tuple_id || that_present_buffered_tuple_id) {
      if (!(this_present_buffered_tuple_id && that_present_buffered_tuple_id))
        return false;
      if (this.buffered_tuple_id != that.buffered_tuple_id)
        return false;
    }

    boolean this_present_partition_by_eq = true && this.isSetPartition_by_eq();
    boolean that_present_partition_by_eq = true && that.isSetPartition_by_eq();
    if (this_present_partition_by_eq || that_present_partition_by_eq) {
      if (!(this_present_partition_by_eq && that_present_partition_by_eq))
        return false;
      if (!this.partition_by_eq.equals(that.partition_by_eq))
        return false;
    }

    boolean this_present_order_by_eq = true && this.isSetOrder_by_eq();
    boolean that_present_order_by_eq = true && that.isSetOrder_by_eq();
    if (this_present_order_by_eq || that_present_order_by_eq) {
      if (!(this_present_order_by_eq && that_present_order_by_eq))
        return false;
      if (!this.order_by_eq.equals(that.order_by_eq))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_partition_exprs = true && (isSetPartition_exprs());
    builder.append(present_partition_exprs);
    if (present_partition_exprs)
      builder.append(partition_exprs);

    boolean present_order_by_exprs = true && (isSetOrder_by_exprs());
    builder.append(present_order_by_exprs);
    if (present_order_by_exprs)
      builder.append(order_by_exprs);

    boolean present_analytic_functions = true && (isSetAnalytic_functions());
    builder.append(present_analytic_functions);
    if (present_analytic_functions)
      builder.append(analytic_functions);

    boolean present_window = true && (isSetWindow());
    builder.append(present_window);
    if (present_window)
      builder.append(window);

    boolean present_intermediate_tuple_id = true;
    builder.append(present_intermediate_tuple_id);
    if (present_intermediate_tuple_id)
      builder.append(intermediate_tuple_id);

    boolean present_output_tuple_id = true;
    builder.append(present_output_tuple_id);
    if (present_output_tuple_id)
      builder.append(output_tuple_id);

    boolean present_buffered_tuple_id = true && (isSetBuffered_tuple_id());
    builder.append(present_buffered_tuple_id);
    if (present_buffered_tuple_id)
      builder.append(buffered_tuple_id);

    boolean present_partition_by_eq = true && (isSetPartition_by_eq());
    builder.append(present_partition_by_eq);
    if (present_partition_by_eq)
      builder.append(partition_by_eq);

    boolean present_order_by_eq = true && (isSetOrder_by_eq());
    builder.append(present_order_by_eq);
    if (present_order_by_eq)
      builder.append(order_by_eq);

    return builder.toHashCode();
  }

  public int compareTo(TAnalyticNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TAnalyticNode typedOther = (TAnalyticNode)other;

    lastComparison = Boolean.valueOf(isSetPartition_exprs()).compareTo(typedOther.isSetPartition_exprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_exprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_exprs, typedOther.partition_exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrder_by_exprs()).compareTo(typedOther.isSetOrder_by_exprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrder_by_exprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.order_by_exprs, typedOther.order_by_exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnalytic_functions()).compareTo(typedOther.isSetAnalytic_functions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnalytic_functions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.analytic_functions, typedOther.analytic_functions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWindow()).compareTo(typedOther.isSetWindow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWindow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.window, typedOther.window);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntermediate_tuple_id()).compareTo(typedOther.isSetIntermediate_tuple_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntermediate_tuple_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intermediate_tuple_id, typedOther.intermediate_tuple_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutput_tuple_id()).compareTo(typedOther.isSetOutput_tuple_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutput_tuple_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.output_tuple_id, typedOther.output_tuple_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuffered_tuple_id()).compareTo(typedOther.isSetBuffered_tuple_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuffered_tuple_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buffered_tuple_id, typedOther.buffered_tuple_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartition_by_eq()).compareTo(typedOther.isSetPartition_by_eq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_by_eq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_by_eq, typedOther.partition_by_eq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrder_by_eq()).compareTo(typedOther.isSetOrder_by_eq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrder_by_eq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.order_by_eq, typedOther.order_by_eq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TAnalyticNode(");
    boolean first = true;

    sb.append("partition_exprs:");
    if (this.partition_exprs == null) {
      sb.append("null");
    } else {
      sb.append(this.partition_exprs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("order_by_exprs:");
    if (this.order_by_exprs == null) {
      sb.append("null");
    } else {
      sb.append(this.order_by_exprs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("analytic_functions:");
    if (this.analytic_functions == null) {
      sb.append("null");
    } else {
      sb.append(this.analytic_functions);
    }
    first = false;
    if (isSetWindow()) {
      if (!first) sb.append(", ");
      sb.append("window:");
      if (this.window == null) {
        sb.append("null");
      } else {
        sb.append(this.window);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("intermediate_tuple_id:");
    sb.append(this.intermediate_tuple_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("output_tuple_id:");
    sb.append(this.output_tuple_id);
    first = false;
    if (isSetBuffered_tuple_id()) {
      if (!first) sb.append(", ");
      sb.append("buffered_tuple_id:");
      sb.append(this.buffered_tuple_id);
      first = false;
    }
    if (isSetPartition_by_eq()) {
      if (!first) sb.append(", ");
      sb.append("partition_by_eq:");
      if (this.partition_by_eq == null) {
        sb.append("null");
      } else {
        sb.append(this.partition_by_eq);
      }
      first = false;
    }
    if (isSetOrder_by_eq()) {
      if (!first) sb.append(", ");
      sb.append("order_by_eq:");
      if (this.order_by_eq == null) {
        sb.append("null");
      } else {
        sb.append(this.order_by_eq);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (partition_exprs == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'partition_exprs' was not present! Struct: " + toString());
    }
    if (order_by_exprs == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'order_by_exprs' was not present! Struct: " + toString());
    }
    if (analytic_functions == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'analytic_functions' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'intermediate_tuple_id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'output_tuple_id' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (window != null) {
      window.validate();
    }
    if (partition_by_eq != null) {
      partition_by_eq.validate();
    }
    if (order_by_eq != null) {
      order_by_eq.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAnalyticNodeStandardSchemeFactory implements SchemeFactory {
    public TAnalyticNodeStandardScheme getScheme() {
      return new TAnalyticNodeStandardScheme();
    }
  }

  private static class TAnalyticNodeStandardScheme extends StandardScheme<TAnalyticNode> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TAnalyticNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARTITION_EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                struct.partition_exprs = new ArrayList<com.cloudera.impala.thrift.TExpr>(_list88.size);
                for (int _i89 = 0; _i89 < _list88.size; ++_i89)
                {
                  com.cloudera.impala.thrift.TExpr _elem90; // required
                  _elem90 = new com.cloudera.impala.thrift.TExpr();
                  _elem90.read(iprot);
                  struct.partition_exprs.add(_elem90);
                }
                iprot.readListEnd();
              }
              struct.setPartition_exprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORDER_BY_EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list91 = iprot.readListBegin();
                struct.order_by_exprs = new ArrayList<com.cloudera.impala.thrift.TExpr>(_list91.size);
                for (int _i92 = 0; _i92 < _list91.size; ++_i92)
                {
                  com.cloudera.impala.thrift.TExpr _elem93; // required
                  _elem93 = new com.cloudera.impala.thrift.TExpr();
                  _elem93.read(iprot);
                  struct.order_by_exprs.add(_elem93);
                }
                iprot.readListEnd();
              }
              struct.setOrder_by_exprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ANALYTIC_FUNCTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list94 = iprot.readListBegin();
                struct.analytic_functions = new ArrayList<com.cloudera.impala.thrift.TExpr>(_list94.size);
                for (int _i95 = 0; _i95 < _list94.size; ++_i95)
                {
                  com.cloudera.impala.thrift.TExpr _elem96; // required
                  _elem96 = new com.cloudera.impala.thrift.TExpr();
                  _elem96.read(iprot);
                  struct.analytic_functions.add(_elem96);
                }
                iprot.readListEnd();
              }
              struct.setAnalytic_functionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // WINDOW
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.window = new TAnalyticWindow();
              struct.window.read(iprot);
              struct.setWindowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INTERMEDIATE_TUPLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.intermediate_tuple_id = iprot.readI32();
              struct.setIntermediate_tuple_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OUTPUT_TUPLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.output_tuple_id = iprot.readI32();
              struct.setOutput_tuple_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BUFFERED_TUPLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.buffered_tuple_id = iprot.readI32();
              struct.setBuffered_tuple_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PARTITION_BY_EQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.partition_by_eq = new com.cloudera.impala.thrift.TExpr();
              struct.partition_by_eq.read(iprot);
              struct.setPartition_by_eqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ORDER_BY_EQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.order_by_eq = new com.cloudera.impala.thrift.TExpr();
              struct.order_by_eq.read(iprot);
              struct.setOrder_by_eqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetIntermediate_tuple_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'intermediate_tuple_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetOutput_tuple_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'output_tuple_id' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TAnalyticNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.partition_exprs != null) {
        oprot.writeFieldBegin(PARTITION_EXPRS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.partition_exprs.size()));
          for (com.cloudera.impala.thrift.TExpr _iter97 : struct.partition_exprs)
          {
            _iter97.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.order_by_exprs != null) {
        oprot.writeFieldBegin(ORDER_BY_EXPRS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.order_by_exprs.size()));
          for (com.cloudera.impala.thrift.TExpr _iter98 : struct.order_by_exprs)
          {
            _iter98.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.analytic_functions != null) {
        oprot.writeFieldBegin(ANALYTIC_FUNCTIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.analytic_functions.size()));
          for (com.cloudera.impala.thrift.TExpr _iter99 : struct.analytic_functions)
          {
            _iter99.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.window != null) {
        if (struct.isSetWindow()) {
          oprot.writeFieldBegin(WINDOW_FIELD_DESC);
          struct.window.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(INTERMEDIATE_TUPLE_ID_FIELD_DESC);
      oprot.writeI32(struct.intermediate_tuple_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OUTPUT_TUPLE_ID_FIELD_DESC);
      oprot.writeI32(struct.output_tuple_id);
      oprot.writeFieldEnd();
      if (struct.isSetBuffered_tuple_id()) {
        oprot.writeFieldBegin(BUFFERED_TUPLE_ID_FIELD_DESC);
        oprot.writeI32(struct.buffered_tuple_id);
        oprot.writeFieldEnd();
      }
      if (struct.partition_by_eq != null) {
        if (struct.isSetPartition_by_eq()) {
          oprot.writeFieldBegin(PARTITION_BY_EQ_FIELD_DESC);
          struct.partition_by_eq.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.order_by_eq != null) {
        if (struct.isSetOrder_by_eq()) {
          oprot.writeFieldBegin(ORDER_BY_EQ_FIELD_DESC);
          struct.order_by_eq.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAnalyticNodeTupleSchemeFactory implements SchemeFactory {
    public TAnalyticNodeTupleScheme getScheme() {
      return new TAnalyticNodeTupleScheme();
    }
  }

  private static class TAnalyticNodeTupleScheme extends TupleScheme<TAnalyticNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TAnalyticNode struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.partition_exprs.size());
        for (com.cloudera.impala.thrift.TExpr _iter100 : struct.partition_exprs)
        {
          _iter100.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.order_by_exprs.size());
        for (com.cloudera.impala.thrift.TExpr _iter101 : struct.order_by_exprs)
        {
          _iter101.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.analytic_functions.size());
        for (com.cloudera.impala.thrift.TExpr _iter102 : struct.analytic_functions)
        {
          _iter102.write(oprot);
        }
      }
      oprot.writeI32(struct.intermediate_tuple_id);
      oprot.writeI32(struct.output_tuple_id);
      BitSet optionals = new BitSet();
      if (struct.isSetWindow()) {
        optionals.set(0);
      }
      if (struct.isSetBuffered_tuple_id()) {
        optionals.set(1);
      }
      if (struct.isSetPartition_by_eq()) {
        optionals.set(2);
      }
      if (struct.isSetOrder_by_eq()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetWindow()) {
        struct.window.write(oprot);
      }
      if (struct.isSetBuffered_tuple_id()) {
        oprot.writeI32(struct.buffered_tuple_id);
      }
      if (struct.isSetPartition_by_eq()) {
        struct.partition_by_eq.write(oprot);
      }
      if (struct.isSetOrder_by_eq()) {
        struct.order_by_eq.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TAnalyticNode struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list103 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.partition_exprs = new ArrayList<com.cloudera.impala.thrift.TExpr>(_list103.size);
        for (int _i104 = 0; _i104 < _list103.size; ++_i104)
        {
          com.cloudera.impala.thrift.TExpr _elem105; // required
          _elem105 = new com.cloudera.impala.thrift.TExpr();
          _elem105.read(iprot);
          struct.partition_exprs.add(_elem105);
        }
      }
      struct.setPartition_exprsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list106 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.order_by_exprs = new ArrayList<com.cloudera.impala.thrift.TExpr>(_list106.size);
        for (int _i107 = 0; _i107 < _list106.size; ++_i107)
        {
          com.cloudera.impala.thrift.TExpr _elem108; // required
          _elem108 = new com.cloudera.impala.thrift.TExpr();
          _elem108.read(iprot);
          struct.order_by_exprs.add(_elem108);
        }
      }
      struct.setOrder_by_exprsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.analytic_functions = new ArrayList<com.cloudera.impala.thrift.TExpr>(_list109.size);
        for (int _i110 = 0; _i110 < _list109.size; ++_i110)
        {
          com.cloudera.impala.thrift.TExpr _elem111; // required
          _elem111 = new com.cloudera.impala.thrift.TExpr();
          _elem111.read(iprot);
          struct.analytic_functions.add(_elem111);
        }
      }
      struct.setAnalytic_functionsIsSet(true);
      struct.intermediate_tuple_id = iprot.readI32();
      struct.setIntermediate_tuple_idIsSet(true);
      struct.output_tuple_id = iprot.readI32();
      struct.setOutput_tuple_idIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.window = new TAnalyticWindow();
        struct.window.read(iprot);
        struct.setWindowIsSet(true);
      }
      if (incoming.get(1)) {
        struct.buffered_tuple_id = iprot.readI32();
        struct.setBuffered_tuple_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.partition_by_eq = new com.cloudera.impala.thrift.TExpr();
        struct.partition_by_eq.read(iprot);
        struct.setPartition_by_eqIsSet(true);
      }
      if (incoming.get(3)) {
        struct.order_by_eq = new com.cloudera.impala.thrift.TExpr();
        struct.order_by_eq.read(iprot);
        struct.setOrder_by_eqIsSet(true);
      }
    }
  }

}

