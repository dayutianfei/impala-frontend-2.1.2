/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TQueryCtx implements org.apache.thrift.TBase<TQueryCtx, TQueryCtx._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TQueryCtx");

  private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField QUERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("query_id", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("session", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField NOW_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("now_string", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField COORD_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("coord_address", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField TABLES_MISSING_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("tables_missing_stats", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField DISABLE_SPILLING_FIELD_DESC = new org.apache.thrift.protocol.TField("disable_spilling", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField PARENT_QUERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parent_query_id", org.apache.thrift.protocol.TType.STRUCT, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TQueryCtxStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TQueryCtxTupleSchemeFactory());
  }

  public TClientRequest request; // required
  public com.cloudera.impala.thrift.TUniqueId query_id; // required
  public TSessionState session; // required
  public String now_string; // required
  public int pid; // required
  public com.cloudera.impala.thrift.TNetworkAddress coord_address; // optional
  public List<com.cloudera.impala.thrift.TTableName> tables_missing_stats; // optional
  public boolean disable_spilling; // optional
  public com.cloudera.impala.thrift.TUniqueId parent_query_id; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REQUEST((short)1, "request"),
    QUERY_ID((short)2, "query_id"),
    SESSION((short)3, "session"),
    NOW_STRING((short)4, "now_string"),
    PID((short)5, "pid"),
    COORD_ADDRESS((short)6, "coord_address"),
    TABLES_MISSING_STATS((short)7, "tables_missing_stats"),
    DISABLE_SPILLING((short)8, "disable_spilling"),
    PARENT_QUERY_ID((short)9, "parent_query_id");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REQUEST
          return REQUEST;
        case 2: // QUERY_ID
          return QUERY_ID;
        case 3: // SESSION
          return SESSION;
        case 4: // NOW_STRING
          return NOW_STRING;
        case 5: // PID
          return PID;
        case 6: // COORD_ADDRESS
          return COORD_ADDRESS;
        case 7: // TABLES_MISSING_STATS
          return TABLES_MISSING_STATS;
        case 8: // DISABLE_SPILLING
          return DISABLE_SPILLING;
        case 9: // PARENT_QUERY_ID
          return PARENT_QUERY_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __DISABLE_SPILLING_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.COORD_ADDRESS,_Fields.TABLES_MISSING_STATS,_Fields.DISABLE_SPILLING,_Fields.PARENT_QUERY_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TClientRequest.class)));
    tmpMap.put(_Fields.QUERY_ID, new org.apache.thrift.meta_data.FieldMetaData("query_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TUniqueId.class)));
    tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("session", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSessionState.class)));
    tmpMap.put(_Fields.NOW_STRING, new org.apache.thrift.meta_data.FieldMetaData("now_string", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COORD_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("coord_address", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TNetworkAddress.class)));
    tmpMap.put(_Fields.TABLES_MISSING_STATS, new org.apache.thrift.meta_data.FieldMetaData("tables_missing_stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TTableName.class))));
    tmpMap.put(_Fields.DISABLE_SPILLING, new org.apache.thrift.meta_data.FieldMetaData("disable_spilling", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PARENT_QUERY_ID, new org.apache.thrift.meta_data.FieldMetaData("parent_query_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TUniqueId.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TQueryCtx.class, metaDataMap);
  }

  public TQueryCtx() {
  }

  public TQueryCtx(
    TClientRequest request,
    com.cloudera.impala.thrift.TUniqueId query_id,
    TSessionState session,
    String now_string,
    int pid)
  {
    this();
    this.request = request;
    this.query_id = query_id;
    this.session = session;
    this.now_string = now_string;
    this.pid = pid;
    setPidIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TQueryCtx(TQueryCtx other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRequest()) {
      this.request = new TClientRequest(other.request);
    }
    if (other.isSetQuery_id()) {
      this.query_id = new com.cloudera.impala.thrift.TUniqueId(other.query_id);
    }
    if (other.isSetSession()) {
      this.session = new TSessionState(other.session);
    }
    if (other.isSetNow_string()) {
      this.now_string = other.now_string;
    }
    this.pid = other.pid;
    if (other.isSetCoord_address()) {
      this.coord_address = new com.cloudera.impala.thrift.TNetworkAddress(other.coord_address);
    }
    if (other.isSetTables_missing_stats()) {
      List<com.cloudera.impala.thrift.TTableName> __this__tables_missing_stats = new ArrayList<com.cloudera.impala.thrift.TTableName>();
      for (com.cloudera.impala.thrift.TTableName other_element : other.tables_missing_stats) {
        __this__tables_missing_stats.add(new com.cloudera.impala.thrift.TTableName(other_element));
      }
      this.tables_missing_stats = __this__tables_missing_stats;
    }
    this.disable_spilling = other.disable_spilling;
    if (other.isSetParent_query_id()) {
      this.parent_query_id = new com.cloudera.impala.thrift.TUniqueId(other.parent_query_id);
    }
  }

  public TQueryCtx deepCopy() {
    return new TQueryCtx(this);
  }

  @Override
  public void clear() {
    this.request = null;
    this.query_id = null;
    this.session = null;
    this.now_string = null;
    setPidIsSet(false);
    this.pid = 0;
    this.coord_address = null;
    this.tables_missing_stats = null;
    setDisable_spillingIsSet(false);
    this.disable_spilling = false;
    this.parent_query_id = null;
  }

  public TClientRequest getRequest() {
    return this.request;
  }

  public TQueryCtx setRequest(TClientRequest request) {
    this.request = request;
    return this;
  }

  public void unsetRequest() {
    this.request = null;
  }

  /** Returns true if field request is set (has been assigned a value) and false otherwise */
  public boolean isSetRequest() {
    return this.request != null;
  }

  public void setRequestIsSet(boolean value) {
    if (!value) {
      this.request = null;
    }
  }

  public com.cloudera.impala.thrift.TUniqueId getQuery_id() {
    return this.query_id;
  }

  public TQueryCtx setQuery_id(com.cloudera.impala.thrift.TUniqueId query_id) {
    this.query_id = query_id;
    return this;
  }

  public void unsetQuery_id() {
    this.query_id = null;
  }

  /** Returns true if field query_id is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_id() {
    return this.query_id != null;
  }

  public void setQuery_idIsSet(boolean value) {
    if (!value) {
      this.query_id = null;
    }
  }

  public TSessionState getSession() {
    return this.session;
  }

  public TQueryCtx setSession(TSessionState session) {
    this.session = session;
    return this;
  }

  public void unsetSession() {
    this.session = null;
  }

  /** Returns true if field session is set (has been assigned a value) and false otherwise */
  public boolean isSetSession() {
    return this.session != null;
  }

  public void setSessionIsSet(boolean value) {
    if (!value) {
      this.session = null;
    }
  }

  public String getNow_string() {
    return this.now_string;
  }

  public TQueryCtx setNow_string(String now_string) {
    this.now_string = now_string;
    return this;
  }

  public void unsetNow_string() {
    this.now_string = null;
  }

  /** Returns true if field now_string is set (has been assigned a value) and false otherwise */
  public boolean isSetNow_string() {
    return this.now_string != null;
  }

  public void setNow_stringIsSet(boolean value) {
    if (!value) {
      this.now_string = null;
    }
  }

  public int getPid() {
    return this.pid;
  }

  public TQueryCtx setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public com.cloudera.impala.thrift.TNetworkAddress getCoord_address() {
    return this.coord_address;
  }

  public TQueryCtx setCoord_address(com.cloudera.impala.thrift.TNetworkAddress coord_address) {
    this.coord_address = coord_address;
    return this;
  }

  public void unsetCoord_address() {
    this.coord_address = null;
  }

  /** Returns true if field coord_address is set (has been assigned a value) and false otherwise */
  public boolean isSetCoord_address() {
    return this.coord_address != null;
  }

  public void setCoord_addressIsSet(boolean value) {
    if (!value) {
      this.coord_address = null;
    }
  }

  public int getTables_missing_statsSize() {
    return (this.tables_missing_stats == null) ? 0 : this.tables_missing_stats.size();
  }

  public java.util.Iterator<com.cloudera.impala.thrift.TTableName> getTables_missing_statsIterator() {
    return (this.tables_missing_stats == null) ? null : this.tables_missing_stats.iterator();
  }

  public void addToTables_missing_stats(com.cloudera.impala.thrift.TTableName elem) {
    if (this.tables_missing_stats == null) {
      this.tables_missing_stats = new ArrayList<com.cloudera.impala.thrift.TTableName>();
    }
    this.tables_missing_stats.add(elem);
  }

  public List<com.cloudera.impala.thrift.TTableName> getTables_missing_stats() {
    return this.tables_missing_stats;
  }

  public TQueryCtx setTables_missing_stats(List<com.cloudera.impala.thrift.TTableName> tables_missing_stats) {
    this.tables_missing_stats = tables_missing_stats;
    return this;
  }

  public void unsetTables_missing_stats() {
    this.tables_missing_stats = null;
  }

  /** Returns true if field tables_missing_stats is set (has been assigned a value) and false otherwise */
  public boolean isSetTables_missing_stats() {
    return this.tables_missing_stats != null;
  }

  public void setTables_missing_statsIsSet(boolean value) {
    if (!value) {
      this.tables_missing_stats = null;
    }
  }

  public boolean isDisable_spilling() {
    return this.disable_spilling;
  }

  public TQueryCtx setDisable_spilling(boolean disable_spilling) {
    this.disable_spilling = disable_spilling;
    setDisable_spillingIsSet(true);
    return this;
  }

  public void unsetDisable_spilling() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISABLE_SPILLING_ISSET_ID);
  }

  /** Returns true if field disable_spilling is set (has been assigned a value) and false otherwise */
  public boolean isSetDisable_spilling() {
    return EncodingUtils.testBit(__isset_bitfield, __DISABLE_SPILLING_ISSET_ID);
  }

  public void setDisable_spillingIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISABLE_SPILLING_ISSET_ID, value);
  }

  public com.cloudera.impala.thrift.TUniqueId getParent_query_id() {
    return this.parent_query_id;
  }

  public TQueryCtx setParent_query_id(com.cloudera.impala.thrift.TUniqueId parent_query_id) {
    this.parent_query_id = parent_query_id;
    return this;
  }

  public void unsetParent_query_id() {
    this.parent_query_id = null;
  }

  /** Returns true if field parent_query_id is set (has been assigned a value) and false otherwise */
  public boolean isSetParent_query_id() {
    return this.parent_query_id != null;
  }

  public void setParent_query_idIsSet(boolean value) {
    if (!value) {
      this.parent_query_id = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REQUEST:
      if (value == null) {
        unsetRequest();
      } else {
        setRequest((TClientRequest)value);
      }
      break;

    case QUERY_ID:
      if (value == null) {
        unsetQuery_id();
      } else {
        setQuery_id((com.cloudera.impala.thrift.TUniqueId)value);
      }
      break;

    case SESSION:
      if (value == null) {
        unsetSession();
      } else {
        setSession((TSessionState)value);
      }
      break;

    case NOW_STRING:
      if (value == null) {
        unsetNow_string();
      } else {
        setNow_string((String)value);
      }
      break;

    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case COORD_ADDRESS:
      if (value == null) {
        unsetCoord_address();
      } else {
        setCoord_address((com.cloudera.impala.thrift.TNetworkAddress)value);
      }
      break;

    case TABLES_MISSING_STATS:
      if (value == null) {
        unsetTables_missing_stats();
      } else {
        setTables_missing_stats((List<com.cloudera.impala.thrift.TTableName>)value);
      }
      break;

    case DISABLE_SPILLING:
      if (value == null) {
        unsetDisable_spilling();
      } else {
        setDisable_spilling((Boolean)value);
      }
      break;

    case PARENT_QUERY_ID:
      if (value == null) {
        unsetParent_query_id();
      } else {
        setParent_query_id((com.cloudera.impala.thrift.TUniqueId)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REQUEST:
      return getRequest();

    case QUERY_ID:
      return getQuery_id();

    case SESSION:
      return getSession();

    case NOW_STRING:
      return getNow_string();

    case PID:
      return Integer.valueOf(getPid());

    case COORD_ADDRESS:
      return getCoord_address();

    case TABLES_MISSING_STATS:
      return getTables_missing_stats();

    case DISABLE_SPILLING:
      return Boolean.valueOf(isDisable_spilling());

    case PARENT_QUERY_ID:
      return getParent_query_id();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REQUEST:
      return isSetRequest();
    case QUERY_ID:
      return isSetQuery_id();
    case SESSION:
      return isSetSession();
    case NOW_STRING:
      return isSetNow_string();
    case PID:
      return isSetPid();
    case COORD_ADDRESS:
      return isSetCoord_address();
    case TABLES_MISSING_STATS:
      return isSetTables_missing_stats();
    case DISABLE_SPILLING:
      return isSetDisable_spilling();
    case PARENT_QUERY_ID:
      return isSetParent_query_id();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TQueryCtx)
      return this.equals((TQueryCtx)that);
    return false;
  }

  public boolean equals(TQueryCtx that) {
    if (that == null)
      return false;

    boolean this_present_request = true && this.isSetRequest();
    boolean that_present_request = true && that.isSetRequest();
    if (this_present_request || that_present_request) {
      if (!(this_present_request && that_present_request))
        return false;
      if (!this.request.equals(that.request))
        return false;
    }

    boolean this_present_query_id = true && this.isSetQuery_id();
    boolean that_present_query_id = true && that.isSetQuery_id();
    if (this_present_query_id || that_present_query_id) {
      if (!(this_present_query_id && that_present_query_id))
        return false;
      if (!this.query_id.equals(that.query_id))
        return false;
    }

    boolean this_present_session = true && this.isSetSession();
    boolean that_present_session = true && that.isSetSession();
    if (this_present_session || that_present_session) {
      if (!(this_present_session && that_present_session))
        return false;
      if (!this.session.equals(that.session))
        return false;
    }

    boolean this_present_now_string = true && this.isSetNow_string();
    boolean that_present_now_string = true && that.isSetNow_string();
    if (this_present_now_string || that_present_now_string) {
      if (!(this_present_now_string && that_present_now_string))
        return false;
      if (!this.now_string.equals(that.now_string))
        return false;
    }

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_coord_address = true && this.isSetCoord_address();
    boolean that_present_coord_address = true && that.isSetCoord_address();
    if (this_present_coord_address || that_present_coord_address) {
      if (!(this_present_coord_address && that_present_coord_address))
        return false;
      if (!this.coord_address.equals(that.coord_address))
        return false;
    }

    boolean this_present_tables_missing_stats = true && this.isSetTables_missing_stats();
    boolean that_present_tables_missing_stats = true && that.isSetTables_missing_stats();
    if (this_present_tables_missing_stats || that_present_tables_missing_stats) {
      if (!(this_present_tables_missing_stats && that_present_tables_missing_stats))
        return false;
      if (!this.tables_missing_stats.equals(that.tables_missing_stats))
        return false;
    }

    boolean this_present_disable_spilling = true && this.isSetDisable_spilling();
    boolean that_present_disable_spilling = true && that.isSetDisable_spilling();
    if (this_present_disable_spilling || that_present_disable_spilling) {
      if (!(this_present_disable_spilling && that_present_disable_spilling))
        return false;
      if (this.disable_spilling != that.disable_spilling)
        return false;
    }

    boolean this_present_parent_query_id = true && this.isSetParent_query_id();
    boolean that_present_parent_query_id = true && that.isSetParent_query_id();
    if (this_present_parent_query_id || that_present_parent_query_id) {
      if (!(this_present_parent_query_id && that_present_parent_query_id))
        return false;
      if (!this.parent_query_id.equals(that.parent_query_id))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_request = true && (isSetRequest());
    builder.append(present_request);
    if (present_request)
      builder.append(request);

    boolean present_query_id = true && (isSetQuery_id());
    builder.append(present_query_id);
    if (present_query_id)
      builder.append(query_id);

    boolean present_session = true && (isSetSession());
    builder.append(present_session);
    if (present_session)
      builder.append(session);

    boolean present_now_string = true && (isSetNow_string());
    builder.append(present_now_string);
    if (present_now_string)
      builder.append(now_string);

    boolean present_pid = true;
    builder.append(present_pid);
    if (present_pid)
      builder.append(pid);

    boolean present_coord_address = true && (isSetCoord_address());
    builder.append(present_coord_address);
    if (present_coord_address)
      builder.append(coord_address);

    boolean present_tables_missing_stats = true && (isSetTables_missing_stats());
    builder.append(present_tables_missing_stats);
    if (present_tables_missing_stats)
      builder.append(tables_missing_stats);

    boolean present_disable_spilling = true && (isSetDisable_spilling());
    builder.append(present_disable_spilling);
    if (present_disable_spilling)
      builder.append(disable_spilling);

    boolean present_parent_query_id = true && (isSetParent_query_id());
    builder.append(present_parent_query_id);
    if (present_parent_query_id)
      builder.append(parent_query_id);

    return builder.toHashCode();
  }

  public int compareTo(TQueryCtx other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TQueryCtx typedOther = (TQueryCtx)other;

    lastComparison = Boolean.valueOf(isSetRequest()).compareTo(typedOther.isSetRequest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, typedOther.request);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuery_id()).compareTo(typedOther.isSetQuery_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_id, typedOther.query_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSession()).compareTo(typedOther.isSetSession());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSession()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session, typedOther.session);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNow_string()).compareTo(typedOther.isSetNow_string());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNow_string()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.now_string, typedOther.now_string);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPid()).compareTo(typedOther.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, typedOther.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoord_address()).compareTo(typedOther.isSetCoord_address());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoord_address()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coord_address, typedOther.coord_address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTables_missing_stats()).compareTo(typedOther.isSetTables_missing_stats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTables_missing_stats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tables_missing_stats, typedOther.tables_missing_stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisable_spilling()).compareTo(typedOther.isSetDisable_spilling());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisable_spilling()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disable_spilling, typedOther.disable_spilling);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParent_query_id()).compareTo(typedOther.isSetParent_query_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParent_query_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parent_query_id, typedOther.parent_query_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TQueryCtx(");
    boolean first = true;

    sb.append("request:");
    if (this.request == null) {
      sb.append("null");
    } else {
      sb.append(this.request);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("query_id:");
    if (this.query_id == null) {
      sb.append("null");
    } else {
      sb.append(this.query_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("session:");
    if (this.session == null) {
      sb.append("null");
    } else {
      sb.append(this.session);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("now_string:");
    if (this.now_string == null) {
      sb.append("null");
    } else {
      sb.append(this.now_string);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (isSetCoord_address()) {
      if (!first) sb.append(", ");
      sb.append("coord_address:");
      if (this.coord_address == null) {
        sb.append("null");
      } else {
        sb.append(this.coord_address);
      }
      first = false;
    }
    if (isSetTables_missing_stats()) {
      if (!first) sb.append(", ");
      sb.append("tables_missing_stats:");
      if (this.tables_missing_stats == null) {
        sb.append("null");
      } else {
        sb.append(this.tables_missing_stats);
      }
      first = false;
    }
    if (isSetDisable_spilling()) {
      if (!first) sb.append(", ");
      sb.append("disable_spilling:");
      sb.append(this.disable_spilling);
      first = false;
    }
    if (isSetParent_query_id()) {
      if (!first) sb.append(", ");
      sb.append("parent_query_id:");
      if (this.parent_query_id == null) {
        sb.append("null");
      } else {
        sb.append(this.parent_query_id);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (request == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'request' was not present! Struct: " + toString());
    }
    if (query_id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'query_id' was not present! Struct: " + toString());
    }
    if (session == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'session' was not present! Struct: " + toString());
    }
    if (now_string == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'now_string' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'pid' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (request != null) {
      request.validate();
    }
    if (query_id != null) {
      query_id.validate();
    }
    if (session != null) {
      session.validate();
    }
    if (coord_address != null) {
      coord_address.validate();
    }
    if (parent_query_id != null) {
      parent_query_id.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TQueryCtxStandardSchemeFactory implements SchemeFactory {
    public TQueryCtxStandardScheme getScheme() {
      return new TQueryCtxStandardScheme();
    }
  }

  private static class TQueryCtxStandardScheme extends StandardScheme<TQueryCtx> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TQueryCtx struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REQUEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.request = new TClientRequest();
              struct.request.read(iprot);
              struct.setRequestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // QUERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query_id = new com.cloudera.impala.thrift.TUniqueId();
              struct.query_id.read(iprot);
              struct.setQuery_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SESSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.session = new TSessionState();
              struct.session.read(iprot);
              struct.setSessionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NOW_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.now_string = iprot.readString();
              struct.setNow_stringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COORD_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.coord_address = new com.cloudera.impala.thrift.TNetworkAddress();
              struct.coord_address.read(iprot);
              struct.setCoord_addressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TABLES_MISSING_STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.tables_missing_stats = new ArrayList<com.cloudera.impala.thrift.TTableName>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  com.cloudera.impala.thrift.TTableName _elem2; // required
                  _elem2 = new com.cloudera.impala.thrift.TTableName();
                  _elem2.read(iprot);
                  struct.tables_missing_stats.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setTables_missing_statsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DISABLE_SPILLING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.disable_spilling = iprot.readBool();
              struct.setDisable_spillingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PARENT_QUERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.parent_query_id = new com.cloudera.impala.thrift.TUniqueId();
              struct.parent_query_id.read(iprot);
              struct.setParent_query_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetPid()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'pid' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TQueryCtx struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.request != null) {
        oprot.writeFieldBegin(REQUEST_FIELD_DESC);
        struct.request.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.query_id != null) {
        oprot.writeFieldBegin(QUERY_ID_FIELD_DESC);
        struct.query_id.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.session != null) {
        oprot.writeFieldBegin(SESSION_FIELD_DESC);
        struct.session.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.now_string != null) {
        oprot.writeFieldBegin(NOW_STRING_FIELD_DESC);
        oprot.writeString(struct.now_string);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.coord_address != null) {
        if (struct.isSetCoord_address()) {
          oprot.writeFieldBegin(COORD_ADDRESS_FIELD_DESC);
          struct.coord_address.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tables_missing_stats != null) {
        if (struct.isSetTables_missing_stats()) {
          oprot.writeFieldBegin(TABLES_MISSING_STATS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tables_missing_stats.size()));
            for (com.cloudera.impala.thrift.TTableName _iter3 : struct.tables_missing_stats)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDisable_spilling()) {
        oprot.writeFieldBegin(DISABLE_SPILLING_FIELD_DESC);
        oprot.writeBool(struct.disable_spilling);
        oprot.writeFieldEnd();
      }
      if (struct.parent_query_id != null) {
        if (struct.isSetParent_query_id()) {
          oprot.writeFieldBegin(PARENT_QUERY_ID_FIELD_DESC);
          struct.parent_query_id.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TQueryCtxTupleSchemeFactory implements SchemeFactory {
    public TQueryCtxTupleScheme getScheme() {
      return new TQueryCtxTupleScheme();
    }
  }

  private static class TQueryCtxTupleScheme extends TupleScheme<TQueryCtx> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TQueryCtx struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.request.write(oprot);
      struct.query_id.write(oprot);
      struct.session.write(oprot);
      oprot.writeString(struct.now_string);
      oprot.writeI32(struct.pid);
      BitSet optionals = new BitSet();
      if (struct.isSetCoord_address()) {
        optionals.set(0);
      }
      if (struct.isSetTables_missing_stats()) {
        optionals.set(1);
      }
      if (struct.isSetDisable_spilling()) {
        optionals.set(2);
      }
      if (struct.isSetParent_query_id()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetCoord_address()) {
        struct.coord_address.write(oprot);
      }
      if (struct.isSetTables_missing_stats()) {
        {
          oprot.writeI32(struct.tables_missing_stats.size());
          for (com.cloudera.impala.thrift.TTableName _iter4 : struct.tables_missing_stats)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetDisable_spilling()) {
        oprot.writeBool(struct.disable_spilling);
      }
      if (struct.isSetParent_query_id()) {
        struct.parent_query_id.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TQueryCtx struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.request = new TClientRequest();
      struct.request.read(iprot);
      struct.setRequestIsSet(true);
      struct.query_id = new com.cloudera.impala.thrift.TUniqueId();
      struct.query_id.read(iprot);
      struct.setQuery_idIsSet(true);
      struct.session = new TSessionState();
      struct.session.read(iprot);
      struct.setSessionIsSet(true);
      struct.now_string = iprot.readString();
      struct.setNow_stringIsSet(true);
      struct.pid = iprot.readI32();
      struct.setPidIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.coord_address = new com.cloudera.impala.thrift.TNetworkAddress();
        struct.coord_address.read(iprot);
        struct.setCoord_addressIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tables_missing_stats = new ArrayList<com.cloudera.impala.thrift.TTableName>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            com.cloudera.impala.thrift.TTableName _elem7; // required
            _elem7 = new com.cloudera.impala.thrift.TTableName();
            _elem7.read(iprot);
            struct.tables_missing_stats.add(_elem7);
          }
        }
        struct.setTables_missing_statsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.disable_spilling = iprot.readBool();
        struct.setDisable_spillingIsSet(true);
      }
      if (incoming.get(3)) {
        struct.parent_query_id = new com.cloudera.impala.thrift.TUniqueId();
        struct.parent_query_id.read(iprot);
        struct.setParent_query_idIsSet(true);
      }
    }
  }

}

