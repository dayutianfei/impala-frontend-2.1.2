/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TGetJvmMetricsRequest implements org.apache.thrift.TBase<TGetJvmMetricsRequest, TGetJvmMetricsRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TGetJvmMetricsRequest");

  private static final org.apache.thrift.protocol.TField GET_ALL_FIELD_DESC = new org.apache.thrift.protocol.TField("get_all", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField MEMORY_POOL_FIELD_DESC = new org.apache.thrift.protocol.TField("memory_pool", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TGetJvmMetricsRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TGetJvmMetricsRequestTupleSchemeFactory());
  }

  public boolean get_all; // required
  public String memory_pool; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GET_ALL((short)1, "get_all"),
    MEMORY_POOL((short)2, "memory_pool");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GET_ALL
          return GET_ALL;
        case 2: // MEMORY_POOL
          return MEMORY_POOL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GET_ALL_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.MEMORY_POOL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GET_ALL, new org.apache.thrift.meta_data.FieldMetaData("get_all", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MEMORY_POOL, new org.apache.thrift.meta_data.FieldMetaData("memory_pool", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TGetJvmMetricsRequest.class, metaDataMap);
  }

  public TGetJvmMetricsRequest() {
  }

  public TGetJvmMetricsRequest(
    boolean get_all)
  {
    this();
    this.get_all = get_all;
    setGet_allIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TGetJvmMetricsRequest(TGetJvmMetricsRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    this.get_all = other.get_all;
    if (other.isSetMemory_pool()) {
      this.memory_pool = other.memory_pool;
    }
  }

  public TGetJvmMetricsRequest deepCopy() {
    return new TGetJvmMetricsRequest(this);
  }

  @Override
  public void clear() {
    setGet_allIsSet(false);
    this.get_all = false;
    this.memory_pool = null;
  }

  public boolean isGet_all() {
    return this.get_all;
  }

  public TGetJvmMetricsRequest setGet_all(boolean get_all) {
    this.get_all = get_all;
    setGet_allIsSet(true);
    return this;
  }

  public void unsetGet_all() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GET_ALL_ISSET_ID);
  }

  /** Returns true if field get_all is set (has been assigned a value) and false otherwise */
  public boolean isSetGet_all() {
    return EncodingUtils.testBit(__isset_bitfield, __GET_ALL_ISSET_ID);
  }

  public void setGet_allIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GET_ALL_ISSET_ID, value);
  }

  public String getMemory_pool() {
    return this.memory_pool;
  }

  public TGetJvmMetricsRequest setMemory_pool(String memory_pool) {
    this.memory_pool = memory_pool;
    return this;
  }

  public void unsetMemory_pool() {
    this.memory_pool = null;
  }

  /** Returns true if field memory_pool is set (has been assigned a value) and false otherwise */
  public boolean isSetMemory_pool() {
    return this.memory_pool != null;
  }

  public void setMemory_poolIsSet(boolean value) {
    if (!value) {
      this.memory_pool = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GET_ALL:
      if (value == null) {
        unsetGet_all();
      } else {
        setGet_all((Boolean)value);
      }
      break;

    case MEMORY_POOL:
      if (value == null) {
        unsetMemory_pool();
      } else {
        setMemory_pool((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GET_ALL:
      return Boolean.valueOf(isGet_all());

    case MEMORY_POOL:
      return getMemory_pool();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GET_ALL:
      return isSetGet_all();
    case MEMORY_POOL:
      return isSetMemory_pool();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TGetJvmMetricsRequest)
      return this.equals((TGetJvmMetricsRequest)that);
    return false;
  }

  public boolean equals(TGetJvmMetricsRequest that) {
    if (that == null)
      return false;

    boolean this_present_get_all = true;
    boolean that_present_get_all = true;
    if (this_present_get_all || that_present_get_all) {
      if (!(this_present_get_all && that_present_get_all))
        return false;
      if (this.get_all != that.get_all)
        return false;
    }

    boolean this_present_memory_pool = true && this.isSetMemory_pool();
    boolean that_present_memory_pool = true && that.isSetMemory_pool();
    if (this_present_memory_pool || that_present_memory_pool) {
      if (!(this_present_memory_pool && that_present_memory_pool))
        return false;
      if (!this.memory_pool.equals(that.memory_pool))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_get_all = true;
    builder.append(present_get_all);
    if (present_get_all)
      builder.append(get_all);

    boolean present_memory_pool = true && (isSetMemory_pool());
    builder.append(present_memory_pool);
    if (present_memory_pool)
      builder.append(memory_pool);

    return builder.toHashCode();
  }

  public int compareTo(TGetJvmMetricsRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TGetJvmMetricsRequest typedOther = (TGetJvmMetricsRequest)other;

    lastComparison = Boolean.valueOf(isSetGet_all()).compareTo(typedOther.isSetGet_all());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGet_all()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.get_all, typedOther.get_all);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemory_pool()).compareTo(typedOther.isSetMemory_pool());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemory_pool()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memory_pool, typedOther.memory_pool);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TGetJvmMetricsRequest(");
    boolean first = true;

    sb.append("get_all:");
    sb.append(this.get_all);
    first = false;
    if (isSetMemory_pool()) {
      if (!first) sb.append(", ");
      sb.append("memory_pool:");
      if (this.memory_pool == null) {
        sb.append("null");
      } else {
        sb.append(this.memory_pool);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'get_all' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TGetJvmMetricsRequestStandardSchemeFactory implements SchemeFactory {
    public TGetJvmMetricsRequestStandardScheme getScheme() {
      return new TGetJvmMetricsRequestStandardScheme();
    }
  }

  private static class TGetJvmMetricsRequestStandardScheme extends StandardScheme<TGetJvmMetricsRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TGetJvmMetricsRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GET_ALL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.get_all = iprot.readBool();
              struct.setGet_allIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MEMORY_POOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.memory_pool = iprot.readString();
              struct.setMemory_poolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetGet_all()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'get_all' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TGetJvmMetricsRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(GET_ALL_FIELD_DESC);
      oprot.writeBool(struct.get_all);
      oprot.writeFieldEnd();
      if (struct.memory_pool != null) {
        if (struct.isSetMemory_pool()) {
          oprot.writeFieldBegin(MEMORY_POOL_FIELD_DESC);
          oprot.writeString(struct.memory_pool);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TGetJvmMetricsRequestTupleSchemeFactory implements SchemeFactory {
    public TGetJvmMetricsRequestTupleScheme getScheme() {
      return new TGetJvmMetricsRequestTupleScheme();
    }
  }

  private static class TGetJvmMetricsRequestTupleScheme extends TupleScheme<TGetJvmMetricsRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TGetJvmMetricsRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeBool(struct.get_all);
      BitSet optionals = new BitSet();
      if (struct.isSetMemory_pool()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetMemory_pool()) {
        oprot.writeString(struct.memory_pool);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TGetJvmMetricsRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.get_all = iprot.readBool();
      struct.setGet_allIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.memory_pool = iprot.readString();
        struct.setMemory_poolIsSet(true);
      }
    }
  }

}

