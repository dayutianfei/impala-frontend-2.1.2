/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TShowRolesParams implements org.apache.thrift.TBase<TShowRolesParams, TShowRolesParams._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TShowRolesParams");

  private static final org.apache.thrift.protocol.TField REQUESTING_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("requesting_user", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField IS_ADMIN_OP_FIELD_DESC = new org.apache.thrift.protocol.TField("is_admin_op", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField IS_SHOW_CURRENT_ROLES_FIELD_DESC = new org.apache.thrift.protocol.TField("is_show_current_roles", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField GRANT_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("grant_group", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TShowRolesParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TShowRolesParamsTupleSchemeFactory());
  }

  public String requesting_user; // optional
  public boolean is_admin_op; // required
  public boolean is_show_current_roles; // required
  public String grant_group; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REQUESTING_USER((short)1, "requesting_user"),
    IS_ADMIN_OP((short)2, "is_admin_op"),
    IS_SHOW_CURRENT_ROLES((short)3, "is_show_current_roles"),
    GRANT_GROUP((short)4, "grant_group");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REQUESTING_USER
          return REQUESTING_USER;
        case 2: // IS_ADMIN_OP
          return IS_ADMIN_OP;
        case 3: // IS_SHOW_CURRENT_ROLES
          return IS_SHOW_CURRENT_ROLES;
        case 4: // GRANT_GROUP
          return GRANT_GROUP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IS_ADMIN_OP_ISSET_ID = 0;
  private static final int __IS_SHOW_CURRENT_ROLES_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.REQUESTING_USER,_Fields.GRANT_GROUP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REQUESTING_USER, new org.apache.thrift.meta_data.FieldMetaData("requesting_user", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_ADMIN_OP, new org.apache.thrift.meta_data.FieldMetaData("is_admin_op", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_SHOW_CURRENT_ROLES, new org.apache.thrift.meta_data.FieldMetaData("is_show_current_roles", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.GRANT_GROUP, new org.apache.thrift.meta_data.FieldMetaData("grant_group", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TShowRolesParams.class, metaDataMap);
  }

  public TShowRolesParams() {
  }

  public TShowRolesParams(
    boolean is_admin_op,
    boolean is_show_current_roles)
  {
    this();
    this.is_admin_op = is_admin_op;
    setIs_admin_opIsSet(true);
    this.is_show_current_roles = is_show_current_roles;
    setIs_show_current_rolesIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TShowRolesParams(TShowRolesParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRequesting_user()) {
      this.requesting_user = other.requesting_user;
    }
    this.is_admin_op = other.is_admin_op;
    this.is_show_current_roles = other.is_show_current_roles;
    if (other.isSetGrant_group()) {
      this.grant_group = other.grant_group;
    }
  }

  public TShowRolesParams deepCopy() {
    return new TShowRolesParams(this);
  }

  @Override
  public void clear() {
    this.requesting_user = null;
    setIs_admin_opIsSet(false);
    this.is_admin_op = false;
    setIs_show_current_rolesIsSet(false);
    this.is_show_current_roles = false;
    this.grant_group = null;
  }

  public String getRequesting_user() {
    return this.requesting_user;
  }

  public TShowRolesParams setRequesting_user(String requesting_user) {
    this.requesting_user = requesting_user;
    return this;
  }

  public void unsetRequesting_user() {
    this.requesting_user = null;
  }

  /** Returns true if field requesting_user is set (has been assigned a value) and false otherwise */
  public boolean isSetRequesting_user() {
    return this.requesting_user != null;
  }

  public void setRequesting_userIsSet(boolean value) {
    if (!value) {
      this.requesting_user = null;
    }
  }

  public boolean isIs_admin_op() {
    return this.is_admin_op;
  }

  public TShowRolesParams setIs_admin_op(boolean is_admin_op) {
    this.is_admin_op = is_admin_op;
    setIs_admin_opIsSet(true);
    return this;
  }

  public void unsetIs_admin_op() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_ADMIN_OP_ISSET_ID);
  }

  /** Returns true if field is_admin_op is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_admin_op() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_ADMIN_OP_ISSET_ID);
  }

  public void setIs_admin_opIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_ADMIN_OP_ISSET_ID, value);
  }

  public boolean isIs_show_current_roles() {
    return this.is_show_current_roles;
  }

  public TShowRolesParams setIs_show_current_roles(boolean is_show_current_roles) {
    this.is_show_current_roles = is_show_current_roles;
    setIs_show_current_rolesIsSet(true);
    return this;
  }

  public void unsetIs_show_current_roles() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_SHOW_CURRENT_ROLES_ISSET_ID);
  }

  /** Returns true if field is_show_current_roles is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_show_current_roles() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_SHOW_CURRENT_ROLES_ISSET_ID);
  }

  public void setIs_show_current_rolesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_SHOW_CURRENT_ROLES_ISSET_ID, value);
  }

  public String getGrant_group() {
    return this.grant_group;
  }

  public TShowRolesParams setGrant_group(String grant_group) {
    this.grant_group = grant_group;
    return this;
  }

  public void unsetGrant_group() {
    this.grant_group = null;
  }

  /** Returns true if field grant_group is set (has been assigned a value) and false otherwise */
  public boolean isSetGrant_group() {
    return this.grant_group != null;
  }

  public void setGrant_groupIsSet(boolean value) {
    if (!value) {
      this.grant_group = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REQUESTING_USER:
      if (value == null) {
        unsetRequesting_user();
      } else {
        setRequesting_user((String)value);
      }
      break;

    case IS_ADMIN_OP:
      if (value == null) {
        unsetIs_admin_op();
      } else {
        setIs_admin_op((Boolean)value);
      }
      break;

    case IS_SHOW_CURRENT_ROLES:
      if (value == null) {
        unsetIs_show_current_roles();
      } else {
        setIs_show_current_roles((Boolean)value);
      }
      break;

    case GRANT_GROUP:
      if (value == null) {
        unsetGrant_group();
      } else {
        setGrant_group((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REQUESTING_USER:
      return getRequesting_user();

    case IS_ADMIN_OP:
      return Boolean.valueOf(isIs_admin_op());

    case IS_SHOW_CURRENT_ROLES:
      return Boolean.valueOf(isIs_show_current_roles());

    case GRANT_GROUP:
      return getGrant_group();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REQUESTING_USER:
      return isSetRequesting_user();
    case IS_ADMIN_OP:
      return isSetIs_admin_op();
    case IS_SHOW_CURRENT_ROLES:
      return isSetIs_show_current_roles();
    case GRANT_GROUP:
      return isSetGrant_group();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TShowRolesParams)
      return this.equals((TShowRolesParams)that);
    return false;
  }

  public boolean equals(TShowRolesParams that) {
    if (that == null)
      return false;

    boolean this_present_requesting_user = true && this.isSetRequesting_user();
    boolean that_present_requesting_user = true && that.isSetRequesting_user();
    if (this_present_requesting_user || that_present_requesting_user) {
      if (!(this_present_requesting_user && that_present_requesting_user))
        return false;
      if (!this.requesting_user.equals(that.requesting_user))
        return false;
    }

    boolean this_present_is_admin_op = true;
    boolean that_present_is_admin_op = true;
    if (this_present_is_admin_op || that_present_is_admin_op) {
      if (!(this_present_is_admin_op && that_present_is_admin_op))
        return false;
      if (this.is_admin_op != that.is_admin_op)
        return false;
    }

    boolean this_present_is_show_current_roles = true;
    boolean that_present_is_show_current_roles = true;
    if (this_present_is_show_current_roles || that_present_is_show_current_roles) {
      if (!(this_present_is_show_current_roles && that_present_is_show_current_roles))
        return false;
      if (this.is_show_current_roles != that.is_show_current_roles)
        return false;
    }

    boolean this_present_grant_group = true && this.isSetGrant_group();
    boolean that_present_grant_group = true && that.isSetGrant_group();
    if (this_present_grant_group || that_present_grant_group) {
      if (!(this_present_grant_group && that_present_grant_group))
        return false;
      if (!this.grant_group.equals(that.grant_group))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_requesting_user = true && (isSetRequesting_user());
    builder.append(present_requesting_user);
    if (present_requesting_user)
      builder.append(requesting_user);

    boolean present_is_admin_op = true;
    builder.append(present_is_admin_op);
    if (present_is_admin_op)
      builder.append(is_admin_op);

    boolean present_is_show_current_roles = true;
    builder.append(present_is_show_current_roles);
    if (present_is_show_current_roles)
      builder.append(is_show_current_roles);

    boolean present_grant_group = true && (isSetGrant_group());
    builder.append(present_grant_group);
    if (present_grant_group)
      builder.append(grant_group);

    return builder.toHashCode();
  }

  public int compareTo(TShowRolesParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TShowRolesParams typedOther = (TShowRolesParams)other;

    lastComparison = Boolean.valueOf(isSetRequesting_user()).compareTo(typedOther.isSetRequesting_user());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequesting_user()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requesting_user, typedOther.requesting_user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_admin_op()).compareTo(typedOther.isSetIs_admin_op());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_admin_op()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_admin_op, typedOther.is_admin_op);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_show_current_roles()).compareTo(typedOther.isSetIs_show_current_roles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_show_current_roles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_show_current_roles, typedOther.is_show_current_roles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGrant_group()).compareTo(typedOther.isSetGrant_group());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGrant_group()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.grant_group, typedOther.grant_group);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TShowRolesParams(");
    boolean first = true;

    if (isSetRequesting_user()) {
      sb.append("requesting_user:");
      if (this.requesting_user == null) {
        sb.append("null");
      } else {
        sb.append(this.requesting_user);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("is_admin_op:");
    sb.append(this.is_admin_op);
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_show_current_roles:");
    sb.append(this.is_show_current_roles);
    first = false;
    if (isSetGrant_group()) {
      if (!first) sb.append(", ");
      sb.append("grant_group:");
      if (this.grant_group == null) {
        sb.append("null");
      } else {
        sb.append(this.grant_group);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'is_admin_op' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'is_show_current_roles' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TShowRolesParamsStandardSchemeFactory implements SchemeFactory {
    public TShowRolesParamsStandardScheme getScheme() {
      return new TShowRolesParamsStandardScheme();
    }
  }

  private static class TShowRolesParamsStandardScheme extends StandardScheme<TShowRolesParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TShowRolesParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REQUESTING_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requesting_user = iprot.readString();
              struct.setRequesting_userIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IS_ADMIN_OP
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_admin_op = iprot.readBool();
              struct.setIs_admin_opIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_SHOW_CURRENT_ROLES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_show_current_roles = iprot.readBool();
              struct.setIs_show_current_rolesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GRANT_GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.grant_group = iprot.readString();
              struct.setGrant_groupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetIs_admin_op()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'is_admin_op' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIs_show_current_roles()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'is_show_current_roles' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TShowRolesParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.requesting_user != null) {
        if (struct.isSetRequesting_user()) {
          oprot.writeFieldBegin(REQUESTING_USER_FIELD_DESC);
          oprot.writeString(struct.requesting_user);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(IS_ADMIN_OP_FIELD_DESC);
      oprot.writeBool(struct.is_admin_op);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_SHOW_CURRENT_ROLES_FIELD_DESC);
      oprot.writeBool(struct.is_show_current_roles);
      oprot.writeFieldEnd();
      if (struct.grant_group != null) {
        if (struct.isSetGrant_group()) {
          oprot.writeFieldBegin(GRANT_GROUP_FIELD_DESC);
          oprot.writeString(struct.grant_group);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TShowRolesParamsTupleSchemeFactory implements SchemeFactory {
    public TShowRolesParamsTupleScheme getScheme() {
      return new TShowRolesParamsTupleScheme();
    }
  }

  private static class TShowRolesParamsTupleScheme extends TupleScheme<TShowRolesParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TShowRolesParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeBool(struct.is_admin_op);
      oprot.writeBool(struct.is_show_current_roles);
      BitSet optionals = new BitSet();
      if (struct.isSetRequesting_user()) {
        optionals.set(0);
      }
      if (struct.isSetGrant_group()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetRequesting_user()) {
        oprot.writeString(struct.requesting_user);
      }
      if (struct.isSetGrant_group()) {
        oprot.writeString(struct.grant_group);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TShowRolesParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.is_admin_op = iprot.readBool();
      struct.setIs_admin_opIsSet(true);
      struct.is_show_current_roles = iprot.readBool();
      struct.setIs_show_current_rolesIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.requesting_user = iprot.readString();
        struct.setRequesting_userIsSet(true);
      }
      if (incoming.get(1)) {
        struct.grant_group = iprot.readString();
        struct.setGrant_groupIsSet(true);
      }
    }
  }

}

