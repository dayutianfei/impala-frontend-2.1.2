/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TExecRequest implements org.apache.thrift.TBase<TExecRequest, TExecRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TExecRequest");

  private static final org.apache.thrift.protocol.TField STMT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("stmt_type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField QUERY_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("query_options", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField QUERY_EXEC_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("query_exec_request", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField CATALOG_OP_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("catalog_op_request", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField RESULT_SET_METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("result_set_metadata", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField EXPLAIN_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("explain_result", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField LOAD_DATA_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("load_data_request", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField ACCESS_EVENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("access_events", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField ANALYSIS_WARNINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("analysis_warnings", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField SET_QUERY_OPTION_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("set_query_option_request", org.apache.thrift.protocol.TType.STRUCT, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TExecRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TExecRequestTupleSchemeFactory());
  }

  /**
   * 
   * @see com.cloudera.impala.thrift.TStmtType
   */
  public com.cloudera.impala.thrift.TStmtType stmt_type; // required
  public com.cloudera.impala.thrift.TQueryOptions query_options; // required
  public TQueryExecRequest query_exec_request; // optional
  public TCatalogOpRequest catalog_op_request; // optional
  public com.cloudera.impala.thrift.TResultSetMetadata result_set_metadata; // optional
  public TExplainResult explain_result; // optional
  public TLoadDataReq load_data_request; // optional
  public List<TAccessEvent> access_events; // optional
  public List<String> analysis_warnings; // required
  public TSetQueryOptionRequest set_query_option_request; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see com.cloudera.impala.thrift.TStmtType
     */
    STMT_TYPE((short)1, "stmt_type"),
    QUERY_OPTIONS((short)2, "query_options"),
    QUERY_EXEC_REQUEST((short)3, "query_exec_request"),
    CATALOG_OP_REQUEST((short)4, "catalog_op_request"),
    RESULT_SET_METADATA((short)5, "result_set_metadata"),
    EXPLAIN_RESULT((short)6, "explain_result"),
    LOAD_DATA_REQUEST((short)7, "load_data_request"),
    ACCESS_EVENTS((short)8, "access_events"),
    ANALYSIS_WARNINGS((short)9, "analysis_warnings"),
    SET_QUERY_OPTION_REQUEST((short)10, "set_query_option_request");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STMT_TYPE
          return STMT_TYPE;
        case 2: // QUERY_OPTIONS
          return QUERY_OPTIONS;
        case 3: // QUERY_EXEC_REQUEST
          return QUERY_EXEC_REQUEST;
        case 4: // CATALOG_OP_REQUEST
          return CATALOG_OP_REQUEST;
        case 5: // RESULT_SET_METADATA
          return RESULT_SET_METADATA;
        case 6: // EXPLAIN_RESULT
          return EXPLAIN_RESULT;
        case 7: // LOAD_DATA_REQUEST
          return LOAD_DATA_REQUEST;
        case 8: // ACCESS_EVENTS
          return ACCESS_EVENTS;
        case 9: // ANALYSIS_WARNINGS
          return ANALYSIS_WARNINGS;
        case 10: // SET_QUERY_OPTION_REQUEST
          return SET_QUERY_OPTION_REQUEST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.QUERY_EXEC_REQUEST,_Fields.CATALOG_OP_REQUEST,_Fields.RESULT_SET_METADATA,_Fields.EXPLAIN_RESULT,_Fields.LOAD_DATA_REQUEST,_Fields.ACCESS_EVENTS,_Fields.SET_QUERY_OPTION_REQUEST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STMT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("stmt_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.cloudera.impala.thrift.TStmtType.class)));
    tmpMap.put(_Fields.QUERY_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("query_options", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TQueryOptions.class)));
    tmpMap.put(_Fields.QUERY_EXEC_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("query_exec_request", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TQueryExecRequest.class)));
    tmpMap.put(_Fields.CATALOG_OP_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("catalog_op_request", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCatalogOpRequest.class)));
    tmpMap.put(_Fields.RESULT_SET_METADATA, new org.apache.thrift.meta_data.FieldMetaData("result_set_metadata", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TResultSetMetadata.class)));
    tmpMap.put(_Fields.EXPLAIN_RESULT, new org.apache.thrift.meta_data.FieldMetaData("explain_result", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TExplainResult.class)));
    tmpMap.put(_Fields.LOAD_DATA_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("load_data_request", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLoadDataReq.class)));
    tmpMap.put(_Fields.ACCESS_EVENTS, new org.apache.thrift.meta_data.FieldMetaData("access_events", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAccessEvent.class))));
    tmpMap.put(_Fields.ANALYSIS_WARNINGS, new org.apache.thrift.meta_data.FieldMetaData("analysis_warnings", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SET_QUERY_OPTION_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("set_query_option_request", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSetQueryOptionRequest.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TExecRequest.class, metaDataMap);
  }

  public TExecRequest() {
  }

  public TExecRequest(
    com.cloudera.impala.thrift.TStmtType stmt_type,
    com.cloudera.impala.thrift.TQueryOptions query_options,
    List<String> analysis_warnings)
  {
    this();
    this.stmt_type = stmt_type;
    this.query_options = query_options;
    this.analysis_warnings = analysis_warnings;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TExecRequest(TExecRequest other) {
    if (other.isSetStmt_type()) {
      this.stmt_type = other.stmt_type;
    }
    if (other.isSetQuery_options()) {
      this.query_options = new com.cloudera.impala.thrift.TQueryOptions(other.query_options);
    }
    if (other.isSetQuery_exec_request()) {
      this.query_exec_request = new TQueryExecRequest(other.query_exec_request);
    }
    if (other.isSetCatalog_op_request()) {
      this.catalog_op_request = new TCatalogOpRequest(other.catalog_op_request);
    }
    if (other.isSetResult_set_metadata()) {
      this.result_set_metadata = new com.cloudera.impala.thrift.TResultSetMetadata(other.result_set_metadata);
    }
    if (other.isSetExplain_result()) {
      this.explain_result = new TExplainResult(other.explain_result);
    }
    if (other.isSetLoad_data_request()) {
      this.load_data_request = new TLoadDataReq(other.load_data_request);
    }
    if (other.isSetAccess_events()) {
      List<TAccessEvent> __this__access_events = new ArrayList<TAccessEvent>();
      for (TAccessEvent other_element : other.access_events) {
        __this__access_events.add(new TAccessEvent(other_element));
      }
      this.access_events = __this__access_events;
    }
    if (other.isSetAnalysis_warnings()) {
      List<String> __this__analysis_warnings = new ArrayList<String>();
      for (String other_element : other.analysis_warnings) {
        __this__analysis_warnings.add(other_element);
      }
      this.analysis_warnings = __this__analysis_warnings;
    }
    if (other.isSetSet_query_option_request()) {
      this.set_query_option_request = new TSetQueryOptionRequest(other.set_query_option_request);
    }
  }

  public TExecRequest deepCopy() {
    return new TExecRequest(this);
  }

  @Override
  public void clear() {
    this.stmt_type = null;
    this.query_options = null;
    this.query_exec_request = null;
    this.catalog_op_request = null;
    this.result_set_metadata = null;
    this.explain_result = null;
    this.load_data_request = null;
    this.access_events = null;
    this.analysis_warnings = null;
    this.set_query_option_request = null;
  }

  /**
   * 
   * @see com.cloudera.impala.thrift.TStmtType
   */
  public com.cloudera.impala.thrift.TStmtType getStmt_type() {
    return this.stmt_type;
  }

  /**
   * 
   * @see com.cloudera.impala.thrift.TStmtType
   */
  public TExecRequest setStmt_type(com.cloudera.impala.thrift.TStmtType stmt_type) {
    this.stmt_type = stmt_type;
    return this;
  }

  public void unsetStmt_type() {
    this.stmt_type = null;
  }

  /** Returns true if field stmt_type is set (has been assigned a value) and false otherwise */
  public boolean isSetStmt_type() {
    return this.stmt_type != null;
  }

  public void setStmt_typeIsSet(boolean value) {
    if (!value) {
      this.stmt_type = null;
    }
  }

  public com.cloudera.impala.thrift.TQueryOptions getQuery_options() {
    return this.query_options;
  }

  public TExecRequest setQuery_options(com.cloudera.impala.thrift.TQueryOptions query_options) {
    this.query_options = query_options;
    return this;
  }

  public void unsetQuery_options() {
    this.query_options = null;
  }

  /** Returns true if field query_options is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_options() {
    return this.query_options != null;
  }

  public void setQuery_optionsIsSet(boolean value) {
    if (!value) {
      this.query_options = null;
    }
  }

  public TQueryExecRequest getQuery_exec_request() {
    return this.query_exec_request;
  }

  public TExecRequest setQuery_exec_request(TQueryExecRequest query_exec_request) {
    this.query_exec_request = query_exec_request;
    return this;
  }

  public void unsetQuery_exec_request() {
    this.query_exec_request = null;
  }

  /** Returns true if field query_exec_request is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_exec_request() {
    return this.query_exec_request != null;
  }

  public void setQuery_exec_requestIsSet(boolean value) {
    if (!value) {
      this.query_exec_request = null;
    }
  }

  public TCatalogOpRequest getCatalog_op_request() {
    return this.catalog_op_request;
  }

  public TExecRequest setCatalog_op_request(TCatalogOpRequest catalog_op_request) {
    this.catalog_op_request = catalog_op_request;
    return this;
  }

  public void unsetCatalog_op_request() {
    this.catalog_op_request = null;
  }

  /** Returns true if field catalog_op_request is set (has been assigned a value) and false otherwise */
  public boolean isSetCatalog_op_request() {
    return this.catalog_op_request != null;
  }

  public void setCatalog_op_requestIsSet(boolean value) {
    if (!value) {
      this.catalog_op_request = null;
    }
  }

  public com.cloudera.impala.thrift.TResultSetMetadata getResult_set_metadata() {
    return this.result_set_metadata;
  }

  public TExecRequest setResult_set_metadata(com.cloudera.impala.thrift.TResultSetMetadata result_set_metadata) {
    this.result_set_metadata = result_set_metadata;
    return this;
  }

  public void unsetResult_set_metadata() {
    this.result_set_metadata = null;
  }

  /** Returns true if field result_set_metadata is set (has been assigned a value) and false otherwise */
  public boolean isSetResult_set_metadata() {
    return this.result_set_metadata != null;
  }

  public void setResult_set_metadataIsSet(boolean value) {
    if (!value) {
      this.result_set_metadata = null;
    }
  }

  public TExplainResult getExplain_result() {
    return this.explain_result;
  }

  public TExecRequest setExplain_result(TExplainResult explain_result) {
    this.explain_result = explain_result;
    return this;
  }

  public void unsetExplain_result() {
    this.explain_result = null;
  }

  /** Returns true if field explain_result is set (has been assigned a value) and false otherwise */
  public boolean isSetExplain_result() {
    return this.explain_result != null;
  }

  public void setExplain_resultIsSet(boolean value) {
    if (!value) {
      this.explain_result = null;
    }
  }

  public TLoadDataReq getLoad_data_request() {
    return this.load_data_request;
  }

  public TExecRequest setLoad_data_request(TLoadDataReq load_data_request) {
    this.load_data_request = load_data_request;
    return this;
  }

  public void unsetLoad_data_request() {
    this.load_data_request = null;
  }

  /** Returns true if field load_data_request is set (has been assigned a value) and false otherwise */
  public boolean isSetLoad_data_request() {
    return this.load_data_request != null;
  }

  public void setLoad_data_requestIsSet(boolean value) {
    if (!value) {
      this.load_data_request = null;
    }
  }

  public int getAccess_eventsSize() {
    return (this.access_events == null) ? 0 : this.access_events.size();
  }

  public java.util.Iterator<TAccessEvent> getAccess_eventsIterator() {
    return (this.access_events == null) ? null : this.access_events.iterator();
  }

  public void addToAccess_events(TAccessEvent elem) {
    if (this.access_events == null) {
      this.access_events = new ArrayList<TAccessEvent>();
    }
    this.access_events.add(elem);
  }

  public List<TAccessEvent> getAccess_events() {
    return this.access_events;
  }

  public TExecRequest setAccess_events(List<TAccessEvent> access_events) {
    this.access_events = access_events;
    return this;
  }

  public void unsetAccess_events() {
    this.access_events = null;
  }

  /** Returns true if field access_events is set (has been assigned a value) and false otherwise */
  public boolean isSetAccess_events() {
    return this.access_events != null;
  }

  public void setAccess_eventsIsSet(boolean value) {
    if (!value) {
      this.access_events = null;
    }
  }

  public int getAnalysis_warningsSize() {
    return (this.analysis_warnings == null) ? 0 : this.analysis_warnings.size();
  }

  public java.util.Iterator<String> getAnalysis_warningsIterator() {
    return (this.analysis_warnings == null) ? null : this.analysis_warnings.iterator();
  }

  public void addToAnalysis_warnings(String elem) {
    if (this.analysis_warnings == null) {
      this.analysis_warnings = new ArrayList<String>();
    }
    this.analysis_warnings.add(elem);
  }

  public List<String> getAnalysis_warnings() {
    return this.analysis_warnings;
  }

  public TExecRequest setAnalysis_warnings(List<String> analysis_warnings) {
    this.analysis_warnings = analysis_warnings;
    return this;
  }

  public void unsetAnalysis_warnings() {
    this.analysis_warnings = null;
  }

  /** Returns true if field analysis_warnings is set (has been assigned a value) and false otherwise */
  public boolean isSetAnalysis_warnings() {
    return this.analysis_warnings != null;
  }

  public void setAnalysis_warningsIsSet(boolean value) {
    if (!value) {
      this.analysis_warnings = null;
    }
  }

  public TSetQueryOptionRequest getSet_query_option_request() {
    return this.set_query_option_request;
  }

  public TExecRequest setSet_query_option_request(TSetQueryOptionRequest set_query_option_request) {
    this.set_query_option_request = set_query_option_request;
    return this;
  }

  public void unsetSet_query_option_request() {
    this.set_query_option_request = null;
  }

  /** Returns true if field set_query_option_request is set (has been assigned a value) and false otherwise */
  public boolean isSetSet_query_option_request() {
    return this.set_query_option_request != null;
  }

  public void setSet_query_option_requestIsSet(boolean value) {
    if (!value) {
      this.set_query_option_request = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STMT_TYPE:
      if (value == null) {
        unsetStmt_type();
      } else {
        setStmt_type((com.cloudera.impala.thrift.TStmtType)value);
      }
      break;

    case QUERY_OPTIONS:
      if (value == null) {
        unsetQuery_options();
      } else {
        setQuery_options((com.cloudera.impala.thrift.TQueryOptions)value);
      }
      break;

    case QUERY_EXEC_REQUEST:
      if (value == null) {
        unsetQuery_exec_request();
      } else {
        setQuery_exec_request((TQueryExecRequest)value);
      }
      break;

    case CATALOG_OP_REQUEST:
      if (value == null) {
        unsetCatalog_op_request();
      } else {
        setCatalog_op_request((TCatalogOpRequest)value);
      }
      break;

    case RESULT_SET_METADATA:
      if (value == null) {
        unsetResult_set_metadata();
      } else {
        setResult_set_metadata((com.cloudera.impala.thrift.TResultSetMetadata)value);
      }
      break;

    case EXPLAIN_RESULT:
      if (value == null) {
        unsetExplain_result();
      } else {
        setExplain_result((TExplainResult)value);
      }
      break;

    case LOAD_DATA_REQUEST:
      if (value == null) {
        unsetLoad_data_request();
      } else {
        setLoad_data_request((TLoadDataReq)value);
      }
      break;

    case ACCESS_EVENTS:
      if (value == null) {
        unsetAccess_events();
      } else {
        setAccess_events((List<TAccessEvent>)value);
      }
      break;

    case ANALYSIS_WARNINGS:
      if (value == null) {
        unsetAnalysis_warnings();
      } else {
        setAnalysis_warnings((List<String>)value);
      }
      break;

    case SET_QUERY_OPTION_REQUEST:
      if (value == null) {
        unsetSet_query_option_request();
      } else {
        setSet_query_option_request((TSetQueryOptionRequest)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STMT_TYPE:
      return getStmt_type();

    case QUERY_OPTIONS:
      return getQuery_options();

    case QUERY_EXEC_REQUEST:
      return getQuery_exec_request();

    case CATALOG_OP_REQUEST:
      return getCatalog_op_request();

    case RESULT_SET_METADATA:
      return getResult_set_metadata();

    case EXPLAIN_RESULT:
      return getExplain_result();

    case LOAD_DATA_REQUEST:
      return getLoad_data_request();

    case ACCESS_EVENTS:
      return getAccess_events();

    case ANALYSIS_WARNINGS:
      return getAnalysis_warnings();

    case SET_QUERY_OPTION_REQUEST:
      return getSet_query_option_request();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STMT_TYPE:
      return isSetStmt_type();
    case QUERY_OPTIONS:
      return isSetQuery_options();
    case QUERY_EXEC_REQUEST:
      return isSetQuery_exec_request();
    case CATALOG_OP_REQUEST:
      return isSetCatalog_op_request();
    case RESULT_SET_METADATA:
      return isSetResult_set_metadata();
    case EXPLAIN_RESULT:
      return isSetExplain_result();
    case LOAD_DATA_REQUEST:
      return isSetLoad_data_request();
    case ACCESS_EVENTS:
      return isSetAccess_events();
    case ANALYSIS_WARNINGS:
      return isSetAnalysis_warnings();
    case SET_QUERY_OPTION_REQUEST:
      return isSetSet_query_option_request();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TExecRequest)
      return this.equals((TExecRequest)that);
    return false;
  }

  public boolean equals(TExecRequest that) {
    if (that == null)
      return false;

    boolean this_present_stmt_type = true && this.isSetStmt_type();
    boolean that_present_stmt_type = true && that.isSetStmt_type();
    if (this_present_stmt_type || that_present_stmt_type) {
      if (!(this_present_stmt_type && that_present_stmt_type))
        return false;
      if (!this.stmt_type.equals(that.stmt_type))
        return false;
    }

    boolean this_present_query_options = true && this.isSetQuery_options();
    boolean that_present_query_options = true && that.isSetQuery_options();
    if (this_present_query_options || that_present_query_options) {
      if (!(this_present_query_options && that_present_query_options))
        return false;
      if (!this.query_options.equals(that.query_options))
        return false;
    }

    boolean this_present_query_exec_request = true && this.isSetQuery_exec_request();
    boolean that_present_query_exec_request = true && that.isSetQuery_exec_request();
    if (this_present_query_exec_request || that_present_query_exec_request) {
      if (!(this_present_query_exec_request && that_present_query_exec_request))
        return false;
      if (!this.query_exec_request.equals(that.query_exec_request))
        return false;
    }

    boolean this_present_catalog_op_request = true && this.isSetCatalog_op_request();
    boolean that_present_catalog_op_request = true && that.isSetCatalog_op_request();
    if (this_present_catalog_op_request || that_present_catalog_op_request) {
      if (!(this_present_catalog_op_request && that_present_catalog_op_request))
        return false;
      if (!this.catalog_op_request.equals(that.catalog_op_request))
        return false;
    }

    boolean this_present_result_set_metadata = true && this.isSetResult_set_metadata();
    boolean that_present_result_set_metadata = true && that.isSetResult_set_metadata();
    if (this_present_result_set_metadata || that_present_result_set_metadata) {
      if (!(this_present_result_set_metadata && that_present_result_set_metadata))
        return false;
      if (!this.result_set_metadata.equals(that.result_set_metadata))
        return false;
    }

    boolean this_present_explain_result = true && this.isSetExplain_result();
    boolean that_present_explain_result = true && that.isSetExplain_result();
    if (this_present_explain_result || that_present_explain_result) {
      if (!(this_present_explain_result && that_present_explain_result))
        return false;
      if (!this.explain_result.equals(that.explain_result))
        return false;
    }

    boolean this_present_load_data_request = true && this.isSetLoad_data_request();
    boolean that_present_load_data_request = true && that.isSetLoad_data_request();
    if (this_present_load_data_request || that_present_load_data_request) {
      if (!(this_present_load_data_request && that_present_load_data_request))
        return false;
      if (!this.load_data_request.equals(that.load_data_request))
        return false;
    }

    boolean this_present_access_events = true && this.isSetAccess_events();
    boolean that_present_access_events = true && that.isSetAccess_events();
    if (this_present_access_events || that_present_access_events) {
      if (!(this_present_access_events && that_present_access_events))
        return false;
      if (!this.access_events.equals(that.access_events))
        return false;
    }

    boolean this_present_analysis_warnings = true && this.isSetAnalysis_warnings();
    boolean that_present_analysis_warnings = true && that.isSetAnalysis_warnings();
    if (this_present_analysis_warnings || that_present_analysis_warnings) {
      if (!(this_present_analysis_warnings && that_present_analysis_warnings))
        return false;
      if (!this.analysis_warnings.equals(that.analysis_warnings))
        return false;
    }

    boolean this_present_set_query_option_request = true && this.isSetSet_query_option_request();
    boolean that_present_set_query_option_request = true && that.isSetSet_query_option_request();
    if (this_present_set_query_option_request || that_present_set_query_option_request) {
      if (!(this_present_set_query_option_request && that_present_set_query_option_request))
        return false;
      if (!this.set_query_option_request.equals(that.set_query_option_request))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_stmt_type = true && (isSetStmt_type());
    builder.append(present_stmt_type);
    if (present_stmt_type)
      builder.append(stmt_type.getValue());

    boolean present_query_options = true && (isSetQuery_options());
    builder.append(present_query_options);
    if (present_query_options)
      builder.append(query_options);

    boolean present_query_exec_request = true && (isSetQuery_exec_request());
    builder.append(present_query_exec_request);
    if (present_query_exec_request)
      builder.append(query_exec_request);

    boolean present_catalog_op_request = true && (isSetCatalog_op_request());
    builder.append(present_catalog_op_request);
    if (present_catalog_op_request)
      builder.append(catalog_op_request);

    boolean present_result_set_metadata = true && (isSetResult_set_metadata());
    builder.append(present_result_set_metadata);
    if (present_result_set_metadata)
      builder.append(result_set_metadata);

    boolean present_explain_result = true && (isSetExplain_result());
    builder.append(present_explain_result);
    if (present_explain_result)
      builder.append(explain_result);

    boolean present_load_data_request = true && (isSetLoad_data_request());
    builder.append(present_load_data_request);
    if (present_load_data_request)
      builder.append(load_data_request);

    boolean present_access_events = true && (isSetAccess_events());
    builder.append(present_access_events);
    if (present_access_events)
      builder.append(access_events);

    boolean present_analysis_warnings = true && (isSetAnalysis_warnings());
    builder.append(present_analysis_warnings);
    if (present_analysis_warnings)
      builder.append(analysis_warnings);

    boolean present_set_query_option_request = true && (isSetSet_query_option_request());
    builder.append(present_set_query_option_request);
    if (present_set_query_option_request)
      builder.append(set_query_option_request);

    return builder.toHashCode();
  }

  public int compareTo(TExecRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TExecRequest typedOther = (TExecRequest)other;

    lastComparison = Boolean.valueOf(isSetStmt_type()).compareTo(typedOther.isSetStmt_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStmt_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stmt_type, typedOther.stmt_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuery_options()).compareTo(typedOther.isSetQuery_options());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_options()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_options, typedOther.query_options);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuery_exec_request()).compareTo(typedOther.isSetQuery_exec_request());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_exec_request()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_exec_request, typedOther.query_exec_request);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCatalog_op_request()).compareTo(typedOther.isSetCatalog_op_request());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCatalog_op_request()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalog_op_request, typedOther.catalog_op_request);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResult_set_metadata()).compareTo(typedOther.isSetResult_set_metadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult_set_metadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result_set_metadata, typedOther.result_set_metadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExplain_result()).compareTo(typedOther.isSetExplain_result());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExplain_result()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.explain_result, typedOther.explain_result);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoad_data_request()).compareTo(typedOther.isSetLoad_data_request());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoad_data_request()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.load_data_request, typedOther.load_data_request);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccess_events()).compareTo(typedOther.isSetAccess_events());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccess_events()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_events, typedOther.access_events);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnalysis_warnings()).compareTo(typedOther.isSetAnalysis_warnings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnalysis_warnings()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.analysis_warnings, typedOther.analysis_warnings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSet_query_option_request()).compareTo(typedOther.isSetSet_query_option_request());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSet_query_option_request()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.set_query_option_request, typedOther.set_query_option_request);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TExecRequest(");
    boolean first = true;

    sb.append("stmt_type:");
    if (this.stmt_type == null) {
      sb.append("null");
    } else {
      sb.append(this.stmt_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("query_options:");
    if (this.query_options == null) {
      sb.append("null");
    } else {
      sb.append(this.query_options);
    }
    first = false;
    if (isSetQuery_exec_request()) {
      if (!first) sb.append(", ");
      sb.append("query_exec_request:");
      if (this.query_exec_request == null) {
        sb.append("null");
      } else {
        sb.append(this.query_exec_request);
      }
      first = false;
    }
    if (isSetCatalog_op_request()) {
      if (!first) sb.append(", ");
      sb.append("catalog_op_request:");
      if (this.catalog_op_request == null) {
        sb.append("null");
      } else {
        sb.append(this.catalog_op_request);
      }
      first = false;
    }
    if (isSetResult_set_metadata()) {
      if (!first) sb.append(", ");
      sb.append("result_set_metadata:");
      if (this.result_set_metadata == null) {
        sb.append("null");
      } else {
        sb.append(this.result_set_metadata);
      }
      first = false;
    }
    if (isSetExplain_result()) {
      if (!first) sb.append(", ");
      sb.append("explain_result:");
      if (this.explain_result == null) {
        sb.append("null");
      } else {
        sb.append(this.explain_result);
      }
      first = false;
    }
    if (isSetLoad_data_request()) {
      if (!first) sb.append(", ");
      sb.append("load_data_request:");
      if (this.load_data_request == null) {
        sb.append("null");
      } else {
        sb.append(this.load_data_request);
      }
      first = false;
    }
    if (isSetAccess_events()) {
      if (!first) sb.append(", ");
      sb.append("access_events:");
      if (this.access_events == null) {
        sb.append("null");
      } else {
        sb.append(this.access_events);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("analysis_warnings:");
    if (this.analysis_warnings == null) {
      sb.append("null");
    } else {
      sb.append(this.analysis_warnings);
    }
    first = false;
    if (isSetSet_query_option_request()) {
      if (!first) sb.append(", ");
      sb.append("set_query_option_request:");
      if (this.set_query_option_request == null) {
        sb.append("null");
      } else {
        sb.append(this.set_query_option_request);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (stmt_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'stmt_type' was not present! Struct: " + toString());
    }
    if (query_options == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'query_options' was not present! Struct: " + toString());
    }
    if (analysis_warnings == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'analysis_warnings' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (query_options != null) {
      query_options.validate();
    }
    if (query_exec_request != null) {
      query_exec_request.validate();
    }
    if (catalog_op_request != null) {
      catalog_op_request.validate();
    }
    if (result_set_metadata != null) {
      result_set_metadata.validate();
    }
    if (explain_result != null) {
      explain_result.validate();
    }
    if (load_data_request != null) {
      load_data_request.validate();
    }
    if (set_query_option_request != null) {
      set_query_option_request.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TExecRequestStandardSchemeFactory implements SchemeFactory {
    public TExecRequestStandardScheme getScheme() {
      return new TExecRequestStandardScheme();
    }
  }

  private static class TExecRequestStandardScheme extends StandardScheme<TExecRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TExecRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STMT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stmt_type = com.cloudera.impala.thrift.TStmtType.findByValue(iprot.readI32());
              struct.setStmt_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // QUERY_OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query_options = new com.cloudera.impala.thrift.TQueryOptions();
              struct.query_options.read(iprot);
              struct.setQuery_optionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // QUERY_EXEC_REQUEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query_exec_request = new TQueryExecRequest();
              struct.query_exec_request.read(iprot);
              struct.setQuery_exec_requestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CATALOG_OP_REQUEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.catalog_op_request = new TCatalogOpRequest();
              struct.catalog_op_request.read(iprot);
              struct.setCatalog_op_requestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RESULT_SET_METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.result_set_metadata = new com.cloudera.impala.thrift.TResultSetMetadata();
              struct.result_set_metadata.read(iprot);
              struct.setResult_set_metadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXPLAIN_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.explain_result = new TExplainResult();
              struct.explain_result.read(iprot);
              struct.setExplain_resultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LOAD_DATA_REQUEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.load_data_request = new TLoadDataReq();
              struct.load_data_request.read(iprot);
              struct.setLoad_data_requestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ACCESS_EVENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list162 = iprot.readListBegin();
                struct.access_events = new ArrayList<TAccessEvent>(_list162.size);
                for (int _i163 = 0; _i163 < _list162.size; ++_i163)
                {
                  TAccessEvent _elem164; // required
                  _elem164 = new TAccessEvent();
                  _elem164.read(iprot);
                  struct.access_events.add(_elem164);
                }
                iprot.readListEnd();
              }
              struct.setAccess_eventsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ANALYSIS_WARNINGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list165 = iprot.readListBegin();
                struct.analysis_warnings = new ArrayList<String>(_list165.size);
                for (int _i166 = 0; _i166 < _list165.size; ++_i166)
                {
                  String _elem167; // required
                  _elem167 = iprot.readString();
                  struct.analysis_warnings.add(_elem167);
                }
                iprot.readListEnd();
              }
              struct.setAnalysis_warningsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SET_QUERY_OPTION_REQUEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.set_query_option_request = new TSetQueryOptionRequest();
              struct.set_query_option_request.read(iprot);
              struct.setSet_query_option_requestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TExecRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.stmt_type != null) {
        oprot.writeFieldBegin(STMT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.stmt_type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.query_options != null) {
        oprot.writeFieldBegin(QUERY_OPTIONS_FIELD_DESC);
        struct.query_options.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.query_exec_request != null) {
        if (struct.isSetQuery_exec_request()) {
          oprot.writeFieldBegin(QUERY_EXEC_REQUEST_FIELD_DESC);
          struct.query_exec_request.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.catalog_op_request != null) {
        if (struct.isSetCatalog_op_request()) {
          oprot.writeFieldBegin(CATALOG_OP_REQUEST_FIELD_DESC);
          struct.catalog_op_request.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.result_set_metadata != null) {
        if (struct.isSetResult_set_metadata()) {
          oprot.writeFieldBegin(RESULT_SET_METADATA_FIELD_DESC);
          struct.result_set_metadata.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.explain_result != null) {
        if (struct.isSetExplain_result()) {
          oprot.writeFieldBegin(EXPLAIN_RESULT_FIELD_DESC);
          struct.explain_result.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.load_data_request != null) {
        if (struct.isSetLoad_data_request()) {
          oprot.writeFieldBegin(LOAD_DATA_REQUEST_FIELD_DESC);
          struct.load_data_request.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.access_events != null) {
        if (struct.isSetAccess_events()) {
          oprot.writeFieldBegin(ACCESS_EVENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.access_events.size()));
            for (TAccessEvent _iter168 : struct.access_events)
            {
              _iter168.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.analysis_warnings != null) {
        oprot.writeFieldBegin(ANALYSIS_WARNINGS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.analysis_warnings.size()));
          for (String _iter169 : struct.analysis_warnings)
          {
            oprot.writeString(_iter169);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.set_query_option_request != null) {
        if (struct.isSetSet_query_option_request()) {
          oprot.writeFieldBegin(SET_QUERY_OPTION_REQUEST_FIELD_DESC);
          struct.set_query_option_request.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TExecRequestTupleSchemeFactory implements SchemeFactory {
    public TExecRequestTupleScheme getScheme() {
      return new TExecRequestTupleScheme();
    }
  }

  private static class TExecRequestTupleScheme extends TupleScheme<TExecRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TExecRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.stmt_type.getValue());
      struct.query_options.write(oprot);
      {
        oprot.writeI32(struct.analysis_warnings.size());
        for (String _iter170 : struct.analysis_warnings)
        {
          oprot.writeString(_iter170);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetQuery_exec_request()) {
        optionals.set(0);
      }
      if (struct.isSetCatalog_op_request()) {
        optionals.set(1);
      }
      if (struct.isSetResult_set_metadata()) {
        optionals.set(2);
      }
      if (struct.isSetExplain_result()) {
        optionals.set(3);
      }
      if (struct.isSetLoad_data_request()) {
        optionals.set(4);
      }
      if (struct.isSetAccess_events()) {
        optionals.set(5);
      }
      if (struct.isSetSet_query_option_request()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetQuery_exec_request()) {
        struct.query_exec_request.write(oprot);
      }
      if (struct.isSetCatalog_op_request()) {
        struct.catalog_op_request.write(oprot);
      }
      if (struct.isSetResult_set_metadata()) {
        struct.result_set_metadata.write(oprot);
      }
      if (struct.isSetExplain_result()) {
        struct.explain_result.write(oprot);
      }
      if (struct.isSetLoad_data_request()) {
        struct.load_data_request.write(oprot);
      }
      if (struct.isSetAccess_events()) {
        {
          oprot.writeI32(struct.access_events.size());
          for (TAccessEvent _iter171 : struct.access_events)
          {
            _iter171.write(oprot);
          }
        }
      }
      if (struct.isSetSet_query_option_request()) {
        struct.set_query_option_request.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TExecRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.stmt_type = com.cloudera.impala.thrift.TStmtType.findByValue(iprot.readI32());
      struct.setStmt_typeIsSet(true);
      struct.query_options = new com.cloudera.impala.thrift.TQueryOptions();
      struct.query_options.read(iprot);
      struct.setQuery_optionsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list172 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.analysis_warnings = new ArrayList<String>(_list172.size);
        for (int _i173 = 0; _i173 < _list172.size; ++_i173)
        {
          String _elem174; // required
          _elem174 = iprot.readString();
          struct.analysis_warnings.add(_elem174);
        }
      }
      struct.setAnalysis_warningsIsSet(true);
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.query_exec_request = new TQueryExecRequest();
        struct.query_exec_request.read(iprot);
        struct.setQuery_exec_requestIsSet(true);
      }
      if (incoming.get(1)) {
        struct.catalog_op_request = new TCatalogOpRequest();
        struct.catalog_op_request.read(iprot);
        struct.setCatalog_op_requestIsSet(true);
      }
      if (incoming.get(2)) {
        struct.result_set_metadata = new com.cloudera.impala.thrift.TResultSetMetadata();
        struct.result_set_metadata.read(iprot);
        struct.setResult_set_metadataIsSet(true);
      }
      if (incoming.get(3)) {
        struct.explain_result = new TExplainResult();
        struct.explain_result.read(iprot);
        struct.setExplain_resultIsSet(true);
      }
      if (incoming.get(4)) {
        struct.load_data_request = new TLoadDataReq();
        struct.load_data_request.read(iprot);
        struct.setLoad_data_requestIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list175 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.access_events = new ArrayList<TAccessEvent>(_list175.size);
          for (int _i176 = 0; _i176 < _list175.size; ++_i176)
          {
            TAccessEvent _elem177; // required
            _elem177 = new TAccessEvent();
            _elem177.read(iprot);
            struct.access_events.add(_elem177);
          }
        }
        struct.setAccess_eventsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.set_query_option_request = new TSetQueryOptionRequest();
        struct.set_query_option_request.read(iprot);
        struct.setSet_query_option_requestIsSet(true);
      }
    }
  }

}

