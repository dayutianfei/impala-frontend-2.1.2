/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class THiveUdfExecutorCtorParams implements org.apache.thrift.TBase<THiveUdfExecutorCtorParams, THiveUdfExecutorCtorParams._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("THiveUdfExecutorCtorParams");

  private static final org.apache.thrift.protocol.TField FN_FIELD_DESC = new org.apache.thrift.protocol.TField("fn", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField LOCAL_LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("local_location", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField INPUT_BYTE_OFFSETS_FIELD_DESC = new org.apache.thrift.protocol.TField("input_byte_offsets", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField INPUT_NULLS_PTR_FIELD_DESC = new org.apache.thrift.protocol.TField("input_nulls_ptr", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField INPUT_BUFFER_PTR_FIELD_DESC = new org.apache.thrift.protocol.TField("input_buffer_ptr", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField OUTPUT_NULL_PTR_FIELD_DESC = new org.apache.thrift.protocol.TField("output_null_ptr", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField OUTPUT_BUFFER_PTR_FIELD_DESC = new org.apache.thrift.protocol.TField("output_buffer_ptr", org.apache.thrift.protocol.TType.I64, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new THiveUdfExecutorCtorParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new THiveUdfExecutorCtorParamsTupleSchemeFactory());
  }

  public com.cloudera.impala.thrift.TFunction fn; // required
  public String local_location; // required
  public List<Integer> input_byte_offsets; // required
  public long input_nulls_ptr; // required
  public long input_buffer_ptr; // required
  public long output_null_ptr; // required
  public long output_buffer_ptr; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FN((short)1, "fn"),
    LOCAL_LOCATION((short)2, "local_location"),
    INPUT_BYTE_OFFSETS((short)3, "input_byte_offsets"),
    INPUT_NULLS_PTR((short)4, "input_nulls_ptr"),
    INPUT_BUFFER_PTR((short)5, "input_buffer_ptr"),
    OUTPUT_NULL_PTR((short)6, "output_null_ptr"),
    OUTPUT_BUFFER_PTR((short)7, "output_buffer_ptr");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FN
          return FN;
        case 2: // LOCAL_LOCATION
          return LOCAL_LOCATION;
        case 3: // INPUT_BYTE_OFFSETS
          return INPUT_BYTE_OFFSETS;
        case 4: // INPUT_NULLS_PTR
          return INPUT_NULLS_PTR;
        case 5: // INPUT_BUFFER_PTR
          return INPUT_BUFFER_PTR;
        case 6: // OUTPUT_NULL_PTR
          return OUTPUT_NULL_PTR;
        case 7: // OUTPUT_BUFFER_PTR
          return OUTPUT_BUFFER_PTR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INPUT_NULLS_PTR_ISSET_ID = 0;
  private static final int __INPUT_BUFFER_PTR_ISSET_ID = 1;
  private static final int __OUTPUT_NULL_PTR_ISSET_ID = 2;
  private static final int __OUTPUT_BUFFER_PTR_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FN, new org.apache.thrift.meta_data.FieldMetaData("fn", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TFunction.class)));
    tmpMap.put(_Fields.LOCAL_LOCATION, new org.apache.thrift.meta_data.FieldMetaData("local_location", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INPUT_BYTE_OFFSETS, new org.apache.thrift.meta_data.FieldMetaData("input_byte_offsets", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.INPUT_NULLS_PTR, new org.apache.thrift.meta_data.FieldMetaData("input_nulls_ptr", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INPUT_BUFFER_PTR, new org.apache.thrift.meta_data.FieldMetaData("input_buffer_ptr", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OUTPUT_NULL_PTR, new org.apache.thrift.meta_data.FieldMetaData("output_null_ptr", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OUTPUT_BUFFER_PTR, new org.apache.thrift.meta_data.FieldMetaData("output_buffer_ptr", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(THiveUdfExecutorCtorParams.class, metaDataMap);
  }

  public THiveUdfExecutorCtorParams() {
  }

  public THiveUdfExecutorCtorParams(
    com.cloudera.impala.thrift.TFunction fn,
    String local_location,
    List<Integer> input_byte_offsets,
    long input_nulls_ptr,
    long input_buffer_ptr,
    long output_null_ptr,
    long output_buffer_ptr)
  {
    this();
    this.fn = fn;
    this.local_location = local_location;
    this.input_byte_offsets = input_byte_offsets;
    this.input_nulls_ptr = input_nulls_ptr;
    setInput_nulls_ptrIsSet(true);
    this.input_buffer_ptr = input_buffer_ptr;
    setInput_buffer_ptrIsSet(true);
    this.output_null_ptr = output_null_ptr;
    setOutput_null_ptrIsSet(true);
    this.output_buffer_ptr = output_buffer_ptr;
    setOutput_buffer_ptrIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public THiveUdfExecutorCtorParams(THiveUdfExecutorCtorParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFn()) {
      this.fn = new com.cloudera.impala.thrift.TFunction(other.fn);
    }
    if (other.isSetLocal_location()) {
      this.local_location = other.local_location;
    }
    if (other.isSetInput_byte_offsets()) {
      List<Integer> __this__input_byte_offsets = new ArrayList<Integer>();
      for (Integer other_element : other.input_byte_offsets) {
        __this__input_byte_offsets.add(other_element);
      }
      this.input_byte_offsets = __this__input_byte_offsets;
    }
    this.input_nulls_ptr = other.input_nulls_ptr;
    this.input_buffer_ptr = other.input_buffer_ptr;
    this.output_null_ptr = other.output_null_ptr;
    this.output_buffer_ptr = other.output_buffer_ptr;
  }

  public THiveUdfExecutorCtorParams deepCopy() {
    return new THiveUdfExecutorCtorParams(this);
  }

  @Override
  public void clear() {
    this.fn = null;
    this.local_location = null;
    this.input_byte_offsets = null;
    setInput_nulls_ptrIsSet(false);
    this.input_nulls_ptr = 0;
    setInput_buffer_ptrIsSet(false);
    this.input_buffer_ptr = 0;
    setOutput_null_ptrIsSet(false);
    this.output_null_ptr = 0;
    setOutput_buffer_ptrIsSet(false);
    this.output_buffer_ptr = 0;
  }

  public com.cloudera.impala.thrift.TFunction getFn() {
    return this.fn;
  }

  public THiveUdfExecutorCtorParams setFn(com.cloudera.impala.thrift.TFunction fn) {
    this.fn = fn;
    return this;
  }

  public void unsetFn() {
    this.fn = null;
  }

  /** Returns true if field fn is set (has been assigned a value) and false otherwise */
  public boolean isSetFn() {
    return this.fn != null;
  }

  public void setFnIsSet(boolean value) {
    if (!value) {
      this.fn = null;
    }
  }

  public String getLocal_location() {
    return this.local_location;
  }

  public THiveUdfExecutorCtorParams setLocal_location(String local_location) {
    this.local_location = local_location;
    return this;
  }

  public void unsetLocal_location() {
    this.local_location = null;
  }

  /** Returns true if field local_location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocal_location() {
    return this.local_location != null;
  }

  public void setLocal_locationIsSet(boolean value) {
    if (!value) {
      this.local_location = null;
    }
  }

  public int getInput_byte_offsetsSize() {
    return (this.input_byte_offsets == null) ? 0 : this.input_byte_offsets.size();
  }

  public java.util.Iterator<Integer> getInput_byte_offsetsIterator() {
    return (this.input_byte_offsets == null) ? null : this.input_byte_offsets.iterator();
  }

  public void addToInput_byte_offsets(int elem) {
    if (this.input_byte_offsets == null) {
      this.input_byte_offsets = new ArrayList<Integer>();
    }
    this.input_byte_offsets.add(elem);
  }

  public List<Integer> getInput_byte_offsets() {
    return this.input_byte_offsets;
  }

  public THiveUdfExecutorCtorParams setInput_byte_offsets(List<Integer> input_byte_offsets) {
    this.input_byte_offsets = input_byte_offsets;
    return this;
  }

  public void unsetInput_byte_offsets() {
    this.input_byte_offsets = null;
  }

  /** Returns true if field input_byte_offsets is set (has been assigned a value) and false otherwise */
  public boolean isSetInput_byte_offsets() {
    return this.input_byte_offsets != null;
  }

  public void setInput_byte_offsetsIsSet(boolean value) {
    if (!value) {
      this.input_byte_offsets = null;
    }
  }

  public long getInput_nulls_ptr() {
    return this.input_nulls_ptr;
  }

  public THiveUdfExecutorCtorParams setInput_nulls_ptr(long input_nulls_ptr) {
    this.input_nulls_ptr = input_nulls_ptr;
    setInput_nulls_ptrIsSet(true);
    return this;
  }

  public void unsetInput_nulls_ptr() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INPUT_NULLS_PTR_ISSET_ID);
  }

  /** Returns true if field input_nulls_ptr is set (has been assigned a value) and false otherwise */
  public boolean isSetInput_nulls_ptr() {
    return EncodingUtils.testBit(__isset_bitfield, __INPUT_NULLS_PTR_ISSET_ID);
  }

  public void setInput_nulls_ptrIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INPUT_NULLS_PTR_ISSET_ID, value);
  }

  public long getInput_buffer_ptr() {
    return this.input_buffer_ptr;
  }

  public THiveUdfExecutorCtorParams setInput_buffer_ptr(long input_buffer_ptr) {
    this.input_buffer_ptr = input_buffer_ptr;
    setInput_buffer_ptrIsSet(true);
    return this;
  }

  public void unsetInput_buffer_ptr() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INPUT_BUFFER_PTR_ISSET_ID);
  }

  /** Returns true if field input_buffer_ptr is set (has been assigned a value) and false otherwise */
  public boolean isSetInput_buffer_ptr() {
    return EncodingUtils.testBit(__isset_bitfield, __INPUT_BUFFER_PTR_ISSET_ID);
  }

  public void setInput_buffer_ptrIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INPUT_BUFFER_PTR_ISSET_ID, value);
  }

  public long getOutput_null_ptr() {
    return this.output_null_ptr;
  }

  public THiveUdfExecutorCtorParams setOutput_null_ptr(long output_null_ptr) {
    this.output_null_ptr = output_null_ptr;
    setOutput_null_ptrIsSet(true);
    return this;
  }

  public void unsetOutput_null_ptr() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OUTPUT_NULL_PTR_ISSET_ID);
  }

  /** Returns true if field output_null_ptr is set (has been assigned a value) and false otherwise */
  public boolean isSetOutput_null_ptr() {
    return EncodingUtils.testBit(__isset_bitfield, __OUTPUT_NULL_PTR_ISSET_ID);
  }

  public void setOutput_null_ptrIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OUTPUT_NULL_PTR_ISSET_ID, value);
  }

  public long getOutput_buffer_ptr() {
    return this.output_buffer_ptr;
  }

  public THiveUdfExecutorCtorParams setOutput_buffer_ptr(long output_buffer_ptr) {
    this.output_buffer_ptr = output_buffer_ptr;
    setOutput_buffer_ptrIsSet(true);
    return this;
  }

  public void unsetOutput_buffer_ptr() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OUTPUT_BUFFER_PTR_ISSET_ID);
  }

  /** Returns true if field output_buffer_ptr is set (has been assigned a value) and false otherwise */
  public boolean isSetOutput_buffer_ptr() {
    return EncodingUtils.testBit(__isset_bitfield, __OUTPUT_BUFFER_PTR_ISSET_ID);
  }

  public void setOutput_buffer_ptrIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OUTPUT_BUFFER_PTR_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FN:
      if (value == null) {
        unsetFn();
      } else {
        setFn((com.cloudera.impala.thrift.TFunction)value);
      }
      break;

    case LOCAL_LOCATION:
      if (value == null) {
        unsetLocal_location();
      } else {
        setLocal_location((String)value);
      }
      break;

    case INPUT_BYTE_OFFSETS:
      if (value == null) {
        unsetInput_byte_offsets();
      } else {
        setInput_byte_offsets((List<Integer>)value);
      }
      break;

    case INPUT_NULLS_PTR:
      if (value == null) {
        unsetInput_nulls_ptr();
      } else {
        setInput_nulls_ptr((Long)value);
      }
      break;

    case INPUT_BUFFER_PTR:
      if (value == null) {
        unsetInput_buffer_ptr();
      } else {
        setInput_buffer_ptr((Long)value);
      }
      break;

    case OUTPUT_NULL_PTR:
      if (value == null) {
        unsetOutput_null_ptr();
      } else {
        setOutput_null_ptr((Long)value);
      }
      break;

    case OUTPUT_BUFFER_PTR:
      if (value == null) {
        unsetOutput_buffer_ptr();
      } else {
        setOutput_buffer_ptr((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FN:
      return getFn();

    case LOCAL_LOCATION:
      return getLocal_location();

    case INPUT_BYTE_OFFSETS:
      return getInput_byte_offsets();

    case INPUT_NULLS_PTR:
      return Long.valueOf(getInput_nulls_ptr());

    case INPUT_BUFFER_PTR:
      return Long.valueOf(getInput_buffer_ptr());

    case OUTPUT_NULL_PTR:
      return Long.valueOf(getOutput_null_ptr());

    case OUTPUT_BUFFER_PTR:
      return Long.valueOf(getOutput_buffer_ptr());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FN:
      return isSetFn();
    case LOCAL_LOCATION:
      return isSetLocal_location();
    case INPUT_BYTE_OFFSETS:
      return isSetInput_byte_offsets();
    case INPUT_NULLS_PTR:
      return isSetInput_nulls_ptr();
    case INPUT_BUFFER_PTR:
      return isSetInput_buffer_ptr();
    case OUTPUT_NULL_PTR:
      return isSetOutput_null_ptr();
    case OUTPUT_BUFFER_PTR:
      return isSetOutput_buffer_ptr();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof THiveUdfExecutorCtorParams)
      return this.equals((THiveUdfExecutorCtorParams)that);
    return false;
  }

  public boolean equals(THiveUdfExecutorCtorParams that) {
    if (that == null)
      return false;

    boolean this_present_fn = true && this.isSetFn();
    boolean that_present_fn = true && that.isSetFn();
    if (this_present_fn || that_present_fn) {
      if (!(this_present_fn && that_present_fn))
        return false;
      if (!this.fn.equals(that.fn))
        return false;
    }

    boolean this_present_local_location = true && this.isSetLocal_location();
    boolean that_present_local_location = true && that.isSetLocal_location();
    if (this_present_local_location || that_present_local_location) {
      if (!(this_present_local_location && that_present_local_location))
        return false;
      if (!this.local_location.equals(that.local_location))
        return false;
    }

    boolean this_present_input_byte_offsets = true && this.isSetInput_byte_offsets();
    boolean that_present_input_byte_offsets = true && that.isSetInput_byte_offsets();
    if (this_present_input_byte_offsets || that_present_input_byte_offsets) {
      if (!(this_present_input_byte_offsets && that_present_input_byte_offsets))
        return false;
      if (!this.input_byte_offsets.equals(that.input_byte_offsets))
        return false;
    }

    boolean this_present_input_nulls_ptr = true;
    boolean that_present_input_nulls_ptr = true;
    if (this_present_input_nulls_ptr || that_present_input_nulls_ptr) {
      if (!(this_present_input_nulls_ptr && that_present_input_nulls_ptr))
        return false;
      if (this.input_nulls_ptr != that.input_nulls_ptr)
        return false;
    }

    boolean this_present_input_buffer_ptr = true;
    boolean that_present_input_buffer_ptr = true;
    if (this_present_input_buffer_ptr || that_present_input_buffer_ptr) {
      if (!(this_present_input_buffer_ptr && that_present_input_buffer_ptr))
        return false;
      if (this.input_buffer_ptr != that.input_buffer_ptr)
        return false;
    }

    boolean this_present_output_null_ptr = true;
    boolean that_present_output_null_ptr = true;
    if (this_present_output_null_ptr || that_present_output_null_ptr) {
      if (!(this_present_output_null_ptr && that_present_output_null_ptr))
        return false;
      if (this.output_null_ptr != that.output_null_ptr)
        return false;
    }

    boolean this_present_output_buffer_ptr = true;
    boolean that_present_output_buffer_ptr = true;
    if (this_present_output_buffer_ptr || that_present_output_buffer_ptr) {
      if (!(this_present_output_buffer_ptr && that_present_output_buffer_ptr))
        return false;
      if (this.output_buffer_ptr != that.output_buffer_ptr)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_fn = true && (isSetFn());
    builder.append(present_fn);
    if (present_fn)
      builder.append(fn);

    boolean present_local_location = true && (isSetLocal_location());
    builder.append(present_local_location);
    if (present_local_location)
      builder.append(local_location);

    boolean present_input_byte_offsets = true && (isSetInput_byte_offsets());
    builder.append(present_input_byte_offsets);
    if (present_input_byte_offsets)
      builder.append(input_byte_offsets);

    boolean present_input_nulls_ptr = true;
    builder.append(present_input_nulls_ptr);
    if (present_input_nulls_ptr)
      builder.append(input_nulls_ptr);

    boolean present_input_buffer_ptr = true;
    builder.append(present_input_buffer_ptr);
    if (present_input_buffer_ptr)
      builder.append(input_buffer_ptr);

    boolean present_output_null_ptr = true;
    builder.append(present_output_null_ptr);
    if (present_output_null_ptr)
      builder.append(output_null_ptr);

    boolean present_output_buffer_ptr = true;
    builder.append(present_output_buffer_ptr);
    if (present_output_buffer_ptr)
      builder.append(output_buffer_ptr);

    return builder.toHashCode();
  }

  public int compareTo(THiveUdfExecutorCtorParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    THiveUdfExecutorCtorParams typedOther = (THiveUdfExecutorCtorParams)other;

    lastComparison = Boolean.valueOf(isSetFn()).compareTo(typedOther.isSetFn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fn, typedOther.fn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocal_location()).compareTo(typedOther.isSetLocal_location());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocal_location()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.local_location, typedOther.local_location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInput_byte_offsets()).compareTo(typedOther.isSetInput_byte_offsets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInput_byte_offsets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.input_byte_offsets, typedOther.input_byte_offsets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInput_nulls_ptr()).compareTo(typedOther.isSetInput_nulls_ptr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInput_nulls_ptr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.input_nulls_ptr, typedOther.input_nulls_ptr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInput_buffer_ptr()).compareTo(typedOther.isSetInput_buffer_ptr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInput_buffer_ptr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.input_buffer_ptr, typedOther.input_buffer_ptr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutput_null_ptr()).compareTo(typedOther.isSetOutput_null_ptr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutput_null_ptr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.output_null_ptr, typedOther.output_null_ptr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutput_buffer_ptr()).compareTo(typedOther.isSetOutput_buffer_ptr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutput_buffer_ptr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.output_buffer_ptr, typedOther.output_buffer_ptr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("THiveUdfExecutorCtorParams(");
    boolean first = true;

    sb.append("fn:");
    if (this.fn == null) {
      sb.append("null");
    } else {
      sb.append(this.fn);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("local_location:");
    if (this.local_location == null) {
      sb.append("null");
    } else {
      sb.append(this.local_location);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("input_byte_offsets:");
    if (this.input_byte_offsets == null) {
      sb.append("null");
    } else {
      sb.append(this.input_byte_offsets);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("input_nulls_ptr:");
    sb.append(this.input_nulls_ptr);
    first = false;
    if (!first) sb.append(", ");
    sb.append("input_buffer_ptr:");
    sb.append(this.input_buffer_ptr);
    first = false;
    if (!first) sb.append(", ");
    sb.append("output_null_ptr:");
    sb.append(this.output_null_ptr);
    first = false;
    if (!first) sb.append(", ");
    sb.append("output_buffer_ptr:");
    sb.append(this.output_buffer_ptr);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (fn == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fn' was not present! Struct: " + toString());
    }
    if (local_location == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'local_location' was not present! Struct: " + toString());
    }
    if (input_byte_offsets == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'input_byte_offsets' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'input_nulls_ptr' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'input_buffer_ptr' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'output_null_ptr' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'output_buffer_ptr' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (fn != null) {
      fn.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class THiveUdfExecutorCtorParamsStandardSchemeFactory implements SchemeFactory {
    public THiveUdfExecutorCtorParamsStandardScheme getScheme() {
      return new THiveUdfExecutorCtorParamsStandardScheme();
    }
  }

  private static class THiveUdfExecutorCtorParamsStandardScheme extends StandardScheme<THiveUdfExecutorCtorParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, THiveUdfExecutorCtorParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fn = new com.cloudera.impala.thrift.TFunction();
              struct.fn.read(iprot);
              struct.setFnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOCAL_LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.local_location = iprot.readString();
              struct.setLocal_locationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INPUT_BYTE_OFFSETS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.input_byte_offsets = new ArrayList<Integer>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  int _elem2; // required
                  _elem2 = iprot.readI32();
                  struct.input_byte_offsets.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setInput_byte_offsetsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INPUT_NULLS_PTR
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.input_nulls_ptr = iprot.readI64();
              struct.setInput_nulls_ptrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INPUT_BUFFER_PTR
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.input_buffer_ptr = iprot.readI64();
              struct.setInput_buffer_ptrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OUTPUT_NULL_PTR
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.output_null_ptr = iprot.readI64();
              struct.setOutput_null_ptrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OUTPUT_BUFFER_PTR
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.output_buffer_ptr = iprot.readI64();
              struct.setOutput_buffer_ptrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetInput_nulls_ptr()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'input_nulls_ptr' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetInput_buffer_ptr()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'input_buffer_ptr' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetOutput_null_ptr()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'output_null_ptr' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetOutput_buffer_ptr()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'output_buffer_ptr' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, THiveUdfExecutorCtorParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fn != null) {
        oprot.writeFieldBegin(FN_FIELD_DESC);
        struct.fn.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.local_location != null) {
        oprot.writeFieldBegin(LOCAL_LOCATION_FIELD_DESC);
        oprot.writeString(struct.local_location);
        oprot.writeFieldEnd();
      }
      if (struct.input_byte_offsets != null) {
        oprot.writeFieldBegin(INPUT_BYTE_OFFSETS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.input_byte_offsets.size()));
          for (int _iter3 : struct.input_byte_offsets)
          {
            oprot.writeI32(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INPUT_NULLS_PTR_FIELD_DESC);
      oprot.writeI64(struct.input_nulls_ptr);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INPUT_BUFFER_PTR_FIELD_DESC);
      oprot.writeI64(struct.input_buffer_ptr);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OUTPUT_NULL_PTR_FIELD_DESC);
      oprot.writeI64(struct.output_null_ptr);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OUTPUT_BUFFER_PTR_FIELD_DESC);
      oprot.writeI64(struct.output_buffer_ptr);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class THiveUdfExecutorCtorParamsTupleSchemeFactory implements SchemeFactory {
    public THiveUdfExecutorCtorParamsTupleScheme getScheme() {
      return new THiveUdfExecutorCtorParamsTupleScheme();
    }
  }

  private static class THiveUdfExecutorCtorParamsTupleScheme extends TupleScheme<THiveUdfExecutorCtorParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, THiveUdfExecutorCtorParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.fn.write(oprot);
      oprot.writeString(struct.local_location);
      {
        oprot.writeI32(struct.input_byte_offsets.size());
        for (int _iter4 : struct.input_byte_offsets)
        {
          oprot.writeI32(_iter4);
        }
      }
      oprot.writeI64(struct.input_nulls_ptr);
      oprot.writeI64(struct.input_buffer_ptr);
      oprot.writeI64(struct.output_null_ptr);
      oprot.writeI64(struct.output_buffer_ptr);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, THiveUdfExecutorCtorParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.fn = new com.cloudera.impala.thrift.TFunction();
      struct.fn.read(iprot);
      struct.setFnIsSet(true);
      struct.local_location = iprot.readString();
      struct.setLocal_locationIsSet(true);
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.input_byte_offsets = new ArrayList<Integer>(_list5.size);
        for (int _i6 = 0; _i6 < _list5.size; ++_i6)
        {
          int _elem7; // required
          _elem7 = iprot.readI32();
          struct.input_byte_offsets.add(_elem7);
        }
      }
      struct.setInput_byte_offsetsIsSet(true);
      struct.input_nulls_ptr = iprot.readI64();
      struct.setInput_nulls_ptrIsSet(true);
      struct.input_buffer_ptr = iprot.readI64();
      struct.setInput_buffer_ptrIsSet(true);
      struct.output_null_ptr = iprot.readI64();
      struct.setOutput_null_ptrIsSet(true);
      struct.output_buffer_ptr = iprot.readI64();
      struct.setOutput_buffer_ptrIsSet(true);
    }
  }

}

