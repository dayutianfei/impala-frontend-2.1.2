/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TGetFunctionsResult implements org.apache.thrift.TBase<TGetFunctionsResult, TGetFunctionsResult._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TGetFunctionsResult");

  private static final org.apache.thrift.protocol.TField FN_SIGNATURES_FIELD_DESC = new org.apache.thrift.protocol.TField("fn_signatures", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField FN_RET_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("fn_ret_types", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TGetFunctionsResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TGetFunctionsResultTupleSchemeFactory());
  }

  public List<String> fn_signatures; // required
  public List<String> fn_ret_types; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FN_SIGNATURES((short)1, "fn_signatures"),
    FN_RET_TYPES((short)2, "fn_ret_types");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FN_SIGNATURES
          return FN_SIGNATURES;
        case 2: // FN_RET_TYPES
          return FN_RET_TYPES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FN_SIGNATURES, new org.apache.thrift.meta_data.FieldMetaData("fn_signatures", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.FN_RET_TYPES, new org.apache.thrift.meta_data.FieldMetaData("fn_ret_types", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TGetFunctionsResult.class, metaDataMap);
  }

  public TGetFunctionsResult() {
  }

  public TGetFunctionsResult(
    List<String> fn_signatures,
    List<String> fn_ret_types)
  {
    this();
    this.fn_signatures = fn_signatures;
    this.fn_ret_types = fn_ret_types;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TGetFunctionsResult(TGetFunctionsResult other) {
    if (other.isSetFn_signatures()) {
      List<String> __this__fn_signatures = new ArrayList<String>();
      for (String other_element : other.fn_signatures) {
        __this__fn_signatures.add(other_element);
      }
      this.fn_signatures = __this__fn_signatures;
    }
    if (other.isSetFn_ret_types()) {
      List<String> __this__fn_ret_types = new ArrayList<String>();
      for (String other_element : other.fn_ret_types) {
        __this__fn_ret_types.add(other_element);
      }
      this.fn_ret_types = __this__fn_ret_types;
    }
  }

  public TGetFunctionsResult deepCopy() {
    return new TGetFunctionsResult(this);
  }

  @Override
  public void clear() {
    this.fn_signatures = null;
    this.fn_ret_types = null;
  }

  public int getFn_signaturesSize() {
    return (this.fn_signatures == null) ? 0 : this.fn_signatures.size();
  }

  public java.util.Iterator<String> getFn_signaturesIterator() {
    return (this.fn_signatures == null) ? null : this.fn_signatures.iterator();
  }

  public void addToFn_signatures(String elem) {
    if (this.fn_signatures == null) {
      this.fn_signatures = new ArrayList<String>();
    }
    this.fn_signatures.add(elem);
  }

  public List<String> getFn_signatures() {
    return this.fn_signatures;
  }

  public TGetFunctionsResult setFn_signatures(List<String> fn_signatures) {
    this.fn_signatures = fn_signatures;
    return this;
  }

  public void unsetFn_signatures() {
    this.fn_signatures = null;
  }

  /** Returns true if field fn_signatures is set (has been assigned a value) and false otherwise */
  public boolean isSetFn_signatures() {
    return this.fn_signatures != null;
  }

  public void setFn_signaturesIsSet(boolean value) {
    if (!value) {
      this.fn_signatures = null;
    }
  }

  public int getFn_ret_typesSize() {
    return (this.fn_ret_types == null) ? 0 : this.fn_ret_types.size();
  }

  public java.util.Iterator<String> getFn_ret_typesIterator() {
    return (this.fn_ret_types == null) ? null : this.fn_ret_types.iterator();
  }

  public void addToFn_ret_types(String elem) {
    if (this.fn_ret_types == null) {
      this.fn_ret_types = new ArrayList<String>();
    }
    this.fn_ret_types.add(elem);
  }

  public List<String> getFn_ret_types() {
    return this.fn_ret_types;
  }

  public TGetFunctionsResult setFn_ret_types(List<String> fn_ret_types) {
    this.fn_ret_types = fn_ret_types;
    return this;
  }

  public void unsetFn_ret_types() {
    this.fn_ret_types = null;
  }

  /** Returns true if field fn_ret_types is set (has been assigned a value) and false otherwise */
  public boolean isSetFn_ret_types() {
    return this.fn_ret_types != null;
  }

  public void setFn_ret_typesIsSet(boolean value) {
    if (!value) {
      this.fn_ret_types = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FN_SIGNATURES:
      if (value == null) {
        unsetFn_signatures();
      } else {
        setFn_signatures((List<String>)value);
      }
      break;

    case FN_RET_TYPES:
      if (value == null) {
        unsetFn_ret_types();
      } else {
        setFn_ret_types((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FN_SIGNATURES:
      return getFn_signatures();

    case FN_RET_TYPES:
      return getFn_ret_types();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FN_SIGNATURES:
      return isSetFn_signatures();
    case FN_RET_TYPES:
      return isSetFn_ret_types();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TGetFunctionsResult)
      return this.equals((TGetFunctionsResult)that);
    return false;
  }

  public boolean equals(TGetFunctionsResult that) {
    if (that == null)
      return false;

    boolean this_present_fn_signatures = true && this.isSetFn_signatures();
    boolean that_present_fn_signatures = true && that.isSetFn_signatures();
    if (this_present_fn_signatures || that_present_fn_signatures) {
      if (!(this_present_fn_signatures && that_present_fn_signatures))
        return false;
      if (!this.fn_signatures.equals(that.fn_signatures))
        return false;
    }

    boolean this_present_fn_ret_types = true && this.isSetFn_ret_types();
    boolean that_present_fn_ret_types = true && that.isSetFn_ret_types();
    if (this_present_fn_ret_types || that_present_fn_ret_types) {
      if (!(this_present_fn_ret_types && that_present_fn_ret_types))
        return false;
      if (!this.fn_ret_types.equals(that.fn_ret_types))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_fn_signatures = true && (isSetFn_signatures());
    builder.append(present_fn_signatures);
    if (present_fn_signatures)
      builder.append(fn_signatures);

    boolean present_fn_ret_types = true && (isSetFn_ret_types());
    builder.append(present_fn_ret_types);
    if (present_fn_ret_types)
      builder.append(fn_ret_types);

    return builder.toHashCode();
  }

  public int compareTo(TGetFunctionsResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TGetFunctionsResult typedOther = (TGetFunctionsResult)other;

    lastComparison = Boolean.valueOf(isSetFn_signatures()).compareTo(typedOther.isSetFn_signatures());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFn_signatures()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fn_signatures, typedOther.fn_signatures);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFn_ret_types()).compareTo(typedOther.isSetFn_ret_types());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFn_ret_types()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fn_ret_types, typedOther.fn_ret_types);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TGetFunctionsResult(");
    boolean first = true;

    sb.append("fn_signatures:");
    if (this.fn_signatures == null) {
      sb.append("null");
    } else {
      sb.append(this.fn_signatures);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fn_ret_types:");
    if (this.fn_ret_types == null) {
      sb.append("null");
    } else {
      sb.append(this.fn_ret_types);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TGetFunctionsResultStandardSchemeFactory implements SchemeFactory {
    public TGetFunctionsResultStandardScheme getScheme() {
      return new TGetFunctionsResultStandardScheme();
    }
  }

  private static class TGetFunctionsResultStandardScheme extends StandardScheme<TGetFunctionsResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TGetFunctionsResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FN_SIGNATURES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                struct.fn_signatures = new ArrayList<String>(_list72.size);
                for (int _i73 = 0; _i73 < _list72.size; ++_i73)
                {
                  String _elem74; // required
                  _elem74 = iprot.readString();
                  struct.fn_signatures.add(_elem74);
                }
                iprot.readListEnd();
              }
              struct.setFn_signaturesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FN_RET_TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list75 = iprot.readListBegin();
                struct.fn_ret_types = new ArrayList<String>(_list75.size);
                for (int _i76 = 0; _i76 < _list75.size; ++_i76)
                {
                  String _elem77; // required
                  _elem77 = iprot.readString();
                  struct.fn_ret_types.add(_elem77);
                }
                iprot.readListEnd();
              }
              struct.setFn_ret_typesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TGetFunctionsResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fn_signatures != null) {
        oprot.writeFieldBegin(FN_SIGNATURES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.fn_signatures.size()));
          for (String _iter78 : struct.fn_signatures)
          {
            oprot.writeString(_iter78);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.fn_ret_types != null) {
        oprot.writeFieldBegin(FN_RET_TYPES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.fn_ret_types.size()));
          for (String _iter79 : struct.fn_ret_types)
          {
            oprot.writeString(_iter79);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TGetFunctionsResultTupleSchemeFactory implements SchemeFactory {
    public TGetFunctionsResultTupleScheme getScheme() {
      return new TGetFunctionsResultTupleScheme();
    }
  }

  private static class TGetFunctionsResultTupleScheme extends TupleScheme<TGetFunctionsResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TGetFunctionsResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFn_signatures()) {
        optionals.set(0);
      }
      if (struct.isSetFn_ret_types()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetFn_signatures()) {
        {
          oprot.writeI32(struct.fn_signatures.size());
          for (String _iter80 : struct.fn_signatures)
          {
            oprot.writeString(_iter80);
          }
        }
      }
      if (struct.isSetFn_ret_types()) {
        {
          oprot.writeI32(struct.fn_ret_types.size());
          for (String _iter81 : struct.fn_ret_types)
          {
            oprot.writeString(_iter81);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TGetFunctionsResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list82 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.fn_signatures = new ArrayList<String>(_list82.size);
          for (int _i83 = 0; _i83 < _list82.size; ++_i83)
          {
            String _elem84; // required
            _elem84 = iprot.readString();
            struct.fn_signatures.add(_elem84);
          }
        }
        struct.setFn_signaturesIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.fn_ret_types = new ArrayList<String>(_list85.size);
          for (int _i86 = 0; _i86 < _list85.size; ++_i86)
          {
            String _elem87; // required
            _elem87 = iprot.readString();
            struct.fn_ret_types.add(_elem87);
          }
        }
        struct.setFn_ret_typesIsSet(true);
      }
    }
  }

}

