/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TExchangeNode implements org.apache.thrift.TBase<TExchangeNode, TExchangeNode._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TExchangeNode");

  private static final org.apache.thrift.protocol.TField INPUT_ROW_TUPLES_FIELD_DESC = new org.apache.thrift.protocol.TField("input_row_tuples", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField SORT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("sort_info", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TExchangeNodeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TExchangeNodeTupleSchemeFactory());
  }

  public List<Integer> input_row_tuples; // required
  public TSortInfo sort_info; // optional
  public long offset; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INPUT_ROW_TUPLES((short)1, "input_row_tuples"),
    SORT_INFO((short)2, "sort_info"),
    OFFSET((short)3, "offset");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INPUT_ROW_TUPLES
          return INPUT_ROW_TUPLES;
        case 2: // SORT_INFO
          return SORT_INFO;
        case 3: // OFFSET
          return OFFSET;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OFFSET_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SORT_INFO,_Fields.OFFSET};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INPUT_ROW_TUPLES, new org.apache.thrift.meta_data.FieldMetaData("input_row_tuples", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TTupleId"))));
    tmpMap.put(_Fields.SORT_INFO, new org.apache.thrift.meta_data.FieldMetaData("sort_info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSortInfo.class)));
    tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TExchangeNode.class, metaDataMap);
  }

  public TExchangeNode() {
  }

  public TExchangeNode(
    List<Integer> input_row_tuples)
  {
    this();
    this.input_row_tuples = input_row_tuples;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TExchangeNode(TExchangeNode other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetInput_row_tuples()) {
      List<Integer> __this__input_row_tuples = new ArrayList<Integer>();
      for (Integer other_element : other.input_row_tuples) {
        __this__input_row_tuples.add(other_element);
      }
      this.input_row_tuples = __this__input_row_tuples;
    }
    if (other.isSetSort_info()) {
      this.sort_info = new TSortInfo(other.sort_info);
    }
    this.offset = other.offset;
  }

  public TExchangeNode deepCopy() {
    return new TExchangeNode(this);
  }

  @Override
  public void clear() {
    this.input_row_tuples = null;
    this.sort_info = null;
    setOffsetIsSet(false);
    this.offset = 0;
  }

  public int getInput_row_tuplesSize() {
    return (this.input_row_tuples == null) ? 0 : this.input_row_tuples.size();
  }

  public java.util.Iterator<Integer> getInput_row_tuplesIterator() {
    return (this.input_row_tuples == null) ? null : this.input_row_tuples.iterator();
  }

  public void addToInput_row_tuples(int elem) {
    if (this.input_row_tuples == null) {
      this.input_row_tuples = new ArrayList<Integer>();
    }
    this.input_row_tuples.add(elem);
  }

  public List<Integer> getInput_row_tuples() {
    return this.input_row_tuples;
  }

  public TExchangeNode setInput_row_tuples(List<Integer> input_row_tuples) {
    this.input_row_tuples = input_row_tuples;
    return this;
  }

  public void unsetInput_row_tuples() {
    this.input_row_tuples = null;
  }

  /** Returns true if field input_row_tuples is set (has been assigned a value) and false otherwise */
  public boolean isSetInput_row_tuples() {
    return this.input_row_tuples != null;
  }

  public void setInput_row_tuplesIsSet(boolean value) {
    if (!value) {
      this.input_row_tuples = null;
    }
  }

  public TSortInfo getSort_info() {
    return this.sort_info;
  }

  public TExchangeNode setSort_info(TSortInfo sort_info) {
    this.sort_info = sort_info;
    return this;
  }

  public void unsetSort_info() {
    this.sort_info = null;
  }

  /** Returns true if field sort_info is set (has been assigned a value) and false otherwise */
  public boolean isSetSort_info() {
    return this.sort_info != null;
  }

  public void setSort_infoIsSet(boolean value) {
    if (!value) {
      this.sort_info = null;
    }
  }

  public long getOffset() {
    return this.offset;
  }

  public TExchangeNode setOffset(long offset) {
    this.offset = offset;
    setOffsetIsSet(true);
    return this;
  }

  public void unsetOffset() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  /** Returns true if field offset is set (has been assigned a value) and false otherwise */
  public boolean isSetOffset() {
    return EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  public void setOffsetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INPUT_ROW_TUPLES:
      if (value == null) {
        unsetInput_row_tuples();
      } else {
        setInput_row_tuples((List<Integer>)value);
      }
      break;

    case SORT_INFO:
      if (value == null) {
        unsetSort_info();
      } else {
        setSort_info((TSortInfo)value);
      }
      break;

    case OFFSET:
      if (value == null) {
        unsetOffset();
      } else {
        setOffset((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INPUT_ROW_TUPLES:
      return getInput_row_tuples();

    case SORT_INFO:
      return getSort_info();

    case OFFSET:
      return Long.valueOf(getOffset());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INPUT_ROW_TUPLES:
      return isSetInput_row_tuples();
    case SORT_INFO:
      return isSetSort_info();
    case OFFSET:
      return isSetOffset();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TExchangeNode)
      return this.equals((TExchangeNode)that);
    return false;
  }

  public boolean equals(TExchangeNode that) {
    if (that == null)
      return false;

    boolean this_present_input_row_tuples = true && this.isSetInput_row_tuples();
    boolean that_present_input_row_tuples = true && that.isSetInput_row_tuples();
    if (this_present_input_row_tuples || that_present_input_row_tuples) {
      if (!(this_present_input_row_tuples && that_present_input_row_tuples))
        return false;
      if (!this.input_row_tuples.equals(that.input_row_tuples))
        return false;
    }

    boolean this_present_sort_info = true && this.isSetSort_info();
    boolean that_present_sort_info = true && that.isSetSort_info();
    if (this_present_sort_info || that_present_sort_info) {
      if (!(this_present_sort_info && that_present_sort_info))
        return false;
      if (!this.sort_info.equals(that.sort_info))
        return false;
    }

    boolean this_present_offset = true && this.isSetOffset();
    boolean that_present_offset = true && that.isSetOffset();
    if (this_present_offset || that_present_offset) {
      if (!(this_present_offset && that_present_offset))
        return false;
      if (this.offset != that.offset)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_input_row_tuples = true && (isSetInput_row_tuples());
    builder.append(present_input_row_tuples);
    if (present_input_row_tuples)
      builder.append(input_row_tuples);

    boolean present_sort_info = true && (isSetSort_info());
    builder.append(present_sort_info);
    if (present_sort_info)
      builder.append(sort_info);

    boolean present_offset = true && (isSetOffset());
    builder.append(present_offset);
    if (present_offset)
      builder.append(offset);

    return builder.toHashCode();
  }

  public int compareTo(TExchangeNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TExchangeNode typedOther = (TExchangeNode)other;

    lastComparison = Boolean.valueOf(isSetInput_row_tuples()).compareTo(typedOther.isSetInput_row_tuples());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInput_row_tuples()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.input_row_tuples, typedOther.input_row_tuples);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSort_info()).compareTo(typedOther.isSetSort_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSort_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sort_info, typedOther.sort_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOffset()).compareTo(typedOther.isSetOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, typedOther.offset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TExchangeNode(");
    boolean first = true;

    sb.append("input_row_tuples:");
    if (this.input_row_tuples == null) {
      sb.append("null");
    } else {
      sb.append(this.input_row_tuples);
    }
    first = false;
    if (isSetSort_info()) {
      if (!first) sb.append(", ");
      sb.append("sort_info:");
      if (this.sort_info == null) {
        sb.append("null");
      } else {
        sb.append(this.sort_info);
      }
      first = false;
    }
    if (isSetOffset()) {
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (input_row_tuples == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'input_row_tuples' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (sort_info != null) {
      sort_info.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TExchangeNodeStandardSchemeFactory implements SchemeFactory {
    public TExchangeNodeStandardScheme getScheme() {
      return new TExchangeNodeStandardScheme();
    }
  }

  private static class TExchangeNodeStandardScheme extends StandardScheme<TExchangeNode> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TExchangeNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INPUT_ROW_TUPLES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list144 = iprot.readListBegin();
                struct.input_row_tuples = new ArrayList<Integer>(_list144.size);
                for (int _i145 = 0; _i145 < _list144.size; ++_i145)
                {
                  int _elem146; // required
                  _elem146 = iprot.readI32();
                  struct.input_row_tuples.add(_elem146);
                }
                iprot.readListEnd();
              }
              struct.setInput_row_tuplesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SORT_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sort_info = new TSortInfo();
              struct.sort_info.read(iprot);
              struct.setSort_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.offset = iprot.readI64();
              struct.setOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TExchangeNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.input_row_tuples != null) {
        oprot.writeFieldBegin(INPUT_ROW_TUPLES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.input_row_tuples.size()));
          for (int _iter147 : struct.input_row_tuples)
          {
            oprot.writeI32(_iter147);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.sort_info != null) {
        if (struct.isSetSort_info()) {
          oprot.writeFieldBegin(SORT_INFO_FIELD_DESC);
          struct.sort_info.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOffset()) {
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI64(struct.offset);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TExchangeNodeTupleSchemeFactory implements SchemeFactory {
    public TExchangeNodeTupleScheme getScheme() {
      return new TExchangeNodeTupleScheme();
    }
  }

  private static class TExchangeNodeTupleScheme extends TupleScheme<TExchangeNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TExchangeNode struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.input_row_tuples.size());
        for (int _iter148 : struct.input_row_tuples)
        {
          oprot.writeI32(_iter148);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetSort_info()) {
        optionals.set(0);
      }
      if (struct.isSetOffset()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetSort_info()) {
        struct.sort_info.write(oprot);
      }
      if (struct.isSetOffset()) {
        oprot.writeI64(struct.offset);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TExchangeNode struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list149 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.input_row_tuples = new ArrayList<Integer>(_list149.size);
        for (int _i150 = 0; _i150 < _list149.size; ++_i150)
        {
          int _elem151; // required
          _elem151 = iprot.readI32();
          struct.input_row_tuples.add(_elem151);
        }
      }
      struct.setInput_row_tuplesIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.sort_info = new TSortInfo();
        struct.sort_info.read(iprot);
        struct.setSort_infoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.offset = iprot.readI64();
        struct.setOffsetIsSet(true);
      }
    }
  }

}

