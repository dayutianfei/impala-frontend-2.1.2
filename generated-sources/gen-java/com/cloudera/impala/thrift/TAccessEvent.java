/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TAccessEvent implements org.apache.thrift.TBase<TAccessEvent, TAccessEvent._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAccessEvent");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField OBJECT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("object_type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PRIVILEGE_FIELD_DESC = new org.apache.thrift.protocol.TField("privilege", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TAccessEventStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TAccessEventTupleSchemeFactory());
  }

  public String name; // required
  /**
   * 
   * @see com.cloudera.impala.thrift.TCatalogObjectType
   */
  public com.cloudera.impala.thrift.TCatalogObjectType object_type; // required
  public String privilege; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    /**
     * 
     * @see com.cloudera.impala.thrift.TCatalogObjectType
     */
    OBJECT_TYPE((short)2, "object_type"),
    PRIVILEGE((short)3, "privilege");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // OBJECT_TYPE
          return OBJECT_TYPE;
        case 3: // PRIVILEGE
          return PRIVILEGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OBJECT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("object_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.cloudera.impala.thrift.TCatalogObjectType.class)));
    tmpMap.put(_Fields.PRIVILEGE, new org.apache.thrift.meta_data.FieldMetaData("privilege", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAccessEvent.class, metaDataMap);
  }

  public TAccessEvent() {
  }

  public TAccessEvent(
    String name,
    com.cloudera.impala.thrift.TCatalogObjectType object_type,
    String privilege)
  {
    this();
    this.name = name;
    this.object_type = object_type;
    this.privilege = privilege;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAccessEvent(TAccessEvent other) {
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetObject_type()) {
      this.object_type = other.object_type;
    }
    if (other.isSetPrivilege()) {
      this.privilege = other.privilege;
    }
  }

  public TAccessEvent deepCopy() {
    return new TAccessEvent(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.object_type = null;
    this.privilege = null;
  }

  public String getName() {
    return this.name;
  }

  public TAccessEvent setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * 
   * @see com.cloudera.impala.thrift.TCatalogObjectType
   */
  public com.cloudera.impala.thrift.TCatalogObjectType getObject_type() {
    return this.object_type;
  }

  /**
   * 
   * @see com.cloudera.impala.thrift.TCatalogObjectType
   */
  public TAccessEvent setObject_type(com.cloudera.impala.thrift.TCatalogObjectType object_type) {
    this.object_type = object_type;
    return this;
  }

  public void unsetObject_type() {
    this.object_type = null;
  }

  /** Returns true if field object_type is set (has been assigned a value) and false otherwise */
  public boolean isSetObject_type() {
    return this.object_type != null;
  }

  public void setObject_typeIsSet(boolean value) {
    if (!value) {
      this.object_type = null;
    }
  }

  public String getPrivilege() {
    return this.privilege;
  }

  public TAccessEvent setPrivilege(String privilege) {
    this.privilege = privilege;
    return this;
  }

  public void unsetPrivilege() {
    this.privilege = null;
  }

  /** Returns true if field privilege is set (has been assigned a value) and false otherwise */
  public boolean isSetPrivilege() {
    return this.privilege != null;
  }

  public void setPrivilegeIsSet(boolean value) {
    if (!value) {
      this.privilege = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case OBJECT_TYPE:
      if (value == null) {
        unsetObject_type();
      } else {
        setObject_type((com.cloudera.impala.thrift.TCatalogObjectType)value);
      }
      break;

    case PRIVILEGE:
      if (value == null) {
        unsetPrivilege();
      } else {
        setPrivilege((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case OBJECT_TYPE:
      return getObject_type();

    case PRIVILEGE:
      return getPrivilege();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case OBJECT_TYPE:
      return isSetObject_type();
    case PRIVILEGE:
      return isSetPrivilege();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TAccessEvent)
      return this.equals((TAccessEvent)that);
    return false;
  }

  public boolean equals(TAccessEvent that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_object_type = true && this.isSetObject_type();
    boolean that_present_object_type = true && that.isSetObject_type();
    if (this_present_object_type || that_present_object_type) {
      if (!(this_present_object_type && that_present_object_type))
        return false;
      if (!this.object_type.equals(that.object_type))
        return false;
    }

    boolean this_present_privilege = true && this.isSetPrivilege();
    boolean that_present_privilege = true && that.isSetPrivilege();
    if (this_present_privilege || that_present_privilege) {
      if (!(this_present_privilege && that_present_privilege))
        return false;
      if (!this.privilege.equals(that.privilege))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_name = true && (isSetName());
    builder.append(present_name);
    if (present_name)
      builder.append(name);

    boolean present_object_type = true && (isSetObject_type());
    builder.append(present_object_type);
    if (present_object_type)
      builder.append(object_type.getValue());

    boolean present_privilege = true && (isSetPrivilege());
    builder.append(present_privilege);
    if (present_privilege)
      builder.append(privilege);

    return builder.toHashCode();
  }

  public int compareTo(TAccessEvent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TAccessEvent typedOther = (TAccessEvent)other;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetObject_type()).compareTo(typedOther.isSetObject_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObject_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.object_type, typedOther.object_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrivilege()).compareTo(typedOther.isSetPrivilege());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrivilege()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privilege, typedOther.privilege);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TAccessEvent(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("object_type:");
    if (this.object_type == null) {
      sb.append("null");
    } else {
      sb.append(this.object_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("privilege:");
    if (this.privilege == null) {
      sb.append("null");
    } else {
      sb.append(this.privilege);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    if (object_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'object_type' was not present! Struct: " + toString());
    }
    if (privilege == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'privilege' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAccessEventStandardSchemeFactory implements SchemeFactory {
    public TAccessEventStandardScheme getScheme() {
      return new TAccessEventStandardScheme();
    }
  }

  private static class TAccessEventStandardScheme extends StandardScheme<TAccessEvent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TAccessEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OBJECT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.object_type = com.cloudera.impala.thrift.TCatalogObjectType.findByValue(iprot.readI32());
              struct.setObject_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRIVILEGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.privilege = iprot.readString();
              struct.setPrivilegeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TAccessEvent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.object_type != null) {
        oprot.writeFieldBegin(OBJECT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.object_type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.privilege != null) {
        oprot.writeFieldBegin(PRIVILEGE_FIELD_DESC);
        oprot.writeString(struct.privilege);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAccessEventTupleSchemeFactory implements SchemeFactory {
    public TAccessEventTupleScheme getScheme() {
      return new TAccessEventTupleScheme();
    }
  }

  private static class TAccessEventTupleScheme extends TupleScheme<TAccessEvent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TAccessEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.name);
      oprot.writeI32(struct.object_type.getValue());
      oprot.writeString(struct.privilege);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TAccessEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.object_type = com.cloudera.impala.thrift.TCatalogObjectType.findByValue(iprot.readI32());
      struct.setObject_typeIsSet(true);
      struct.privilege = iprot.readString();
      struct.setPrivilegeIsSet(true);
    }
  }

}

