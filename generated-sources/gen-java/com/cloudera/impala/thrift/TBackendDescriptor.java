/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TBackendDescriptor implements org.apache.thrift.TBase<TBackendDescriptor, TBackendDescriptor._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TBackendDescriptor");

  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField IP_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("ip_address", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DEBUG_HTTP_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("debug_http_address", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField SECURE_WEBSERVER_FIELD_DESC = new org.apache.thrift.protocol.TField("secure_webserver", org.apache.thrift.protocol.TType.BOOL, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TBackendDescriptorStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TBackendDescriptorTupleSchemeFactory());
  }

  public com.cloudera.impala.thrift.TNetworkAddress address; // required
  public String ip_address; // required
  public com.cloudera.impala.thrift.TNetworkAddress debug_http_address; // optional
  public boolean secure_webserver; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ADDRESS((short)1, "address"),
    IP_ADDRESS((short)2, "ip_address"),
    DEBUG_HTTP_ADDRESS((short)3, "debug_http_address"),
    SECURE_WEBSERVER((short)4, "secure_webserver");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ADDRESS
          return ADDRESS;
        case 2: // IP_ADDRESS
          return IP_ADDRESS;
        case 3: // DEBUG_HTTP_ADDRESS
          return DEBUG_HTTP_ADDRESS;
        case 4: // SECURE_WEBSERVER
          return SECURE_WEBSERVER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SECURE_WEBSERVER_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.DEBUG_HTTP_ADDRESS,_Fields.SECURE_WEBSERVER};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TNetworkAddress.class)));
    tmpMap.put(_Fields.IP_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("ip_address", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEBUG_HTTP_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("debug_http_address", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TNetworkAddress.class)));
    tmpMap.put(_Fields.SECURE_WEBSERVER, new org.apache.thrift.meta_data.FieldMetaData("secure_webserver", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TBackendDescriptor.class, metaDataMap);
  }

  public TBackendDescriptor() {
  }

  public TBackendDescriptor(
    com.cloudera.impala.thrift.TNetworkAddress address,
    String ip_address)
  {
    this();
    this.address = address;
    this.ip_address = ip_address;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TBackendDescriptor(TBackendDescriptor other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAddress()) {
      this.address = new com.cloudera.impala.thrift.TNetworkAddress(other.address);
    }
    if (other.isSetIp_address()) {
      this.ip_address = other.ip_address;
    }
    if (other.isSetDebug_http_address()) {
      this.debug_http_address = new com.cloudera.impala.thrift.TNetworkAddress(other.debug_http_address);
    }
    this.secure_webserver = other.secure_webserver;
  }

  public TBackendDescriptor deepCopy() {
    return new TBackendDescriptor(this);
  }

  @Override
  public void clear() {
    this.address = null;
    this.ip_address = null;
    this.debug_http_address = null;
    setSecure_webserverIsSet(false);
    this.secure_webserver = false;
  }

  public com.cloudera.impala.thrift.TNetworkAddress getAddress() {
    return this.address;
  }

  public TBackendDescriptor setAddress(com.cloudera.impala.thrift.TNetworkAddress address) {
    this.address = address;
    return this;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  public String getIp_address() {
    return this.ip_address;
  }

  public TBackendDescriptor setIp_address(String ip_address) {
    this.ip_address = ip_address;
    return this;
  }

  public void unsetIp_address() {
    this.ip_address = null;
  }

  /** Returns true if field ip_address is set (has been assigned a value) and false otherwise */
  public boolean isSetIp_address() {
    return this.ip_address != null;
  }

  public void setIp_addressIsSet(boolean value) {
    if (!value) {
      this.ip_address = null;
    }
  }

  public com.cloudera.impala.thrift.TNetworkAddress getDebug_http_address() {
    return this.debug_http_address;
  }

  public TBackendDescriptor setDebug_http_address(com.cloudera.impala.thrift.TNetworkAddress debug_http_address) {
    this.debug_http_address = debug_http_address;
    return this;
  }

  public void unsetDebug_http_address() {
    this.debug_http_address = null;
  }

  /** Returns true if field debug_http_address is set (has been assigned a value) and false otherwise */
  public boolean isSetDebug_http_address() {
    return this.debug_http_address != null;
  }

  public void setDebug_http_addressIsSet(boolean value) {
    if (!value) {
      this.debug_http_address = null;
    }
  }

  public boolean isSecure_webserver() {
    return this.secure_webserver;
  }

  public TBackendDescriptor setSecure_webserver(boolean secure_webserver) {
    this.secure_webserver = secure_webserver;
    setSecure_webserverIsSet(true);
    return this;
  }

  public void unsetSecure_webserver() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SECURE_WEBSERVER_ISSET_ID);
  }

  /** Returns true if field secure_webserver is set (has been assigned a value) and false otherwise */
  public boolean isSetSecure_webserver() {
    return EncodingUtils.testBit(__isset_bitfield, __SECURE_WEBSERVER_ISSET_ID);
  }

  public void setSecure_webserverIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SECURE_WEBSERVER_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((com.cloudera.impala.thrift.TNetworkAddress)value);
      }
      break;

    case IP_ADDRESS:
      if (value == null) {
        unsetIp_address();
      } else {
        setIp_address((String)value);
      }
      break;

    case DEBUG_HTTP_ADDRESS:
      if (value == null) {
        unsetDebug_http_address();
      } else {
        setDebug_http_address((com.cloudera.impala.thrift.TNetworkAddress)value);
      }
      break;

    case SECURE_WEBSERVER:
      if (value == null) {
        unsetSecure_webserver();
      } else {
        setSecure_webserver((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ADDRESS:
      return getAddress();

    case IP_ADDRESS:
      return getIp_address();

    case DEBUG_HTTP_ADDRESS:
      return getDebug_http_address();

    case SECURE_WEBSERVER:
      return Boolean.valueOf(isSecure_webserver());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ADDRESS:
      return isSetAddress();
    case IP_ADDRESS:
      return isSetIp_address();
    case DEBUG_HTTP_ADDRESS:
      return isSetDebug_http_address();
    case SECURE_WEBSERVER:
      return isSetSecure_webserver();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TBackendDescriptor)
      return this.equals((TBackendDescriptor)that);
    return false;
  }

  public boolean equals(TBackendDescriptor that) {
    if (that == null)
      return false;

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    boolean this_present_ip_address = true && this.isSetIp_address();
    boolean that_present_ip_address = true && that.isSetIp_address();
    if (this_present_ip_address || that_present_ip_address) {
      if (!(this_present_ip_address && that_present_ip_address))
        return false;
      if (!this.ip_address.equals(that.ip_address))
        return false;
    }

    boolean this_present_debug_http_address = true && this.isSetDebug_http_address();
    boolean that_present_debug_http_address = true && that.isSetDebug_http_address();
    if (this_present_debug_http_address || that_present_debug_http_address) {
      if (!(this_present_debug_http_address && that_present_debug_http_address))
        return false;
      if (!this.debug_http_address.equals(that.debug_http_address))
        return false;
    }

    boolean this_present_secure_webserver = true && this.isSetSecure_webserver();
    boolean that_present_secure_webserver = true && that.isSetSecure_webserver();
    if (this_present_secure_webserver || that_present_secure_webserver) {
      if (!(this_present_secure_webserver && that_present_secure_webserver))
        return false;
      if (this.secure_webserver != that.secure_webserver)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_address = true && (isSetAddress());
    builder.append(present_address);
    if (present_address)
      builder.append(address);

    boolean present_ip_address = true && (isSetIp_address());
    builder.append(present_ip_address);
    if (present_ip_address)
      builder.append(ip_address);

    boolean present_debug_http_address = true && (isSetDebug_http_address());
    builder.append(present_debug_http_address);
    if (present_debug_http_address)
      builder.append(debug_http_address);

    boolean present_secure_webserver = true && (isSetSecure_webserver());
    builder.append(present_secure_webserver);
    if (present_secure_webserver)
      builder.append(secure_webserver);

    return builder.toHashCode();
  }

  public int compareTo(TBackendDescriptor other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TBackendDescriptor typedOther = (TBackendDescriptor)other;

    lastComparison = Boolean.valueOf(isSetAddress()).compareTo(typedOther.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, typedOther.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIp_address()).compareTo(typedOther.isSetIp_address());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIp_address()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip_address, typedOther.ip_address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDebug_http_address()).compareTo(typedOther.isSetDebug_http_address());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebug_http_address()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debug_http_address, typedOther.debug_http_address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSecure_webserver()).compareTo(typedOther.isSetSecure_webserver());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecure_webserver()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secure_webserver, typedOther.secure_webserver);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TBackendDescriptor(");
    boolean first = true;

    sb.append("address:");
    if (this.address == null) {
      sb.append("null");
    } else {
      sb.append(this.address);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ip_address:");
    if (this.ip_address == null) {
      sb.append("null");
    } else {
      sb.append(this.ip_address);
    }
    first = false;
    if (isSetDebug_http_address()) {
      if (!first) sb.append(", ");
      sb.append("debug_http_address:");
      if (this.debug_http_address == null) {
        sb.append("null");
      } else {
        sb.append(this.debug_http_address);
      }
      first = false;
    }
    if (isSetSecure_webserver()) {
      if (!first) sb.append(", ");
      sb.append("secure_webserver:");
      sb.append(this.secure_webserver);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (address == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'address' was not present! Struct: " + toString());
    }
    if (ip_address == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ip_address' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (address != null) {
      address.validate();
    }
    if (debug_http_address != null) {
      debug_http_address.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TBackendDescriptorStandardSchemeFactory implements SchemeFactory {
    public TBackendDescriptorStandardScheme getScheme() {
      return new TBackendDescriptorStandardScheme();
    }
  }

  private static class TBackendDescriptorStandardScheme extends StandardScheme<TBackendDescriptor> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TBackendDescriptor struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.address = new com.cloudera.impala.thrift.TNetworkAddress();
              struct.address.read(iprot);
              struct.setAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IP_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ip_address = iprot.readString();
              struct.setIp_addressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DEBUG_HTTP_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.debug_http_address = new com.cloudera.impala.thrift.TNetworkAddress();
              struct.debug_http_address.read(iprot);
              struct.setDebug_http_addressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SECURE_WEBSERVER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.secure_webserver = iprot.readBool();
              struct.setSecure_webserverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TBackendDescriptor struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.address != null) {
        oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
        struct.address.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.ip_address != null) {
        oprot.writeFieldBegin(IP_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.ip_address);
        oprot.writeFieldEnd();
      }
      if (struct.debug_http_address != null) {
        if (struct.isSetDebug_http_address()) {
          oprot.writeFieldBegin(DEBUG_HTTP_ADDRESS_FIELD_DESC);
          struct.debug_http_address.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSecure_webserver()) {
        oprot.writeFieldBegin(SECURE_WEBSERVER_FIELD_DESC);
        oprot.writeBool(struct.secure_webserver);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TBackendDescriptorTupleSchemeFactory implements SchemeFactory {
    public TBackendDescriptorTupleScheme getScheme() {
      return new TBackendDescriptorTupleScheme();
    }
  }

  private static class TBackendDescriptorTupleScheme extends TupleScheme<TBackendDescriptor> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TBackendDescriptor struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.address.write(oprot);
      oprot.writeString(struct.ip_address);
      BitSet optionals = new BitSet();
      if (struct.isSetDebug_http_address()) {
        optionals.set(0);
      }
      if (struct.isSetSecure_webserver()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetDebug_http_address()) {
        struct.debug_http_address.write(oprot);
      }
      if (struct.isSetSecure_webserver()) {
        oprot.writeBool(struct.secure_webserver);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TBackendDescriptor struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.address = new com.cloudera.impala.thrift.TNetworkAddress();
      struct.address.read(iprot);
      struct.setAddressIsSet(true);
      struct.ip_address = iprot.readString();
      struct.setIp_addressIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.debug_http_address = new com.cloudera.impala.thrift.TNetworkAddress();
        struct.debug_http_address.read(iprot);
        struct.setDebug_http_addressIsSet(true);
      }
      if (incoming.get(1)) {
        struct.secure_webserver = iprot.readBool();
        struct.setSecure_webserverIsSet(true);
      }
    }
  }

}

