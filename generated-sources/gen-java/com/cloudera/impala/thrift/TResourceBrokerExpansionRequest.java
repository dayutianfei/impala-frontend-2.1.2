/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TResourceBrokerExpansionRequest implements org.apache.thrift.TBase<TResourceBrokerExpansionRequest, TResourceBrokerExpansionRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TResourceBrokerExpansionRequest");

  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField RESOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("resource", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField RESERVATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reservation_id", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField REQUEST_TIMEOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("request_timeout", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TResourceBrokerExpansionRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TResourceBrokerExpansionRequestTupleSchemeFactory());
  }

  /**
   * 
   * @see TResourceBrokerServiceVersion
   */
  public TResourceBrokerServiceVersion version; // required
  public com.cloudera.llama.thrift.TResource resource; // optional
  public com.cloudera.impala.thrift.TUniqueId reservation_id; // optional
  public long request_timeout; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TResourceBrokerServiceVersion
     */
    VERSION((short)1, "version"),
    RESOURCE((short)2, "resource"),
    RESERVATION_ID((short)3, "reservation_id"),
    REQUEST_TIMEOUT((short)4, "request_timeout");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERSION
          return VERSION;
        case 2: // RESOURCE
          return RESOURCE;
        case 3: // RESERVATION_ID
          return RESERVATION_ID;
        case 4: // REQUEST_TIMEOUT
          return REQUEST_TIMEOUT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REQUEST_TIMEOUT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.RESOURCE,_Fields.RESERVATION_ID,_Fields.REQUEST_TIMEOUT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TResourceBrokerServiceVersion.class)));
    tmpMap.put(_Fields.RESOURCE, new org.apache.thrift.meta_data.FieldMetaData("resource", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.llama.thrift.TResource.class)));
    tmpMap.put(_Fields.RESERVATION_ID, new org.apache.thrift.meta_data.FieldMetaData("reservation_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TUniqueId.class)));
    tmpMap.put(_Fields.REQUEST_TIMEOUT, new org.apache.thrift.meta_data.FieldMetaData("request_timeout", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TResourceBrokerExpansionRequest.class, metaDataMap);
  }

  public TResourceBrokerExpansionRequest() {
  }

  public TResourceBrokerExpansionRequest(
    TResourceBrokerServiceVersion version)
  {
    this();
    this.version = version;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TResourceBrokerExpansionRequest(TResourceBrokerExpansionRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetVersion()) {
      this.version = other.version;
    }
    if (other.isSetResource()) {
      this.resource = new com.cloudera.llama.thrift.TResource(other.resource);
    }
    if (other.isSetReservation_id()) {
      this.reservation_id = new com.cloudera.impala.thrift.TUniqueId(other.reservation_id);
    }
    this.request_timeout = other.request_timeout;
  }

  public TResourceBrokerExpansionRequest deepCopy() {
    return new TResourceBrokerExpansionRequest(this);
  }

  @Override
  public void clear() {
    this.version = null;
    this.resource = null;
    this.reservation_id = null;
    setRequest_timeoutIsSet(false);
    this.request_timeout = 0;
  }

  /**
   * 
   * @see TResourceBrokerServiceVersion
   */
  public TResourceBrokerServiceVersion getVersion() {
    return this.version;
  }

  /**
   * 
   * @see TResourceBrokerServiceVersion
   */
  public TResourceBrokerExpansionRequest setVersion(TResourceBrokerServiceVersion version) {
    this.version = version;
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  public com.cloudera.llama.thrift.TResource getResource() {
    return this.resource;
  }

  public TResourceBrokerExpansionRequest setResource(com.cloudera.llama.thrift.TResource resource) {
    this.resource = resource;
    return this;
  }

  public void unsetResource() {
    this.resource = null;
  }

  /** Returns true if field resource is set (has been assigned a value) and false otherwise */
  public boolean isSetResource() {
    return this.resource != null;
  }

  public void setResourceIsSet(boolean value) {
    if (!value) {
      this.resource = null;
    }
  }

  public com.cloudera.impala.thrift.TUniqueId getReservation_id() {
    return this.reservation_id;
  }

  public TResourceBrokerExpansionRequest setReservation_id(com.cloudera.impala.thrift.TUniqueId reservation_id) {
    this.reservation_id = reservation_id;
    return this;
  }

  public void unsetReservation_id() {
    this.reservation_id = null;
  }

  /** Returns true if field reservation_id is set (has been assigned a value) and false otherwise */
  public boolean isSetReservation_id() {
    return this.reservation_id != null;
  }

  public void setReservation_idIsSet(boolean value) {
    if (!value) {
      this.reservation_id = null;
    }
  }

  public long getRequest_timeout() {
    return this.request_timeout;
  }

  public TResourceBrokerExpansionRequest setRequest_timeout(long request_timeout) {
    this.request_timeout = request_timeout;
    setRequest_timeoutIsSet(true);
    return this;
  }

  public void unsetRequest_timeout() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUEST_TIMEOUT_ISSET_ID);
  }

  /** Returns true if field request_timeout is set (has been assigned a value) and false otherwise */
  public boolean isSetRequest_timeout() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUEST_TIMEOUT_ISSET_ID);
  }

  public void setRequest_timeoutIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUEST_TIMEOUT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((TResourceBrokerServiceVersion)value);
      }
      break;

    case RESOURCE:
      if (value == null) {
        unsetResource();
      } else {
        setResource((com.cloudera.llama.thrift.TResource)value);
      }
      break;

    case RESERVATION_ID:
      if (value == null) {
        unsetReservation_id();
      } else {
        setReservation_id((com.cloudera.impala.thrift.TUniqueId)value);
      }
      break;

    case REQUEST_TIMEOUT:
      if (value == null) {
        unsetRequest_timeout();
      } else {
        setRequest_timeout((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VERSION:
      return getVersion();

    case RESOURCE:
      return getResource();

    case RESERVATION_ID:
      return getReservation_id();

    case REQUEST_TIMEOUT:
      return Long.valueOf(getRequest_timeout());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VERSION:
      return isSetVersion();
    case RESOURCE:
      return isSetResource();
    case RESERVATION_ID:
      return isSetReservation_id();
    case REQUEST_TIMEOUT:
      return isSetRequest_timeout();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TResourceBrokerExpansionRequest)
      return this.equals((TResourceBrokerExpansionRequest)that);
    return false;
  }

  public boolean equals(TResourceBrokerExpansionRequest that) {
    if (that == null)
      return false;

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }

    boolean this_present_resource = true && this.isSetResource();
    boolean that_present_resource = true && that.isSetResource();
    if (this_present_resource || that_present_resource) {
      if (!(this_present_resource && that_present_resource))
        return false;
      if (!this.resource.equals(that.resource))
        return false;
    }

    boolean this_present_reservation_id = true && this.isSetReservation_id();
    boolean that_present_reservation_id = true && that.isSetReservation_id();
    if (this_present_reservation_id || that_present_reservation_id) {
      if (!(this_present_reservation_id && that_present_reservation_id))
        return false;
      if (!this.reservation_id.equals(that.reservation_id))
        return false;
    }

    boolean this_present_request_timeout = true && this.isSetRequest_timeout();
    boolean that_present_request_timeout = true && that.isSetRequest_timeout();
    if (this_present_request_timeout || that_present_request_timeout) {
      if (!(this_present_request_timeout && that_present_request_timeout))
        return false;
      if (this.request_timeout != that.request_timeout)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_version = true && (isSetVersion());
    builder.append(present_version);
    if (present_version)
      builder.append(version.getValue());

    boolean present_resource = true && (isSetResource());
    builder.append(present_resource);
    if (present_resource)
      builder.append(resource);

    boolean present_reservation_id = true && (isSetReservation_id());
    builder.append(present_reservation_id);
    if (present_reservation_id)
      builder.append(reservation_id);

    boolean present_request_timeout = true && (isSetRequest_timeout());
    builder.append(present_request_timeout);
    if (present_request_timeout)
      builder.append(request_timeout);

    return builder.toHashCode();
  }

  public int compareTo(TResourceBrokerExpansionRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TResourceBrokerExpansionRequest typedOther = (TResourceBrokerExpansionRequest)other;

    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(typedOther.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, typedOther.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResource()).compareTo(typedOther.isSetResource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resource, typedOther.resource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReservation_id()).compareTo(typedOther.isSetReservation_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReservation_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reservation_id, typedOther.reservation_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequest_timeout()).compareTo(typedOther.isSetRequest_timeout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequest_timeout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request_timeout, typedOther.request_timeout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TResourceBrokerExpansionRequest(");
    boolean first = true;

    sb.append("version:");
    if (this.version == null) {
      sb.append("null");
    } else {
      sb.append(this.version);
    }
    first = false;
    if (isSetResource()) {
      if (!first) sb.append(", ");
      sb.append("resource:");
      if (this.resource == null) {
        sb.append("null");
      } else {
        sb.append(this.resource);
      }
      first = false;
    }
    if (isSetReservation_id()) {
      if (!first) sb.append(", ");
      sb.append("reservation_id:");
      if (this.reservation_id == null) {
        sb.append("null");
      } else {
        sb.append(this.reservation_id);
      }
      first = false;
    }
    if (isSetRequest_timeout()) {
      if (!first) sb.append(", ");
      sb.append("request_timeout:");
      sb.append(this.request_timeout);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (version == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'version' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (resource != null) {
      resource.validate();
    }
    if (reservation_id != null) {
      reservation_id.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TResourceBrokerExpansionRequestStandardSchemeFactory implements SchemeFactory {
    public TResourceBrokerExpansionRequestStandardScheme getScheme() {
      return new TResourceBrokerExpansionRequestStandardScheme();
    }
  }

  private static class TResourceBrokerExpansionRequestStandardScheme extends StandardScheme<TResourceBrokerExpansionRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TResourceBrokerExpansionRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version = TResourceBrokerServiceVersion.findByValue(iprot.readI32());
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.resource = new com.cloudera.llama.thrift.TResource();
              struct.resource.read(iprot);
              struct.setResourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RESERVATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.reservation_id = new com.cloudera.impala.thrift.TUniqueId();
              struct.reservation_id.read(iprot);
              struct.setReservation_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REQUEST_TIMEOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.request_timeout = iprot.readI64();
              struct.setRequest_timeoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TResourceBrokerExpansionRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.version != null) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeI32(struct.version.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.resource != null) {
        if (struct.isSetResource()) {
          oprot.writeFieldBegin(RESOURCE_FIELD_DESC);
          struct.resource.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.reservation_id != null) {
        if (struct.isSetReservation_id()) {
          oprot.writeFieldBegin(RESERVATION_ID_FIELD_DESC);
          struct.reservation_id.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRequest_timeout()) {
        oprot.writeFieldBegin(REQUEST_TIMEOUT_FIELD_DESC);
        oprot.writeI64(struct.request_timeout);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TResourceBrokerExpansionRequestTupleSchemeFactory implements SchemeFactory {
    public TResourceBrokerExpansionRequestTupleScheme getScheme() {
      return new TResourceBrokerExpansionRequestTupleScheme();
    }
  }

  private static class TResourceBrokerExpansionRequestTupleScheme extends TupleScheme<TResourceBrokerExpansionRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TResourceBrokerExpansionRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.version.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetResource()) {
        optionals.set(0);
      }
      if (struct.isSetReservation_id()) {
        optionals.set(1);
      }
      if (struct.isSetRequest_timeout()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetResource()) {
        struct.resource.write(oprot);
      }
      if (struct.isSetReservation_id()) {
        struct.reservation_id.write(oprot);
      }
      if (struct.isSetRequest_timeout()) {
        oprot.writeI64(struct.request_timeout);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TResourceBrokerExpansionRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.version = TResourceBrokerServiceVersion.findByValue(iprot.readI32());
      struct.setVersionIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.resource = new com.cloudera.llama.thrift.TResource();
        struct.resource.read(iprot);
        struct.setResourceIsSet(true);
      }
      if (incoming.get(1)) {
        struct.reservation_id = new com.cloudera.impala.thrift.TUniqueId();
        struct.reservation_id.read(iprot);
        struct.setReservation_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.request_timeout = iprot.readI64();
        struct.setRequest_timeoutIsSet(true);
      }
    }
  }

}

