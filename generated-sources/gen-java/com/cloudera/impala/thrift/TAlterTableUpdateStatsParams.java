/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TAlterTableUpdateStatsParams implements org.apache.thrift.TBase<TAlterTableUpdateStatsParams, TAlterTableUpdateStatsParams._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAlterTableUpdateStatsParams");

  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TABLE_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("table_stats", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField PARTITION_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_stats", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField COLUMN_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("column_stats", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField EXPECT_ALL_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("expect_all_partitions", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField IS_INCREMENTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("is_incremental", org.apache.thrift.protocol.TType.BOOL, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TAlterTableUpdateStatsParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TAlterTableUpdateStatsParamsTupleSchemeFactory());
  }

  public com.cloudera.impala.thrift.TTableName table_name; // required
  public com.cloudera.impala.thrift.TTableStats table_stats; // optional
  public Map<List<String>,com.cloudera.impala.thrift.TPartitionStats> partition_stats; // optional
  public Map<String,com.cloudera.impala.thrift.TColumnStats> column_stats; // optional
  public boolean expect_all_partitions; // optional
  public boolean is_incremental; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLE_NAME((short)1, "table_name"),
    TABLE_STATS((short)2, "table_stats"),
    PARTITION_STATS((short)3, "partition_stats"),
    COLUMN_STATS((short)4, "column_stats"),
    EXPECT_ALL_PARTITIONS((short)5, "expect_all_partitions"),
    IS_INCREMENTAL((short)6, "is_incremental");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLE_NAME
          return TABLE_NAME;
        case 2: // TABLE_STATS
          return TABLE_STATS;
        case 3: // PARTITION_STATS
          return PARTITION_STATS;
        case 4: // COLUMN_STATS
          return COLUMN_STATS;
        case 5: // EXPECT_ALL_PARTITIONS
          return EXPECT_ALL_PARTITIONS;
        case 6: // IS_INCREMENTAL
          return IS_INCREMENTAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXPECT_ALL_PARTITIONS_ISSET_ID = 0;
  private static final int __IS_INCREMENTAL_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.TABLE_STATS,_Fields.PARTITION_STATS,_Fields.COLUMN_STATS,_Fields.EXPECT_ALL_PARTITIONS,_Fields.IS_INCREMENTAL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TTableName.class)));
    tmpMap.put(_Fields.TABLE_STATS, new org.apache.thrift.meta_data.FieldMetaData("table_stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TTableStats.class)));
    tmpMap.put(_Fields.PARTITION_STATS, new org.apache.thrift.meta_data.FieldMetaData("partition_stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TPartitionStats.class))));
    tmpMap.put(_Fields.COLUMN_STATS, new org.apache.thrift.meta_data.FieldMetaData("column_stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TColumnStats.class))));
    tmpMap.put(_Fields.EXPECT_ALL_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("expect_all_partitions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_INCREMENTAL, new org.apache.thrift.meta_data.FieldMetaData("is_incremental", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAlterTableUpdateStatsParams.class, metaDataMap);
  }

  public TAlterTableUpdateStatsParams() {
  }

  public TAlterTableUpdateStatsParams(
    com.cloudera.impala.thrift.TTableName table_name)
  {
    this();
    this.table_name = table_name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAlterTableUpdateStatsParams(TAlterTableUpdateStatsParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTable_name()) {
      this.table_name = new com.cloudera.impala.thrift.TTableName(other.table_name);
    }
    if (other.isSetTable_stats()) {
      this.table_stats = new com.cloudera.impala.thrift.TTableStats(other.table_stats);
    }
    if (other.isSetPartition_stats()) {
      Map<List<String>,com.cloudera.impala.thrift.TPartitionStats> __this__partition_stats = new HashMap<List<String>,com.cloudera.impala.thrift.TPartitionStats>();
      for (Map.Entry<List<String>, com.cloudera.impala.thrift.TPartitionStats> other_element : other.partition_stats.entrySet()) {

        List<String> other_element_key = other_element.getKey();
        com.cloudera.impala.thrift.TPartitionStats other_element_value = other_element.getValue();

        List<String> __this__partition_stats_copy_key = new ArrayList<String>();
        for (String other_element_key_element : other_element_key) {
          __this__partition_stats_copy_key.add(other_element_key_element);
        }

        com.cloudera.impala.thrift.TPartitionStats __this__partition_stats_copy_value = new com.cloudera.impala.thrift.TPartitionStats(other_element_value);

        __this__partition_stats.put(__this__partition_stats_copy_key, __this__partition_stats_copy_value);
      }
      this.partition_stats = __this__partition_stats;
    }
    if (other.isSetColumn_stats()) {
      Map<String,com.cloudera.impala.thrift.TColumnStats> __this__column_stats = new HashMap<String,com.cloudera.impala.thrift.TColumnStats>();
      for (Map.Entry<String, com.cloudera.impala.thrift.TColumnStats> other_element : other.column_stats.entrySet()) {

        String other_element_key = other_element.getKey();
        com.cloudera.impala.thrift.TColumnStats other_element_value = other_element.getValue();

        String __this__column_stats_copy_key = other_element_key;

        com.cloudera.impala.thrift.TColumnStats __this__column_stats_copy_value = new com.cloudera.impala.thrift.TColumnStats(other_element_value);

        __this__column_stats.put(__this__column_stats_copy_key, __this__column_stats_copy_value);
      }
      this.column_stats = __this__column_stats;
    }
    this.expect_all_partitions = other.expect_all_partitions;
    this.is_incremental = other.is_incremental;
  }

  public TAlterTableUpdateStatsParams deepCopy() {
    return new TAlterTableUpdateStatsParams(this);
  }

  @Override
  public void clear() {
    this.table_name = null;
    this.table_stats = null;
    this.partition_stats = null;
    this.column_stats = null;
    setExpect_all_partitionsIsSet(false);
    this.expect_all_partitions = false;
    setIs_incrementalIsSet(false);
    this.is_incremental = false;
  }

  public com.cloudera.impala.thrift.TTableName getTable_name() {
    return this.table_name;
  }

  public TAlterTableUpdateStatsParams setTable_name(com.cloudera.impala.thrift.TTableName table_name) {
    this.table_name = table_name;
    return this;
  }

  public void unsetTable_name() {
    this.table_name = null;
  }

  /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_name() {
    return this.table_name != null;
  }

  public void setTable_nameIsSet(boolean value) {
    if (!value) {
      this.table_name = null;
    }
  }

  public com.cloudera.impala.thrift.TTableStats getTable_stats() {
    return this.table_stats;
  }

  public TAlterTableUpdateStatsParams setTable_stats(com.cloudera.impala.thrift.TTableStats table_stats) {
    this.table_stats = table_stats;
    return this;
  }

  public void unsetTable_stats() {
    this.table_stats = null;
  }

  /** Returns true if field table_stats is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_stats() {
    return this.table_stats != null;
  }

  public void setTable_statsIsSet(boolean value) {
    if (!value) {
      this.table_stats = null;
    }
  }

  public int getPartition_statsSize() {
    return (this.partition_stats == null) ? 0 : this.partition_stats.size();
  }

  public void putToPartition_stats(List<String> key, com.cloudera.impala.thrift.TPartitionStats val) {
    if (this.partition_stats == null) {
      this.partition_stats = new HashMap<List<String>,com.cloudera.impala.thrift.TPartitionStats>();
    }
    this.partition_stats.put(key, val);
  }

  public Map<List<String>,com.cloudera.impala.thrift.TPartitionStats> getPartition_stats() {
    return this.partition_stats;
  }

  public TAlterTableUpdateStatsParams setPartition_stats(Map<List<String>,com.cloudera.impala.thrift.TPartitionStats> partition_stats) {
    this.partition_stats = partition_stats;
    return this;
  }

  public void unsetPartition_stats() {
    this.partition_stats = null;
  }

  /** Returns true if field partition_stats is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_stats() {
    return this.partition_stats != null;
  }

  public void setPartition_statsIsSet(boolean value) {
    if (!value) {
      this.partition_stats = null;
    }
  }

  public int getColumn_statsSize() {
    return (this.column_stats == null) ? 0 : this.column_stats.size();
  }

  public void putToColumn_stats(String key, com.cloudera.impala.thrift.TColumnStats val) {
    if (this.column_stats == null) {
      this.column_stats = new HashMap<String,com.cloudera.impala.thrift.TColumnStats>();
    }
    this.column_stats.put(key, val);
  }

  public Map<String,com.cloudera.impala.thrift.TColumnStats> getColumn_stats() {
    return this.column_stats;
  }

  public TAlterTableUpdateStatsParams setColumn_stats(Map<String,com.cloudera.impala.thrift.TColumnStats> column_stats) {
    this.column_stats = column_stats;
    return this;
  }

  public void unsetColumn_stats() {
    this.column_stats = null;
  }

  /** Returns true if field column_stats is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_stats() {
    return this.column_stats != null;
  }

  public void setColumn_statsIsSet(boolean value) {
    if (!value) {
      this.column_stats = null;
    }
  }

  public boolean isExpect_all_partitions() {
    return this.expect_all_partitions;
  }

  public TAlterTableUpdateStatsParams setExpect_all_partitions(boolean expect_all_partitions) {
    this.expect_all_partitions = expect_all_partitions;
    setExpect_all_partitionsIsSet(true);
    return this;
  }

  public void unsetExpect_all_partitions() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPECT_ALL_PARTITIONS_ISSET_ID);
  }

  /** Returns true if field expect_all_partitions is set (has been assigned a value) and false otherwise */
  public boolean isSetExpect_all_partitions() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPECT_ALL_PARTITIONS_ISSET_ID);
  }

  public void setExpect_all_partitionsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPECT_ALL_PARTITIONS_ISSET_ID, value);
  }

  public boolean isIs_incremental() {
    return this.is_incremental;
  }

  public TAlterTableUpdateStatsParams setIs_incremental(boolean is_incremental) {
    this.is_incremental = is_incremental;
    setIs_incrementalIsSet(true);
    return this;
  }

  public void unsetIs_incremental() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_INCREMENTAL_ISSET_ID);
  }

  /** Returns true if field is_incremental is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_incremental() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_INCREMENTAL_ISSET_ID);
  }

  public void setIs_incrementalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_INCREMENTAL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TABLE_NAME:
      if (value == null) {
        unsetTable_name();
      } else {
        setTable_name((com.cloudera.impala.thrift.TTableName)value);
      }
      break;

    case TABLE_STATS:
      if (value == null) {
        unsetTable_stats();
      } else {
        setTable_stats((com.cloudera.impala.thrift.TTableStats)value);
      }
      break;

    case PARTITION_STATS:
      if (value == null) {
        unsetPartition_stats();
      } else {
        setPartition_stats((Map<List<String>,com.cloudera.impala.thrift.TPartitionStats>)value);
      }
      break;

    case COLUMN_STATS:
      if (value == null) {
        unsetColumn_stats();
      } else {
        setColumn_stats((Map<String,com.cloudera.impala.thrift.TColumnStats>)value);
      }
      break;

    case EXPECT_ALL_PARTITIONS:
      if (value == null) {
        unsetExpect_all_partitions();
      } else {
        setExpect_all_partitions((Boolean)value);
      }
      break;

    case IS_INCREMENTAL:
      if (value == null) {
        unsetIs_incremental();
      } else {
        setIs_incremental((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLE_NAME:
      return getTable_name();

    case TABLE_STATS:
      return getTable_stats();

    case PARTITION_STATS:
      return getPartition_stats();

    case COLUMN_STATS:
      return getColumn_stats();

    case EXPECT_ALL_PARTITIONS:
      return Boolean.valueOf(isExpect_all_partitions());

    case IS_INCREMENTAL:
      return Boolean.valueOf(isIs_incremental());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TABLE_NAME:
      return isSetTable_name();
    case TABLE_STATS:
      return isSetTable_stats();
    case PARTITION_STATS:
      return isSetPartition_stats();
    case COLUMN_STATS:
      return isSetColumn_stats();
    case EXPECT_ALL_PARTITIONS:
      return isSetExpect_all_partitions();
    case IS_INCREMENTAL:
      return isSetIs_incremental();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TAlterTableUpdateStatsParams)
      return this.equals((TAlterTableUpdateStatsParams)that);
    return false;
  }

  public boolean equals(TAlterTableUpdateStatsParams that) {
    if (that == null)
      return false;

    boolean this_present_table_name = true && this.isSetTable_name();
    boolean that_present_table_name = true && that.isSetTable_name();
    if (this_present_table_name || that_present_table_name) {
      if (!(this_present_table_name && that_present_table_name))
        return false;
      if (!this.table_name.equals(that.table_name))
        return false;
    }

    boolean this_present_table_stats = true && this.isSetTable_stats();
    boolean that_present_table_stats = true && that.isSetTable_stats();
    if (this_present_table_stats || that_present_table_stats) {
      if (!(this_present_table_stats && that_present_table_stats))
        return false;
      if (!this.table_stats.equals(that.table_stats))
        return false;
    }

    boolean this_present_partition_stats = true && this.isSetPartition_stats();
    boolean that_present_partition_stats = true && that.isSetPartition_stats();
    if (this_present_partition_stats || that_present_partition_stats) {
      if (!(this_present_partition_stats && that_present_partition_stats))
        return false;
      if (!this.partition_stats.equals(that.partition_stats))
        return false;
    }

    boolean this_present_column_stats = true && this.isSetColumn_stats();
    boolean that_present_column_stats = true && that.isSetColumn_stats();
    if (this_present_column_stats || that_present_column_stats) {
      if (!(this_present_column_stats && that_present_column_stats))
        return false;
      if (!this.column_stats.equals(that.column_stats))
        return false;
    }

    boolean this_present_expect_all_partitions = true && this.isSetExpect_all_partitions();
    boolean that_present_expect_all_partitions = true && that.isSetExpect_all_partitions();
    if (this_present_expect_all_partitions || that_present_expect_all_partitions) {
      if (!(this_present_expect_all_partitions && that_present_expect_all_partitions))
        return false;
      if (this.expect_all_partitions != that.expect_all_partitions)
        return false;
    }

    boolean this_present_is_incremental = true && this.isSetIs_incremental();
    boolean that_present_is_incremental = true && that.isSetIs_incremental();
    if (this_present_is_incremental || that_present_is_incremental) {
      if (!(this_present_is_incremental && that_present_is_incremental))
        return false;
      if (this.is_incremental != that.is_incremental)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_table_name = true && (isSetTable_name());
    builder.append(present_table_name);
    if (present_table_name)
      builder.append(table_name);

    boolean present_table_stats = true && (isSetTable_stats());
    builder.append(present_table_stats);
    if (present_table_stats)
      builder.append(table_stats);

    boolean present_partition_stats = true && (isSetPartition_stats());
    builder.append(present_partition_stats);
    if (present_partition_stats)
      builder.append(partition_stats);

    boolean present_column_stats = true && (isSetColumn_stats());
    builder.append(present_column_stats);
    if (present_column_stats)
      builder.append(column_stats);

    boolean present_expect_all_partitions = true && (isSetExpect_all_partitions());
    builder.append(present_expect_all_partitions);
    if (present_expect_all_partitions)
      builder.append(expect_all_partitions);

    boolean present_is_incremental = true && (isSetIs_incremental());
    builder.append(present_is_incremental);
    if (present_is_incremental)
      builder.append(is_incremental);

    return builder.toHashCode();
  }

  public int compareTo(TAlterTableUpdateStatsParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TAlterTableUpdateStatsParams typedOther = (TAlterTableUpdateStatsParams)other;

    lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTable_stats()).compareTo(typedOther.isSetTable_stats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_stats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_stats, typedOther.table_stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartition_stats()).compareTo(typedOther.isSetPartition_stats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_stats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_stats, typedOther.partition_stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumn_stats()).compareTo(typedOther.isSetColumn_stats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_stats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_stats, typedOther.column_stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpect_all_partitions()).compareTo(typedOther.isSetExpect_all_partitions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpect_all_partitions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expect_all_partitions, typedOther.expect_all_partitions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_incremental()).compareTo(typedOther.isSetIs_incremental());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_incremental()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_incremental, typedOther.is_incremental);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TAlterTableUpdateStatsParams(");
    boolean first = true;

    sb.append("table_name:");
    if (this.table_name == null) {
      sb.append("null");
    } else {
      sb.append(this.table_name);
    }
    first = false;
    if (isSetTable_stats()) {
      if (!first) sb.append(", ");
      sb.append("table_stats:");
      if (this.table_stats == null) {
        sb.append("null");
      } else {
        sb.append(this.table_stats);
      }
      first = false;
    }
    if (isSetPartition_stats()) {
      if (!first) sb.append(", ");
      sb.append("partition_stats:");
      if (this.partition_stats == null) {
        sb.append("null");
      } else {
        sb.append(this.partition_stats);
      }
      first = false;
    }
    if (isSetColumn_stats()) {
      if (!first) sb.append(", ");
      sb.append("column_stats:");
      if (this.column_stats == null) {
        sb.append("null");
      } else {
        sb.append(this.column_stats);
      }
      first = false;
    }
    if (isSetExpect_all_partitions()) {
      if (!first) sb.append(", ");
      sb.append("expect_all_partitions:");
      sb.append(this.expect_all_partitions);
      first = false;
    }
    if (isSetIs_incremental()) {
      if (!first) sb.append(", ");
      sb.append("is_incremental:");
      sb.append(this.is_incremental);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (table_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'table_name' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (table_name != null) {
      table_name.validate();
    }
    if (table_stats != null) {
      table_stats.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAlterTableUpdateStatsParamsStandardSchemeFactory implements SchemeFactory {
    public TAlterTableUpdateStatsParamsStandardScheme getScheme() {
      return new TAlterTableUpdateStatsParamsStandardScheme();
    }
  }

  private static class TAlterTableUpdateStatsParamsStandardScheme extends StandardScheme<TAlterTableUpdateStatsParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TAlterTableUpdateStatsParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.table_name = new com.cloudera.impala.thrift.TTableName();
              struct.table_name.read(iprot);
              struct.setTable_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TABLE_STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.table_stats = new com.cloudera.impala.thrift.TTableStats();
              struct.table_stats.read(iprot);
              struct.setTable_statsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARTITION_STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map66 = iprot.readMapBegin();
                struct.partition_stats = new HashMap<List<String>,com.cloudera.impala.thrift.TPartitionStats>(2*_map66.size);
                for (int _i67 = 0; _i67 < _map66.size; ++_i67)
                {
                  List<String> _key68; // required
                  com.cloudera.impala.thrift.TPartitionStats _val69; // required
                  {
                    org.apache.thrift.protocol.TList _list70 = iprot.readListBegin();
                    _key68 = new ArrayList<String>(_list70.size);
                    for (int _i71 = 0; _i71 < _list70.size; ++_i71)
                    {
                      String _elem72; // required
                      _elem72 = iprot.readString();
                      _key68.add(_elem72);
                    }
                    iprot.readListEnd();
                  }
                  _val69 = new com.cloudera.impala.thrift.TPartitionStats();
                  _val69.read(iprot);
                  struct.partition_stats.put(_key68, _val69);
                }
                iprot.readMapEnd();
              }
              struct.setPartition_statsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COLUMN_STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map73 = iprot.readMapBegin();
                struct.column_stats = new HashMap<String,com.cloudera.impala.thrift.TColumnStats>(2*_map73.size);
                for (int _i74 = 0; _i74 < _map73.size; ++_i74)
                {
                  String _key75; // required
                  com.cloudera.impala.thrift.TColumnStats _val76; // required
                  _key75 = iprot.readString();
                  _val76 = new com.cloudera.impala.thrift.TColumnStats();
                  _val76.read(iprot);
                  struct.column_stats.put(_key75, _val76);
                }
                iprot.readMapEnd();
              }
              struct.setColumn_statsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXPECT_ALL_PARTITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.expect_all_partitions = iprot.readBool();
              struct.setExpect_all_partitionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IS_INCREMENTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_incremental = iprot.readBool();
              struct.setIs_incrementalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TAlterTableUpdateStatsParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        struct.table_name.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.table_stats != null) {
        if (struct.isSetTable_stats()) {
          oprot.writeFieldBegin(TABLE_STATS_FIELD_DESC);
          struct.table_stats.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.partition_stats != null) {
        if (struct.isSetPartition_stats()) {
          oprot.writeFieldBegin(PARTITION_STATS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.STRUCT, struct.partition_stats.size()));
            for (Map.Entry<List<String>, com.cloudera.impala.thrift.TPartitionStats> _iter77 : struct.partition_stats.entrySet())
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter77.getKey().size()));
                for (String _iter78 : _iter77.getKey())
                {
                  oprot.writeString(_iter78);
                }
                oprot.writeListEnd();
              }
              _iter77.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.column_stats != null) {
        if (struct.isSetColumn_stats()) {
          oprot.writeFieldBegin(COLUMN_STATS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.column_stats.size()));
            for (Map.Entry<String, com.cloudera.impala.thrift.TColumnStats> _iter79 : struct.column_stats.entrySet())
            {
              oprot.writeString(_iter79.getKey());
              _iter79.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetExpect_all_partitions()) {
        oprot.writeFieldBegin(EXPECT_ALL_PARTITIONS_FIELD_DESC);
        oprot.writeBool(struct.expect_all_partitions);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIs_incremental()) {
        oprot.writeFieldBegin(IS_INCREMENTAL_FIELD_DESC);
        oprot.writeBool(struct.is_incremental);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAlterTableUpdateStatsParamsTupleSchemeFactory implements SchemeFactory {
    public TAlterTableUpdateStatsParamsTupleScheme getScheme() {
      return new TAlterTableUpdateStatsParamsTupleScheme();
    }
  }

  private static class TAlterTableUpdateStatsParamsTupleScheme extends TupleScheme<TAlterTableUpdateStatsParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TAlterTableUpdateStatsParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.table_name.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetTable_stats()) {
        optionals.set(0);
      }
      if (struct.isSetPartition_stats()) {
        optionals.set(1);
      }
      if (struct.isSetColumn_stats()) {
        optionals.set(2);
      }
      if (struct.isSetExpect_all_partitions()) {
        optionals.set(3);
      }
      if (struct.isSetIs_incremental()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetTable_stats()) {
        struct.table_stats.write(oprot);
      }
      if (struct.isSetPartition_stats()) {
        {
          oprot.writeI32(struct.partition_stats.size());
          for (Map.Entry<List<String>, com.cloudera.impala.thrift.TPartitionStats> _iter80 : struct.partition_stats.entrySet())
          {
            {
              oprot.writeI32(_iter80.getKey().size());
              for (String _iter81 : _iter80.getKey())
              {
                oprot.writeString(_iter81);
              }
            }
            _iter80.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetColumn_stats()) {
        {
          oprot.writeI32(struct.column_stats.size());
          for (Map.Entry<String, com.cloudera.impala.thrift.TColumnStats> _iter82 : struct.column_stats.entrySet())
          {
            oprot.writeString(_iter82.getKey());
            _iter82.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetExpect_all_partitions()) {
        oprot.writeBool(struct.expect_all_partitions);
      }
      if (struct.isSetIs_incremental()) {
        oprot.writeBool(struct.is_incremental);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TAlterTableUpdateStatsParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.table_name = new com.cloudera.impala.thrift.TTableName();
      struct.table_name.read(iprot);
      struct.setTable_nameIsSet(true);
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.table_stats = new com.cloudera.impala.thrift.TTableStats();
        struct.table_stats.read(iprot);
        struct.setTable_statsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map83 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.partition_stats = new HashMap<List<String>,com.cloudera.impala.thrift.TPartitionStats>(2*_map83.size);
          for (int _i84 = 0; _i84 < _map83.size; ++_i84)
          {
            List<String> _key85; // required
            com.cloudera.impala.thrift.TPartitionStats _val86; // required
            {
              org.apache.thrift.protocol.TList _list87 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _key85 = new ArrayList<String>(_list87.size);
              for (int _i88 = 0; _i88 < _list87.size; ++_i88)
              {
                String _elem89; // required
                _elem89 = iprot.readString();
                _key85.add(_elem89);
              }
            }
            _val86 = new com.cloudera.impala.thrift.TPartitionStats();
            _val86.read(iprot);
            struct.partition_stats.put(_key85, _val86);
          }
        }
        struct.setPartition_statsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map90 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.column_stats = new HashMap<String,com.cloudera.impala.thrift.TColumnStats>(2*_map90.size);
          for (int _i91 = 0; _i91 < _map90.size; ++_i91)
          {
            String _key92; // required
            com.cloudera.impala.thrift.TColumnStats _val93; // required
            _key92 = iprot.readString();
            _val93 = new com.cloudera.impala.thrift.TColumnStats();
            _val93.read(iprot);
            struct.column_stats.put(_key92, _val93);
          }
        }
        struct.setColumn_statsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.expect_all_partitions = iprot.readBool();
        struct.setExpect_all_partitionsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.is_incremental = iprot.readBool();
        struct.setIs_incrementalIsSet(true);
      }
    }
  }

}

