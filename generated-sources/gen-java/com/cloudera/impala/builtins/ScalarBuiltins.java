//  Copyright 2012 Cloudera Inc.
// 
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
// 
//  http://www.apache.org/licenses/LICENSE-2.0
// 
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

// This is a generated file, DO NOT EDIT.
// To add new functions, see the generator at
// common/function-registry/gen_builtins_catalog.py or the function list at
// common/function-registry/impala_functions.py.

package com.cloudera.impala.builtins;

import com.cloudera.impala.catalog.Type;
import com.cloudera.impala.catalog.Db;

public class ScalarBuiltins { 
  public static void initBuiltins(Db db) { 
    db.addScalarBuiltin("udf_pi", "impala::UdfBuiltins::Pi", false, Type.DOUBLE);
    db.addScalarBuiltin("udf_abs", "impala::UdfBuiltins::Abs", false, Type.DOUBLE, Type.DOUBLE);
    db.addScalarBuiltin("udf_lower", "impala::UdfBuiltins::Lower", false, Type.STRING, Type.STRING);
    db.addScalarBuiltin("max_int", "_ZN6impala11UdfBuiltins6MaxIntEPN10impala_udf15FunctionContextE", false, Type.INT);
    db.addScalarBuiltin("max_tinyint", "_ZN6impala11UdfBuiltins10MaxTinyIntEPN10impala_udf15FunctionContextE", false, Type.TINYINT);
    db.addScalarBuiltin("max_smallint", "_ZN6impala11UdfBuiltins11MaxSmallIntEPN10impala_udf15FunctionContextE", false, Type.SMALLINT);
    db.addScalarBuiltin("max_bigint", "_ZN6impala11UdfBuiltins9MaxBigIntEPN10impala_udf15FunctionContextE", false, Type.BIGINT);
    db.addScalarBuiltin("min_int", "_ZN6impala11UdfBuiltins6MinIntEPN10impala_udf15FunctionContextE", false, Type.INT);
    db.addScalarBuiltin("min_tinyint", "_ZN6impala11UdfBuiltins10MinTinyIntEPN10impala_udf15FunctionContextE", false, Type.TINYINT);
    db.addScalarBuiltin("min_smallint", "_ZN6impala11UdfBuiltins11MinSmallIntEPN10impala_udf15FunctionContextE", false, Type.SMALLINT);
    db.addScalarBuiltin("min_bigint", "_ZN6impala11UdfBuiltins9MinBigIntEPN10impala_udf15FunctionContextE", false, Type.BIGINT);
    db.addScalarBuiltin("is_nan", "_ZN6impala11UdfBuiltins5IsNanEPN10impala_udf15FunctionContextERKNS1_9DoubleValE", false, Type.BOOLEAN, Type.DOUBLE);
    db.addScalarBuiltin("is_inf", "_ZN6impala11UdfBuiltins5IsInfEPN10impala_udf15FunctionContextERKNS1_9DoubleValE", false, Type.BOOLEAN, Type.DOUBLE);
    db.addScalarBuiltin("trunc", "_ZN6impala11UdfBuiltins5TruncEPN10impala_udf15FunctionContextERKNS1_12TimestampValERKNS1_9StringValE", "_ZN6impala11UdfBuiltins12TruncPrepareEPN10impala_udf15FunctionContextENS2_18FunctionStateScopeE", "_ZN6impala11UdfBuiltins10TruncCloseEPN10impala_udf15FunctionContextENS2_18FunctionStateScopeE", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.STRING);
    db.addScalarBuiltin("extract", "_ZN6impala11UdfBuiltins7ExtractEPN10impala_udf15FunctionContextERKNS1_12TimestampValERKNS1_9StringValE", "_ZN6impala11UdfBuiltins21SwappedExtractPrepareEPN10impala_udf15FunctionContextENS2_18FunctionStateScopeE", "_ZN6impala11UdfBuiltins12ExtractCloseEPN10impala_udf15FunctionContextENS2_18FunctionStateScopeE", false, Type.INT, Type.TIMESTAMP, Type.STRING);
    db.addScalarBuiltin("date_part", "_ZN6impala11UdfBuiltins7ExtractEPN10impala_udf15FunctionContextERKNS1_9StringValERKNS1_12TimestampValE", "_ZN6impala11UdfBuiltins14ExtractPrepareEPN10impala_udf15FunctionContextENS2_18FunctionStateScopeE", "_ZN6impala11UdfBuiltins12ExtractCloseEPN10impala_udf15FunctionContextENS2_18FunctionStateScopeE", false, Type.INT, Type.STRING, Type.TIMESTAMP);
    db.addScalarBuiltin("madlib_encode_vector", "_ZN6impala11UdfBuiltins12EncodeVectorEPN10impala_udf15FunctionContextERKNS1_9StringValE", false, Type.STRING, Type.STRING);
    db.addScalarBuiltin("madlib_decode_vector", "_ZN6impala11UdfBuiltins12DecodeVectorEPN10impala_udf15FunctionContextERKNS1_9StringValE", false, Type.STRING, Type.STRING);
    db.addScalarBuiltin("madlib_print_vector", "_ZN6impala11UdfBuiltins11PrintVectorEPN10impala_udf15FunctionContextERKNS1_9StringValE", false, Type.STRING, Type.STRING);
    db.addScalarBuiltin("madlib_vector", "_ZN6impala11UdfBuiltins8ToVectorEPN10impala_udf15FunctionContextEiPKNS1_9DoubleValE", true, Type.STRING, Type.DOUBLE);
    db.addScalarBuiltin("madlib_vector_get", "_ZN6impala11UdfBuiltins9VectorGetEPN10impala_udf15FunctionContextERKNS1_9BigIntValERKNS1_9StringValE", false, Type.DOUBLE, Type.BIGINT, Type.STRING);
    db.addScalarBuiltin("unix_timestamp", "_ZN6impala18TimestampFunctions14UnixFromStringEPN10impala_udf15FunctionContextERKNS1_9StringValE", false, Type.INT, Type.STRING);
    db.addScalarBuiltin("year", "_ZN6impala18TimestampFunctions4YearEPN10impala_udf15FunctionContextERKNS1_12TimestampValE", false, Type.INT, Type.TIMESTAMP);
    db.addScalarBuiltin("month", "_ZN6impala18TimestampFunctions5MonthEPN10impala_udf15FunctionContextERKNS1_12TimestampValE", false, Type.INT, Type.TIMESTAMP);
    db.addScalarBuiltin("dayofweek", "_ZN6impala18TimestampFunctions9DayOfWeekEPN10impala_udf15FunctionContextERKNS1_12TimestampValE", false, Type.INT, Type.TIMESTAMP);
    db.addScalarBuiltin("day", "_ZN6impala18TimestampFunctions10DayOfMonthEPN10impala_udf15FunctionContextERKNS1_12TimestampValE", false, Type.INT, Type.TIMESTAMP);
    db.addScalarBuiltin("dayofmonth", "_ZN6impala18TimestampFunctions10DayOfMonthEPN10impala_udf15FunctionContextERKNS1_12TimestampValE", false, Type.INT, Type.TIMESTAMP);
    db.addScalarBuiltin("dayofyear", "_ZN6impala18TimestampFunctions9DayOfYearEPN10impala_udf15FunctionContextERKNS1_12TimestampValE", false, Type.INT, Type.TIMESTAMP);
    db.addScalarBuiltin("weekofyear", "_ZN6impala18TimestampFunctions10WeekOfYearEPN10impala_udf15FunctionContextERKNS1_12TimestampValE", false, Type.INT, Type.TIMESTAMP);
    db.addScalarBuiltin("hour", "_ZN6impala18TimestampFunctions4HourEPN10impala_udf15FunctionContextERKNS1_12TimestampValE", false, Type.INT, Type.TIMESTAMP);
    db.addScalarBuiltin("minute", "_ZN6impala18TimestampFunctions6MinuteEPN10impala_udf15FunctionContextERKNS1_12TimestampValE", false, Type.INT, Type.TIMESTAMP);
    db.addScalarBuiltin("second", "_ZN6impala18TimestampFunctions6SecondEPN10impala_udf15FunctionContextERKNS1_12TimestampValE", false, Type.INT, Type.TIMESTAMP);
    db.addScalarBuiltin("to_date", "_ZN6impala18TimestampFunctions6ToDateEPN10impala_udf15FunctionContextERKNS1_12TimestampValE", false, Type.STRING, Type.TIMESTAMP);
    db.addScalarBuiltin("dayname", "_ZN6impala18TimestampFunctions7DayNameEPN10impala_udf15FunctionContextERKNS1_12TimestampValE", false, Type.STRING, Type.TIMESTAMP);
    db.addScalarBuiltin("years_add", "_ZN6impala18TimestampFunctions10DateAddSubILb1EN10impala_udf6IntValEN5boost9date_time14years_durationINS4_9gregorian21greg_durations_configEEEEENS2_12TimestampValEPNS2_15FunctionContextERKSA_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.INT);
    db.addScalarBuiltin("years_add", "_ZN6impala18TimestampFunctions10DateAddSubILb1EN10impala_udf9BigIntValEN5boost9date_time14years_durationINS4_9gregorian21greg_durations_configEEEEENS2_12TimestampValEPNS2_15FunctionContextERKSA_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.BIGINT);
    db.addScalarBuiltin("years_sub", "_ZN6impala18TimestampFunctions10DateAddSubILb0EN10impala_udf6IntValEN5boost9date_time14years_durationINS4_9gregorian21greg_durations_configEEEEENS2_12TimestampValEPNS2_15FunctionContextERKSA_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.INT);
    db.addScalarBuiltin("years_sub", "_ZN6impala18TimestampFunctions10DateAddSubILb0EN10impala_udf9BigIntValEN5boost9date_time14years_durationINS4_9gregorian21greg_durations_configEEEEENS2_12TimestampValEPNS2_15FunctionContextERKSA_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.BIGINT);
    db.addScalarBuiltin("months_add", "_ZN6impala18TimestampFunctions10DateAddSubILb1EN10impala_udf6IntValEN5boost9date_time15months_durationINS4_9gregorian21greg_durations_configEEEEENS2_12TimestampValEPNS2_15FunctionContextERKSA_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.INT);
    db.addScalarBuiltin("add_months", "_ZN6impala18TimestampFunctions10DateAddSubILb1EN10impala_udf6IntValEN5boost9date_time15months_durationINS4_9gregorian21greg_durations_configEEEEENS2_12TimestampValEPNS2_15FunctionContextERKSA_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.INT);
    db.addScalarBuiltin("months_add", "_ZN6impala18TimestampFunctions10DateAddSubILb1EN10impala_udf9BigIntValEN5boost9date_time15months_durationINS4_9gregorian21greg_durations_configEEEEENS2_12TimestampValEPNS2_15FunctionContextERKSA_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.BIGINT);
    db.addScalarBuiltin("add_months", "_ZN6impala18TimestampFunctions10DateAddSubILb1EN10impala_udf9BigIntValEN5boost9date_time15months_durationINS4_9gregorian21greg_durations_configEEEEENS2_12TimestampValEPNS2_15FunctionContextERKSA_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.BIGINT);
    db.addScalarBuiltin("months_sub", "_ZN6impala18TimestampFunctions10DateAddSubILb0EN10impala_udf6IntValEN5boost9date_time15months_durationINS4_9gregorian21greg_durations_configEEEEENS2_12TimestampValEPNS2_15FunctionContextERKSA_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.INT);
    db.addScalarBuiltin("months_sub", "_ZN6impala18TimestampFunctions10DateAddSubILb0EN10impala_udf9BigIntValEN5boost9date_time15months_durationINS4_9gregorian21greg_durations_configEEEEENS2_12TimestampValEPNS2_15FunctionContextERKSA_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.BIGINT);
    db.addScalarBuiltin("weeks_add", "_ZN6impala18TimestampFunctions10DateAddSubILb1EN10impala_udf6IntValEN5boost9gregorian14weeks_durationEEENS2_12TimestampValEPNS2_15FunctionContextERKS7_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.INT);
    db.addScalarBuiltin("weeks_add", "_ZN6impala18TimestampFunctions10DateAddSubILb1EN10impala_udf9BigIntValEN5boost9gregorian14weeks_durationEEENS2_12TimestampValEPNS2_15FunctionContextERKS7_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.BIGINT);
    db.addScalarBuiltin("weeks_sub", "_ZN6impala18TimestampFunctions10DateAddSubILb0EN10impala_udf6IntValEN5boost9gregorian14weeks_durationEEENS2_12TimestampValEPNS2_15FunctionContextERKS7_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.INT);
    db.addScalarBuiltin("weeks_sub", "_ZN6impala18TimestampFunctions10DateAddSubILb0EN10impala_udf9BigIntValEN5boost9gregorian14weeks_durationEEENS2_12TimestampValEPNS2_15FunctionContextERKS7_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.BIGINT);
    db.addScalarBuiltin("days_add", "_ZN6impala18TimestampFunctions10DateAddSubILb1EN10impala_udf6IntValEN5boost9gregorian13date_durationEEENS2_12TimestampValEPNS2_15FunctionContextERKS7_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.INT);
    db.addScalarBuiltin("date_add", "_ZN6impala18TimestampFunctions10DateAddSubILb1EN10impala_udf6IntValEN5boost9gregorian13date_durationEEENS2_12TimestampValEPNS2_15FunctionContextERKS7_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.INT);
    db.addScalarBuiltin("adddate", "_ZN6impala18TimestampFunctions10DateAddSubILb1EN10impala_udf6IntValEN5boost9gregorian13date_durationEEENS2_12TimestampValEPNS2_15FunctionContextERKS7_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.INT);
    db.addScalarBuiltin("days_add", "_ZN6impala18TimestampFunctions10DateAddSubILb1EN10impala_udf9BigIntValEN5boost9gregorian13date_durationEEENS2_12TimestampValEPNS2_15FunctionContextERKS7_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.BIGINT);
    db.addScalarBuiltin("date_add", "_ZN6impala18TimestampFunctions10DateAddSubILb1EN10impala_udf9BigIntValEN5boost9gregorian13date_durationEEENS2_12TimestampValEPNS2_15FunctionContextERKS7_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.BIGINT);
    db.addScalarBuiltin("adddate", "_ZN6impala18TimestampFunctions10DateAddSubILb1EN10impala_udf9BigIntValEN5boost9gregorian13date_durationEEENS2_12TimestampValEPNS2_15FunctionContextERKS7_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.BIGINT);
    db.addScalarBuiltin("days_sub", "_ZN6impala18TimestampFunctions10DateAddSubILb0EN10impala_udf6IntValEN5boost9gregorian13date_durationEEENS2_12TimestampValEPNS2_15FunctionContextERKS7_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.INT);
    db.addScalarBuiltin("date_sub", "_ZN6impala18TimestampFunctions10DateAddSubILb0EN10impala_udf6IntValEN5boost9gregorian13date_durationEEENS2_12TimestampValEPNS2_15FunctionContextERKS7_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.INT);
    db.addScalarBuiltin("subdate", "_ZN6impala18TimestampFunctions10DateAddSubILb0EN10impala_udf6IntValEN5boost9gregorian13date_durationEEENS2_12TimestampValEPNS2_15FunctionContextERKS7_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.INT);
    db.addScalarBuiltin("days_sub", "_ZN6impala18TimestampFunctions10DateAddSubILb0EN10impala_udf9BigIntValEN5boost9gregorian13date_durationEEENS2_12TimestampValEPNS2_15FunctionContextERKS7_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.BIGINT);
    db.addScalarBuiltin("date_sub", "_ZN6impala18TimestampFunctions10DateAddSubILb0EN10impala_udf9BigIntValEN5boost9gregorian13date_durationEEENS2_12TimestampValEPNS2_15FunctionContextERKS7_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.BIGINT);
    db.addScalarBuiltin("subdate", "_ZN6impala18TimestampFunctions10DateAddSubILb0EN10impala_udf9BigIntValEN5boost9gregorian13date_durationEEENS2_12TimestampValEPNS2_15FunctionContextERKS7_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.BIGINT);
    db.addScalarBuiltin("hours_add", "_ZN6impala18TimestampFunctions10TimeAddSubILb1EN10impala_udf6IntValEN5boost10posix_time5hoursEEENS2_12TimestampValEPNS2_15FunctionContextERKS7_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.INT);
    db.addScalarBuiltin("hours_add", "_ZN6impala18TimestampFunctions10TimeAddSubILb1EN10impala_udf9BigIntValEN5boost10posix_time5hoursEEENS2_12TimestampValEPNS2_15FunctionContextERKS7_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.BIGINT);
    db.addScalarBuiltin("hours_sub", "_ZN6impala18TimestampFunctions10TimeAddSubILb0EN10impala_udf6IntValEN5boost10posix_time5hoursEEENS2_12TimestampValEPNS2_15FunctionContextERKS7_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.INT);
    db.addScalarBuiltin("hours_sub", "_ZN6impala18TimestampFunctions10TimeAddSubILb0EN10impala_udf9BigIntValEN5boost10posix_time5hoursEEENS2_12TimestampValEPNS2_15FunctionContextERKS7_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.BIGINT);
    db.addScalarBuiltin("minutes_add", "_ZN6impala18TimestampFunctions10TimeAddSubILb1EN10impala_udf6IntValEN5boost10posix_time7minutesEEENS2_12TimestampValEPNS2_15FunctionContextERKS7_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.INT);
    db.addScalarBuiltin("minutes_add", "_ZN6impala18TimestampFunctions10TimeAddSubILb1EN10impala_udf9BigIntValEN5boost10posix_time7minutesEEENS2_12TimestampValEPNS2_15FunctionContextERKS7_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.BIGINT);
    db.addScalarBuiltin("minutes_sub", "_ZN6impala18TimestampFunctions10TimeAddSubILb0EN10impala_udf6IntValEN5boost10posix_time7minutesEEENS2_12TimestampValEPNS2_15FunctionContextERKS7_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.INT);
    db.addScalarBuiltin("minutes_sub", "_ZN6impala18TimestampFunctions10TimeAddSubILb0EN10impala_udf9BigIntValEN5boost10posix_time7minutesEEENS2_12TimestampValEPNS2_15FunctionContextERKS7_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.BIGINT);
    db.addScalarBuiltin("seconds_add", "_ZN6impala18TimestampFunctions10TimeAddSubILb1EN10impala_udf6IntValEN5boost10posix_time7secondsEEENS2_12TimestampValEPNS2_15FunctionContextERKS7_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.INT);
    db.addScalarBuiltin("seconds_add", "_ZN6impala18TimestampFunctions10TimeAddSubILb1EN10impala_udf9BigIntValEN5boost10posix_time7secondsEEENS2_12TimestampValEPNS2_15FunctionContextERKS7_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.BIGINT);
    db.addScalarBuiltin("seconds_sub", "_ZN6impala18TimestampFunctions10TimeAddSubILb0EN10impala_udf6IntValEN5boost10posix_time7secondsEEENS2_12TimestampValEPNS2_15FunctionContextERKS7_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.INT);
    db.addScalarBuiltin("seconds_sub", "_ZN6impala18TimestampFunctions10TimeAddSubILb0EN10impala_udf9BigIntValEN5boost10posix_time7secondsEEENS2_12TimestampValEPNS2_15FunctionContextERKS7_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.BIGINT);
    db.addScalarBuiltin("milliseconds_add", "_ZN6impala18TimestampFunctions10TimeAddSubILb1EN10impala_udf6IntValEN5boost9date_time18subsecond_durationINS4_10posix_time13time_durationELl1000EEEEENS2_12TimestampValEPNS2_15FunctionContextERKSA_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.INT);
    db.addScalarBuiltin("milliseconds_add", "_ZN6impala18TimestampFunctions10TimeAddSubILb1EN10impala_udf9BigIntValEN5boost9date_time18subsecond_durationINS4_10posix_time13time_durationELl1000EEEEENS2_12TimestampValEPNS2_15FunctionContextERKSA_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.BIGINT);
    db.addScalarBuiltin("milliseconds_sub", "_ZN6impala18TimestampFunctions10TimeAddSubILb0EN10impala_udf6IntValEN5boost9date_time18subsecond_durationINS4_10posix_time13time_durationELl1000EEEEENS2_12TimestampValEPNS2_15FunctionContextERKSA_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.INT);
    db.addScalarBuiltin("milliseconds_sub", "_ZN6impala18TimestampFunctions10TimeAddSubILb0EN10impala_udf9BigIntValEN5boost9date_time18subsecond_durationINS4_10posix_time13time_durationELl1000EEEEENS2_12TimestampValEPNS2_15FunctionContextERKSA_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.BIGINT);
    db.addScalarBuiltin("microseconds_add", "_ZN6impala18TimestampFunctions10TimeAddSubILb1EN10impala_udf6IntValEN5boost9date_time18subsecond_durationINS4_10posix_time13time_durationELl1000000EEEEENS2_12TimestampValEPNS2_15FunctionContextERKSA_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.INT);
    db.addScalarBuiltin("microseconds_add", "_ZN6impala18TimestampFunctions10TimeAddSubILb1EN10impala_udf9BigIntValEN5boost9date_time18subsecond_durationINS4_10posix_time13time_durationELl1000000EEEEENS2_12TimestampValEPNS2_15FunctionContextERKSA_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.BIGINT);
    db.addScalarBuiltin("microseconds_sub", "_ZN6impala18TimestampFunctions10TimeAddSubILb0EN10impala_udf6IntValEN5boost9date_time18subsecond_durationINS4_10posix_time13time_durationELl1000000EEEEENS2_12TimestampValEPNS2_15FunctionContextERKSA_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.INT);
    db.addScalarBuiltin("microseconds_sub", "_ZN6impala18TimestampFunctions10TimeAddSubILb0EN10impala_udf9BigIntValEN5boost9date_time18subsecond_durationINS4_10posix_time13time_durationELl1000000EEEEENS2_12TimestampValEPNS2_15FunctionContextERKSA_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.BIGINT);
    db.addScalarBuiltin("nanoseconds_add", "_ZN6impala18TimestampFunctions10TimeAddSubILb1EN10impala_udf6IntValEN5boost9date_time18subsecond_durationINS4_10posix_time13time_durationELl1000000000EEEEENS2_12TimestampValEPNS2_15FunctionContextERKSA_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.INT);
    db.addScalarBuiltin("nanoseconds_add", "_ZN6impala18TimestampFunctions10TimeAddSubILb1EN10impala_udf9BigIntValEN5boost9date_time18subsecond_durationINS4_10posix_time13time_durationELl1000000000EEEEENS2_12TimestampValEPNS2_15FunctionContextERKSA_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.BIGINT);
    db.addScalarBuiltin("nanoseconds_sub", "_ZN6impala18TimestampFunctions10TimeAddSubILb0EN10impala_udf6IntValEN5boost9date_time18subsecond_durationINS4_10posix_time13time_durationELl1000000000EEEEENS2_12TimestampValEPNS2_15FunctionContextERKSA_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.INT);
    db.addScalarBuiltin("nanoseconds_sub", "_ZN6impala18TimestampFunctions10TimeAddSubILb0EN10impala_udf9BigIntValEN5boost9date_time18subsecond_durationINS4_10posix_time13time_durationELl1000000000EEEEENS2_12TimestampValEPNS2_15FunctionContextERKSA_RKT0_", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.BIGINT);
    db.addScalarBuiltin("datediff", "_ZN6impala18TimestampFunctions8DateDiffEPN10impala_udf15FunctionContextERKNS1_12TimestampValES6_", false, Type.INT, Type.TIMESTAMP, Type.TIMESTAMP);
    db.addScalarBuiltin("unix_timestamp", "_ZN6impala18TimestampFunctions4UnixEPN10impala_udf15FunctionContextE", false, Type.INT);
    db.addScalarBuiltin("unix_timestamp", "_ZN6impala18TimestampFunctions4UnixEPN10impala_udf15FunctionContextERKNS1_12TimestampValE", false, Type.INT, Type.TIMESTAMP);
    db.addScalarBuiltin("unix_timestamp", "_ZN6impala18TimestampFunctions4UnixEPN10impala_udf15FunctionContextERKNS1_9StringValES6_", "_ZN6impala18TimestampFunctions22UnixAndFromUnixPrepareEPN10impala_udf15FunctionContextENS2_18FunctionStateScopeE", "_ZN6impala18TimestampFunctions20UnixAndFromUnixCloseEPN10impala_udf15FunctionContextENS2_18FunctionStateScopeE", false, Type.INT, Type.STRING, Type.STRING);
    db.addScalarBuiltin("from_unixtime", "_ZN6impala18TimestampFunctions8FromUnixIN10impala_udf6IntValEEENS2_9StringValEPNS2_15FunctionContextERKT_", false, Type.STRING, Type.INT);
    db.addScalarBuiltin("from_unixtime", "_ZN6impala18TimestampFunctions8FromUnixIN10impala_udf6IntValEEENS2_9StringValEPNS2_15FunctionContextERKT_RKS4_", "_ZN6impala18TimestampFunctions22UnixAndFromUnixPrepareEPN10impala_udf15FunctionContextENS2_18FunctionStateScopeE", "_ZN6impala18TimestampFunctions20UnixAndFromUnixCloseEPN10impala_udf15FunctionContextENS2_18FunctionStateScopeE", false, Type.STRING, Type.INT, Type.STRING);
    db.addScalarBuiltin("from_unixtime", "_ZN6impala18TimestampFunctions8FromUnixIN10impala_udf9BigIntValEEENS2_9StringValEPNS2_15FunctionContextERKT_", false, Type.STRING, Type.BIGINT);
    db.addScalarBuiltin("from_unixtime", "_ZN6impala18TimestampFunctions8FromUnixIN10impala_udf9BigIntValEEENS2_9StringValEPNS2_15FunctionContextERKT_RKS4_", "_ZN6impala18TimestampFunctions22UnixAndFromUnixPrepareEPN10impala_udf15FunctionContextENS2_18FunctionStateScopeE", "_ZN6impala18TimestampFunctions20UnixAndFromUnixCloseEPN10impala_udf15FunctionContextENS2_18FunctionStateScopeE", false, Type.STRING, Type.BIGINT, Type.STRING);
    db.addScalarBuiltin("now", "_ZN6impala18TimestampFunctions3NowEPN10impala_udf15FunctionContextE", false, Type.TIMESTAMP);
    db.addScalarBuiltin("current_timestamp", "_ZN6impala18TimestampFunctions3NowEPN10impala_udf15FunctionContextE", false, Type.TIMESTAMP);
    db.addScalarBuiltin("from_utc_timestamp", "impala::TimestampFunctions::FromUtc", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.STRING);
    db.addScalarBuiltin("to_utc_timestamp", "impala::TimestampFunctions::ToUtc", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.STRING);
    db.addScalarBuiltin("pi", "impala::MathFunctions::Pi", false, Type.DOUBLE);
    db.addScalarBuiltin("e", "impala::MathFunctions::E", false, Type.DOUBLE);
    db.addScalarBuiltin("abs", "impala::MathFunctions::Abs", false, Type.BIGINT, Type.BIGINT);
    db.addScalarBuiltin("abs", "impala::MathFunctions::Abs", false, Type.DOUBLE, Type.DOUBLE);
    db.addScalarBuiltin("abs", "impala::MathFunctions::Abs", false, Type.FLOAT, Type.FLOAT);
    db.addScalarBuiltin("abs", "impala::MathFunctions::Abs", false, Type.INT, Type.INT);
    db.addScalarBuiltin("abs", "impala::MathFunctions::Abs", false, Type.SMALLINT, Type.SMALLINT);
    db.addScalarBuiltin("abs", "impala::MathFunctions::Abs", false, Type.TINYINT, Type.TINYINT);
    db.addScalarBuiltin("sign", "impala::MathFunctions::Sign", false, Type.FLOAT, Type.DOUBLE);
    db.addScalarBuiltin("sin", "impala::MathFunctions::Sin", false, Type.DOUBLE, Type.DOUBLE);
    db.addScalarBuiltin("asin", "impala::MathFunctions::Asin", false, Type.DOUBLE, Type.DOUBLE);
    db.addScalarBuiltin("cos", "impala::MathFunctions::Cos", false, Type.DOUBLE, Type.DOUBLE);
    db.addScalarBuiltin("acos", "impala::MathFunctions::Acos", false, Type.DOUBLE, Type.DOUBLE);
    db.addScalarBuiltin("tan", "impala::MathFunctions::Tan", false, Type.DOUBLE, Type.DOUBLE);
    db.addScalarBuiltin("atan", "impala::MathFunctions::Atan", false, Type.DOUBLE, Type.DOUBLE);
    db.addScalarBuiltin("radians", "impala::MathFunctions::Radians", false, Type.DOUBLE, Type.DOUBLE);
    db.addScalarBuiltin("degrees", "impala::MathFunctions::Degrees", false, Type.DOUBLE, Type.DOUBLE);
    db.addScalarBuiltin("ceil", "impala::MathFunctions::Ceil", false, Type.BIGINT, Type.DOUBLE);
    db.addScalarBuiltin("ceiling", "impala::MathFunctions::Ceil", false, Type.BIGINT, Type.DOUBLE);
    db.addScalarBuiltin("floor", "impala::MathFunctions::Floor", false, Type.BIGINT, Type.DOUBLE);
    db.addScalarBuiltin("round", "impala::MathFunctions::Round", false, Type.BIGINT, Type.DOUBLE);
    db.addScalarBuiltin("round", "impala::MathFunctions::RoundUpTo", false, Type.DOUBLE, Type.DOUBLE, Type.INT);
    db.addScalarBuiltin("exp", "impala::MathFunctions::Exp", false, Type.DOUBLE, Type.DOUBLE);
    db.addScalarBuiltin("ln", "impala::MathFunctions::Ln", false, Type.DOUBLE, Type.DOUBLE);
    db.addScalarBuiltin("log10", "impala::MathFunctions::Log10", false, Type.DOUBLE, Type.DOUBLE);
    db.addScalarBuiltin("log2", "impala::MathFunctions::Log2", false, Type.DOUBLE, Type.DOUBLE);
    db.addScalarBuiltin("log", "impala::MathFunctions::Log", false, Type.DOUBLE, Type.DOUBLE, Type.DOUBLE);
    db.addScalarBuiltin("pow", "impala::MathFunctions::Pow", false, Type.DOUBLE, Type.DOUBLE, Type.DOUBLE);
    db.addScalarBuiltin("power", "impala::MathFunctions::Pow", false, Type.DOUBLE, Type.DOUBLE, Type.DOUBLE);
    db.addScalarBuiltin("sqrt", "impala::MathFunctions::Sqrt", false, Type.DOUBLE, Type.DOUBLE);
    db.addScalarBuiltin("rand", "impala::MathFunctions::Rand", "_ZN6impala13MathFunctions11RandPrepareEPN10impala_udf15FunctionContextENS2_18FunctionStateScopeE", null, false, Type.DOUBLE);
    db.addScalarBuiltin("rand", "impala::MathFunctions::RandSeed", "_ZN6impala13MathFunctions11RandPrepareEPN10impala_udf15FunctionContextENS2_18FunctionStateScopeE", null, false, Type.DOUBLE, Type.BIGINT);
    db.addScalarBuiltin("bin", "impala::MathFunctions::Bin", false, Type.STRING, Type.BIGINT);
    db.addScalarBuiltin("hex", "impala::MathFunctions::HexInt", false, Type.STRING, Type.BIGINT);
    db.addScalarBuiltin("hex", "impala::MathFunctions::HexString", false, Type.STRING, Type.STRING);
    db.addScalarBuiltin("unhex", "impala::MathFunctions::Unhex", false, Type.STRING, Type.STRING);
    db.addScalarBuiltin("conv", "impala::MathFunctions::ConvInt", false, Type.STRING, Type.BIGINT, Type.TINYINT, Type.TINYINT);
    db.addScalarBuiltin("conv", "impala::MathFunctions::ConvString", false, Type.STRING, Type.STRING, Type.TINYINT, Type.TINYINT);
    db.addScalarBuiltin("pmod", "impala::MathFunctions::PmodBigInt", false, Type.BIGINT, Type.BIGINT, Type.BIGINT);
    db.addScalarBuiltin("pmod", "impala::MathFunctions::PmodDouble", false, Type.DOUBLE, Type.DOUBLE, Type.DOUBLE);
    db.addScalarBuiltin("fmod", "impala::MathFunctions::FmodFloat", false, Type.FLOAT, Type.FLOAT, Type.FLOAT);
    db.addScalarBuiltin("fmod", "impala::MathFunctions::FmodDouble", false, Type.DOUBLE, Type.DOUBLE, Type.DOUBLE);
    db.addScalarBuiltin("positive", "_ZN6impala13MathFunctions8PositiveIN10impala_udf10TinyIntValEEET_PNS2_15FunctionContextERKS4_", false, Type.TINYINT, Type.TINYINT);
    db.addScalarBuiltin("positive", "_ZN6impala13MathFunctions8PositiveIN10impala_udf11SmallIntValEEET_PNS2_15FunctionContextERKS4_", false, Type.SMALLINT, Type.SMALLINT);
    db.addScalarBuiltin("positive", "_ZN6impala13MathFunctions8PositiveIN10impala_udf6IntValEEET_PNS2_15FunctionContextERKS4_", false, Type.INT, Type.INT);
    db.addScalarBuiltin("positive", "_ZN6impala13MathFunctions8PositiveIN10impala_udf9BigIntValEEET_PNS2_15FunctionContextERKS4_", false, Type.BIGINT, Type.BIGINT);
    db.addScalarBuiltin("positive", "_ZN6impala13MathFunctions8PositiveIN10impala_udf8FloatValEEET_PNS2_15FunctionContextERKS4_", false, Type.FLOAT, Type.FLOAT);
    db.addScalarBuiltin("positive", "_ZN6impala13MathFunctions8PositiveIN10impala_udf9DoubleValEEET_PNS2_15FunctionContextERKS4_", false, Type.DOUBLE, Type.DOUBLE);
    db.addScalarBuiltin("positive", "_ZN6impala13MathFunctions8PositiveIN10impala_udf10DecimalValEEET_PNS2_15FunctionContextERKS4_", false, Type.DECIMAL, Type.DECIMAL);
    db.addScalarBuiltin("negative", "_ZN6impala13MathFunctions8NegativeIN10impala_udf10TinyIntValEEET_PNS2_15FunctionContextERKS4_", false, Type.TINYINT, Type.TINYINT);
    db.addScalarBuiltin("negative", "_ZN6impala13MathFunctions8NegativeIN10impala_udf11SmallIntValEEET_PNS2_15FunctionContextERKS4_", false, Type.SMALLINT, Type.SMALLINT);
    db.addScalarBuiltin("negative", "_ZN6impala13MathFunctions8NegativeIN10impala_udf6IntValEEET_PNS2_15FunctionContextERKS4_", false, Type.INT, Type.INT);
    db.addScalarBuiltin("negative", "_ZN6impala13MathFunctions8NegativeIN10impala_udf9BigIntValEEET_PNS2_15FunctionContextERKS4_", false, Type.BIGINT, Type.BIGINT);
    db.addScalarBuiltin("negative", "_ZN6impala13MathFunctions8NegativeIN10impala_udf8FloatValEEET_PNS2_15FunctionContextERKS4_", false, Type.FLOAT, Type.FLOAT);
    db.addScalarBuiltin("negative", "_ZN6impala13MathFunctions8NegativeIN10impala_udf9DoubleValEEET_PNS2_15FunctionContextERKS4_", false, Type.DOUBLE, Type.DOUBLE);
    db.addScalarBuiltin("negative", "_ZN6impala13MathFunctions8NegativeIN10impala_udf10DecimalValEEET_PNS2_15FunctionContextERKS4_", false, Type.DECIMAL, Type.DECIMAL);
    db.addScalarBuiltin("quotient", "impala::MathFunctions::QuotientBigInt", false, Type.BIGINT, Type.BIGINT, Type.BIGINT);
    db.addScalarBuiltin("quotient", "impala::MathFunctions::QuotientDouble", false, Type.BIGINT, Type.DOUBLE, Type.DOUBLE);
    db.addScalarBuiltin("least", "_ZN6impala13MathFunctions13LeastGreatestIN10impala_udf10TinyIntValELb1EEET_PNS2_15FunctionContextEiPKS4_", true, Type.TINYINT, Type.TINYINT);
    db.addScalarBuiltin("least", "_ZN6impala13MathFunctions13LeastGreatestIN10impala_udf11SmallIntValELb1EEET_PNS2_15FunctionContextEiPKS4_", true, Type.SMALLINT, Type.SMALLINT);
    db.addScalarBuiltin("least", "_ZN6impala13MathFunctions13LeastGreatestIN10impala_udf6IntValELb1EEET_PNS2_15FunctionContextEiPKS4_", true, Type.INT, Type.INT);
    db.addScalarBuiltin("least", "_ZN6impala13MathFunctions13LeastGreatestIN10impala_udf9BigIntValELb1EEET_PNS2_15FunctionContextEiPKS4_", true, Type.BIGINT, Type.BIGINT);
    db.addScalarBuiltin("least", "_ZN6impala13MathFunctions13LeastGreatestIN10impala_udf8FloatValELb1EEET_PNS2_15FunctionContextEiPKS4_", true, Type.FLOAT, Type.FLOAT);
    db.addScalarBuiltin("least", "_ZN6impala13MathFunctions13LeastGreatestIN10impala_udf9DoubleValELb1EEET_PNS2_15FunctionContextEiPKS4_", true, Type.DOUBLE, Type.DOUBLE);
    db.addScalarBuiltin("least", "_ZN6impala13MathFunctions13LeastGreatestILb1EEEN10impala_udf12TimestampValEPNS2_15FunctionContextEiPKS3_", true, Type.TIMESTAMP, Type.TIMESTAMP);
    db.addScalarBuiltin("least", "_ZN6impala13MathFunctions13LeastGreatestILb1EEEN10impala_udf9StringValEPNS2_15FunctionContextEiPKS3_", true, Type.STRING, Type.STRING);
    db.addScalarBuiltin("least", "_ZN6impala13MathFunctions13LeastGreatestILb1EEEN10impala_udf10DecimalValEPNS2_15FunctionContextEiPKS3_", true, Type.DECIMAL, Type.DECIMAL);
    db.addScalarBuiltin("greatest", "_ZN6impala13MathFunctions13LeastGreatestIN10impala_udf10TinyIntValELb0EEET_PNS2_15FunctionContextEiPKS4_", true, Type.TINYINT, Type.TINYINT);
    db.addScalarBuiltin("greatest", "_ZN6impala13MathFunctions13LeastGreatestIN10impala_udf11SmallIntValELb0EEET_PNS2_15FunctionContextEiPKS4_", true, Type.SMALLINT, Type.SMALLINT);
    db.addScalarBuiltin("greatest", "_ZN6impala13MathFunctions13LeastGreatestIN10impala_udf6IntValELb0EEET_PNS2_15FunctionContextEiPKS4_", true, Type.INT, Type.INT);
    db.addScalarBuiltin("greatest", "_ZN6impala13MathFunctions13LeastGreatestIN10impala_udf9BigIntValELb0EEET_PNS2_15FunctionContextEiPKS4_", true, Type.BIGINT, Type.BIGINT);
    db.addScalarBuiltin("greatest", "_ZN6impala13MathFunctions13LeastGreatestIN10impala_udf8FloatValELb0EEET_PNS2_15FunctionContextEiPKS4_", true, Type.FLOAT, Type.FLOAT);
    db.addScalarBuiltin("greatest", "_ZN6impala13MathFunctions13LeastGreatestIN10impala_udf9DoubleValELb0EEET_PNS2_15FunctionContextEiPKS4_", true, Type.DOUBLE, Type.DOUBLE);
    db.addScalarBuiltin("greatest", "_ZN6impala13MathFunctions13LeastGreatestILb0EEEN10impala_udf12TimestampValEPNS2_15FunctionContextEiPKS3_", true, Type.TIMESTAMP, Type.TIMESTAMP);
    db.addScalarBuiltin("greatest", "_ZN6impala13MathFunctions13LeastGreatestILb0EEEN10impala_udf9StringValEPNS2_15FunctionContextEiPKS3_", true, Type.STRING, Type.STRING);
    db.addScalarBuiltin("greatest", "_ZN6impala13MathFunctions13LeastGreatestILb0EEEN10impala_udf10DecimalValEPNS2_15FunctionContextEiPKS3_", true, Type.DECIMAL, Type.DECIMAL);
    db.addScalarBuiltin("precision", "impala::DecimalFunctions::Precision", false, Type.INT, Type.DECIMAL);
    db.addScalarBuiltin("scale", "impala::DecimalFunctions::Scale", false, Type.INT, Type.DECIMAL);
    db.addScalarBuiltin("abs", "impala::DecimalFunctions::Abs", false, Type.DECIMAL, Type.DECIMAL);
    db.addScalarBuiltin("ceil", "impala::DecimalFunctions::Ceil", false, Type.DECIMAL, Type.DECIMAL);
    db.addScalarBuiltin("ceiling", "impala::DecimalFunctions::Ceil", false, Type.DECIMAL, Type.DECIMAL);
    db.addScalarBuiltin("floor", "impala::DecimalFunctions::Floor", false, Type.DECIMAL, Type.DECIMAL);
    db.addScalarBuiltin("round", "impala::DecimalFunctions::Round", false, Type.DECIMAL, Type.DECIMAL);
    db.addScalarBuiltin("round", "impala::DecimalFunctions::RoundTo", false, Type.DECIMAL, Type.DECIMAL, Type.TINYINT);
    db.addScalarBuiltin("round", "impala::DecimalFunctions::RoundTo", false, Type.DECIMAL, Type.DECIMAL, Type.SMALLINT);
    db.addScalarBuiltin("round", "impala::DecimalFunctions::RoundTo", false, Type.DECIMAL, Type.DECIMAL, Type.INT);
    db.addScalarBuiltin("round", "impala::DecimalFunctions::RoundTo", false, Type.DECIMAL, Type.DECIMAL, Type.BIGINT);
    db.addScalarBuiltin("truncate", "impala::DecimalFunctions::Truncate", false, Type.DECIMAL, Type.DECIMAL);
    db.addScalarBuiltin("truncate", "impala::DecimalFunctions::TruncateTo", false, Type.DECIMAL, Type.DECIMAL, Type.TINYINT);
    db.addScalarBuiltin("truncate", "impala::DecimalFunctions::TruncateTo", false, Type.DECIMAL, Type.DECIMAL, Type.SMALLINT);
    db.addScalarBuiltin("truncate", "impala::DecimalFunctions::TruncateTo", false, Type.DECIMAL, Type.DECIMAL, Type.INT);
    db.addScalarBuiltin("truncate", "impala::DecimalFunctions::TruncateTo", false, Type.DECIMAL, Type.DECIMAL, Type.BIGINT);
    db.addScalarBuiltin("substr", "impala::StringFunctions::Substring", false, Type.STRING, Type.STRING, Type.BIGINT);
    db.addScalarBuiltin("substring", "impala::StringFunctions::Substring", false, Type.STRING, Type.STRING, Type.BIGINT);
    db.addScalarBuiltin("substr", "impala::StringFunctions::Substring", false, Type.STRING, Type.STRING, Type.BIGINT, Type.BIGINT);
    db.addScalarBuiltin("substring", "impala::StringFunctions::Substring", false, Type.STRING, Type.STRING, Type.BIGINT, Type.BIGINT);
    db.addScalarBuiltin("strleft", "impala::StringFunctions::Left", false, Type.STRING, Type.STRING, Type.BIGINT);
    db.addScalarBuiltin("strright", "impala::StringFunctions::Right", false, Type.STRING, Type.STRING, Type.BIGINT);
    db.addScalarBuiltin("space", "impala::StringFunctions::Space", false, Type.STRING, Type.BIGINT);
    db.addScalarBuiltin("repeat", "impala::StringFunctions::Repeat", false, Type.STRING, Type.STRING, Type.BIGINT);
    db.addScalarBuiltin("lpad", "impala::StringFunctions::Lpad", false, Type.STRING, Type.STRING, Type.BIGINT, Type.STRING);
    db.addScalarBuiltin("rpad", "impala::StringFunctions::Rpad", false, Type.STRING, Type.STRING, Type.BIGINT, Type.STRING);
    db.addScalarBuiltin("length", "impala::StringFunctions::Length", false, Type.INT, Type.STRING);
    db.addScalarBuiltin("length", "impala::StringFunctions::CharLength", false, Type.INT, Type.CHAR);
    db.addScalarBuiltin("char_length", "impala::StringFunctions::Length", false, Type.INT, Type.STRING);
    db.addScalarBuiltin("character_length", "impala::StringFunctions::Length", false, Type.INT, Type.STRING);
    db.addScalarBuiltin("lower", "impala::StringFunctions::Lower", false, Type.STRING, Type.STRING);
    db.addScalarBuiltin("lcase", "impala::StringFunctions::Lower", false, Type.STRING, Type.STRING);
    db.addScalarBuiltin("upper", "impala::StringFunctions::Upper", false, Type.STRING, Type.STRING);
    db.addScalarBuiltin("ucase", "impala::StringFunctions::Upper", false, Type.STRING, Type.STRING);
    db.addScalarBuiltin("initcap", "impala::StringFunctions::InitCap", false, Type.STRING, Type.STRING);
    db.addScalarBuiltin("reverse", "impala::StringFunctions::Reverse", false, Type.STRING, Type.STRING);
    db.addScalarBuiltin("translate", "impala::StringFunctions::Translate", false, Type.STRING, Type.STRING, Type.STRING, Type.STRING);
    db.addScalarBuiltin("trim", "impala::StringFunctions::Trim", false, Type.STRING, Type.STRING);
    db.addScalarBuiltin("ltrim", "impala::StringFunctions::Ltrim", false, Type.STRING, Type.STRING);
    db.addScalarBuiltin("rtrim", "impala::StringFunctions::Rtrim", false, Type.STRING, Type.STRING);
    db.addScalarBuiltin("ascii", "impala::StringFunctions::Ascii", false, Type.INT, Type.STRING);
    db.addScalarBuiltin("instr", "impala::StringFunctions::Instr", false, Type.INT, Type.STRING, Type.STRING);
    db.addScalarBuiltin("locate", "impala::StringFunctions::Locate", false, Type.INT, Type.STRING, Type.STRING);
    db.addScalarBuiltin("locate", "impala::StringFunctions::LocatePos", false, Type.INT, Type.STRING, Type.STRING, Type.BIGINT);
    db.addScalarBuiltin("regexp_extract", "impala::StringFunctions::RegexpExtract", "_ZN6impala15StringFunctions13RegexpPrepareEPN10impala_udf15FunctionContextENS2_18FunctionStateScopeE", "_ZN6impala15StringFunctions11RegexpCloseEPN10impala_udf15FunctionContextENS2_18FunctionStateScopeE", false, Type.STRING, Type.STRING, Type.STRING, Type.BIGINT);
    db.addScalarBuiltin("regexp_replace", "impala::StringFunctions::RegexpReplace", "_ZN6impala15StringFunctions13RegexpPrepareEPN10impala_udf15FunctionContextENS2_18FunctionStateScopeE", "_ZN6impala15StringFunctions11RegexpCloseEPN10impala_udf15FunctionContextENS2_18FunctionStateScopeE", false, Type.STRING, Type.STRING, Type.STRING, Type.STRING);
    db.addScalarBuiltin("concat", "impala::StringFunctions::Concat", true, Type.STRING, Type.STRING);
    db.addScalarBuiltin("concat_ws", "impala::StringFunctions::ConcatWs", true, Type.STRING, Type.STRING, Type.STRING);
    db.addScalarBuiltin("find_in_set", "impala::StringFunctions::FindInSet", false, Type.INT, Type.STRING, Type.STRING);
    db.addScalarBuiltin("parse_url", "impala::StringFunctions::ParseUrl", "_ZN6impala15StringFunctions15ParseUrlPrepareEPN10impala_udf15FunctionContextENS2_18FunctionStateScopeE", "_ZN6impala15StringFunctions13ParseUrlCloseEPN10impala_udf15FunctionContextENS2_18FunctionStateScopeE", false, Type.STRING, Type.STRING, Type.STRING);
    db.addScalarBuiltin("parse_url", "impala::StringFunctions::ParseUrlKey", "_ZN6impala15StringFunctions15ParseUrlPrepareEPN10impala_udf15FunctionContextENS2_18FunctionStateScopeE", "_ZN6impala15StringFunctions13ParseUrlCloseEPN10impala_udf15FunctionContextENS2_18FunctionStateScopeE", false, Type.STRING, Type.STRING, Type.STRING, Type.STRING);
    db.addScalarBuiltin("if", "", false, Type.BOOLEAN, Type.BOOLEAN, Type.BOOLEAN, Type.BOOLEAN);
    db.addScalarBuiltin("if", "", false, Type.TINYINT, Type.BOOLEAN, Type.TINYINT, Type.TINYINT);
    db.addScalarBuiltin("if", "", false, Type.SMALLINT, Type.BOOLEAN, Type.SMALLINT, Type.SMALLINT);
    db.addScalarBuiltin("if", "", false, Type.INT, Type.BOOLEAN, Type.INT, Type.INT);
    db.addScalarBuiltin("if", "", false, Type.BIGINT, Type.BOOLEAN, Type.BIGINT, Type.BIGINT);
    db.addScalarBuiltin("if", "", false, Type.FLOAT, Type.BOOLEAN, Type.FLOAT, Type.FLOAT);
    db.addScalarBuiltin("if", "", false, Type.DOUBLE, Type.BOOLEAN, Type.DOUBLE, Type.DOUBLE);
    db.addScalarBuiltin("if", "", false, Type.STRING, Type.BOOLEAN, Type.STRING, Type.STRING);
    db.addScalarBuiltin("if", "", false, Type.TIMESTAMP, Type.BOOLEAN, Type.TIMESTAMP, Type.TIMESTAMP);
    db.addScalarBuiltin("if", "", false, Type.DECIMAL, Type.BOOLEAN, Type.DECIMAL, Type.DECIMAL);
    db.addScalarBuiltin("nullif", "", false, Type.BOOLEAN, Type.BOOLEAN, Type.BOOLEAN);
    db.addScalarBuiltin("nullif", "", false, Type.TINYINT, Type.TINYINT, Type.TINYINT);
    db.addScalarBuiltin("nullif", "", false, Type.SMALLINT, Type.SMALLINT, Type.SMALLINT);
    db.addScalarBuiltin("nullif", "", false, Type.INT, Type.INT, Type.INT);
    db.addScalarBuiltin("nullif", "", false, Type.BIGINT, Type.BIGINT, Type.BIGINT);
    db.addScalarBuiltin("nullif", "", false, Type.FLOAT, Type.FLOAT, Type.FLOAT);
    db.addScalarBuiltin("nullif", "", false, Type.DOUBLE, Type.DOUBLE, Type.DOUBLE);
    db.addScalarBuiltin("nullif", "", false, Type.STRING, Type.STRING, Type.STRING);
    db.addScalarBuiltin("nullif", "", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.TIMESTAMP);
    db.addScalarBuiltin("nullif", "", false, Type.DECIMAL, Type.DECIMAL, Type.DECIMAL);
    db.addScalarBuiltin("zeroifnull", "impala::ConditionalFunctions::ZeroIfNull", false, Type.TINYINT, Type.TINYINT);
    db.addScalarBuiltin("zeroifnull", "impala::ConditionalFunctions::ZeroIfNull", false, Type.SMALLINT, Type.SMALLINT);
    db.addScalarBuiltin("zeroifnull", "impala::ConditionalFunctions::ZeroIfNull", false, Type.INT, Type.INT);
    db.addScalarBuiltin("zeroifnull", "impala::ConditionalFunctions::ZeroIfNull", false, Type.BIGINT, Type.BIGINT);
    db.addScalarBuiltin("zeroifnull", "impala::ConditionalFunctions::ZeroIfNull", false, Type.FLOAT, Type.FLOAT);
    db.addScalarBuiltin("zeroifnull", "impala::ConditionalFunctions::ZeroIfNull", false, Type.DOUBLE, Type.DOUBLE);
    db.addScalarBuiltin("zeroifnull", "impala::ConditionalFunctions::ZeroIfNull", false, Type.DECIMAL, Type.DECIMAL);
    db.addScalarBuiltin("nullifzero", "impala::ConditionalFunctions::NullIfZero", false, Type.TINYINT, Type.TINYINT);
    db.addScalarBuiltin("nullifzero", "impala::ConditionalFunctions::NullIfZero", false, Type.SMALLINT, Type.SMALLINT);
    db.addScalarBuiltin("nullifzero", "impala::ConditionalFunctions::NullIfZero", false, Type.INT, Type.INT);
    db.addScalarBuiltin("nullifzero", "impala::ConditionalFunctions::NullIfZero", false, Type.BIGINT, Type.BIGINT);
    db.addScalarBuiltin("nullifzero", "impala::ConditionalFunctions::NullIfZero", false, Type.FLOAT, Type.FLOAT);
    db.addScalarBuiltin("nullifzero", "impala::ConditionalFunctions::NullIfZero", false, Type.DOUBLE, Type.DOUBLE);
    db.addScalarBuiltin("nullifzero", "impala::ConditionalFunctions::NullIfZero", false, Type.DECIMAL, Type.DECIMAL);
    db.addScalarBuiltin("isnull", "", false, Type.BOOLEAN, Type.BOOLEAN, Type.BOOLEAN);
    db.addScalarBuiltin("ifnull", "", false, Type.BOOLEAN, Type.BOOLEAN, Type.BOOLEAN);
    db.addScalarBuiltin("nvl", "", false, Type.BOOLEAN, Type.BOOLEAN, Type.BOOLEAN);
    db.addScalarBuiltin("isnull", "", false, Type.TINYINT, Type.TINYINT, Type.TINYINT);
    db.addScalarBuiltin("ifnull", "", false, Type.TINYINT, Type.TINYINT, Type.TINYINT);
    db.addScalarBuiltin("nvl", "", false, Type.TINYINT, Type.TINYINT, Type.TINYINT);
    db.addScalarBuiltin("isnull", "", false, Type.SMALLINT, Type.SMALLINT, Type.SMALLINT);
    db.addScalarBuiltin("ifnull", "", false, Type.SMALLINT, Type.SMALLINT, Type.SMALLINT);
    db.addScalarBuiltin("nvl", "", false, Type.SMALLINT, Type.SMALLINT, Type.SMALLINT);
    db.addScalarBuiltin("isnull", "", false, Type.INT, Type.INT, Type.INT);
    db.addScalarBuiltin("ifnull", "", false, Type.INT, Type.INT, Type.INT);
    db.addScalarBuiltin("nvl", "", false, Type.INT, Type.INT, Type.INT);
    db.addScalarBuiltin("isnull", "", false, Type.BIGINT, Type.BIGINT, Type.BIGINT);
    db.addScalarBuiltin("ifnull", "", false, Type.BIGINT, Type.BIGINT, Type.BIGINT);
    db.addScalarBuiltin("nvl", "", false, Type.BIGINT, Type.BIGINT, Type.BIGINT);
    db.addScalarBuiltin("isnull", "", false, Type.FLOAT, Type.FLOAT, Type.FLOAT);
    db.addScalarBuiltin("ifnull", "", false, Type.FLOAT, Type.FLOAT, Type.FLOAT);
    db.addScalarBuiltin("nvl", "", false, Type.FLOAT, Type.FLOAT, Type.FLOAT);
    db.addScalarBuiltin("isnull", "", false, Type.DOUBLE, Type.DOUBLE, Type.DOUBLE);
    db.addScalarBuiltin("ifnull", "", false, Type.DOUBLE, Type.DOUBLE, Type.DOUBLE);
    db.addScalarBuiltin("nvl", "", false, Type.DOUBLE, Type.DOUBLE, Type.DOUBLE);
    db.addScalarBuiltin("isnull", "", false, Type.STRING, Type.STRING, Type.STRING);
    db.addScalarBuiltin("ifnull", "", false, Type.STRING, Type.STRING, Type.STRING);
    db.addScalarBuiltin("nvl", "", false, Type.STRING, Type.STRING, Type.STRING);
    db.addScalarBuiltin("isnull", "", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.TIMESTAMP);
    db.addScalarBuiltin("ifnull", "", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.TIMESTAMP);
    db.addScalarBuiltin("nvl", "", false, Type.TIMESTAMP, Type.TIMESTAMP, Type.TIMESTAMP);
    db.addScalarBuiltin("isnull", "", false, Type.DECIMAL, Type.DECIMAL, Type.DECIMAL);
    db.addScalarBuiltin("ifnull", "", false, Type.DECIMAL, Type.DECIMAL, Type.DECIMAL);
    db.addScalarBuiltin("nvl", "", false, Type.DECIMAL, Type.DECIMAL, Type.DECIMAL);
    db.addScalarBuiltin("coalesce", "", true, Type.BOOLEAN, Type.BOOLEAN);
    db.addScalarBuiltin("coalesce", "", true, Type.TINYINT, Type.TINYINT);
    db.addScalarBuiltin("coalesce", "", true, Type.SMALLINT, Type.SMALLINT);
    db.addScalarBuiltin("coalesce", "", true, Type.INT, Type.INT);
    db.addScalarBuiltin("coalesce", "", true, Type.BIGINT, Type.BIGINT);
    db.addScalarBuiltin("coalesce", "", true, Type.FLOAT, Type.FLOAT);
    db.addScalarBuiltin("coalesce", "", true, Type.DOUBLE, Type.DOUBLE);
    db.addScalarBuiltin("coalesce", "", true, Type.STRING, Type.STRING);
    db.addScalarBuiltin("coalesce", "", true, Type.TIMESTAMP, Type.TIMESTAMP);
    db.addScalarBuiltin("coalesce", "", true, Type.DECIMAL, Type.DECIMAL);
    db.addScalarBuiltin("current_database", "impala::UtilityFunctions::CurrentDatabase", false, Type.STRING);
    db.addScalarBuiltin("user", "impala::UtilityFunctions::User", false, Type.STRING);
    db.addScalarBuiltin("sleep", "impala::UtilityFunctions::Sleep", false, Type.BOOLEAN, Type.INT);
    db.addScalarBuiltin("pid", "impala::UtilityFunctions::Pid", false, Type.INT);
    db.addScalarBuiltin("version", "impala::UtilityFunctions::Version", false, Type.STRING);
    db.addScalarBuiltin("fnv_hash", "_ZN6impala16UtilityFunctions7FnvHashIN10impala_udf10TinyIntValEEENS2_9BigIntValEPNS2_15FunctionContextERKT_", false, Type.BIGINT, Type.TINYINT);
    db.addScalarBuiltin("fnv_hash", "_ZN6impala16UtilityFunctions7FnvHashIN10impala_udf11SmallIntValEEENS2_9BigIntValEPNS2_15FunctionContextERKT_", false, Type.BIGINT, Type.SMALLINT);
    db.addScalarBuiltin("fnv_hash", "_ZN6impala16UtilityFunctions7FnvHashIN10impala_udf6IntValEEENS2_9BigIntValEPNS2_15FunctionContextERKT_", false, Type.BIGINT, Type.INT);
    db.addScalarBuiltin("fnv_hash", "_ZN6impala16UtilityFunctions7FnvHashIN10impala_udf9BigIntValEEES3_PNS2_15FunctionContextERKT_", false, Type.BIGINT, Type.BIGINT);
    db.addScalarBuiltin("fnv_hash", "_ZN6impala16UtilityFunctions7FnvHashIN10impala_udf8FloatValEEENS2_9BigIntValEPNS2_15FunctionContextERKT_", false, Type.BIGINT, Type.FLOAT);
    db.addScalarBuiltin("fnv_hash", "_ZN6impala16UtilityFunctions7FnvHashIN10impala_udf9DoubleValEEENS2_9BigIntValEPNS2_15FunctionContextERKT_", false, Type.BIGINT, Type.DOUBLE);
    db.addScalarBuiltin("fnv_hash", "_ZN6impala16UtilityFunctions13FnvHashStringEPN10impala_udf15FunctionContextERKNS1_9StringValE", false, Type.BIGINT, Type.STRING);
    db.addScalarBuiltin("fnv_hash", "_ZN6impala16UtilityFunctions16FnvHashTimestampEPN10impala_udf15FunctionContextERKNS1_12TimestampValE", false, Type.BIGINT, Type.TIMESTAMP);
    db.addScalarBuiltin("fnv_hash", "_ZN6impala16UtilityFunctions14FnvHashDecimalEPN10impala_udf15FunctionContextERKNS1_10DecimalValE", false, Type.BIGINT, Type.DECIMAL);

  }
}
